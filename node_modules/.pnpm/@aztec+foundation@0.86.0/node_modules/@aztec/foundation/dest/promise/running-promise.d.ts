import { type Logger } from '../log/pino-logger.js';
declare const EXIT: unique symbol;
export type ErrorHandler = (err: unknown) => typeof EXIT | void | Promise<typeof EXIT | void>;
export declare function makeLoggingErrorHandler(logger: Logger, ...ignoredErrors: (new (...args: any[]) => Error)[]): ErrorHandler;
/**
 * RunningPromise is a utility class that helps manage the execution of an asynchronous function
 * at a specified polling interval. It allows starting, stopping, and checking the status of the
 * internally managed promise. The class also supports interrupting the polling process when stopped.
 */
export declare class RunningPromise {
    private fn;
    private logger;
    private pollingIntervalMS;
    private handleError;
    private running;
    private runningPromise;
    private interruptibleSleep;
    private requested;
    static readonly EXIT: typeof EXIT;
    constructor(fn: () => void | Promise<void>, logger?: Logger, pollingIntervalMS?: number, handleError?: ErrorHandler);
    /**
     * Starts the running promise.
     */
    start(): this;
    /**
     * Stops the running promise, resolves any pending interruptible sleep,
     * and waits for the currently executing function to complete.
     */
    stop(): Promise<void>;
    /**
     * Checks if the running promise is currently active.
     * @returns True if the promise is running.
     */
    isRunning(): boolean;
    /**
     * Triggers an immediate run of the function, bypassing the polling interval.
     * If the function is currently running, it will be allowed to continue and then called again immediately.
     */
    trigger(): Promise<void>;
    /**
     * Updates the polling interval. The new interval will take effect after the next poll.
     * @param pollingIntervalMS The polling interval in milliseconds.
     */
    setPollingIntervalMS(pollingIntervalMS: number): void;
}
export {};
//# sourceMappingURL=running-promise.d.ts.map