import { z } from 'zod';
import { type ApiSchemaFor } from '../../schemas/index.js';
/**
 * Contrived example for JSON RPC tests.
 */
export declare class TestNote {
    private data;
    constructor(data: string);
    static get schema(): z.ZodEffects<z.ZodObject<{
        data: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        data: string;
    }, {
        data: string;
    }>, TestNote, {
        data: string;
    }>;
    toJSON(): {
        data: string;
    };
    /**
     * Create a string representation of this class.
     * @returns The string representation.
     */
    toString(): string;
    /**
     * Creates a string representation of this class.
     * @param data - The data.
     * @returns The string representation.
     */
    static fromString(data: string): TestNote;
}
export interface TestStateApi {
    getNote: (index: number) => Promise<TestNote | undefined>;
    getNotes: (limit?: number) => Promise<TestNote[]>;
    getNotes2: (limit: bigint | undefined) => Promise<TestNote[]>;
    getNotes3: (limit?: number) => Promise<TestNote[]>;
    clear: () => Promise<void>;
    addNotes: (notes: TestNote[]) => Promise<TestNote[]>;
    fail: () => Promise<void>;
    count: () => Promise<number>;
    getStatus: () => Promise<{
        status: string;
        count: bigint;
    }>;
    getTuple(): Promise<[string, string | undefined, number]>;
}
/**
 * Represents a simple state management for TestNote instances.
 * Provides functionality to get a note by index and add notes asynchronously.
 * Primarily used for testing JSON RPC-related functionalities.
 */
export declare class TestState implements TestStateApi {
    notes: TestNote[];
    constructor(notes: TestNote[]);
    /**
     * Retrieve the TestNote instance at the specified index from the notes array.
     * This method allows getting a desired TestNote from the collection of notes
     * maintained by the TestState instance using the provided index value.
     *
     * @param index - The index of the TestNote to be retrieved from the notes array.
     * @returns The TestNote instance corresponding to the given index.
     */
    getNote(index: number): Promise<TestNote>;
    fail(): Promise<void>;
    count(): Promise<number>;
    getNotes(limit?: number): Promise<TestNote[]>;
    getNotes2(limit: bigint | undefined): Promise<TestNote[]>;
    getNotes3(limit?: number): Promise<TestNote[]>;
    clear(): Promise<void>;
    /**
     * Add an array of TestNote instances to the current TestState's notes.
     * This function simulates asynchronous behavior by waiting for a duration
     * equal to the number of notes being added. It then returns the updated
     * list of TestNote instances in the TestState.
     *
     * @param notes - An array of TestNote instances to be added.
     * @returns A Promise that resolves to an array of TestNote instances, including the newly added notes.
     */
    addNotes(notes: TestNote[]): Promise<TestNote[]>;
    forceClear(): Promise<void>;
    getStatus(): Promise<{
        status: string;
        count: bigint;
    }>;
    getTuple(): Promise<[string, string | undefined, number]>;
}
export declare const TestStateSchema: ApiSchemaFor<TestStateApi>;
//# sourceMappingURL=test_state.d.ts.map