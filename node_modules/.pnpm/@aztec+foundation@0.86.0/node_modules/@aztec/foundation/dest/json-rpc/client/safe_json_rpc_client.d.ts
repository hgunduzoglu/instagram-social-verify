import { type Logger } from '../../log/pino-logger.js';
import { type ApiSchemaFor } from '../../schemas/api.js';
import { type JsonRpcFetch } from './fetch.js';
export type SafeJsonRpcClientOptions = {
    useApiEndpoints?: boolean;
    namespaceMethods?: string | false;
    fetch?: JsonRpcFetch;
    log?: Logger;
    onResponse?: (res: {
        response: any;
        headers: {
            get: (header: string) => string | null | undefined;
        };
    }) => Promise<void>;
};
/**
 * Creates a Proxy object that delegates over RPC and validates outputs against a given schema.
 * The server is expected to be a JsonRpcServer.
 * @param host - The host URL.
 * @param schema - The api schema to validate returned data against.
 * @param useApiEndpoints - Whether to use the API endpoints or the default RPC endpoint.
 * @param namespaceMethods - String value (or false/empty) to namespace all methods sent to the server. e.g. 'getInfo' -\> 'pxe_getInfo'
 * @param fetch - The fetch implementation to use.
 */
export declare function createSafeJsonRpcClient<T extends object>(host: string, schema: ApiSchemaFor<T>, config?: SafeJsonRpcClientOptions): T;
//# sourceMappingURL=safe_json_rpc_client.d.ts.map