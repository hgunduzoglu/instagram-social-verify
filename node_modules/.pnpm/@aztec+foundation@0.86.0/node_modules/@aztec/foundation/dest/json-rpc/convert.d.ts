import type { ZodFor } from '../schemas/types.js';
/**
 * Parses a json string and then feeds it to a zod schema.
 * @param json - JSON string.
 * @param schema - Zod schema.
 * @returns Result of parsing json with schema.
 */
export declare function jsonParseWithSchema<T>(json: string, schema: ZodFor<T>): Promise<T>;
/**
 * Parses a json string and then feeds it to a zod schema.
 * @param json - JSON string.
 * @param schema - Zod schema.
 * @returns Result of parsing json with schema.
 */
export declare function jsonParseWithSchemaSync<T>(json: string, schema: ZodFor<T>): T;
/**
 * JSON.stringify helper that stringifies bigints, buffers, maps, and sets.
 * @param obj - The object to be stringified.
 * @returns The resulting string.
 */
export declare function jsonStringify(obj: object, prettify?: boolean): string;
/**
 * Calls jsonStringify but swallows errors.
 * Use for logging, when you don't want to potentially introduce another thing that throws.
 */
export declare function tryJsonStringify(obj: any, prettify?: boolean): string | undefined;
//# sourceMappingURL=convert.d.ts.map