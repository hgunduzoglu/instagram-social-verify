import { z } from 'zod';
const noirGitDependencySchema = z.object({
    git: z.string(),
    tag: z.string(),
    directory: z.string().optional()
});
const noirLocalDependencySchema = z.object({
    path: z.string()
});
const noirPackageConfigSchema = z.object({
    package: z.object({
        name: z.string().default(''),
        type: z.enum([
            'lib',
            'contract',
            'bin'
        ]).default('bin'),
        entry: z.string().optional(),
        description: z.string().optional(),
        authors: z.array(z.string()).optional(),
        // eslint-disable-next-line camelcase
        compiler_version: z.string().optional(),
        backend: z.string().optional(),
        license: z.string().optional()
    }),
    dependencies: z.record(z.union([
        noirGitDependencySchema,
        noirLocalDependencySchema
    ])).default({})
});
/**
 * Checks that an object is a package configuration.
 * @param config - Config to check
 */ export function parseNoirPackageConfig(config) {
    return noirPackageConfigSchema.parse(config);
}
