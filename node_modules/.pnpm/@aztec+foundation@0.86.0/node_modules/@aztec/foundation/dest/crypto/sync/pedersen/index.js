import { BarretenbergSync, Fr as FrBarretenberg } from '@aztec/bb.js';
import { Fr } from '../../../fields/fields.js';
import { serializeToFields } from '../../../serialize/serialize.js';
/**
 * Create a pedersen commitment (point) from an array of input fields.
 * Left pads any inputs less than 32 bytes.
 */ export function pedersenCommit(input, offset = 0) {
    if (!input.every((i)=>i.length <= 32)) {
        throw new Error('All Pedersen Commit input buffers must be <= 32 bytes.');
    }
    input = input.map((i)=>i.length < 32 ? Buffer.concat([
            Buffer.alloc(32 - i.length, 0),
            i
        ]) : i);
    const point = BarretenbergSync.getSingleton().pedersenCommit(input.map((i)=>new FrBarretenberg(i)), offset);
    // toBuffer returns Uint8Arrays (browser/worker-boundary friendly).
    // TODO: rename toTypedArray()?
    return [
        Buffer.from(point.x.toBuffer()),
        Buffer.from(point.y.toBuffer())
    ];
}
/**
 * Create a pedersen hash (field) from an array of input fields.
 * @param input - The input fieldables to hash.
 * @param index - The separator index to use for the hash.
 * @returns The pedersen hash.
 */ export function pedersenHash(input, index = 0) {
    const inputFields = serializeToFields(input);
    const hash = BarretenbergSync.getSingleton().pedersenHash(inputFields.map((i)=>new FrBarretenberg(i.toBuffer())), index);
    return Fr.fromBuffer(Buffer.from(hash.toBuffer()));
}
/**
 * Create a pedersen hash from an arbitrary length buffer.
 */ export function pedersenHashBuffer(input, index = 0) {
    const result = BarretenbergSync.getSingleton().pedersenHashBuffer(input, index);
    return Buffer.from(result.toBuffer());
}
