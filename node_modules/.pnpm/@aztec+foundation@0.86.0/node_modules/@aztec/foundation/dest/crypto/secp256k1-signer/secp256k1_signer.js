import { Buffer32 } from '@aztec/foundation/buffer';
import { addressFromPrivateKey, makeEthSignDigest, signMessage } from './utils.js';
/**
 * Secp256k1Signer
 *
 * A class for signing messages using a secp256k1 private key.
 * - This is a slim drop in replacement for an Ethereum signer, so it can be used in the same way.
 * - See `utils.ts` for functions that enable recovering addresses and public keys from signatures.
 */ export class Secp256k1Signer {
    privateKey;
    address;
    constructor(privateKey){
        this.privateKey = privateKey;
        this.address = addressFromPrivateKey(privateKey.buffer);
    }
    sign(message) {
        return signMessage(message, this.privateKey.buffer);
    }
    /**
   * Sign a message using the same method as eth_sign
   * @param message - The message to sign.
   * @returns The signature.
   */ signMessage(message) {
        const digest = makeEthSignDigest(message);
        return this.sign(digest);
    }
    static random() {
        return new Secp256k1Signer(Buffer32.random());
    }
}
