import { z } from 'zod';
/** Parses the given arguments using a tuple from the provided schemas. */
export declare function parse<T extends [] | [z.ZodTypeAny, ...z.ZodTypeAny[]]>(args: IArguments, ...schemas: T): z.AssertArray<{ [k in keyof T]: T[k] extends z.ZodType<any, any, any> ? T[k]["_output"] : never; }>;
/**
 * Parses the given arguments against a tuple, allowing empty for optional items.
 * @dev Zod doesn't like tuplues with optional items. See https://github.com/colinhacks/zod/discussions/949.
 */
export declare function parseWithOptionals<T extends z.AnyZodTuple>(args: any[], schema: T): Promise<T['_output']>;
//# sourceMappingURL=parse.d.ts.map