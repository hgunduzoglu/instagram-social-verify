/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import { z } from 'zod';
import { Buffer32 } from '../buffer/buffer32.js';
import { EthAddress } from '../eth-address/index.js';
import { Fq, Fr } from '../fields/fields.js';
import { Point } from '../fields/point.js';
export declare const schemas: {
    /** Accepts a hex string. */
    EthAddress: z.ZodType<EthAddress, any, string>;
    /** Accepts a hex string. */
    Fr: z.ZodType<Fr, any, string>;
    /** Accepts a hex string. */
    Fq: z.ZodType<Fq, any, string>;
    /** Point. Serialized as a hex string. */
    Point: z.ZodType<Point, any, string>;
    /** Coerces any input to bigint. */
    BigInt: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
    /** Coerces any input to integer number. */
    Integer: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
    /** Coerces input to UInt32. */
    UInt32: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
    /** Accepts a hex string as a Buffer32 type. */
    Buffer32: z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, Buffer32, string>;
    /** Accepts a base64 string or an object `{ type: 'Buffer', data: [byte, byte...] }` as a buffer. */
    Buffer: z.ZodUnion<[z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, Buffer, string>, z.ZodEffects<z.ZodObject<{
        type: z.ZodLiteral<"Buffer">;
        data: z.ZodArray<z.ZodNumber, "many">;
    }, "strip", z.ZodTypeAny, {
        type: "Buffer";
        data: number[];
    }, {
        type: "Buffer";
        data: number[];
    }>, Buffer, {
        type: "Buffer";
        data: number[];
    }>]>;
    /** Accepts a hex string as a buffer. */
    BufferHex: z.ZodEffects<z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>, Buffer, string>;
    /** Hex string with an optional 0x prefix which gets removed as part of the parsing. */
    HexString: z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>;
};
export type { EthAddress, Point, Fr, Fq };
//# sourceMappingURL=schemas.d.ts.map