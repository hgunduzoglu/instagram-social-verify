/**
 * A class that allows for a value to be committed or rolled back.
 */ export class Committable {
    currentValue;
    nextValue = undefined;
    constructor(initialValue){
        this.currentValue = initialValue;
    }
    /**
   * Commits the uncommitted value.
   */ commit() {
        if (this.nextValue === undefined) {
            return;
        }
        this.currentValue = this.nextValue;
        this.nextValue = undefined;
    }
    /**
   * Rolls back the uncommitted value.
   */ rollback() {
        this.nextValue === undefined;
    }
    /**
   * Gets the current value.
   * @param includeUncommitted - Whether to include the uncommitted value.
   * @returns The current value if includeUncommitted is false, otherwise the uncommitted value.
   */ get(includeUncommitted = false) {
        return includeUncommitted && this.nextValue ? this.nextValue : this.currentValue;
    }
    /**
   * Sets the next value to be committed to.
   * @param value - The new value to be set.
   */ set(value) {
        this.nextValue = value;
    }
}
