/** Returns a new object with the same keys and where each value has been passed through the mapping function. */
export declare function mapValues<K extends string | number | symbol, T, U>(obj: Record<K, T>, fn: (value: T, key: K) => U): Record<K, U>;
export declare function mapValues<K extends string | number | symbol, T, U>(obj: Partial<Record<K, T>>, fn: (value: T, key: K) => U): Partial<Record<K, U>>;
/** Returns a new object where all keys with undefined values have been removed. */
export declare function compact<T extends object>(obj: T): {
    [P in keyof T]+?: Exclude<T[P], undefined>;
};
/** Returns a new object by picking the given keys. */
export declare function pick<T extends object, U extends keyof T>(object: T, ...props: U[]): Pick<T, U>;
export declare function pick<T extends object>(object: T, ...props: string[]): Partial<T>;
/** Returns a new object by omitting the given keys. */
export declare function omit<T extends object, K extends keyof T>(object: T, ...props: K[]): Omit<T, K>;
export declare function omit<T extends object>(object: T, ...props: string[]): Partial<T>;
/** Equivalent to Object.entries but preserves types. */
export declare function getEntries<T extends Record<PropertyKey, unknown>>(obj: T): {
    [K in keyof T]: [K, T[K]];
}[keyof T][];
/** Equivalent to Object.fromEntries but preserves types. */
export declare function fromEntries<const T extends ReadonlyArray<readonly [PropertyKey, unknown]>>(entries: T): {
    [K in T[number] as K[0]]: K[1];
};
//# sourceMappingURL=object.d.ts.map