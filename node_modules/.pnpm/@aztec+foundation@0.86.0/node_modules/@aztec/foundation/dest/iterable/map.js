import { isAsyncIterable } from './isAsyncIt.js';
import { peek } from './peek.js';
function map(source, func) {
    let index = 0;
    if (isAsyncIterable(source)) {
        return async function*() {
            for await (const val of source){
                yield func(val, index++);
            }
        }();
    }
    // if mapping function returns a promise we have to return an async generator
    const peekable = peek(source);
    const { value, done } = peekable.next();
    if (done === true) {
        return function*() {}();
    }
    const res = func(value, index++);
    // @ts-expect-error .then is not present on O
    if (typeof res.then === 'function') {
        return async function*() {
            yield await res;
            for await (const val of peekable){
                yield func(val, index++);
            }
        }();
    }
    const fn = func;
    return function*() {
        yield res;
        for (const val of peekable){
            yield fn(val, index++);
        }
    }();
}
export { map };
