function peekable(iterable) {
    const [iterator, symbol] = // @ts-expect-error can't use Symbol.asyncIterator to index iterable since it might be Iterable
    iterable[Symbol.asyncIterator] != null ? [
        iterable[Symbol.asyncIterator](),
        Symbol.asyncIterator
    ] : [
        iterable[Symbol.iterator](),
        Symbol.iterator
    ];
    const queue = [];
    // @ts-expect-error can't use symbol to index peekable
    return {
        peek: ()=>{
            return iterator.next();
        },
        push: (value)=>{
            queue.push(value);
        },
        next: ()=>{
            if (queue.length > 0) {
                return {
                    done: false,
                    value: queue.shift()
                };
            }
            return iterator.next();
        },
        [symbol] () {
            return this;
        }
    };
}
export { peekable as peek };
