import { getLogLevelFromFilters } from './log-filters.js';
import { logFilters, logger } from './pino-logger.js';
/**
 * Creates a libp2p compatible logger that wraps our pino logger.
 * This adapter implements the ComponentLogger interface required by libp2p.
 */ export function createLibp2pComponentLogger(namespace) {
    return {
        forComponent: (component)=>createLibp2pLogger(`${namespace}:${component}`)
    };
}
// Lipp2p libraries use arbitrary string substitutions, so we need to replace them with %s, this is slow so avoid doing it unless trace debugging
function replaceFormatting(message) {
    // Message can sometimes not be a string, e.g. an error object, just return it as is
    if (!message?.replace) {
        return message;
    }
    return message.replace(/(%p|%a)/g, '%s');
}
function createLibp2pLogger(component) {
    // Create a direct pino logger instance for libp2p that supports string interpolation
    const log = logger.child({
        module: component
    }, {
        level: getLogLevelFromFilters(logFilters, component)
    });
    const logIfEnabled = (level, message, ...args)=>{
        if (!log.isLevelEnabled(level)) {
            return;
        }
        log[level](replaceFormatting(message), ...args);
    };
    // Default log level is trace as this is super super noisy
    const logFn = (message, ...args)=>{
        logIfEnabled('trace', message, ...args);
    };
    return Object.assign(logFn, {
        enabled: log.isLevelEnabled('debug'),
        error (message, ...args) {
            // We write error outputs as debug as they are often expected, e.g. connection errors can happen in happy paths
            logIfEnabled('debug', message, ...args);
        },
        debug (message, ...args) {
            logIfEnabled('debug', message, ...args);
        },
        info (message, ...args) {
            logIfEnabled('info', message, ...args);
        },
        warn (message, ...args) {
            logIfEnabled('warn', message, ...args);
        },
        trace (message, ...args) {
            logIfEnabled('trace', message, ...args);
        }
    });
}
