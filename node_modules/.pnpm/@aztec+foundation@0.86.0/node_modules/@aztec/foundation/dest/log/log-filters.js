import { LogLevels } from './log-levels.js';
export function getLogLevelFromFilters(filters, module) {
    for (const [filterModule, level] of filters){
        try {
            const regex = new RegExp(filterModule);
            if (regex.test(module)) {
                return level;
            }
        } catch  {
            // If regex is invalid, fall back to startsWith check
            if (module.startsWith(filterModule)) {
                return level;
            }
        }
    }
    return undefined;
}
export function assertLogLevel(level) {
    if (!LogLevels.includes(level)) {
        throw new Error(`Invalid log level: ${level}`);
    }
}
export function parseEnv(env, defaultLevel) {
    if (!env) {
        return [
            defaultLevel,
            []
        ];
    }
    const [level] = env.split(';', 1);
    assertLogLevel(level);
    return [
        level,
        parseFilters(env.slice(level.length + 1))
    ];
}
export function parseFilters(definition) {
    if (!definition) {
        return [];
    }
    const statements = definition.split(';');
    const filters = [];
    for (const statement of statements){
        const [level] = statement.split(':', 1);
        const modules = statement.slice(level.length + 1);
        if (!modules || !level) {
            throw new Error(`Invalid log filter statement: ${statement}`);
        }
        const sanitizedLevel = level.trim().toLowerCase();
        assertLogLevel(sanitizedLevel);
        for (const module of modules.split(',')){
            filters.push([
                module.trim().toLowerCase().replace(/^aztec:/, ''),
                sanitizedLevel
            ]);
        }
    }
    return filters.reverse();
}
