/// <reference types="node" resolution-mode="require"/>
import type { Writable } from 'stream';
import type { LogLevel } from './log-levels.js';
import type { LogData, LogFn } from './log_fn.js';
export declare function createLogger(module: string): Logger;
type LogDataHandler = (data: LogData) => LogData;
export declare function addLogDataHandler(handler: LogDataHandler): void;
type LogNameHandler = (module: string) => string;
export declare function addLogNameHandler(handler: LogNameHandler): void;
export declare function removeLogNameHandler(handler: LogNameHandler): void;
/** Creates all loggers within the given callback with the suffix appended to the module name. */
export declare function withLogNameSuffix<T>(suffix: string, callback: () => Promise<T>): Promise<T>;
export declare const logLevel: "fatal" | "error" | "warn" | "info" | "debug" | "trace" | "verbose" | "silent", logFilters: import("./log-filters.js").LogFilters;
export declare const levels: {
    labels: any;
    values: {
        verbose: number;
    };
};
export declare const pinoPrettyOpts: {
    destination: number;
    sync: boolean;
    colorize: boolean;
    ignore: string;
    messageFormat: string;
    customLevels: string;
    customColors: string;
    minimumLevel: "trace";
    singleLine: boolean;
};
export declare const logger: import("pino").Logger<"verbose", boolean>;
/**
 * Overwrites the logging stream with a different destination.
 * Used by jest/setup.mjs to set up a pretty logger.
 */
export declare function overwriteLoggingStream(stream: Writable): void;
/**
 * Registers an additional destination to the pino logger.
 * Use only when working with destinations, not worker transports.
 */
export declare function registerLoggingStream(stream: Writable): void;
/** Log function that accepts an exception object */
type ErrorLogFn = (msg: string, err?: Error | unknown, data?: LogData) => void;
/**
 * Logger that supports multiple severity levels.
 */
export type Logger = {
    [K in LogLevel]: LogFn;
} & {
    error: ErrorLogFn;
} & {
    level: LogLevel;
    isLevelEnabled: (level: LogLevel) => boolean;
    module: string;
};
export {};
//# sourceMappingURL=pino-logger.d.ts.map