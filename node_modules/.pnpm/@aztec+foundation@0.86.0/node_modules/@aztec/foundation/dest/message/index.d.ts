export type MessageHeaderInit = {
    /** The message ID. Optional, if not set defaults to 0 */
    messageId?: number;
    /** Identifies the original request. Optional */
    requestId?: number;
};
export declare class MessageHeader {
    /** An number to identify this message */
    readonly messageId: number;
    /** If this message is a response to a request, the messageId of the request */
    readonly requestId: number;
    constructor({ messageId, requestId }: MessageHeaderInit);
    static fromMessagePack(data: object): MessageHeader;
}
interface TypedMessageLike {
    msgType: number;
    header: {
        messageId?: number;
        requestId?: number;
    };
    value: any;
}
export declare class TypedMessage<T, B> {
    readonly msgType: T;
    readonly header: MessageHeader;
    readonly value: B;
    constructor(msgType: T, header: MessageHeader, value: B);
    static fromMessagePack<T, B>(data: TypedMessageLike): TypedMessage<T, B>;
    static isTypedMessageLike(obj: any): obj is TypedMessageLike;
}
export {};
//# sourceMappingURL=index.d.ts.map