import { findLeafLevelAndIndex } from './unbalanced_merkle_tree.js';
export class UnbalancedTreeStore {
    #nodeMapping = new Map();
    #numLeaves;
    constructor(numLeaves){
        this.#numLeaves = numLeaves;
    }
    setLeaf(leafIndex, value) {
        if (leafIndex >= this.#numLeaves) {
            throw new Error(`Expected at most ${this.#numLeaves} leaves. Received a leaf at index ${leafIndex}.`);
        }
        const { level, indexAtLevel } = findLeafLevelAndIndex(this.#numLeaves, leafIndex);
        const location = {
            level,
            index: indexAtLevel
        };
        this.#nodeMapping.set(this.#getKey(location), {
            location,
            value
        });
        return location;
    }
    setNode({ level, index }, value) {
        const location = {
            level,
            index
        };
        this.#nodeMapping.set(this.#getKey(location), {
            location,
            value
        });
    }
    getParentLocation({ level, index }) {
        if (level === 0) {
            throw new Error('Tree root does not have a parent.');
        }
        return {
            level: level - 1,
            index: Math.floor(index / 2)
        };
    }
    getSiblingLocation({ level, index }) {
        if (level === 0) {
            throw new Error('Tree root does not have a sibling.');
        }
        return {
            level,
            index: index % 2 ? index - 1 : index + 1
        };
    }
    getChildLocations({ level, index }) {
        const left = {
            level: level + 1,
            index: index * 2
        };
        const right = {
            level: level + 1,
            index: index * 2 + 1
        };
        return [
            left,
            right
        ];
    }
    getLeaf(leafIndex) {
        const { level, indexAtLevel } = findLeafLevelAndIndex(this.#numLeaves, leafIndex);
        const location = {
            level,
            index: indexAtLevel
        };
        return this.getNode(location);
    }
    getNode(location) {
        return this.#nodeMapping.get(this.#getKey(location))?.value;
    }
    getParent(location) {
        const parentLocation = this.getParentLocation(location);
        return this.getNode(parentLocation);
    }
    getSibling(location) {
        const siblingLocation = this.getSiblingLocation(location);
        return this.getNode(siblingLocation);
    }
    getChildren(location) {
        const [left, right] = this.getChildLocations(location);
        return [
            this.getNode(left),
            this.getNode(right)
        ];
    }
    #getKey(location) {
        return `${location.level}-${location.index}`;
    }
}
