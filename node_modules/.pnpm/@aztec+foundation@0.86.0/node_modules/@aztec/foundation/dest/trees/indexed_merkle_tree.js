import { Fr } from '../fields/index.js';
import { assertLength } from '../serialize/index.js';
import { MembershipWitness } from './membership_witness.js';
import { MerkleTree } from './merkle_tree.js';
/** A simple immutable indexed merkle tree container. Use a IndexedMerkleTreeCalculator to create a new instance from a set of leaves. */ export class IndexedMerkleTree extends MerkleTree {
    leafPreimages;
    constructor(height, nodes, leafPreimages){
        super(height, nodes), this.leafPreimages = leafPreimages;
    }
    getLowLeaf(value) {
        let lowLeaf;
        this.leafPreimages.forEach((leaf)=>{
            if (leaf.getKey() < value && (leaf.getNextKey() > value || leaf.getNextKey() == BigInt(0))) {
                lowLeaf = leaf;
            }
        });
        if (!lowLeaf) {
            throw new Error(`Couldn't find low leaf for ${value}`);
        }
        return lowLeaf;
    }
    getMembershipWitness(leafIndexOrLeaf) {
        const index = Buffer.isBuffer(leafIndexOrLeaf) ? this.getIndex(leafIndexOrLeaf) : leafIndexOrLeaf;
        const siblingPath = this.getSiblingPath(index);
        return new MembershipWitness(this.height, BigInt(index), assertLength(siblingPath.map(Fr.fromBuffer), this.height));
    }
}
