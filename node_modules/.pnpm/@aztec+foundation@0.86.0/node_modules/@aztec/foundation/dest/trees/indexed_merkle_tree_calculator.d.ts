/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import type { IndexedTreeLeafPreimage } from '@aztec/foundation/trees';
import type { AsyncHasher } from './hasher.js';
import { IndexedMerkleTree } from './indexed_merkle_tree.js';
interface LeafPreimageFactory<T extends IndexedTreeLeafPreimage> {
    fromBuffer(buffer: Buffer): T;
}
/**
 * Indexed merkle tree calculator.
 */
export declare class IndexedMerkleTreeCalculator<T extends IndexedTreeLeafPreimage, N extends number> {
    private height;
    private zeroHashes;
    private hasher;
    private factory;
    private constructor();
    static create<T extends IndexedTreeLeafPreimage, N extends number>(height: N, hasher: AsyncHasher, factory: LeafPreimageFactory<T>, zeroLeaf?: Buffer): Promise<IndexedMerkleTreeCalculator<T, N>>;
    computeTree(values: Buffer[]): Promise<IndexedMerkleTree<T, N>>;
    computeTreeRoot(leaves?: Buffer[]): Promise<Buffer>;
}
export {};
//# sourceMappingURL=indexed_merkle_tree_calculator.d.ts.map