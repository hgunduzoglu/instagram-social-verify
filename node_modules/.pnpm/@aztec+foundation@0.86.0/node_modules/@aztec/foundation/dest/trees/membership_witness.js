import { assertMemberLength } from '../array/array.js';
import { toBigIntBE, toBufferBE } from '../bigint-buffer/index.js';
import { Fr } from '../fields/fields.js';
import { BufferReader, serializeToBuffer } from '../serialize/index.js';
/**
 * Contains information which can be used to prove that a leaf is a member of a Merkle tree.
 */ export class MembershipWitness {
    leafIndex;
    siblingPath;
    constructor(/**
     * Size of the sibling path (number of fields it contains).
     */ pathSize, /**
     * Index of a leaf in the Merkle tree.
     */ leafIndex, /**
     * Sibling path of the leaf in the Merkle tree.
     */ siblingPath){
        this.leafIndex = leafIndex;
        this.siblingPath = siblingPath;
        assertMemberLength(this, 'siblingPath', pathSize);
    }
    toBuffer() {
        return serializeToBuffer(toBufferBE(this.leafIndex, 32), ...this.siblingPath);
    }
    /**
   * Creates a random membership witness. Used for testing purposes.
   * @param pathSize - Number of fields in the sibling path.
   * @returns Random membership witness.
   */ static random(pathSize) {
        return new MembershipWitness(pathSize, 0n, Array(pathSize).fill(0).map(()=>Fr.random()));
    }
    /**
   * Creates a membership witness whose sibling path is full of zero fields.
   * @param pathSize - Number of fields in the sibling path.
   * @param leafIndex - Index of the leaf in the Merkle tree.
   * @returns Membership witness with zero sibling path.
   */ static empty(pathSize, leafIndex = 0n) {
        const arr = Array(pathSize).fill(0).map(()=>Fr.ZERO);
        return new MembershipWitness(pathSize, leafIndex, arr);
    }
    static fromBufferArray(leafIndex, siblingPath) {
        return new MembershipWitness(siblingPath.length, leafIndex, siblingPath.map((x)=>Fr.fromBuffer(x)));
    }
    /**
   * Deserializes from a buffer or reader, corresponding to a write in cpp.
   * @param buffer - Buffer or reader to read from.
   * @returns The deserialized `MembershipWitness`.
   */ static fromBuffer(buffer, size) {
        const reader = BufferReader.asReader(buffer);
        const leafIndex = toBigIntBE(reader.readBytes(32));
        const siblingPath = reader.readArray(size, Fr);
        return new MembershipWitness(size, leafIndex, siblingPath);
    }
    /**
   * Creates a deserializer object for a MembershipWitness with a given size.
   * @param size - Expected size of the witness.
   * @returns A deserializer object.
   */ static deserializer(size) {
        return {
            fromBuffer: (buffer)=>{
                const reader = BufferReader.asReader(buffer);
                const leafIndex = toBigIntBE(reader.readBytes(32));
                const siblingPath = reader.readArray(size, Fr);
                return new MembershipWitness(size, leafIndex, siblingPath);
            }
        };
    }
    static fromSiblingPath(leafIndex, siblingPath) {
        return new MembershipWitness(siblingPath.pathSize, leafIndex, siblingPath.toFields());
    }
}
