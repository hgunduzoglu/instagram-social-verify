"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.revertCommonARCModifications = void 0;
async function revertCommonARCModifications(email) {
    if (!email.includes("ARC-Authentication-Results")) {
        return email;
    }
    let modified = revertGoogleModifications(email);
    if (modified === email) {
        console.log("ARC Revert: No known ARC modifications found");
    }
    return modified;
}
exports.revertCommonARCModifications = revertCommonARCModifications;
function revertGoogleModifications(email) {
    // Google sets their own Message-ID and put the original one
    // in X-Google-Original-Message-ID when forwarding
    const googleReplacedMessageId = getHeaderValue(email, "X-Google-Original-Message-ID");
    if (googleReplacedMessageId) {
        email = setHeaderValue(email, "Message-ID", googleReplacedMessageId);
        console.info("ARC Revert: Setting X-Google-Original-Message-ID to Message-ID header...");
    }
    return email;
}
function getHeaderValue(email, header) {
    const headerStartIndex = email.indexOf(`${header}: `) + header.length + 2;
    const headerEndIndex = email.indexOf("\n", headerStartIndex);
    const headerValue = email.substring(headerStartIndex, headerEndIndex);
    return headerValue;
}
function setHeaderValue(email, header, value) {
    return email.replace(getHeaderValue(email, header), value);
}
