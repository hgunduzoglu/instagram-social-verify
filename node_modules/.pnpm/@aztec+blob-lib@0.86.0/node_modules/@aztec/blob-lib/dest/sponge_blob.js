import { makeTuple } from '@aztec/foundation/array';
import { poseidon2Permutation } from '@aztec/foundation/crypto';
import { Fr } from '@aztec/foundation/fields';
import { BufferReader, FieldReader, serializeToBuffer, serializeToFields } from '@aztec/foundation/serialize';
/**
 * A Poseidon2 sponge used to accumulate data that will be added to a blob.
 * See noir-projects/noir-protocol-circuits/crates/types/src/abis/sponge_blob.nr.
 */ export class SpongeBlob {
    sponge;
    fields;
    expectedFields;
    constructor(/** Sponge with absorbed tx effects that will go into a blob. */ sponge, /** Number of effects absorbed so far. */ fields, /** Number of effects that will be absorbed. */ expectedFields){
        this.sponge = sponge;
        this.fields = fields;
        this.expectedFields = expectedFields;
    }
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new SpongeBlob(reader.readObject(Poseidon2Sponge), reader.readNumber(), reader.readNumber());
    }
    toBuffer() {
        return serializeToBuffer(this.sponge, this.fields, this.expectedFields);
    }
    static getFields(fields) {
        return [
            fields.sponge,
            fields.fields,
            fields.expectedFields
        ];
    }
    toFields() {
        return serializeToFields(...SpongeBlob.getFields(this));
    }
    static fromFields(fields) {
        const reader = FieldReader.asReader(fields);
        return new SpongeBlob(reader.readObject(Poseidon2Sponge), reader.readField().toNumber(), reader.readField().toNumber());
    }
    clone() {
        return SpongeBlob.fromBuffer(this.toBuffer());
    }
    async absorb(fields) {
        if (this.fields + fields.length > this.expectedFields) {
            throw new Error(`Attempted to fill spongeblob with ${this.fields + fields.length}, but it has a max of ${this.expectedFields}`);
        }
        await this.sponge.absorb(fields);
        this.fields += fields.length;
    }
    async squeeze() {
        // If the blob sponge is not 'full', we append 1 to match Poseidon2::hash_internal()
        // NB: There is currently no use case in which we don't 'fill' a blob sponge, but adding for completeness
        if (this.fields != this.expectedFields) {
            await this.sponge.absorb([
                Fr.ONE
            ]);
        }
        return this.sponge.squeeze();
    }
    static empty() {
        return new SpongeBlob(Poseidon2Sponge.empty(), 0, 0);
    }
    static init(expectedFields) {
        return new SpongeBlob(Poseidon2Sponge.init(expectedFields), 0, expectedFields);
    }
}
// This is just noir's stdlib version of the poseidon2 sponge. We use it for a blob-specific implmentation of the hasher.
export class Poseidon2Sponge {
    cache;
    state;
    cacheSize;
    squeezeMode;
    constructor(cache, state, cacheSize, squeezeMode){
        this.cache = cache;
        this.state = state;
        this.cacheSize = cacheSize;
        this.squeezeMode = squeezeMode;
    }
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new Poseidon2Sponge(reader.readArray(3, Fr), reader.readArray(4, Fr), reader.readNumber(), reader.readBoolean());
    }
    toBuffer() {
        return serializeToBuffer(this.cache, this.state, this.cacheSize, this.squeezeMode);
    }
    static getFields(fields) {
        return [
            fields.cache,
            fields.state,
            fields.cacheSize,
            fields.squeezeMode
        ];
    }
    toFields() {
        return serializeToFields(...Poseidon2Sponge.getFields(this));
    }
    static fromFields(fields) {
        const reader = FieldReader.asReader(fields);
        return new Poseidon2Sponge(reader.readFieldArray(3), reader.readFieldArray(4), reader.readField().toNumber(), reader.readBoolean());
    }
    static empty() {
        return new Poseidon2Sponge(makeTuple(3, ()=>Fr.ZERO), makeTuple(4, ()=>Fr.ZERO), 0, false);
    }
    static init(expectedFields) {
        const iv = new Fr(expectedFields).mul(new Fr(BigInt('18446744073709551616')));
        const sponge = Poseidon2Sponge.empty();
        sponge.state[3] = iv;
        return sponge;
    }
    // Note: there isn't currently an impl in ts that allows for a custom aborption via an
    // existing sponge.
    // A custom blob-based impl of noir/noir-repo/noir_stdlib/src/hash/poseidon2.nr
    async performDuplex() {
        for(let i = 0; i < this.cache.length; i++){
            if (i < this.cacheSize) {
                this.state[i] = this.state[i].add(this.cache[i]);
            }
        }
        const perm = await poseidon2Permutation(this.state);
        // ts doesn't understand that the above always gives 4
        this.state = [
            perm[0],
            perm[1],
            perm[2],
            perm[3]
        ];
    }
    async absorb(fields) {
        if (this.squeezeMode) {
            throw new Error(`Poseidon sponge is not able to absorb more inputs.`);
        }
        for (const field of fields){
            if (this.cacheSize == this.cache.length) {
                await this.performDuplex();
                this.cache[0] = field;
                this.cacheSize = 1;
            } else {
                this.cache[this.cacheSize++] = field;
            }
        }
    }
    async squeeze() {
        if (this.squeezeMode) {
            throw new Error(`Poseidon sponge has already been squeezed.`);
        }
        await this.performDuplex();
        this.squeezeMode = true;
        return this.state[0];
    }
}
