/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import { type FieldsOf } from '@aztec/foundation/array';
import { Fr } from '@aztec/foundation/fields';
import { BufferReader, FieldReader, type Tuple } from '@aztec/foundation/serialize';
/**
 * A Poseidon2 sponge used to accumulate data that will be added to a blob.
 * See noir-projects/noir-protocol-circuits/crates/types/src/abis/sponge_blob.nr.
 */
export declare class SpongeBlob {
    /** Sponge with absorbed tx effects that will go into a blob. */
    readonly sponge: Poseidon2Sponge;
    /** Number of effects absorbed so far. */
    fields: number;
    /** Number of effects that will be absorbed. */
    readonly expectedFields: number;
    constructor(
    /** Sponge with absorbed tx effects that will go into a blob. */
    sponge: Poseidon2Sponge, 
    /** Number of effects absorbed so far. */
    fields: number, 
    /** Number of effects that will be absorbed. */
    expectedFields: number);
    static fromBuffer(buffer: Buffer | BufferReader): SpongeBlob;
    toBuffer(): Buffer;
    static getFields(fields: FieldsOf<SpongeBlob>): (number | Poseidon2Sponge)[];
    toFields(): Fr[];
    static fromFields(fields: Fr[] | FieldReader): SpongeBlob;
    clone(): SpongeBlob;
    absorb(fields: Fr[]): Promise<void>;
    squeeze(): Promise<Fr>;
    static empty(): SpongeBlob;
    static init(expectedFields: number): SpongeBlob;
}
export declare class Poseidon2Sponge {
    cache: Tuple<Fr, 3>;
    state: Tuple<Fr, 4>;
    cacheSize: number;
    squeezeMode: boolean;
    constructor(cache: Tuple<Fr, 3>, state: Tuple<Fr, 4>, cacheSize: number, squeezeMode: boolean);
    static fromBuffer(buffer: Buffer | BufferReader): Poseidon2Sponge;
    toBuffer(): Buffer;
    static getFields(fields: FieldsOf<Poseidon2Sponge>): (number | boolean | [Fr, Fr, Fr] | [Fr, Fr, Fr, Fr])[];
    toFields(): Fr[];
    static fromFields(fields: Fr[] | FieldReader): Poseidon2Sponge;
    static empty(): Poseidon2Sponge;
    static init(expectedFields: number): Poseidon2Sponge;
    performDuplex(): Promise<void>;
    absorb(fields: Fr[]): Promise<void>;
    squeeze(): Promise<Fr>;
}
//# sourceMappingURL=sponge_blob.d.ts.map