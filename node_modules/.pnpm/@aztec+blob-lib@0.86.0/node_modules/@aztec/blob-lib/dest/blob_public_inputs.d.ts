/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import { BLOBS_PER_BLOCK } from '@aztec/constants';
import { Fr } from '@aztec/foundation/fields';
import { BufferReader, FieldReader, type Tuple } from '@aztec/foundation/serialize';
import type { FieldsOf } from '@aztec/foundation/types';
import { type Blob } from './blob.js';
/**
 * Public inputs required to be passed from our rollup circuits to verify a blob.
 */
export declare class BlobPublicInputs {
    /** Challenge point z (= H(H(tx_effects), kzgCommmitment). */
    z: Fr;
    /** Evaluation y = p(z), where p() is the blob polynomial. */
    y: bigint;
    /** Commitment to the blob C. */
    kzgCommitment: Tuple<Fr, 2>;
    constructor(
    /** Challenge point z (= H(H(tx_effects), kzgCommmitment). */
    z: Fr, 
    /** Evaluation y = p(z), where p() is the blob polynomial. */
    y: bigint, 
    /** Commitment to the blob C. */
    kzgCommitment: Tuple<Fr, 2>);
    static empty(): BlobPublicInputs;
    isEmpty(): boolean;
    static fromBuffer(buffer: Buffer | BufferReader): BlobPublicInputs;
    toBuffer(): Buffer;
    static fromFields(fields: Fr[] | FieldReader): BlobPublicInputs;
    toFields(): Fr[];
    static getFields(fields: FieldsOf<BlobPublicInputs>): readonly [Fr, bigint, [Fr, Fr]];
    static fromBlob(input: Blob): BlobPublicInputs;
    getBlobHash(): Buffer;
    commitmentToBuffer(): Buffer;
    equals(other: BlobPublicInputs): boolean;
}
export declare class BlockBlobPublicInputs {
    inner: Tuple<BlobPublicInputs, typeof BLOBS_PER_BLOCK>;
    constructor(inner: Tuple<BlobPublicInputs, typeof BLOBS_PER_BLOCK>);
    static empty(): BlockBlobPublicInputs;
    static fromBuffer(buffer: Buffer | BufferReader): BlockBlobPublicInputs;
    toBuffer(): Buffer;
    static fromFields(fields: Fr[] | FieldReader): BlockBlobPublicInputs;
    toFields(): Fr[];
    static getFields(fields: FieldsOf<BlockBlobPublicInputs>): readonly [[BlobPublicInputs, BlobPublicInputs, BlobPublicInputs]];
    static fromBlobs(inputs: Blob[]): BlockBlobPublicInputs;
    getBlobsHash(): Buffer;
    toString(): string;
}
//# sourceMappingURL=blob_public_inputs.d.ts.map