import type { ViemClient } from '@aztec/ethereum';
import type { EthCheatCodes } from '@aztec/ethereum/eth-cheatcodes';
import type { EthAddress } from '@aztec/foundation/eth-address';
import type { TestDateProvider } from '@aztec/foundation/timer';
/**
 * Represents a watcher for a rollup contract.
 *
 * It started on a network like anvil where time traveling is allowed, and auto-mine is turned on
 * it will periodically check if the current slot have already been filled, e.g., there was an L2
 * block within the slot. And if so, it will time travel into the next slot.
 */
export declare class AnvilTestWatcher {
    private cheatcodes;
    private dateProvider?;
    private isSandbox;
    private rollup;
    private rollupCheatCodes;
    private filledRunningPromise?;
    private mineIfOutdatedPromise?;
    private markingAsProvenRunningPromise?;
    private logger;
    private isMarkingAsProven;
    constructor(cheatcodes: EthCheatCodes, rollupAddress: EthAddress, l1Client: ViemClient, dateProvider?: TestDateProvider | undefined);
    setIsMarkingAsProven(isMarkingAsProven: boolean): void;
    setIsSandbox(isSandbox: boolean): void;
    start(): Promise<void>;
    stop(): Promise<void>;
    trigger(): Promise<void>;
    markAsProven(): Promise<void>;
    mineIfOutdated(): Promise<void>;
    warpTimeIfNeeded(): Promise<void>;
}
//# sourceMappingURL=anvil_test_watcher.d.ts.map