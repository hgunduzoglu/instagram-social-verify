import { type ViemPublicClient } from '@aztec/ethereum';
import { EthCheatCodes } from '@aztec/ethereum/eth-cheatcodes';
import type { L1ContractAddresses } from '@aztec/ethereum/l1-contract-addresses';
import { RollupAbi } from '@aztec/l1-artifacts/RollupAbi';
import { type GetContractReturnType, type Hex } from 'viem';
/** Cheat codes for the L1 rollup contract. */
export declare class RollupCheatCodes {
    private ethCheatCodes;
    private client;
    private rollup;
    private logger;
    constructor(ethCheatCodes: EthCheatCodes, addresses: Pick<L1ContractAddresses, 'rollupAddress'>);
    /** Returns the current slot */
    getSlot(): Promise<bigint>;
    /** Returns the current epoch */
    getEpoch(): Promise<bigint>;
    /**
     * Returns the pending and proven chain tips
     * @returns The pending and proven chain tips
     */
    getTips(): Promise<{
        /** The pending chain tip */ pending: bigint;
        /** The proven chain tip */ proven: bigint;
    }>;
    /**
     * Logs the current state of the rollup contract.
     */
    debugRollup(): Promise<void>;
    /** Fetches the epoch and slot duration config from the rollup contract */
    getConfig(): Promise<{
        /** Epoch duration */ epochDuration: bigint;
        /** Slot duration */ slotDuration: bigint;
    }>;
    /** Warps time in L1 until the next epoch */
    advanceToNextEpoch(): Promise<void>;
    /** Warps time in L1 until the beginning of the next slot. */
    advanceToNextSlot(): Promise<bigint[]>;
    /**
     * Warps time in L1 equivalent to however many slots.
     * @param howMany - The number of slots to advance.
     */
    advanceSlots(howMany: number): Promise<void>;
    /**
     * Marks the specified block (or latest if none) as proven
     * @param maybeBlockNumber - The block number to mark as proven (defaults to latest pending)
     */
    markAsProven(maybeBlockNumber?: number | bigint): Promise<void>;
    /**
     * Executes an action impersonated as the owner of the Rollup contract.
     * @param action - The action to execute
     */
    asOwner(action: (owner: Hex, rollup: GetContractReturnType<typeof RollupAbi, ViemPublicClient>) => Promise<void>): Promise<void>;
    /** Directly calls the L1 gas fee oracle. */
    updateL1GasFeeOracle(): Promise<void>;
    /**
     * Bumps proving cost per mana.
     * @param bumper - Callback to calculate the new proving cost per mana based on current value.
     */
    bumpProvingCostPerMana(bumper: (before: bigint) => bigint): Promise<void>;
    /**
     * Directly updates proving cost per mana.
     * @param ethValue - The new proving cost per mana in ETH
     */
    setProvingCostPerMana(ethValue: bigint): Promise<void>;
}
//# sourceMappingURL=rollup_cheat_codes.d.ts.map