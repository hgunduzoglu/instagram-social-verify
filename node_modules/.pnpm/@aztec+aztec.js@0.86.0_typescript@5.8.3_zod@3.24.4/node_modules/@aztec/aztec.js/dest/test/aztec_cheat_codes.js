import { Fr } from '@aztec/foundation/fields';
import { createLogger } from '@aztec/foundation/log';
import { deriveStorageSlotInMap } from '@aztec/stdlib/hash';
/**
 * A class that provides utility functions for interacting with the aztec chain.
 */ export class AztecCheatCodes {
    pxe;
    logger;
    constructor(/**
     * The PXE Service to use for interacting with the chain
     */ pxe, /**
     * The logger to use for the aztec cheatcodes
     */ logger = createLogger('aztecjs:cheat_codes')){
        this.pxe = pxe;
        this.logger = logger;
    }
    /**
   * Computes the slot value for a given map and key.
   * @param mapSlot - The slot of the map (specified in Aztec.nr contract)
   * @param key - The key to lookup in the map
   * @returns The storage slot of the value in the map
   */ computeSlotInMap(mapSlot, key) {
        const keyFr = typeof key === 'bigint' ? new Fr(key) : key.toField();
        return deriveStorageSlotInMap(mapSlot, keyFr);
    }
    /**
   * Get the current blocknumber
   * @returns The current block number
   */ async blockNumber() {
        return await this.pxe.getBlockNumber();
    }
    /**
   * Get the current timestamp
   * @returns The current timestamp
   */ async timestamp() {
        const res = await this.pxe.getBlock(await this.blockNumber());
        return res?.header.globalVariables.timestamp.toNumber() ?? 0;
    }
    /**
   * Loads the value stored at the given slot in the public storage of the given contract.
   * @param who - The address of the contract
   * @param slot - The storage slot to lookup
   * @returns The value stored at the given slot
   */ async loadPublic(who, slot) {
        const storageValue = await this.pxe.getPublicStorageAt(who, new Fr(slot));
        return storageValue;
    }
    /**
   * Loads the value stored at the given slot in the private storage of the given contract.
   * @param contract - The address of the contract
   * @param recipient - The address whose public key was used to encrypt the note
   * @param slot - The storage slot to lookup
   * @returns The notes stored at the given slot
   */ async loadPrivate(recipient, contract, slot) {
        const extendedNotes = await this.pxe.getNotes({
            recipient,
            contractAddress: contract,
            storageSlot: new Fr(slot)
        });
        return extendedNotes.map((extendedNote)=>extendedNote.note);
    }
}
