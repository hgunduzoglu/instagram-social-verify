import { DefaultMultiCallEntrypoint } from '@aztec/entrypoints/multicall';
import { Fr } from '@aztec/foundation/fields';
import { CompleteAddress } from '@aztec/stdlib/contract';
import { getContractInstanceFromDeployParams } from '@aztec/stdlib/contract';
import { deriveKeys } from '@aztec/stdlib/keys';
import { Contract } from '../contract/contract.js';
import { DeployMethod } from '../contract/deploy_method.js';
import { DefaultWaitOpts } from '../contract/sent_tx.js';
import { AccountEntrypointMetaPaymentMethod } from '../fee/account_entrypoint_meta_payment_method.js';
import { FeeJuicePaymentMethod } from '../index.js';
import { AccountWalletWithSecretKey, SignerlessWallet } from '../wallet/index.js';
import { DeployAccountSentTx } from './deploy_account_sent_tx.js';
/**
 * Manages a user account. Provides methods for calculating the account's address, deploying the account contract,
 * and creating and registering the user wallet in the PXE Service.
 */ export class AccountManager {
    pxe;
    secretKey;
    accountContract;
    instance;
    salt;
    constructor(pxe, secretKey, accountContract, instance, /**
     * Deployment salt for the account contract
     */ salt){
        this.pxe = pxe;
        this.secretKey = secretKey;
        this.accountContract = accountContract;
        this.instance = instance;
        this.salt = salt;
    }
    static async create(pxe, secretKey, accountContract, salt) {
        const { publicKeys } = await deriveKeys(secretKey);
        salt = salt !== undefined ? new Fr(salt) : Fr.random();
        const { constructorName, constructorArgs } = await accountContract.getDeploymentFunctionAndArgs() ?? {
            constructorName: undefined,
            constructorArgs: undefined
        };
        const artifact = await accountContract.getContractArtifact();
        const instance = await getContractInstanceFromDeployParams(artifact, {
            constructorArtifact: constructorName,
            constructorArgs,
            salt: salt,
            publicKeys
        });
        return new AccountManager(pxe, secretKey, accountContract, instance, salt);
    }
    getPublicKeys() {
        return this.instance.publicKeys;
    }
    getPublicKeysHash() {
        return this.getPublicKeys().hash();
    }
    /**
   * Returns the entrypoint for this account as defined by its account contract.
   * @returns An entrypoint.
   */ async getAccount() {
        const nodeInfo = await this.pxe.getNodeInfo();
        const completeAddress = await this.getCompleteAddress();
        return this.accountContract.getInterface(completeAddress, nodeInfo);
    }
    /**
   * Gets the calculated complete address associated with this account.
   * Does not require the account to be deployed or registered.
   * @returns The address, partial address, and encryption public key.
   */ getCompleteAddress() {
        return CompleteAddress.fromSecretKeyAndInstance(this.secretKey, this.instance);
    }
    /**
   * Gets the address for this given account.
   * Does not require the account to be deployed or registered.
   * @returns The address.
   */ getAddress() {
        return this.instance.address;
    }
    /**
   * Returns the contract instance definition associated with this account.
   * Does not require the account to be deployed or registered.
   * @returns ContractInstance instance.
   */ getInstance() {
        return this.instance;
    }
    /**
   * Returns a Wallet instance associated with this account. Use it to create Contract
   * instances to be interacted with from this account.
   * @returns A Wallet instance.
   */ async getWallet() {
        const entrypoint = await this.getAccount();
        return new AccountWalletWithSecretKey(this.pxe, entrypoint, this.secretKey, this.salt);
    }
    /**
   * Registers this account in the PXE Service and returns the associated wallet. Registering
   * the account on the PXE Service is required for managing private state associated with it.
   * Use the returned wallet to create Contract instances to be interacted with from this account.
   * @param opts - Options to wait for the account to be synched.
   * @returns A Wallet instance.
   */ async register() {
        await this.pxe.registerContract({
            artifact: await this.accountContract.getContractArtifact(),
            instance: this.getInstance()
        });
        await this.pxe.registerAccount(this.secretKey, (await this.getCompleteAddress()).partialAddress);
        return this.getWallet();
    }
    /**
   * Returns the pre-populated deployment method to deploy the account contract that backs this account.
   * If no wallet is provided, it uses a signerless wallet with the multi call entrypoint
   * @param deployWallet - Wallet used for deploying the account contract.
   * @returns A DeployMethod instance that deploys this account contract
   */ async getDeployMethod(deployWallet) {
        const artifact = await this.accountContract.getContractArtifact();
        if (!await this.isDeployable()) {
            throw new Error(`Account contract ${artifact.name} does not require deployment.`);
        }
        const completeAddress = await this.getCompleteAddress();
        await this.pxe.registerAccount(this.secretKey, completeAddress.partialAddress);
        const { constructorName, constructorArgs } = await this.accountContract.getDeploymentFunctionAndArgs() ?? {
            constructorName: undefined,
            constructorArgs: undefined
        };
        if (deployWallet) {
            // If deploying using an existing wallet/account, treat it like regular contract deployment.
            const thisWallet = await this.getWallet();
            return new DeployMethod(this.getPublicKeys(), deployWallet, artifact, (address)=>Contract.at(address, artifact, thisWallet), constructorArgs, constructorName);
        }
        const { l1ChainId: chainId, rollupVersion } = await this.pxe.getNodeInfo();
        // We use a signerless wallet with the multi call entrypoint in order to make multiple calls in one go.
        // If we used getWallet, the deployment would get routed via the account contract entrypoint
        // and it can't be used unless the contract is initialized.
        const wallet = new SignerlessWallet(this.pxe, new DefaultMultiCallEntrypoint(chainId, rollupVersion));
        return new DeployMethod(this.getPublicKeys(), wallet, artifact, (address)=>Contract.at(address, artifact, wallet), constructorArgs, constructorName);
    }
    /**
   * Returns a FeePaymentMethod that routes the original one provided as an argument
   * through the account's entrypoint. This allows an account contract to pay
   * for its own deployment and initialization.
   *
   * For more details on how the fee payment routing works see documentation of AccountEntrypointMetaPaymentMethod class.
   *
   * @param originalPaymentMethod - originalPaymentMethod The original payment method to be wrapped.
   * @returns A FeePaymentMethod that routes the original one through the account's entrypoint (AccountEntrypointMetaPaymentMethod)
   */ async getSelfPaymentMethod(originalPaymentMethod) {
        const artifact = await this.accountContract.getContractArtifact();
        const wallet = await this.getWallet();
        const address = wallet.getAddress();
        return new AccountEntrypointMetaPaymentMethod(artifact, wallet, 'entrypoint', address, originalPaymentMethod ?? new FeeJuicePaymentMethod(address));
    }
    /**
   * Deploys the account contract that backs this account.
   * Does not register the associated class nor publicly deploy the instance by default.
   * Uses the salt provided in the constructor or a randomly generated one.
   * Registers the account in the PXE Service before deploying the contract.
   * @param opts - Fee options to be used for the deployment.
   * @returns A SentTx object that can be waited to get the associated Wallet.
   */ deploy(opts) {
        let deployMethod;
        const sentTx = this.getDeployMethod(opts?.deployWallet).then((method)=>{
            deployMethod = method;
            if (!opts?.deployWallet && opts?.fee) {
                return this.getSelfPaymentMethod(opts?.fee?.paymentMethod);
            }
        }).then((maybeWrappedPaymentMethod)=>{
            let fee = opts?.fee;
            if (maybeWrappedPaymentMethod) {
                fee = {
                    ...opts?.fee,
                    paymentMethod: maybeWrappedPaymentMethod
                };
            }
            return deployMethod.send({
                contractAddressSalt: new Fr(this.salt),
                skipClassRegistration: opts?.skipClassRegistration ?? true,
                skipPublicDeployment: opts?.skipPublicDeployment ?? true,
                skipInitialization: opts?.skipInitialization ?? false,
                universalDeploy: true,
                fee
            });
        }).then((tx)=>tx.getTxHash());
        return new DeployAccountSentTx(this.pxe, sentTx, this.getWallet());
    }
    /**
   * Deploys the account contract that backs this account if needed and awaits the tx to be mined.
   * Uses the salt provided in the constructor or a randomly generated one. If no initialization
   * is required it skips the transaction, and only registers the account in the PXE Service.
   * @param opts - Options to wait for the tx to be mined.
   * @returns A Wallet instance.
   */ async waitSetup(opts = DefaultWaitOpts) {
        await (await this.isDeployable() ? this.deploy(opts).wait(opts) : this.register());
        return this.getWallet();
    }
    /**
   * Returns whether this account contract has a constructor and needs deployment.
   */ async isDeployable() {
        return await this.accountContract.getDeploymentFunctionAndArgs() !== undefined;
    }
}
