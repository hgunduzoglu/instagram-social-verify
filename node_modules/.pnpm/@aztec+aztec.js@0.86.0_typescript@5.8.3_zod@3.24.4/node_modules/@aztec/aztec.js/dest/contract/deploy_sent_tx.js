import { createLogger } from '@aztec/foundation/log';
import { SentTx } from './sent_tx.js';
/**
 * A contract deployment transaction sent to the network, extending SentTx with methods to create a contract instance.
 */ export class DeploySentTx extends SentTx {
    postDeployCtor;
    instanceGetter;
    log;
    constructor(wallet, txHashPromise, postDeployCtor, /** A getter for the deployed contract instance */ instanceGetter){
        super(wallet, txHashPromise), this.postDeployCtor = postDeployCtor, this.instanceGetter = instanceGetter, this.log = createLogger('aztecjs:deploy_sent_tx');
    }
    /**
   * Awaits for the tx to be mined and returns the contract instance. Throws if tx is not mined.
   * @param opts - Options for configuring the waiting for the tx to be mined.
   * @returns The deployed contract instance.
   */ async deployed(opts) {
        const receipt = await this.wait(opts);
        const instance = await this.instanceGetter();
        this.log.info(`Contract ${instance.address.toString()} successfully deployed.`);
        return receipt.contract;
    }
    /**
   * Awaits for the tx to be mined and returns the receipt along with a contract instance. Throws if tx is not mined.
   * @param opts - Options for configuring the waiting for the tx to be mined.
   * @returns The transaction receipt with the deployed contract instance.
   */ async wait(opts) {
        const receipt = await super.wait(opts);
        const contract = await this.getContractObject(opts?.wallet);
        return {
            ...receipt,
            contract
        };
    }
    async getContractObject(wallet) {
        const isWallet = (pxeWalletOrNode)=>!!pxeWalletOrNode.createTxExecutionRequest;
        const contractWallet = wallet ?? (isWallet(this.pxeWalletOrNode) && this.pxeWalletOrNode);
        if (!contractWallet) {
            throw new Error(`A wallet is required for creating a contract instance`);
        }
        const instance = await this.instanceGetter();
        return this.postDeployCtor(instance.address, contractWallet);
    }
}
