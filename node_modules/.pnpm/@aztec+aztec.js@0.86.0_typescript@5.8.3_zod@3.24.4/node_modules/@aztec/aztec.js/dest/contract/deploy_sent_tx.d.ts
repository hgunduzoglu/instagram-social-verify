import type { FieldsOf } from '@aztec/foundation/types';
import type { AztecAddress } from '@aztec/stdlib/aztec-address';
import type { ContractInstanceWithAddress } from '@aztec/stdlib/contract';
import type { TxHash, TxReceipt } from '@aztec/stdlib/tx';
import type { Wallet } from '../wallet/wallet.js';
import type { Contract } from './contract.js';
import type { ContractBase } from './contract_base.js';
import { SentTx, type WaitOpts } from './sent_tx.js';
/** Options related to waiting for a deployment tx. */
export type DeployedWaitOpts = WaitOpts & {
    /** Wallet to use for creating a contract instance. Uses the one set in the deployer constructor if not set. */
    wallet?: Wallet;
};
/** Extends a transaction receipt with a contract instance that represents the newly deployed contract. */
export type DeployTxReceipt<TContract extends ContractBase = Contract> = FieldsOf<TxReceipt> & {
    /** Instance of the newly deployed contract. */
    contract: TContract;
};
/**
 * A contract deployment transaction sent to the network, extending SentTx with methods to create a contract instance.
 */
export declare class DeploySentTx<TContract extends Contract = Contract> extends SentTx {
    private postDeployCtor;
    /** A getter for the deployed contract instance */
    instanceGetter: () => Promise<ContractInstanceWithAddress>;
    private log;
    constructor(wallet: Wallet, txHashPromise: Promise<TxHash>, postDeployCtor: (address: AztecAddress, wallet: Wallet) => Promise<TContract>, 
    /** A getter for the deployed contract instance */
    instanceGetter: () => Promise<ContractInstanceWithAddress>);
    /**
     * Awaits for the tx to be mined and returns the contract instance. Throws if tx is not mined.
     * @param opts - Options for configuring the waiting for the tx to be mined.
     * @returns The deployed contract instance.
     */
    deployed(opts?: DeployedWaitOpts): Promise<TContract>;
    /**
     * Awaits for the tx to be mined and returns the receipt along with a contract instance. Throws if tx is not mined.
     * @param opts - Options for configuring the waiting for the tx to be mined.
     * @returns The transaction receipt with the deployed contract instance.
     */
    wait(opts?: DeployedWaitOpts): Promise<DeployTxReceipt<TContract>>;
    protected getContractObject(wallet?: Wallet): Promise<TContract>;
}
//# sourceMappingURL=deploy_sent_tx.d.ts.map