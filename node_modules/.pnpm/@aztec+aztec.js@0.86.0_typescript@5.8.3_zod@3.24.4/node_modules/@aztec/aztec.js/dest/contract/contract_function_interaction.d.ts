import { ExecutionPayload } from '@aztec/entrypoints/payload';
import { type FunctionAbi } from '@aztec/stdlib/abi';
import type { AuthWitness } from '@aztec/stdlib/auth-witness';
import { AztecAddress } from '@aztec/stdlib/aztec-address';
import type { Capsule, HashedValues, TxExecutionRequest, TxProfileResult } from '@aztec/stdlib/tx';
import type { Wallet } from '../wallet/wallet.js';
import { BaseContractInteraction } from './base_contract_interaction.js';
import type { ProfileMethodOptions, RequestMethodOptions, SendMethodOptions, SimulateMethodOptions } from './interaction_options.js';
/**
 * This is the class that is returned when calling e.g. `contract.methods.myMethod(arg0, arg1)`.
 * It contains available interactions one can call on a method, including view.
 */
export declare class ContractFunctionInteraction extends BaseContractInteraction {
    protected contractAddress: AztecAddress;
    protected functionDao: FunctionAbi;
    protected args: any[];
    private extraHashedArgs;
    constructor(wallet: Wallet, contractAddress: AztecAddress, functionDao: FunctionAbi, args: any[], authWitnesses?: AuthWitness[], capsules?: Capsule[], extraHashedArgs?: HashedValues[]);
    /**
     * Create a transaction execution request that represents this call, encoded and authenticated by the
     * user's wallet, ready to be simulated.
     * @param options - An optional object containing additional configuration for the transaction.
     * @returns A Promise that resolves to a transaction instance.
     */
    create(options?: SendMethodOptions): Promise<TxExecutionRequest>;
    /**
     * Returns an execution request that represents this operation.
     * Can be used as a building block for constructing batch requests.
     * @param options - An optional object containing additional configuration for the request generation.
     * @returns An execution payload wrapped in promise.
     */
    request(options?: RequestMethodOptions): Promise<ExecutionPayload>;
    /**
     * Simulate a transaction and get its return values
     * Differs from prove in a few important ways:
     * 1. It returns the values of the function execution
     * 2. It supports `utility`, `private` and `public` functions
     *
     * @param options - An optional object containing additional configuration for the transaction.
     * @returns The result of the transaction as returned by the contract function.
     */
    simulate(options?: SimulateMethodOptions): Promise<any>;
    /**
     * Simulate a transaction and profile the gate count for each function in the transaction.
     * @param options - Same options as `simulate`, plus profiling method
     *
     * @returns An object containing the function return value and profile result.
     */
    profile(options?: ProfileMethodOptions): Promise<TxProfileResult>;
    /**
     * Augments this ContractFunctionInteraction with additional metadata, such as authWitnesses, capsules, and extraHashedArgs.
     * This is useful when creating a "batteries included" interaction, such as registering a contract class with its associated
     * capsule instead of having the user provide them externally.
     * @param options - An object containing the metadata to add to the interaction
     * @returns A new ContractFunctionInteraction with the added metadata, but calling the same original function in the same manner
     */
    with({ authWitnesses, capsules, extraHashedArgs, }: {
        /** The authWitnesses to add to the interaction */
        authWitnesses?: AuthWitness[];
        /** The capsules to add to the interaction */
        capsules?: Capsule[];
        /** The extra hashed args to add to the interaction */
        extraHashedArgs?: HashedValues[];
    }): ContractFunctionInteraction;
}
//# sourceMappingURL=contract_function_interaction.d.ts.map