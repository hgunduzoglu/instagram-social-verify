import type { FeeOptions, TxExecutionOptions, UserFeeOptions } from '@aztec/entrypoints/interfaces';
import type { ExecutionPayload } from '@aztec/entrypoints/payload';
import type { AuthWitness } from '@aztec/stdlib/auth-witness';
import { GasSettings } from '@aztec/stdlib/gas';
import type { Capsule, TxExecutionRequest, TxProvingResult } from '@aztec/stdlib/tx';
import type { Wallet } from '../wallet/wallet.js';
import type { RequestMethodOptions, SendMethodOptions } from './interaction_options.js';
import { ProvenTx } from './proven_tx.js';
import { SentTx } from './sent_tx.js';
/**
 * Base class for an interaction with a contract, be it a deployment, a function call, or a batch.
 * Implements the sequence create/simulate/send.
 */
export declare abstract class BaseContractInteraction {
    protected wallet: Wallet;
    protected authWitnesses: AuthWitness[];
    protected capsules: Capsule[];
    protected log: import("@aztec/foundation/log").Logger;
    constructor(wallet: Wallet, authWitnesses?: AuthWitness[], capsules?: Capsule[]);
    /**
     * Create a transaction execution request ready to be simulated.
     * @param options - An optional object containing additional configuration for the transaction.
     * @returns A transaction execution request.
     */
    abstract create(options?: SendMethodOptions): Promise<TxExecutionRequest>;
    /**
     * Returns an execution request that represents this operation.
     * Can be used as a building block for constructing batch requests.
     * @param options - An optional object containing additional configuration for the transaction.
     * @returns An execution request wrapped in promise.
     */
    abstract request(options?: RequestMethodOptions): Promise<ExecutionPayload>;
    /**
     * Creates a transaction execution request, simulates and proves it. Differs from .prove in
     * that its result does not include the wallet nor the composed tx object, but only the proving result.
     * This object can then be used to either create a ProvenTx ready to be sent, or directly send the transaction.
     * @param options - optional arguments to be used in the creation of the transaction
     * @returns The proving result.
     */
    protected proveInternal(options?: SendMethodOptions): Promise<TxProvingResult>;
    /**
     * Proves a transaction execution request and returns a tx object ready to be sent.
     * @param options - optional arguments to be used in the creation of the transaction
     * @returns The resulting transaction
     */
    prove(options?: SendMethodOptions): Promise<ProvenTx>;
    /**
     * Sends a transaction to the contract function with the specified options.
     * This function throws an error if called on a utility function.
     * It creates and signs the transaction if necessary, and returns a SentTx instance,
     * which can be used to track the transaction status, receipt, and events.
     * @param options - An optional object containing 'from' property representing
     * the AztecAddress of the sender. If not provided, the default address is used.
     * @returns A SentTx instance for tracking the transaction status and information.
     */
    send(options?: SendMethodOptions): SentTx;
    /**
     * Estimates gas for a given tx request and returns gas limits for it.
     * @param opts - Options.
     * @param pad - Percentage to pad the suggested gas limits by, if empty, defaults to 10%.
     * @returns Gas limits.
     */
    estimateGas(opts?: Omit<SendMethodOptions, 'estimateGas' | 'skipPublicSimulation'>): Promise<Pick<GasSettings, 'gasLimits' | 'teardownGasLimits'>>;
    /**
     * Returns default fee options based on the user opts without running a simulation for gas estimation.
     * @param fee - User-provided fee options.
     */
    protected getDefaultFeeOptions(fee: UserFeeOptions | undefined): Promise<FeeOptions>;
    /**
     * Return fee options based on the user opts, estimating tx gas if needed.
     * @param executionPayload - Execution payload to get the fee for
     * @param fee - User-provided fee options.
     * @param options - Additional options for the transaction. They must faithfully represent the tx to get accurate fee estimates
     * @returns Fee options for the actual transaction.
     */
    protected getFeeOptions(executionPayload: ExecutionPayload, fee: UserFeeOptions | undefined, options: TxExecutionOptions): Promise<FeeOptions>;
}
//# sourceMappingURL=base_contract_interaction.d.ts.map