import { FunctionSelector, getAllFunctionAbis } from '@aztec/stdlib/abi';
import { computePartialAddress } from '@aztec/stdlib/contract';
import { ContractFunctionInteraction } from './contract_function_interaction.js';
/**
 * Abstract implementation of a contract extended by the Contract class and generated contract types.
 */ export class ContractBase {
    instance;
    artifact;
    wallet;
    /**
   * An object containing contract methods mapped to their respective names.
   */ methods;
    constructor(/** The deployed contract instance definition. */ instance, /** The Application Binary Interface for the contract. */ artifact, /** The wallet used for interacting with this contract. */ wallet){
        this.instance = instance;
        this.artifact = artifact;
        this.wallet = wallet;
        this.methods = {};
        getAllFunctionAbis(artifact).forEach((f)=>{
            const interactionFunction = (...args)=>{
                return new ContractFunctionInteraction(this.wallet, this.instance.address, f, args);
            };
            this.methods[f.name] = Object.assign(interactionFunction, {
                /**
         * A getter for users to fetch the function selector.
         * @returns Selector of the function.
         */ selector () {
                    return FunctionSelector.fromNameAndParameters(f.name, f.parameters);
                }
            });
        });
    }
    /** Address of the contract. */ get address() {
        return this.instance.address;
    }
    /** Partial address of the contract. */ get partialAddress() {
        return computePartialAddress(this.instance);
    }
    /**
   * Creates a new instance of the contract wrapper attached to a different wallet.
   * @param wallet - Wallet to use for sending txs.
   * @returns A new contract instance.
   */ withWallet(wallet) {
        return new ContractBase(this.instance, this.artifact, wallet);
    }
}
