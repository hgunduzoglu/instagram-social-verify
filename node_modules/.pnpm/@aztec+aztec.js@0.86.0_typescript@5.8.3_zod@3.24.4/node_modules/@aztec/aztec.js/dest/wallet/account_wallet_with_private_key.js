import { computeAddressSecret, deriveMasterIncomingViewingSecretKey } from '@aztec/stdlib/keys';
import { AccountWallet } from './account_wallet.js';
/**
 * Extends {@link AccountWallet} with the encryption private key. Not required for
 * implementing the wallet interface but useful for testing purposes or exporting
 * an account to another pxe.
 */ export class AccountWalletWithSecretKey extends AccountWallet {
    secretKey;
    salt;
    constructor(pxe, account, secretKey, /** Deployment salt for this account contract. */ salt){
        super(pxe, account), this.secretKey = secretKey, this.salt = salt;
    }
    /** Returns the encryption private key associated with this account. */ getSecretKey() {
        return this.secretKey;
    }
    /** Returns the encryption secret, the secret of the encryption pointâ€”the point that others use to encrypt messages to this account
   * note - this ensures that the address secret always corresponds to an address point with y being positive
   * dev - this is also referred to as the address secret, which decrypts payloads encrypted to an address point
   */ async getEncryptionSecret() {
        return computeAddressSecret(await this.getCompleteAddress().getPreaddress(), deriveMasterIncomingViewingSecretKey(this.getSecretKey()));
    }
}
