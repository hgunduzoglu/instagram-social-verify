/**
 * A base class for Wallet implementations
 */ export class BaseWallet {
    pxe;
    constructor(pxe){
        this.pxe = pxe;
    }
    getAddress() {
        return this.getCompleteAddress().address;
    }
    registerSender(address) {
        return this.pxe.registerSender(address);
    }
    getSenders() {
        return this.pxe.getSenders();
    }
    async removeSender(address) {
        await this.pxe.removeSender(address);
    }
    registerContract(contract) {
        return this.pxe.registerContract(contract);
    }
    registerContractClass(artifact) {
        return this.pxe.registerContractClass(artifact);
    }
    updateContract(contractAddress, artifact) {
        return this.pxe.updateContract(contractAddress, artifact);
    }
    proveTx(txRequest, privateExecutionResult) {
        return this.pxe.proveTx(txRequest, privateExecutionResult);
    }
    profileTx(txRequest, profileMode, msgSender) {
        return this.pxe.profileTx(txRequest, profileMode, msgSender);
    }
    simulateTx(txRequest, simulatePublic, msgSender, skipTxValidation, skipFeeEnforcement) {
        return this.pxe.simulateTx(txRequest, simulatePublic, msgSender, skipTxValidation, skipFeeEnforcement);
    }
    sendTx(tx) {
        return this.pxe.sendTx(tx);
    }
    getCurrentBaseFees() {
        return this.pxe.getCurrentBaseFees();
    }
    simulateUtility(functionName, args, to, authwits, from) {
        return this.pxe.simulateUtility(functionName, args, to, authwits, from);
    }
    getNodeInfo() {
        return this.pxe.getNodeInfo();
    }
    getPXEInfo() {
        return this.pxe.getPXEInfo();
    }
    getContractClassMetadata(id, includeArtifact = false) {
        return this.pxe.getContractClassMetadata(id, includeArtifact);
    }
    getContractMetadata(address) {
        return this.pxe.getContractMetadata(address);
    }
    getTxReceipt(txHash) {
        return this.pxe.getTxReceipt(txHash);
    }
    getPrivateEvents(contractAddress, event, from, limit, recipients = [
        this.getCompleteAddress().address
    ]) {
        return this.pxe.getPrivateEvents(contractAddress, event, from, limit, recipients);
    }
    getPublicEvents(event, from, limit) {
        return this.pxe.getPublicEvents(event, from, limit);
    }
}
