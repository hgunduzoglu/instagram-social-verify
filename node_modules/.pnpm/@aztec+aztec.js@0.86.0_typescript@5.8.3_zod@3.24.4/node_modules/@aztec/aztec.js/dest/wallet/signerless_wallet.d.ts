/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import type { EntrypointInterface, FeeOptions, TxExecutionOptions } from '@aztec/entrypoints/interfaces';
import type { ExecutionPayload } from '@aztec/entrypoints/payload';
import type { Fr } from '@aztec/foundation/fields';
import { AuthWitness } from '@aztec/stdlib/auth-witness';
import type { CompleteAddress } from '@aztec/stdlib/contract';
import type { PXE } from '@aztec/stdlib/interfaces/client';
import type { TxExecutionRequest } from '@aztec/stdlib/tx';
import type { IntentAction, IntentInnerHash } from '../utils/authwit.js';
import { BaseWallet } from './base_wallet.js';
/**
 * Wallet implementation which creates a transaction request directly to the requested contract without any signing.
 */
export declare class SignerlessWallet extends BaseWallet {
    private entrypoint?;
    constructor(pxe: PXE, entrypoint?: EntrypointInterface | undefined);
    createTxExecutionRequest(execution: ExecutionPayload, fee: FeeOptions, options: TxExecutionOptions): Promise<TxExecutionRequest>;
    getChainId(): Fr;
    getVersion(): Fr;
    getPublicKeysHash(): Fr;
    getCompleteAddress(): CompleteAddress;
    createAuthWit(_intent: Fr | Buffer | IntentInnerHash | IntentAction): Promise<AuthWitness>;
}
//# sourceMappingURL=signerless_wallet.d.ts.map