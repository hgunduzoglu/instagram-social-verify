/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import type { FeeOptions, TxExecutionOptions } from '@aztec/entrypoints/interfaces';
import type { ExecutionPayload } from '@aztec/entrypoints/payload';
import type { Fr } from '@aztec/foundation/fields';
import type { AbiDecoded, ContractArtifact } from '@aztec/stdlib/abi';
import type { AuthWitness } from '@aztec/stdlib/auth-witness';
import type { AztecAddress } from '@aztec/stdlib/aztec-address';
import type { CompleteAddress, ContractInstanceWithAddress, NodeInfo } from '@aztec/stdlib/contract';
import type { GasFees } from '@aztec/stdlib/gas';
import type { ContractClassMetadata, ContractMetadata, EventMetadataDefinition, PXE, PXEInfo } from '@aztec/stdlib/interfaces/client';
import type { PrivateExecutionResult, Tx, TxExecutionRequest, TxHash, TxProfileResult, TxProvingResult, TxReceipt, TxSimulationResult } from '@aztec/stdlib/tx';
import type { IntentAction, IntentInnerHash } from '../utils/authwit.js';
import type { Wallet } from './wallet.js';
/**
 * A base class for Wallet implementations
 */
export declare abstract class BaseWallet implements Wallet {
    protected readonly pxe: PXE;
    constructor(pxe: PXE);
    abstract getCompleteAddress(): CompleteAddress;
    abstract getChainId(): Fr;
    abstract getVersion(): Fr;
    abstract createTxExecutionRequest(exec: ExecutionPayload, fee: FeeOptions, options: TxExecutionOptions): Promise<TxExecutionRequest>;
    abstract createAuthWit(intent: Fr | Buffer | IntentInnerHash | IntentAction): Promise<AuthWitness>;
    getAddress(): AztecAddress;
    registerSender(address: AztecAddress): Promise<AztecAddress>;
    getSenders(): Promise<AztecAddress[]>;
    removeSender(address: AztecAddress): Promise<void>;
    registerContract(contract: {
        /** Instance */ instance: ContractInstanceWithAddress;
        /** Associated artifact */ artifact?: ContractArtifact;
    }): Promise<void>;
    registerContractClass(artifact: ContractArtifact): Promise<void>;
    updateContract(contractAddress: AztecAddress, artifact: ContractArtifact): Promise<void>;
    proveTx(txRequest: TxExecutionRequest, privateExecutionResult: PrivateExecutionResult): Promise<TxProvingResult>;
    profileTx(txRequest: TxExecutionRequest, profileMode: 'gates' | 'execution-steps' | 'full', msgSender?: AztecAddress): Promise<TxProfileResult>;
    simulateTx(txRequest: TxExecutionRequest, simulatePublic: boolean, msgSender?: AztecAddress, skipTxValidation?: boolean, skipFeeEnforcement?: boolean): Promise<TxSimulationResult>;
    sendTx(tx: Tx): Promise<TxHash>;
    getCurrentBaseFees(): Promise<GasFees>;
    simulateUtility(functionName: string, args: any[], to: AztecAddress, authwits?: AuthWitness[], from?: AztecAddress | undefined): Promise<AbiDecoded>;
    getNodeInfo(): Promise<NodeInfo>;
    getPXEInfo(): Promise<PXEInfo>;
    getContractClassMetadata(id: Fr, includeArtifact?: boolean): Promise<ContractClassMetadata>;
    getContractMetadata(address: AztecAddress): Promise<ContractMetadata>;
    getTxReceipt(txHash: TxHash): Promise<TxReceipt>;
    getPrivateEvents<T>(contractAddress: AztecAddress, event: EventMetadataDefinition, from: number, limit: number, recipients?: AztecAddress[]): Promise<T[]>;
    getPublicEvents<T>(event: EventMetadataDefinition, from: number, limit: number): Promise<T[]>;
}
//# sourceMappingURL=base_wallet.d.ts.map