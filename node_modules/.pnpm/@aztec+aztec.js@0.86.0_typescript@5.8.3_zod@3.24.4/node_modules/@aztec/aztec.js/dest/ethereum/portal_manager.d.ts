import type { ExtendedViemWalletClient, ViemContract } from '@aztec/ethereum';
import { EthAddress } from '@aztec/foundation/eth-address';
import { Fr } from '@aztec/foundation/fields';
import type { Logger } from '@aztec/foundation/log';
import type { SiblingPath } from '@aztec/foundation/trees';
import { TokenPortalAbi } from '@aztec/l1-artifacts/TokenPortalAbi';
import type { AztecAddress } from '@aztec/stdlib/aztec-address';
import type { PXE } from '@aztec/stdlib/interfaces/client';
import { type Hex } from 'viem';
import type { Wallet } from '../index.js';
/** L1 to L2 message info to claim it on L2. */
export type L2Claim = {
    /** Secret for claiming. */
    claimSecret: Fr;
    /** Hash of the secret for claiming. */
    claimSecretHash: Fr;
    /** Hash of the message. */
    messageHash: Hex;
    /** Leaf index in the L1 to L2 message tree. */
    messageLeafIndex: bigint;
};
/** L1 to L2 message info that corresponds to an amount to claim. */
export type L2AmountClaim = L2Claim & {
    claimAmount: bigint;
};
/** L1 to L2 message info that corresponds to an amount to claim with associated recipient. */
export type L2AmountClaimWithRecipient = L2AmountClaim & {
    /** Address that will receive the newly minted notes. */ recipient: AztecAddress;
};
/** Generates a pair secret and secret hash */
export declare function generateClaimSecret(logger?: Logger): Promise<[Fr, Fr]>;
/** Helper for managing an ERC20 on L1. */
export declare class L1TokenManager {
    /** Address of the ERC20 contract. */
    readonly tokenAddress: EthAddress;
    /** Address of the handler/faucet contract. */
    readonly handlerAddress: EthAddress | undefined;
    private readonly extendedClient;
    private logger;
    private contract;
    private handler;
    constructor(
    /** Address of the ERC20 contract. */
    tokenAddress: EthAddress, 
    /** Address of the handler/faucet contract. */
    handlerAddress: EthAddress | undefined, extendedClient: ExtendedViemWalletClient, logger: Logger);
    /** Returns the amount of tokens available to mint via the handler.
     * @throws if the handler is not provided.
     */
    getMintAmount(): Promise<bigint>;
    /**
     * Returns the balance of the given address.
     * @param address - Address to get the balance of.
     */
    getL1TokenBalance(address: Hex): Promise<bigint>;
    /**
     * Mints a fixed amount of tokens for the given address. Returns once the tx has been mined.
     * @param address - Address to mint the tokens for.
     * @param addressName - Optional name of the address for logging.
     */
    mint(address: Hex, addressName?: string): Promise<void>;
    /**
     * Approves tokens for the given address. Returns once the tx has been mined.
     * @param amount - Amount to approve.
     * @param address - Address to approve the tokens for.
     * @param addressName - Optional name of the address for logging.
     */
    approve(amount: bigint, address: Hex, addressName?: string): Promise<void>;
}
/** Helper for interacting with the FeeJuicePortal on L1. */
export declare class L1FeeJuicePortalManager {
    private readonly extendedClient;
    private readonly logger;
    private readonly tokenManager;
    private readonly contract;
    constructor(portalAddress: EthAddress, tokenAddress: EthAddress, handlerAddress: EthAddress, extendedClient: ExtendedViemWalletClient, logger: Logger);
    /** Returns the associated token manager for the L1 ERC20. */
    getTokenManager(): L1TokenManager;
    /**
     * Bridges fee juice from L1 to L2 publicly. Handles L1 ERC20 approvals. Returns once the tx has been mined.
     * @param to - Address to send the tokens to on L2.
     * @param amount - Amount of tokens to send.
     * @param mint - Whether to mint the tokens before sending (only during testing).
     */
    bridgeTokensPublic(to: AztecAddress, amount: bigint | undefined, mint?: boolean): Promise<L2AmountClaim>;
    /**
     * Creates a new instance
     * @param walletOrPxe - Wallet or PXE client used for retrieving the L1 contract addresses.
     * @param extendedClient - Wallet client, extended with public actions.
     * @param logger - Logger.
     */
    static new(walletOrPxe: Wallet | PXE, extendedClient: ExtendedViemWalletClient, logger: Logger): Promise<L1FeeJuicePortalManager>;
}
/** Helper for interacting with a test TokenPortal on L1 for sending tokens to L2. */
export declare class L1ToL2TokenPortalManager {
    protected extendedClient: ExtendedViemWalletClient;
    protected logger: Logger;
    protected readonly portal: ViemContract<typeof TokenPortalAbi>;
    protected readonly tokenManager: L1TokenManager;
    constructor(portalAddress: EthAddress, tokenAddress: EthAddress, handlerAddress: EthAddress | undefined, extendedClient: ExtendedViemWalletClient, logger: Logger);
    /** Returns the token manager for the underlying L1 token. */
    getTokenManager(): L1TokenManager;
    /**
     * Bridges tokens from L1 to L2. Handles token approvals. Returns once the tx has been mined.
     * @param to - Address to send the tokens to on L2.
     * @param amount - Amount of tokens to send.
     * @param mint - Whether to mint the tokens before sending (only during testing).
     */
    bridgeTokensPublic(to: AztecAddress, amount: bigint, mint?: boolean): Promise<L2AmountClaim>;
    /**
     * Bridges tokens from L1 to L2 privately. Handles token approvals. Returns once the tx has been mined.
     * @param to - Address to send the tokens to on L2.
     * @param amount - Amount of tokens to send.
     * @param mint - Whether to mint the tokens before sending (only during testing).
     */
    bridgeTokensPrivate(to: AztecAddress, amount: bigint, mint?: boolean): Promise<L2AmountClaimWithRecipient>;
    private bridgeSetup;
}
/** Helper for interacting with a test TokenPortal on L1 for both withdrawing from and bridging to L2. */
export declare class L1TokenPortalManager extends L1ToL2TokenPortalManager {
    private readonly outbox;
    constructor(portalAddress: EthAddress, tokenAddress: EthAddress, handlerAddress: EthAddress | undefined, outboxAddress: EthAddress, extendedClient: ExtendedViemWalletClient, logger: Logger);
    /**
     * Withdraws funds from the portal by consuming an L2 to L1 message. Returns once the tx is mined on L1.
     * @param amount - Amount to withdraw.
     * @param recipient - Who will receive the funds.
     * @param blockNumber - L2 block number of the message.
     * @param messageIndex - Index of the message.
     * @param siblingPath - Sibling path of the message.
     */
    withdrawFunds(amount: bigint, recipient: EthAddress, blockNumber: bigint, messageIndex: bigint, siblingPath: SiblingPath<number>): Promise<void>;
    /**
     * Computes the L2 to L1 message leaf for the given parameters.
     * @param amount - Amount to bridge.
     * @param recipient - Recipient on L1.
     * @param l2Bridge - Address of the L2 bridge.
     * @param callerOnL1 - Caller address on L1.
     */
    getL2ToL1MessageLeaf(amount: bigint, recipient: EthAddress, l2Bridge: AztecAddress, callerOnL1?: EthAddress): Promise<Fr>;
}
//# sourceMappingURL=portal_manager.d.ts.map