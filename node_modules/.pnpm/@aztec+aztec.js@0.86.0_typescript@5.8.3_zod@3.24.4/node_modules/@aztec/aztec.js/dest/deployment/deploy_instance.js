import { getDeployerContract } from '../contract/protocol_contracts.js';
/**
 * Sets up a call to the canonical deployer contract to publicly deploy a contract instance.
 * @param wallet - The wallet to use for the deployment.
 * @param instance - The instance to deploy.
 */ export async function deployInstance(wallet, instance) {
    const deployerContract = await getDeployerContract(wallet);
    const { salt, currentContractClassId: contractClassId, publicKeys, deployer } = instance;
    const isUniversalDeploy = deployer.isZero();
    if (!isUniversalDeploy && !wallet.getAddress().equals(deployer)) {
        throw new Error(`Expected deployer ${deployer.toString()} does not match sender wallet ${wallet.getAddress().toString()}`);
    }
    return deployerContract.methods.deploy(salt, contractClassId, instance.initializationHash, publicKeys, isUniversalDeploy);
}
