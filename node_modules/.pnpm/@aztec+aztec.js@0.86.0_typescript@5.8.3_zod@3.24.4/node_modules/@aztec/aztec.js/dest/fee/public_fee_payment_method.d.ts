import type { FeePaymentMethod } from '@aztec/entrypoints/interfaces';
import { ExecutionPayload } from '@aztec/entrypoints/payload';
import { AztecAddress } from '@aztec/stdlib/aztec-address';
import { GasSettings } from '@aztec/stdlib/gas';
import type { AccountWallet } from '../wallet/account_wallet.js';
/**
 * Holds information about how the fee for a transaction is to be paid.
 */
export declare class PublicFeePaymentMethod implements FeePaymentMethod {
    /**
     * Address which will hold the fee payment.
     */
    protected paymentContract: AztecAddress;
    /**
     * An auth witness provider to authorize fee payments
     */
    protected wallet: AccountWallet;
    private assetPromise;
    constructor(
    /**
     * Address which will hold the fee payment.
     */
    paymentContract: AztecAddress, 
    /**
     * An auth witness provider to authorize fee payments
     */
    wallet: AccountWallet);
    /**
     * The asset used to pay the fee.
     * @returns The asset used to pay the fee.
     */
    getAsset(): Promise<AztecAddress>;
    getFeePayer(): Promise<AztecAddress>;
    /**
     * Creates an execution payload to pay the fee using a public function through an FPC in the desired asset
     * @param gasSettings - The gas settings.
     * @returns An execution payload that contains the required function calls.
     */
    getExecutionPayload(gasSettings: GasSettings): Promise<ExecutionPayload>;
}
//# sourceMappingURL=public_fee_payment_method.d.ts.map