import type { FeePaymentMethod } from '@aztec/entrypoints/interfaces';
import { ExecutionPayload } from '@aztec/entrypoints/payload';
import type { AztecAddress } from '@aztec/stdlib/aztec-address';
import type { GasSettings } from '@aztec/stdlib/gas';
import type { Wallet } from '../wallet/wallet.js';
/**
 * Holds information about how the fee for a transaction is to be paid.
 */
export declare class PrivateFeePaymentMethod implements FeePaymentMethod {
    /**
     * Address which will hold the fee payment.
     */
    private paymentContract;
    /**
     * An auth witness provider to authorize fee payments
     */
    private wallet;
    /**
     * If true, the max fee will be set to 1.
     * TODO(#7694): Remove this param once the lacking feature in TXE is implemented.
     */
    private setMaxFeeToOne;
    private assetPromise;
    constructor(
    /**
     * Address which will hold the fee payment.
     */
    paymentContract: AztecAddress, 
    /**
     * An auth witness provider to authorize fee payments
     */
    wallet: Wallet, 
    /**
     * If true, the max fee will be set to 1.
     * TODO(#7694): Remove this param once the lacking feature in TXE is implemented.
     */
    setMaxFeeToOne?: boolean);
    /**
     * The asset used to pay the fee.
     * @returns The asset used to pay the fee.
     */
    getAsset(): Promise<AztecAddress>;
    getFeePayer(): Promise<AztecAddress>;
    /**
     * Creates an execution payload to pay the fee using a private function through an FPC in the desired asset
     * @param gasSettings - The gas settings.
     * @returns An execution payload that contains the required function calls and auth witnesses.
     */
    getExecutionPayload(gasSettings: GasSettings): Promise<ExecutionPayload>;
}
//# sourceMappingURL=private_fee_payment_method.d.ts.map