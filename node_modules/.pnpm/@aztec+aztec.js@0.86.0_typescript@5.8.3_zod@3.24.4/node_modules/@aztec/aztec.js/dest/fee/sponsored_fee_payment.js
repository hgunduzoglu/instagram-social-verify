import { ExecutionPayload } from '@aztec/entrypoints/payload';
import { FunctionSelector, FunctionType } from '@aztec/stdlib/abi';
/**
 * A fee payment method that uses a contract that blindly sponsors transactions.
 * This contract is expected to be prefunded in testing environments.
 */ export class SponsoredFeePaymentMethod {
    paymentContract;
    constructor(paymentContract){
        this.paymentContract = paymentContract;
    }
    getAsset() {
        throw new Error('Asset is not required for sponsored fpc.');
    }
    getFeePayer() {
        return Promise.resolve(this.paymentContract);
    }
    async getExecutionPayload() {
        return new ExecutionPayload([
            {
                name: 'sponsor_unconditionally',
                to: this.paymentContract,
                selector: await FunctionSelector.fromSignature('sponsor_unconditionally()'),
                type: FunctionType.PRIVATE,
                isStatic: false,
                args: [],
                returnTypes: []
            }
        ], [], []);
    }
}
