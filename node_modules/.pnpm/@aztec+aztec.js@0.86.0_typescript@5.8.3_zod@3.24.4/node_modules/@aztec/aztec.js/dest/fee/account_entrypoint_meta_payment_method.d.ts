import type { AuthWitnessProvider, FeePaymentMethod } from '@aztec/entrypoints/interfaces';
import { ExecutionPayload } from '@aztec/entrypoints/payload';
import { type ContractArtifact, type FunctionArtifact } from '@aztec/stdlib/abi';
import { AztecAddress } from '@aztec/stdlib/aztec-address';
import type { GasSettings } from '@aztec/stdlib/gas';
/**
 * Fee payment method that allows a contract to pay for its own deployment
 * It works by rerouting the provided fee payment method through the account's entrypoint,
 * which sets itself as fee payer.
 *
 * Usually, in order to pay fees it is necessary to obtain an ExecutionPayload that encodes the necessary information
 * that is sent to the user's account entrypoint, that has plumbing to handle a fee payload.
 * If there's no account contract yet (it's being deployed) a MultiCallContract is used, which doesn't have a concept of fees or
 * how to handle this payload.
 * HOWEVER, the account contract's entrypoint does, so this method reshapes that fee payload into a call to the account contract entrypoint
 * being deployed with the original fee payload.
 *
 * This class can be seen in action in AccountManager.ts#getSelfPaymentMethod
 */
export declare class AccountEntrypointMetaPaymentMethod implements FeePaymentMethod {
    private artifact;
    private authWitnessProvider;
    private feePaymentNameOrArtifact;
    private accountAddress;
    private paymentMethod;
    constructor(artifact: ContractArtifact, authWitnessProvider: AuthWitnessProvider, feePaymentNameOrArtifact: string | FunctionArtifact, accountAddress: AztecAddress, paymentMethod: FeePaymentMethod);
    getAsset(): Promise<AztecAddress>;
    getExecutionPayload(gasSettings: GasSettings): Promise<ExecutionPayload>;
    getFeePayer(gasSettings: GasSettings): Promise<AztecAddress>;
}
//# sourceMappingURL=account_entrypoint_meta_payment_method.d.ts.map