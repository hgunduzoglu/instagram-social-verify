/**
 * Represents data necessary to perform an action in the network successfully.
 * This class can be considered Aztec's "minimal execution unit".
 * */ export class ExecutionPayload {
    calls;
    authWitnesses;
    capsules;
    extraHashedArgs;
    constructor(/** The function calls to be executed. */ calls, /** Any transient auth witnesses needed for this execution */ authWitnesses, /** Data passed through an oracle for this execution. */ capsules, /** Extra hashed values to be injected in the execution cache */ extraHashedArgs = []){
        this.calls = calls;
        this.authWitnesses = authWitnesses;
        this.capsules = capsules;
        this.extraHashedArgs = extraHashedArgs;
    }
    static empty() {
        return new ExecutionPayload([], [], []);
    }
}
/**
 * Merges an array ExecutionPayloads combining their calls, authWitnesses, capsules and extraArgHashes.
 */ export function mergeExecutionPayloads(requests) {
    const calls = requests.map((r)=>r.calls).flat();
    const combinedAuthWitnesses = requests.map((r)=>r.authWitnesses ?? []).flat();
    const combinedCapsules = requests.map((r)=>r.capsules ?? []).flat();
    const combinedextraHashedArgs = requests.map((r)=>r.extraHashedArgs ?? []).flat();
    return new ExecutionPayload(calls, combinedAuthWitnesses, combinedCapsules, combinedextraHashedArgs);
}
