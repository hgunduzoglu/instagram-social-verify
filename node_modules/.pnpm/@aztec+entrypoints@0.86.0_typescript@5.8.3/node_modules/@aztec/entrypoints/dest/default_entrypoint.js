import { FunctionType } from '@aztec/stdlib/abi';
import { HashedValues, TxContext, TxExecutionRequest } from '@aztec/stdlib/tx';
/**
 * Default implementation of the entrypoint interface. It calls a function on a contract directly
 */ export class DefaultEntrypoint {
    chainId;
    rollupVersion;
    constructor(chainId, rollupVersion){
        this.chainId = chainId;
        this.rollupVersion = rollupVersion;
    }
    async createTxExecutionRequest(exec, fee, options) {
        if (options.nonce || options.cancellable !== undefined) {
            throw new Error('TxExecutionOptions are not supported in DefaultEntrypoint');
        }
        // Initial request with calls, authWitnesses and capsules
        const { calls, authWitnesses, capsules, extraHashedArgs } = exec;
        if (calls.length > 1) {
            throw new Error(`Expected a single call, got ${calls.length}`);
        }
        const call = calls[0];
        // Hash the arguments for the function call
        const hashedArguments = [
            await HashedValues.fromArgs(call.args)
        ];
        if (call.type !== FunctionType.PRIVATE) {
            throw new Error('Public entrypoints are not allowed');
        }
        // Assemble the tx request
        return new TxExecutionRequest(call.to, call.selector, hashedArguments[0].hash, new TxContext(this.chainId, this.rollupVersion, fee.gasSettings), [
            ...hashedArguments,
            ...extraHashedArgs
        ], authWitnesses, capsules);
    }
}
