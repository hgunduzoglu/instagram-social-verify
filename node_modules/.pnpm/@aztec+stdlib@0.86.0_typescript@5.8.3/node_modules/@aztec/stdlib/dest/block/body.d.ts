/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import type { Fr } from '@aztec/foundation/fields';
import { BufferReader } from '@aztec/foundation/serialize';
import { inspect } from 'util';
import type { ZodFor } from '../schemas/index.js';
import { TxEffect } from '../tx/tx_effect.js';
export declare class Body {
    txEffects: TxEffect[];
    constructor(txEffects: TxEffect[]);
    equals(other: Body): boolean;
    static get schema(): ZodFor<Body>;
    /**
     * Serializes a block body
     * @returns A serialized L2 block body.
     */
    toBuffer(): Buffer;
    /**
     * Deserializes a block from a buffer
     * @returns A deserialized L2 block.
     */
    static fromBuffer(buf: Buffer | BufferReader): Body;
    /**
     * Returns a flat packed array of fields of all tx effects - used for blobs.
     */
    toBlobFields(): Fr[];
    /**
     * Decodes a block from blob fields.
     */
    static fromBlobFields(fields: Fr[]): Body;
    [inspect.custom](): string;
    static random(txsPerBlock?: number, numPublicCallsPerTx?: number, numPublicLogsPerCall?: number): Promise<Body>;
    static empty(): Body;
}
//# sourceMappingURL=body.d.ts.map