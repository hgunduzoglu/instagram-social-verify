import { Signature } from '@aztec/foundation/eth-signature';
import { L2Block } from '@aztec/stdlib/block';
import { z } from 'zod';
export type L1PublishedData = {
    blockNumber: bigint;
    timestamp: bigint;
    blockHash: string;
};
export type PublishedL2Block = {
    block: L2Block;
    l1: L1PublishedData;
    signatures: Signature[];
};
export declare const PublishedL2BlockSchema: z.ZodObject<{
    block: z.ZodEffects<z.ZodObject<{
        archive: z.ZodEffects<z.ZodObject<{
            root: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
            nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            root: import("@aztec/foundation/schemas").Fr;
            nextAvailableLeafIndex: number;
        }, {
            root: string;
            nextAvailableLeafIndex: string | number | bigint;
        }>, import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot, {
            root: string;
            nextAvailableLeafIndex: string | number | bigint;
        }>;
        header: import("@aztec/foundation/schemas").ZodFor<import("../tx/block_header.js").BlockHeader>;
        body: import("@aztec/foundation/schemas").ZodFor<import("@aztec/stdlib/block").Body>;
    }, "strip", z.ZodTypeAny, {
        archive: import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot;
        header: import("../tx/block_header.js").BlockHeader;
        body: import("@aztec/stdlib/block").Body;
    }, {
        archive: {
            root: string;
            nextAvailableLeafIndex: string | number | bigint;
        };
        header?: any;
        body?: any;
    }>, L2Block, {
        archive: {
            root: string;
            nextAvailableLeafIndex: string | number | bigint;
        };
        header?: any;
        body?: any;
    }>;
    l1: z.ZodObject<{
        blockNumber: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
        timestamp: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
        blockHash: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        blockNumber: bigint;
        timestamp: bigint;
        blockHash: string;
    }, {
        blockNumber: string | number | bigint;
        timestamp: string | number | bigint;
        blockHash: string;
    }>;
    signatures: z.ZodArray<z.ZodEffects<z.ZodEffects<z.ZodEffects<z.ZodString, `0x${string}`, string>, `0x${string}`, string>, Signature, string>, "many">;
}, "strip", z.ZodTypeAny, {
    block: L2Block;
    l1: {
        blockNumber: bigint;
        timestamp: bigint;
        blockHash: string;
    };
    signatures: Signature[];
}, {
    block: {
        archive: {
            root: string;
            nextAvailableLeafIndex: string | number | bigint;
        };
        header?: any;
        body?: any;
    };
    l1: {
        blockNumber: string | number | bigint;
        timestamp: string | number | bigint;
        blockHash: string;
    };
    signatures: string[];
}>;
export declare function randomPublishedL2Block(l2BlockNumber: number): Promise<PublishedL2Block>;
//# sourceMappingURL=published_l2_block.d.ts.map