import { Fr } from '@aztec/foundation/fields';
import { BufferReader, serializeToBuffer } from '@aztec/foundation/serialize';
import { bufferToHex, hexToBuffer } from '@aztec/foundation/string';
import { z } from 'zod';
import { AztecAddress } from '../aztec-address/index.js';
import { schemas } from '../schemas/index.js';
import { TxHash } from '../tx/tx_hash.js';
import { Note } from './note.js';
/**
 * A note with contextual data.
 */ export class ExtendedNote {
    note;
    recipient;
    contractAddress;
    storageSlot;
    txHash;
    constructor(/** The note as emitted from the Noir contract. */ note, /** The address whose public key was used to encrypt the note. */ recipient, /** The contract address this note is created in. */ contractAddress, /** The specific storage location of the note on the contract. */ storageSlot, /** The hash of the tx the note was created in. */ txHash){
        this.note = note;
        this.recipient = recipient;
        this.contractAddress = contractAddress;
        this.storageSlot = storageSlot;
        this.txHash = txHash;
    }
    toBuffer() {
        return serializeToBuffer([
            this.note,
            this.recipient,
            this.contractAddress,
            this.storageSlot,
            this.txHash
        ]);
    }
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        const note = reader.readObject(Note);
        const recipient = reader.readObject(AztecAddress);
        const contractAddress = reader.readObject(AztecAddress);
        const storageSlot = reader.readObject(Fr);
        const txHash = reader.readObject(TxHash);
        return new this(note, recipient, contractAddress, storageSlot, txHash);
    }
    static get schema() {
        return z.object({
            note: Note.schema,
            recipient: schemas.AztecAddress,
            contractAddress: schemas.AztecAddress,
            storageSlot: schemas.Fr,
            txHash: TxHash.schema
        }).transform(({ note, recipient, contractAddress, storageSlot, txHash })=>{
            return new ExtendedNote(note, recipient, contractAddress, storageSlot, txHash);
        });
    }
    toString() {
        return bufferToHex(this.toBuffer());
    }
    static fromString(str) {
        return ExtendedNote.fromBuffer(hexToBuffer(str));
    }
    static async random() {
        return new ExtendedNote(Note.random(), await AztecAddress.random(), await AztecAddress.random(), Fr.random(), TxHash.random());
    }
}
export class UniqueNote extends ExtendedNote {
    nonce;
    constructor(/** The note as emitted from the Noir contract. */ note, /** The recipient whose public key was used to encrypt the note. */ recipient, /** The contract address this note is created in. */ contractAddress, /** The specific storage location of the note on the contract. */ storageSlot, /** The hash of the tx the note was created in. */ txHash, /** The nonce of the note. */ nonce){
        super(note, recipient, contractAddress, storageSlot, txHash), this.nonce = nonce;
    }
    static get schema() {
        return z.object({
            note: Note.schema,
            recipient: schemas.AztecAddress,
            contractAddress: schemas.AztecAddress,
            storageSlot: schemas.Fr,
            txHash: TxHash.schema,
            nonce: schemas.Fr
        }).transform(({ note, recipient, contractAddress, storageSlot, txHash, nonce })=>{
            return new UniqueNote(note, recipient, contractAddress, storageSlot, txHash, nonce);
        });
    }
    toBuffer() {
        return serializeToBuffer([
            this.note,
            this.recipient,
            this.contractAddress,
            this.storageSlot,
            this.txHash,
            this.nonce
        ]);
    }
    static async random() {
        return new UniqueNote(Note.random(), await AztecAddress.random(), await AztecAddress.random(), Fr.random(), TxHash.random(), Fr.random());
    }
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        const note = reader.readObject(Note);
        const recipient = reader.readObject(AztecAddress);
        const contractAddress = reader.readObject(AztecAddress);
        const storageSlot = reader.readObject(Fr);
        const txHash = reader.readObject(TxHash);
        const nonce = reader.readObject(Fr);
        return new this(note, recipient, contractAddress, storageSlot, txHash, nonce);
    }
    static fromString(str) {
        return UniqueNote.fromBuffer(hexToBuffer(str));
    }
}
