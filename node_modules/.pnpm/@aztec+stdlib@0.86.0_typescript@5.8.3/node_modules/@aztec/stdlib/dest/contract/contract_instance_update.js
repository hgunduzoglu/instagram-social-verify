import { Fr } from '@aztec/foundation/fields';
import { BufferReader, serializeToBuffer } from '@aztec/foundation/serialize';
export class SerializableContractInstanceUpdate {
    prevContractClassId;
    newContractClassId;
    blockOfChange;
    constructor(instance){
        this.prevContractClassId = instance.prevContractClassId;
        this.newContractClassId = instance.newContractClassId;
        this.blockOfChange = instance.blockOfChange;
    }
    toBuffer() {
        return serializeToBuffer(this.prevContractClassId, this.newContractClassId, this.blockOfChange);
    }
    static fromBuffer(bufferOrReader) {
        const reader = BufferReader.asReader(bufferOrReader);
        return new SerializableContractInstanceUpdate({
            prevContractClassId: reader.readObject(Fr),
            newContractClassId: reader.readObject(Fr),
            blockOfChange: reader.readNumber()
        });
    }
    static random(opts = {}) {
        return new SerializableContractInstanceUpdate({
            prevContractClassId: Fr.random(),
            newContractClassId: Fr.random(),
            blockOfChange: Math.floor(Math.random() * 1000),
            ...opts
        });
    }
    static default() {
        return new SerializableContractInstanceUpdate({
            prevContractClassId: Fr.zero(),
            newContractClassId: Fr.zero(),
            blockOfChange: 0
        });
    }
}
