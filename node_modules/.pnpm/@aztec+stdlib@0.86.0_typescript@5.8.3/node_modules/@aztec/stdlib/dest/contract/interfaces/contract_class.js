import { schemas } from '@aztec/foundation/schemas';
import { z } from 'zod';
import { FunctionSelector } from '../../abi/index.js';
const VERSION = 1;
const PrivateFunctionSchema = z.object({
    selector: FunctionSelector.schema,
    vkHash: schemas.Fr
});
const ExecutablePrivateFunctionSchema = PrivateFunctionSchema.and(z.object({
    bytecode: schemas.Buffer
}));
const UtilityFunctionSchema = z.object({
    /** lala */ selector: FunctionSelector.schema,
    bytecode: schemas.Buffer
});
const PrivateFunctionMembershipProofSchema = z.object({
    artifactMetadataHash: schemas.Fr,
    functionMetadataHash: schemas.Fr,
    utilityFunctionsTreeRoot: schemas.Fr,
    privateFunctionTreeSiblingPath: z.array(schemas.Fr),
    privateFunctionTreeLeafIndex: schemas.Integer,
    artifactTreeSiblingPath: z.array(schemas.Fr),
    artifactTreeLeafIndex: schemas.Integer
});
const UtilityFunctionMembershipProofSchema = z.object({
    artifactMetadataHash: schemas.Fr,
    functionMetadataHash: schemas.Fr,
    privateFunctionsArtifactTreeRoot: schemas.Fr,
    artifactTreeSiblingPath: z.array(schemas.Fr),
    artifactTreeLeafIndex: schemas.Integer
});
export const ContractClassSchema = z.object({
    version: z.literal(VERSION),
    artifactHash: schemas.Fr,
    privateFunctions: z.array(PrivateFunctionSchema),
    packedBytecode: schemas.Buffer
});
export const ContractClassWithIdSchema = ContractClassSchema.extend({
    id: schemas.Fr
});
export const ContractClassPublicSchema = z.object({
    id: schemas.Fr,
    privateFunctionsRoot: schemas.Fr,
    privateFunctions: z.array(ExecutablePrivateFunctionSchema.and(PrivateFunctionMembershipProofSchema)),
    utilityFunctions: z.array(UtilityFunctionSchema.and(UtilityFunctionMembershipProofSchema))
}).and(ContractClassSchema.omit({
    privateFunctions: true
}));
