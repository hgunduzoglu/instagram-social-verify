import type { Fr } from '@aztec/foundation/fields';
import { z } from 'zod';
import type { AztecAddress } from '../../aztec-address/index.js';
import { PublicKeys } from '../../keys/public_keys.js';
import { type ZodFor } from '../../schemas/index.js';
declare const VERSION: 1;
/**
 * A contract instance is a concrete deployment of a contract class. It always references a contract class,
 * which dictates what code it executes when called. It has state (both private and public), as well as an
 * address that acts as its identifier. It can be called into. It may have encryption and nullifying public keys.
 */
export interface ContractInstance {
    /** Version identifier. Initially one, bumped for any changes to the contract instance struct. */
    version: typeof VERSION;
    /** User-generated pseudorandom value for uniqueness. */
    salt: Fr;
    /** Optional deployer address or zero if this was a universal deploy. */
    deployer: AztecAddress;
    /** Identifier of the contract class for this instance. */
    currentContractClassId: Fr;
    /** Identifier of the original (at deployment) contract class for this instance */
    originalContractClassId: Fr;
    /** Hash of the selector and arguments to the constructor. */
    initializationHash: Fr;
    /** Public keys associated with this instance. */
    publicKeys: PublicKeys;
}
export type ContractInstanceWithAddress = ContractInstance & {
    address: AztecAddress;
};
export declare const ContractInstanceSchema: z.ZodObject<{
    version: z.ZodLiteral<1>;
    salt: ZodFor<Fr>;
    deployer: ZodFor<AztecAddress>;
    currentContractClassId: ZodFor<Fr>;
    originalContractClassId: ZodFor<Fr>;
    initializationHash: ZodFor<Fr>;
    publicKeys: z.ZodEffects<z.ZodObject<{
        masterNullifierPublicKey: z.ZodType<import("@aztec/foundation/fields").Point, any, string>;
        masterIncomingViewingPublicKey: z.ZodType<import("@aztec/foundation/fields").Point, any, string>;
        masterOutgoingViewingPublicKey: z.ZodType<import("@aztec/foundation/fields").Point, any, string>;
        masterTaggingPublicKey: z.ZodType<import("@aztec/foundation/fields").Point, any, string>;
    }, "strip", z.ZodTypeAny, {
        masterNullifierPublicKey: import("@aztec/foundation/fields").Point;
        masterIncomingViewingPublicKey: import("@aztec/foundation/fields").Point;
        masterOutgoingViewingPublicKey: import("@aztec/foundation/fields").Point;
        masterTaggingPublicKey: import("@aztec/foundation/fields").Point;
    }, {
        masterNullifierPublicKey: string;
        masterIncomingViewingPublicKey: string;
        masterOutgoingViewingPublicKey: string;
        masterTaggingPublicKey: string;
    }>, PublicKeys, {
        masterNullifierPublicKey: string;
        masterIncomingViewingPublicKey: string;
        masterOutgoingViewingPublicKey: string;
        masterTaggingPublicKey: string;
    }>;
}, "strip", z.ZodTypeAny, {
    version: 1;
    publicKeys: PublicKeys;
    salt: Fr;
    deployer: AztecAddress;
    currentContractClassId: Fr;
    originalContractClassId: Fr;
    initializationHash: Fr;
}, {
    version: 1;
    publicKeys: {
        masterNullifierPublicKey: string;
        masterIncomingViewingPublicKey: string;
        masterOutgoingViewingPublicKey: string;
        masterTaggingPublicKey: string;
    };
    salt?: any;
    deployer?: any;
    currentContractClassId?: any;
    originalContractClassId?: any;
    initializationHash?: any;
}>;
export declare const ContractInstanceWithAddressSchema: z.ZodIntersection<z.ZodObject<{
    version: z.ZodLiteral<1>;
    salt: ZodFor<Fr>;
    deployer: ZodFor<AztecAddress>;
    currentContractClassId: ZodFor<Fr>;
    originalContractClassId: ZodFor<Fr>;
    initializationHash: ZodFor<Fr>;
    publicKeys: z.ZodEffects<z.ZodObject<{
        masterNullifierPublicKey: z.ZodType<import("@aztec/foundation/fields").Point, any, string>;
        masterIncomingViewingPublicKey: z.ZodType<import("@aztec/foundation/fields").Point, any, string>;
        masterOutgoingViewingPublicKey: z.ZodType<import("@aztec/foundation/fields").Point, any, string>;
        masterTaggingPublicKey: z.ZodType<import("@aztec/foundation/fields").Point, any, string>;
    }, "strip", z.ZodTypeAny, {
        masterNullifierPublicKey: import("@aztec/foundation/fields").Point;
        masterIncomingViewingPublicKey: import("@aztec/foundation/fields").Point;
        masterOutgoingViewingPublicKey: import("@aztec/foundation/fields").Point;
        masterTaggingPublicKey: import("@aztec/foundation/fields").Point;
    }, {
        masterNullifierPublicKey: string;
        masterIncomingViewingPublicKey: string;
        masterOutgoingViewingPublicKey: string;
        masterTaggingPublicKey: string;
    }>, PublicKeys, {
        masterNullifierPublicKey: string;
        masterIncomingViewingPublicKey: string;
        masterOutgoingViewingPublicKey: string;
        masterTaggingPublicKey: string;
    }>;
}, "strip", z.ZodTypeAny, {
    version: 1;
    publicKeys: PublicKeys;
    salt: Fr;
    deployer: AztecAddress;
    currentContractClassId: Fr;
    originalContractClassId: Fr;
    initializationHash: Fr;
}, {
    version: 1;
    publicKeys: {
        masterNullifierPublicKey: string;
        masterIncomingViewingPublicKey: string;
        masterOutgoingViewingPublicKey: string;
        masterTaggingPublicKey: string;
    };
    salt?: any;
    deployer?: any;
    currentContractClassId?: any;
    originalContractClassId?: any;
    initializationHash?: any;
}>, z.ZodObject<{
    address: ZodFor<AztecAddress>;
}, "strip", z.ZodTypeAny, {
    address: AztecAddress;
}, {
    address?: any;
}>>;
export {};
//# sourceMappingURL=contract_instance.d.ts.map