/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import { type FieldsOf } from '@aztec/foundation/array';
import { SchnorrSignature } from '@aztec/foundation/crypto';
import { EthAddress } from '@aztec/foundation/eth-address';
import { Fr, GrumpkinScalar, Point } from '@aztec/foundation/fields';
import type { Bufferable } from '@aztec/foundation/serialize';
import { MembershipWitness } from '@aztec/foundation/trees';
import { FunctionSelector } from '../abi/function_selector.js';
import { ContractStorageRead } from '../avm/contract_storage_read.js';
import { ContractStorageUpdateRequest } from '../avm/contract_storage_update_request.js';
import { AvmAppendLeavesHint, AvmBytecodeCommitmentHint, AvmCircuitInputs, AvmCommitCheckpointHint, AvmContractClassHint, AvmContractInstanceHint, AvmCreateCheckpointHint, AvmEnqueuedCallHint, AvmExecutionHints, AvmGetLeafPreimageHintNullifierTree, AvmGetLeafPreimageHintPublicDataTree, AvmGetLeafValueHint, AvmGetPreviousValueIndexHint, AvmGetSiblingPathHint, AvmRevertCheckpointHint, AvmSequentialInsertHintNullifierTree, AvmSequentialInsertHintPublicDataTree, AvmTxHint } from '../avm/index.js';
import { PublicDataRead } from '../avm/public_data_read.js';
import { PublicDataWrite } from '../avm/public_data_write.js';
import { AztecAddress } from '../aztec-address/index.js';
import { type ContractClassPublic, type ContractInstanceWithAddress, type ExecutablePrivateFunctionWithMembershipProof, type UtilityFunctionWithMembershipProof } from '../contract/index.js';
import { Gas, GasFees, GasSettings } from '../gas/index.js';
import type { MerkleTreeReadOperations } from '../interfaces/merkle_tree_operations.js';
import { RollupValidationRequests } from '../kernel/hints/rollup_validation_requests.js';
import { CombinedConstantData, PrivateKernelTailCircuitPublicInputs, PrivateToPublicAccumulatedData, PrivateToRollupAccumulatedData } from '../kernel/index.js';
import { PrivateCircuitPublicInputs } from '../kernel/private_circuit_public_inputs.js';
import { PrivateToRollupKernelCircuitPublicInputs } from '../kernel/private_to_rollup_kernel_circuit_public_inputs.js';
import { PublicCallRequest } from '../kernel/public_call_request.js';
import { PublicKeys } from '../keys/index.js';
import { L2ToL1Message, ScopedL2ToL1Message } from '../messaging/l2_to_l1_message.js';
import { BaseParityInputs } from '../parity/base_parity_inputs.js';
import { ParityPublicInputs } from '../parity/parity_public_inputs.js';
import { RootParityInput } from '../parity/root_parity_input.js';
import { RootParityInputs } from '../parity/root_parity_inputs.js';
import { Proof } from '../proofs/proof.js';
import { BaseOrMergeRollupPublicInputs } from '../rollup/base_or_merge_rollup_public_inputs.js';
import { BlockMergeRollupInputs } from '../rollup/block_merge_rollup.js';
import { BlockRootOrBlockMergePublicInputs, FeeRecipient } from '../rollup/block_root_or_block_merge_public_inputs.js';
import { BlockRootRollupInputs, SingleTxBlockRootRollupInputs } from '../rollup/block_root_rollup.js';
import { ConstantRollupData } from '../rollup/constant_rollup_data.js';
import { EmptyBlockRootRollupInputs } from '../rollup/empty_block_root_rollup_inputs.js';
import { MergeRollupInputs } from '../rollup/merge_rollup.js';
import { PreviousRollupBlockData } from '../rollup/previous_rollup_block_data.js';
import { PreviousRollupData } from '../rollup/previous_rollup_data.js';
import { PrivateBaseRollupInputs } from '../rollup/private_base_rollup_inputs.js';
import { PublicBaseRollupInputs } from '../rollup/public_base_rollup_inputs.js';
import { RootRollupInputs, RootRollupPublicInputs } from '../rollup/root_rollup.js';
import { PrivateBaseStateDiffHints } from '../rollup/state_diff_hints.js';
import { AppendOnlyTreeSnapshot } from '../trees/append_only_tree_snapshot.js';
import { NullifierLeaf, NullifierLeafPreimage } from '../trees/nullifier_leaf.js';
import { PublicDataTreeLeaf, PublicDataTreeLeafPreimage } from '../trees/public_data_leaf.js';
import { BlockHeader } from '../tx/block_header.js';
import { CallContext } from '../tx/call_context.js';
import { ContentCommitment } from '../tx/content_commitment.js';
import { GlobalVariables } from '../tx/global_variables.js';
import { PartialStateReference } from '../tx/partial_state_reference.js';
import { StateReference } from '../tx/state_reference.js';
import { TxContext } from '../tx/tx_context.js';
import { TxRequest } from '../tx/tx_request.js';
import { Vector } from '../types/index.js';
import { VerificationKey, VerificationKeyAsFields } from '../vks/verification_key.js';
/**
 * Creates an arbitrary tx context with the given seed.
 * @param seed - The seed to use for generating the tx context.
 * @returns A tx context.
 */
export declare function makeTxContext(seed?: number): TxContext;
/**
 * Creates a default instance of gas settings. No seed value is used to ensure we allocate a sensible amount of gas for testing.
 */
export declare function makeGasSettings(): GasSettings;
/**
 * Creates arbitrary selector from the given seed.
 * @param seed - The seed to use for generating the selector.
 * @returns A selector.
 */
export declare function makeSelector(seed: number): FunctionSelector;
/**
 * Creates arbitrary public data read.
 * @param seed - The seed to use for generating the public data read.
 * @returns A public data read.
 */
export declare function makePublicDataRead(seed?: number): PublicDataRead;
/**
 * Creates empty public data read.
 * @returns An empty public data read.
 */
export declare function makeEmptyPublicDataRead(): PublicDataRead;
/**
 * Creates arbitrary contract storage update request.
 * @param seed - The seed to use for generating the contract storage update request.
 * @returns A contract storage update request.
 */
export declare function makeContractStorageUpdateRequest(seed?: number): ContractStorageUpdateRequest;
/**
 * Creates arbitrary contract storage read.
 * @param seed - The seed to use for generating the contract storage read.
 * @returns A contract storage read.
 */
export declare function makeContractStorageRead(seed?: number): ContractStorageRead;
export declare function makeRollupValidationRequests(seed?: number): RollupValidationRequests;
export declare function makeCombinedConstantData(seed?: number): CombinedConstantData;
/**
 * Creates arbitrary accumulated data.
 * @param seed - The seed to use for generating the accumulated data.
 * @returns An accumulated data.
 */
export declare function makePrivateToRollupAccumulatedData(seed?: number, full?: boolean): PrivateToRollupAccumulatedData;
export declare function makePrivateToPublicAccumulatedData(seed?: number): PrivateToPublicAccumulatedData;
export declare function makeGas(seed?: number): Gas;
/**
 * Creates arbitrary call context.
 * @param seed - The seed to use for generating the call context.
 * @returns A call context.
 */
export declare function makeCallContext(seed?: number, overrides?: Partial<FieldsOf<CallContext>>): CallContext;
/**
 * Creates arbitrary private kernel tail circuit public inputs.
 * @param seed - The seed to use for generating the kernel circuit public inputs.
 * @returns Private kernel tail circuit public inputs.
 */
export declare function makePrivateKernelTailCircuitPublicInputs(seed?: number, isForPublic?: boolean): PrivateKernelTailCircuitPublicInputs;
/**
 * Creates arbitrary public kernel circuit public inputs.
 * @param seed - The seed to use for generating the kernel circuit public inputs.
 * @returns Public kernel circuit public inputs.
 */
export declare function makePrivateToRollupKernelCircuitPublicInputs(seed?: number, fullAccumulatedData?: boolean): PrivateToRollupKernelCircuitPublicInputs;
/**
 * Creates arbitrary/mocked membership witness where the sibling paths is an array of fields in an ascending order starting from `start`.
 * @param size - The size of the membership witness.
 * @param start - The start of the membership witness.
 * @returns A membership witness.
 */
export declare function makeMembershipWitness<N extends number>(size: N, start: number): MembershipWitness<N>;
/**
 * Creates arbitrary/mocked verification key in fields format.
 * @returns A verification key as fields object
 */
export declare function makeVerificationKeyAsFields(size: number): VerificationKeyAsFields;
/**
 * Creates arbitrary/mocked verification key.
 * @returns A verification key object
 */
export declare function makeVerificationKey(): VerificationKey;
/**
 * Creates an arbitrary point in a curve.
 * @param seed - Seed to generate the point values.
 * @returns A point.
 */
export declare function makePoint(seed?: number): Point;
/**
 * Creates an arbitrary grumpkin scalar.
 * @param seed - Seed to generate the values.
 * @returns A GrumpkinScalar.
 */
export declare function makeGrumpkinScalar(seed?: number): GrumpkinScalar;
/**
 * Makes arbitrary proof.
 * @param seed - The seed to use for generating/mocking the proof.
 * @returns A proof.
 */
export declare function makeProof(seed?: number): Proof;
export declare function makePublicCallRequest(seed?: number): PublicCallRequest;
/**
 * Makes arbitrary tx request.
 * @param seed - The seed to use for generating the tx request.
 * @returns A tx request.
 */
export declare function makeTxRequest(seed?: number): TxRequest;
/**
 * Makes arbitrary private circuit public inputs.
 * @param seed - The seed to use for generating the private circuit public inputs.
 * @returns A private circuit public inputs.
 */
export declare function makePrivateCircuitPublicInputs(seed?: number): PrivateCircuitPublicInputs;
export declare function makeGlobalVariables(seed?: number, overrides?: Partial<FieldsOf<GlobalVariables>>): GlobalVariables;
export declare function makeGasFees(seed?: number): GasFees;
export declare function makeFeeRecipient(seed?: number): FeeRecipient;
/**
 * Makes constant base rollup data.
 * @param seed - The seed to use for generating the constant base rollup data.
 * @param blockNumber - The block number to use for generating the global variables.
 * @returns A constant base rollup data.
 */
export declare function makeConstantRollupData(seed?: number, globalVariables?: GlobalVariables | undefined): ConstantRollupData;
export declare function makeScopedL2ToL1Message(seed?: number): ScopedL2ToL1Message;
/**
 * Makes arbitrary append only tree snapshot.
 * @param seed - The seed to use for generating the append only tree snapshot.
 * @returns An append only tree snapshot.
 */
export declare function makeAppendOnlyTreeSnapshot(seed?: number): AppendOnlyTreeSnapshot;
/**
 * Makes arbitrary eth address.
 * @param seed - The seed to use for generating the eth address.
 * @returns An eth address.
 */
export declare function makeEthAddress(seed?: number): EthAddress;
/**
 * Creates a buffer of a given size filled with a given value.
 * @param size - The size of the buffer to create.
 * @param fill - The value to fill the buffer with.
 * @returns A buffer of a given size filled with a given value.
 */
export declare function makeBytes(size?: number, fill?: number): Buffer;
/**
 * Makes arbitrary aztec address.
 * @param seed - The seed to use for generating the aztec address.
 * @returns An aztec address.
 */
export declare function makeAztecAddress(seed?: number): AztecAddress;
/**
 * Makes arbitrary Schnorr signature.
 * @param seed - The seed to use for generating the Schnorr signature.
 * @returns A Schnorr signature.
 */
export declare function makeSchnorrSignature(seed?: number): SchnorrSignature;
/**
 * Makes arbitrary base or merge rollup circuit public inputs.
 * @param seed - The seed to use for generating the base rollup circuit public inputs.
 * @param blockNumber - The block number to use for generating the base rollup circuit public inputs.
 * @returns A base or merge rollup circuit public inputs.
 */
export declare function makeBaseOrMergeRollupPublicInputs(seed?: number, globalVariables?: GlobalVariables | undefined): BaseOrMergeRollupPublicInputs;
/**
 * Makes arbitrary block merge or block root rollup circuit public inputs.
 * @param seed - The seed to use for generating the block merge or block root rollup circuit public inputs.
 * @param blockNumber - The block number to use for generating the block merge or block root rollup circuit public inputs.
 * @returns A block merge or block root rollup circuit public inputs.
 */
export declare function makeBlockRootOrBlockMergeRollupPublicInputs(seed?: number, globalVariables?: GlobalVariables | undefined): BlockRootOrBlockMergePublicInputs;
/**
 * Makes arbitrary previous rollup data.
 * @param seed - The seed to use for generating the previous rollup data.
 * @param globalVariables - The global variables to use when generating the previous rollup data.
 * @returns A previous rollup data.
 */
export declare function makePreviousRollupData(seed?: number, globalVariables?: GlobalVariables | undefined): PreviousRollupData;
/**
 * Makes arbitrary previous rollup block data.
 * @param seed - The seed to use for generating the previous rollup block data.
 * @param globalVariables - The global variables to use when generating the previous rollup block data.
 * @returns A previous rollup block data.
 */
export declare function makePreviousRollupBlockData(seed?: number, globalVariables?: GlobalVariables | undefined): PreviousRollupBlockData;
/**
 * Makes root rollup inputs.
 * @param seed - The seed to use for generating the root rollup inputs.
 * @param globalVariables - The global variables to use.
 * @returns A root rollup inputs.
 */
export declare function makeRootRollupInputs(seed?: number, globalVariables?: GlobalVariables): RootRollupInputs;
/**
 * Makes block root rollup inputs.
 * @param seed - The seed to use for generating the root rollup inputs.
 * @param globalVariables - The global variables to use.
 * @returns A block root rollup inputs.
 */
export declare function makeBlockRootRollupInputs(seed?: number, globalVariables?: GlobalVariables): BlockRootRollupInputs;
export declare function makeSingleTxBlockRootRollupInputs(seed?: number, globalVariables?: GlobalVariables): SingleTxBlockRootRollupInputs;
/**
 * Makes empty block root rollup inputs.
 * @param seed - The seed to use for generating the root rollup inputs.
 * @param globalVariables - The global variables to use.
 * @returns A block root rollup inputs.
 */
export declare function makeEmptyBlockRootRollupInputs(seed?: number, globalVariables?: GlobalVariables): EmptyBlockRootRollupInputs;
export declare function makeRootParityInput<PROOF_LENGTH extends number>(proofSize: PROOF_LENGTH, seed?: number): RootParityInput<PROOF_LENGTH>;
export declare function makeParityPublicInputs(seed?: number): ParityPublicInputs;
export declare function makeBaseParityInputs(seed?: number): BaseParityInputs;
export declare function makeRootParityInputs(seed?: number): RootParityInputs;
/**
 * Makes root rollup public inputs.
 * @param seed - The seed to use for generating the root rollup public inputs.
 * @param blockNumber - The block number to use in the global variables of a header.
 * @returns A root rollup public inputs.
 */
export declare function makeRootRollupPublicInputs(seed?: number): RootRollupPublicInputs;
/**
 * Makes content commitment
 */
export declare function makeContentCommitment(seed?: number): ContentCommitment;
/**
 * Makes header.
 */
export declare function makeHeader(seed?: number, blockNumber?: number | undefined, slotNumber?: number | undefined): BlockHeader;
/**
 * Makes arbitrary state reference.
 * @param seed - The seed to use for generating the state reference.
 * @returns A state reference.
 */
export declare function makeStateReference(seed?: number): StateReference;
/**
 * Makes arbitrary L2 to L1 message.
 * @param seed - The seed to use for generating the state reference.
 * @returns L2 to L1 message.
 */
export declare function makeL2ToL1Message(seed?: number): L2ToL1Message;
/**
 * Makes arbitrary partial state reference.
 * @param seed - The seed to use for generating the partial state reference.
 * @returns A partial state reference.
 */
export declare function makePartialStateReference(seed?: number): PartialStateReference;
/**
 * Makes arbitrary merge rollup inputs.
 * @param seed - The seed to use for generating the merge rollup inputs.
 * @returns A merge rollup inputs.
 */
export declare function makeMergeRollupInputs(seed?: number): MergeRollupInputs;
/**
 * Makes arbitrary block merge rollup inputs.
 * @param seed - The seed to use for generating the merge rollup inputs.
 * @returns A block merge rollup inputs.
 */
export declare function makeBlockMergeRollupInputs(seed?: number): BlockMergeRollupInputs;
/**
 * Makes arbitrary public data tree leaves.
 * @param seed - The seed to use for generating the public data tree leaf.
 * @returns A public data tree leaf.
 */
export declare function makePublicDataTreeLeaf(seed?: number): PublicDataTreeLeaf;
/**
 * Makes arbitrary nullifier leaf.
 * @param seed - The seed to use for generating the nullifier leaf.
 * @returns A nullifier leaf.
 */
export declare function makeNullifierLeaf(seed?: number): NullifierLeaf;
/**
 * Makes arbitrary nullifier leaf preimages.
 * @param seed - The seed to use for generating the nullifier leaf preimage.
 * @returns A nullifier leaf preimage.
 */
export declare function makeNullifierLeafPreimage(seed?: number): NullifierLeafPreimage;
/**
 * Makes arbitrary public data tree leaf preimages.
 * @param seed - The seed to use for generating the public data tree leaf preimage.
 * @returns A public data tree leaf preimage.
 */
export declare function makePublicDataTreeLeafPreimage(seed?: number): PublicDataTreeLeafPreimage;
/**
 * Creates an instance of PrivateBaseStateDiffHints with arbitrary values based on the provided seed.
 * @param seed - The seed to use for generating the hints.
 * @returns A PrivateBaseStateDiffHints object.
 */
export declare function makePrivateBaseStateDiffHints(seed?: number): PrivateBaseStateDiffHints;
export declare function makePrivateBaseRollupInputs(seed?: number): PrivateBaseRollupInputs;
export declare function makePublicBaseRollupInputs(seed?: number): PublicBaseRollupInputs;
export declare function makeExecutablePrivateFunctionWithMembershipProof(seed?: number): ExecutablePrivateFunctionWithMembershipProof;
export declare function makeUtilityFunctionWithMembershipProof(seed?: number): UtilityFunctionWithMembershipProof;
export declare function makeContractClassPublic(seed?: number, publicBytecode?: Buffer): Promise<ContractClassPublic>;
export declare function makeArray<T>(length: number, fn: (i: number) => T, offset?: number): T[];
export declare function makeArrayAsync<T>(length: number, fn: (i: number) => Promise<T>, offset?: number): Promise<Awaited<T>[]>;
export declare function makeVector<T extends Bufferable>(length: number, fn: (i: number) => T, offset?: number): Vector<T>;
export declare function makeVectorAsync<T extends Bufferable>(length: number, fn: (i: number) => Promise<T>, offset?: number): Promise<Vector<Awaited<T>>>;
export declare function makeMap<T>(size: number, fn: (i: number) => [string, T], offset?: number): Map<string, T>;
export declare function makeMapAsync<T>(size: number, fn: (i: number) => Promise<[string, T]>, offset?: number): Promise<Map<string, T>>;
export declare function makePublicKeys(seed?: number): PublicKeys;
export declare function makeContractInstanceFromClassId(classId: Fr, seed?: number, overrides?: {
    deployer?: AztecAddress;
    initializationHash?: Fr;
    publicKeys?: PublicKeys;
    currentClassId?: Fr;
}): Promise<ContractInstanceWithAddress>;
export declare function makeAvmGetSiblingPathHint(seed?: number): AvmGetSiblingPathHint;
export declare function makeAvmGetPreviousValueIndexHint(seed?: number): AvmGetPreviousValueIndexHint;
export declare function makeAvmGetLeafPreimageHintPublicDataTree(seed?: number): AvmGetLeafPreimageHintPublicDataTree;
export declare function makeAvmGetLeafPreimageHintNullifierTree(seed?: number): AvmGetLeafPreimageHintNullifierTree;
export declare function makeAvmGetLeafValueHint(seed?: number): AvmGetLeafValueHint;
export declare function makeAvmSequentialInsertHintPublicDataTree(seed?: number): AvmSequentialInsertHintPublicDataTree;
export declare function makeAvmSequentialInsertHintNullifierTree(seed?: number): AvmSequentialInsertHintNullifierTree;
export declare function makeAvmAppendLeavesHint(seed?: number): AvmAppendLeavesHint;
export declare function makeAvmCheckpointActionCreateCheckpointHint(seed?: number): AvmCreateCheckpointHint;
export declare function makeAvmCheckpointActionCommitCheckpointHint(seed?: number): AvmCommitCheckpointHint;
export declare function makeAvmCheckpointActionRevertCheckpointHint(seed?: number): AvmRevertCheckpointHint;
/**
 * Makes arbitrary AvmContractInstanceHint.
 * @param seed - The seed to use for generating the state reference.
 * @returns AvmContractInstanceHint.
 */
export declare function makeAvmContractInstanceHint(seed?: number): AvmContractInstanceHint;
export declare function makeAvmContractClassHint(seed?: number): AvmContractClassHint;
export declare function makeAvmBytecodeCommitmentHint(seed?: number): Promise<AvmBytecodeCommitmentHint>;
export declare function makeAvmEnqueuedCallHint(seed?: number): AvmEnqueuedCallHint;
export declare function makeAvmTxHint(seed?: number): AvmTxHint;
/**
 * Creates arbitrary AvmExecutionHints.
 * @param seed - The seed to use for generating the hints.
 * @returns the execution hints.
 */
export declare function makeAvmExecutionHints(seed?: number, overrides?: Partial<FieldsOf<AvmExecutionHints>>): Promise<AvmExecutionHints>;
/**
 * Creates arbitrary AvmCircuitInputs.
 * @param seed - The seed to use for generating the hints.
 * @returns the execution hints.
 */
export declare function makeAvmCircuitInputs(seed?: number, overrides?: Partial<FieldsOf<AvmCircuitInputs>>): Promise<AvmCircuitInputs>;
/**
 * TODO: Since the max value check is currently disabled this function is pointless. Should it be removed?
 * Test only. Easy to identify big endian field serialize.
 * @param n - The number.
 * @returns The field.
 */
export declare function fr(n: number): Fr;
/** Makes a bloated processed tx for testing purposes. */
export declare function makeBloatedProcessedTx({ seed, header, db, chainId, version, gasSettings, vkTreeRoot, protocolContractTreeRoot, globalVariables, feePayer, feePaymentPublicDataWrite, privateOnly, }?: {
    seed?: number;
    header?: BlockHeader;
    db?: MerkleTreeReadOperations;
    chainId?: Fr;
    version?: Fr;
    gasSettings?: GasSettings;
    vkTreeRoot?: Fr;
    globalVariables?: GlobalVariables;
    protocolContractTreeRoot?: Fr;
    feePayer?: AztecAddress;
    feePaymentPublicDataWrite?: PublicDataWrite;
    privateOnly?: boolean;
}): Promise<import("../tx/processed_tx.js").ProcessedTx>;
//# sourceMappingURL=factories.d.ts.map