import { Secp256k1Signer } from '@aztec/foundation/crypto';
import { Fr } from '@aztec/foundation/fields';
import type { ContractArtifact } from '../abi/abi.js';
import { AztecAddress } from '../aztec-address/index.js';
import type { ContractInstanceWithAddress } from '../contract/index.js';
import { GasFees } from '../gas/gas_fees.js';
import { ExtendedNote, UniqueNote } from '../note/extended_note.js';
import { BlockAttestation } from '../p2p/block_attestation.js';
import { BlockProposal } from '../p2p/block_proposal.js';
import { ClientIvcProof } from '../proofs/client_ivc_proof.js';
import { BlockHeader, Tx } from '../tx/index.js';
import { TxSimulationResult } from '../tx/simulated_tx.js';
import { TxHash } from '../tx/tx_hash.js';
export declare const randomTxHash: () => TxHash;
export declare const randomExtendedNote: ({ note, recipient, contractAddress, txHash, storageSlot, }?: Partial<ExtendedNote>) => Promise<ExtendedNote>;
export declare const randomUniqueNote: ({ note, recipient, contractAddress, txHash, storageSlot, nonce, }?: Partial<UniqueNote>) => Promise<UniqueNote>;
export declare const mockTx: (seed?: number, { numberOfNonRevertiblePublicCallRequests, numberOfRevertiblePublicCallRequests, numberOfRevertibleNullifiers, hasPublicTeardownCallRequest, publicCalldataSize, feePayer, clientIvcProof, maxPriorityFeesPerGas, }?: {
    numberOfNonRevertiblePublicCallRequests?: number;
    numberOfRevertiblePublicCallRequests?: number;
    numberOfRevertibleNullifiers?: number;
    hasPublicTeardownCallRequest?: boolean;
    publicCalldataSize?: number;
    feePayer?: AztecAddress;
    clientIvcProof?: ClientIvcProof;
    maxPriorityFeesPerGas?: GasFees;
}) => Promise<Tx>;
export declare const mockTxForRollup: (seed?: number) => Promise<Tx>;
export declare const mockSimulatedTx: (seed?: number) => Promise<TxSimulationResult>;
export declare const randomContractArtifact: () => ContractArtifact;
export declare const randomContractInstanceWithAddress: (opts?: {
    contractClassId?: Fr;
}, address?: AztecAddress) => Promise<ContractInstanceWithAddress>;
export declare const randomDeployedContract: () => Promise<{
    artifact: ContractArtifact;
    instance: ContractInstanceWithAddress;
}>;
export interface MakeConsensusPayloadOptions {
    signer?: Secp256k1Signer;
    header?: BlockHeader;
    archive?: Fr;
    txHashes?: TxHash[];
}
export declare const makeBlockProposal: (options?: MakeConsensusPayloadOptions) => BlockProposal;
export declare const makeBlockAttestation: (options?: MakeConsensusPayloadOptions) => BlockAttestation;
//# sourceMappingURL=mocks.d.ts.map