import { booleanConfigHelper, numberConfigHelper } from '@aztec/foundation/config';
import { Fr } from '@aztec/foundation/fields';
import { z } from 'zod';
import { schemas } from '../schemas/index.js';
export const ProverConfigSchema = z.object({
    nodeUrl: z.string().optional(),
    realProofs: z.boolean(),
    proverId: schemas.Fr.optional(),
    proverTestDelayType: z.enum([
        'fixed',
        'realistic'
    ]),
    proverTestDelayMs: z.number(),
    proverTestDelayFactor: z.number(),
    proverAgentCount: z.number()
});
export const proverConfigMappings = {
    nodeUrl: {
        env: 'AZTEC_NODE_URL',
        description: 'The URL to the Aztec node to take proving jobs from'
    },
    realProofs: {
        env: 'PROVER_REAL_PROOFS',
        description: 'Whether to construct real proofs',
        ...booleanConfigHelper(true)
    },
    proverId: {
        env: 'PROVER_ID',
        parseEnv: (val)=>parseProverId(val),
        description: 'Hex value that identifies the prover. Defaults to the address used for submitting proofs if not set.'
    },
    proverTestDelayType: {
        env: 'PROVER_TEST_DELAY_TYPE',
        description: 'The type of artificial delay to introduce'
    },
    proverTestDelayMs: {
        env: 'PROVER_TEST_DELAY_MS',
        description: 'Artificial delay to introduce to all operations to the test prover.',
        ...numberConfigHelper(0)
    },
    proverTestDelayFactor: {
        env: 'PROVER_TEST_DELAY_FACTOR',
        description: 'If using realistic delays, what percentage of realistic times to apply.',
        ...numberConfigHelper(1)
    },
    proverAgentCount: {
        env: 'PROVER_AGENT_COUNT',
        description: 'The number of prover agents to start',
        ...numberConfigHelper(1)
    },
    failedProofStore: {
        env: 'PROVER_FAILED_PROOF_STORE',
        description: 'Store for failed proof inputs. Google cloud storage is only supported at the moment. Set this value as gs://bucket-name/path/to/store.'
    }
};
function parseProverId(str) {
    if (!str) {
        return undefined;
    }
    return Fr.fromHexString(str);
}
export class BlockProofError extends Error {
    txHashes;
    static #name = 'BlockProofError';
    name;
    constructor(message, txHashes){
        super(message), this.txHashes = txHashes, this.name = BlockProofError.#name;
    }
    static isBlockProofError(err) {
        return err && typeof err === 'object' && err.name === BlockProofError.#name;
    }
}
