import { BlockAttestation } from '../p2p/block_attestation.js';
import type { P2PClientType } from '../p2p/client_type.js';
import { type ApiSchemaFor } from '../schemas/index.js';
import { Tx } from '../tx/tx.js';
export type PeerInfo = {
    status: 'connected';
    score: number;
    id: string;
} | {
    status: 'dialing';
    dialStatus: string;
    id: string;
    addresses: string[];
} | {
    status: 'cached';
    id: string;
    addresses: string[];
    enr: string;
    dialAttempts: number;
};
/** Exposed API to the P2P module. */
export interface P2PApiWithoutAttestations {
    /**
     * Returns all pending transactions in the transaction pool.
     * @returns An array of Txs.
     */
    getPendingTxs(): Promise<Tx[]>;
    /**
     * Returns the ENR for this node, if any.
     */
    getEncodedEnr(): Promise<string | undefined>;
    /**
     * Returns info for all connected, dialing, and cached peers.
     */
    getPeers(includePending?: boolean): Promise<PeerInfo[]>;
}
export interface P2PClient extends P2PApiWithoutAttestations {
    /**
     * Queries the Attestation pool for attestations for the given slot
     *
     * @param slot - the slot to query
     * @param proposalId - the proposal id to query, or undefined to query all proposals for the slot
     * @returns BlockAttestations
     */
    getAttestationsForSlot(slot: bigint, proposalId?: string): Promise<BlockAttestation[]>;
    /** Manually adds an attestation to the p2p client attestation pool. */
    addAttestation(attestation: BlockAttestation): Promise<void>;
}
export type P2PApi<T extends P2PClientType = P2PClientType.Full> = T extends P2PClientType.Full ? P2PClient & P2PApiWithoutAttestations : P2PApiWithoutAttestations;
export declare const P2PApiSchema: ApiSchemaFor<P2PApi>;
//# sourceMappingURL=p2p.d.ts.map