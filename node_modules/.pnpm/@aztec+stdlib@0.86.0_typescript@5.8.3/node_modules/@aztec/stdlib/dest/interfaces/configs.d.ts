import type { EthAddress } from '@aztec/foundation/eth-address';
import { z } from 'zod';
import type { AztecAddress } from '../aztec-address/index.js';
import { type ZodFor } from '../schemas/index.js';
import { type AllowedElement } from './allowed_element.js';
/**
 * The sequencer configuration.
 */
export interface SequencerConfig {
    /** The number of ms to wait between polling for pending txs. */
    transactionPollingIntervalMS?: number;
    /** The maximum number of txs to include in a block. */
    maxTxsPerBlock?: number;
    /** The minimum number of txs to include in a block. */
    minTxsPerBlock?: number;
    /** The maximum L2 block gas. */
    maxL2BlockGas?: number;
    /** The maximum DA block gas. */
    maxDABlockGas?: number;
    /** Recipient of block reward. */
    coinbase?: EthAddress;
    /** Address to receive fees. */
    feeRecipient?: AztecAddress;
    /** The working directory to use for simulation/proving */
    acvmWorkingDirectory?: string;
    /** The path to the ACVM binary */
    acvmBinaryPath?: string;
    /** The list of functions calls allowed to run in setup */
    txPublicSetupAllowList?: AllowedElement[];
    /** Max block size */
    maxBlockSizeInBytes?: number;
    /** Payload address to vote for */
    governanceProposerPayload?: EthAddress;
    /** Whether to enforce the time table when building blocks */
    enforceTimeTable?: boolean;
    /** How many seconds into an L1 slot we can still send a tx and get it mined. */
    maxL1TxInclusionTimeIntoSlot?: number;
}
export declare const SequencerConfigSchema: z.ZodObject<{
    transactionPollingIntervalMS: z.ZodOptional<z.ZodNumber>;
    maxTxsPerBlock: z.ZodOptional<z.ZodNumber>;
    minTxsPerBlock: z.ZodOptional<z.ZodNumber>;
    maxL2BlockGas: z.ZodOptional<z.ZodNumber>;
    maxDABlockGas: z.ZodOptional<z.ZodNumber>;
    coinbase: z.ZodOptional<ZodFor<EthAddress>>;
    feeRecipient: z.ZodOptional<ZodFor<AztecAddress>>;
    acvmWorkingDirectory: z.ZodOptional<z.ZodString>;
    acvmBinaryPath: z.ZodOptional<z.ZodString>;
    txPublicSetupAllowList: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodObject<{
        address: ZodFor<AztecAddress>;
        selector: ZodFor<import("../abi/function_selector.js").FunctionSelector>;
    }, "strip", z.ZodTypeAny, {
        selector: import("../abi/function_selector.js").FunctionSelector;
        address: AztecAddress;
    }, {
        selector?: any;
        address?: any;
    }>, z.ZodObject<{
        address: ZodFor<AztecAddress>;
    }, "strip", z.ZodTypeAny, {
        address: AztecAddress;
    }, {
        address?: any;
    }>, z.ZodObject<{
        classId: ZodFor<import("@aztec/foundation/schemas").Fr>;
        selector: ZodFor<import("../abi/function_selector.js").FunctionSelector>;
    }, "strip", z.ZodTypeAny, {
        selector: import("../abi/function_selector.js").FunctionSelector;
        classId: import("@aztec/foundation/schemas").Fr;
    }, {
        selector?: any;
        classId?: any;
    }>, z.ZodObject<{
        classId: ZodFor<import("@aztec/foundation/schemas").Fr>;
    }, "strip", z.ZodTypeAny, {
        classId: import("@aztec/foundation/schemas").Fr;
    }, {
        classId?: any;
    }>]>, "many">>;
    maxBlockSizeInBytes: z.ZodOptional<z.ZodNumber>;
    governanceProposerPayload: z.ZodOptional<ZodFor<EthAddress>>;
    maxL1TxInclusionTimeIntoSlot: z.ZodOptional<z.ZodNumber>;
    enforceTimeTable: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    coinbase?: EthAddress | undefined;
    feeRecipient?: AztecAddress | undefined;
    transactionPollingIntervalMS?: number | undefined;
    maxTxsPerBlock?: number | undefined;
    minTxsPerBlock?: number | undefined;
    maxL2BlockGas?: number | undefined;
    maxDABlockGas?: number | undefined;
    acvmWorkingDirectory?: string | undefined;
    acvmBinaryPath?: string | undefined;
    txPublicSetupAllowList?: ({
        selector: import("../abi/function_selector.js").FunctionSelector;
        address: AztecAddress;
    } | {
        address: AztecAddress;
    } | {
        selector: import("../abi/function_selector.js").FunctionSelector;
        classId: import("@aztec/foundation/schemas").Fr;
    } | {
        classId: import("@aztec/foundation/schemas").Fr;
    })[] | undefined;
    maxBlockSizeInBytes?: number | undefined;
    governanceProposerPayload?: EthAddress | undefined;
    maxL1TxInclusionTimeIntoSlot?: number | undefined;
    enforceTimeTable?: boolean | undefined;
}, {
    coinbase?: any;
    feeRecipient?: any;
    transactionPollingIntervalMS?: number | undefined;
    maxTxsPerBlock?: number | undefined;
    minTxsPerBlock?: number | undefined;
    maxL2BlockGas?: number | undefined;
    maxDABlockGas?: number | undefined;
    acvmWorkingDirectory?: string | undefined;
    acvmBinaryPath?: string | undefined;
    txPublicSetupAllowList?: ({
        selector?: any;
        address?: any;
    } | {
        address?: any;
    } | {
        selector?: any;
        classId?: any;
    } | {
        classId?: any;
    })[] | undefined;
    maxBlockSizeInBytes?: number | undefined;
    governanceProposerPayload?: any;
    maxL1TxInclusionTimeIntoSlot?: number | undefined;
    enforceTimeTable?: boolean | undefined;
}>;
//# sourceMappingURL=configs.d.ts.map