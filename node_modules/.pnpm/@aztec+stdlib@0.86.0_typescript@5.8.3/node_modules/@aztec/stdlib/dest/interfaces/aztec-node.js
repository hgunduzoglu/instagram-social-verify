import { ARCHIVE_HEIGHT, L1_TO_L2_MSG_TREE_HEIGHT, NOTE_HASH_TREE_HEIGHT, NULLIFIER_TREE_HEIGHT, PUBLIC_DATA_TREE_HEIGHT } from '@aztec/constants';
import { L1ContractAddressesSchema } from '@aztec/ethereum/l1-contract-addresses';
import { createSafeJsonRpcClient, defaultFetch } from '@aztec/foundation/json-rpc/client';
import { SiblingPath } from '@aztec/foundation/trees';
import { z } from 'zod';
import { inBlockSchemaFor } from '../block/in_block.js';
import { L2Block } from '../block/l2_block.js';
import { L2BlockNumberSchema } from '../block/l2_block_number.js';
import { L2TipsSchema } from '../block/l2_block_source.js';
import { PublishedL2BlockSchema } from '../block/published_l2_block.js';
import { ContractClassPublicSchema, ContractInstanceWithAddressSchema, NodeInfoSchema, ProtocolContractAddressesSchema } from '../contract/index.js';
import { GasFees } from '../gas/gas_fees.js';
import { LogFilterSchema } from '../logs/log_filter.js';
import { PrivateLog } from '../logs/private_log.js';
import { TxScopedL2Log } from '../logs/tx_scoped_l2_log.js';
import { optional, schemas } from '../schemas/schemas.js';
import { MerkleTreeId } from '../trees/merkle_tree_id.js';
import { NullifierMembershipWitness } from '../trees/nullifier_membership_witness.js';
import { PublicDataWitness } from '../trees/public_data_witness.js';
import { BlockHeader, PublicSimulationOutput, Tx, TxHash, TxReceipt, TxValidationResultSchema, indexedTxSchema } from '../tx/index.js';
import { ValidatorsStatsSchema } from '../validators/schemas.js';
import { getVersioningResponseHandler } from '../versioning/index.js';
import { GetContractClassLogsResponseSchema, GetPublicLogsResponseSchema } from './get_logs_response.js';
import { WorldStateSyncStatusSchema } from './world_state.js';
export const AztecNodeApiSchema = {
    getL2Tips: z.function().args().returns(L2TipsSchema),
    getWorldStateSyncStatus: z.function().args().returns(WorldStateSyncStatusSchema),
    findLeavesIndexes: z.function().args(L2BlockNumberSchema, z.nativeEnum(MerkleTreeId), z.array(schemas.Fr)).returns(z.array(optional(inBlockSchemaFor(schemas.BigInt)))),
    getNullifierSiblingPath: z.function().args(L2BlockNumberSchema, schemas.BigInt).returns(SiblingPath.schemaFor(NULLIFIER_TREE_HEIGHT)),
    getNoteHashSiblingPath: z.function().args(L2BlockNumberSchema, schemas.BigInt).returns(SiblingPath.schemaFor(NOTE_HASH_TREE_HEIGHT)),
    getL1ToL2MessageMembershipWitness: z.function().args(L2BlockNumberSchema, schemas.Fr).returns(z.tuple([
        schemas.BigInt,
        SiblingPath.schemaFor(L1_TO_L2_MSG_TREE_HEIGHT)
    ]).optional()),
    isL1ToL2MessageSynced: z.function().args(schemas.Fr).returns(z.boolean()),
    getL2ToL1MessageMembershipWitness: z.function().args(L2BlockNumberSchema, schemas.Fr).returns(z.tuple([
        schemas.BigInt,
        SiblingPath.schema
    ])),
    getArchiveSiblingPath: z.function().args(L2BlockNumberSchema, schemas.BigInt).returns(SiblingPath.schemaFor(ARCHIVE_HEIGHT)),
    getPublicDataSiblingPath: z.function().args(L2BlockNumberSchema, schemas.BigInt).returns(SiblingPath.schemaFor(PUBLIC_DATA_TREE_HEIGHT)),
    getNullifierMembershipWitness: z.function().args(L2BlockNumberSchema, schemas.Fr).returns(NullifierMembershipWitness.schema.optional()),
    getLowNullifierMembershipWitness: z.function().args(L2BlockNumberSchema, schemas.Fr).returns(NullifierMembershipWitness.schema.optional()),
    getPublicDataWitness: z.function().args(L2BlockNumberSchema, schemas.Fr).returns(PublicDataWitness.schema.optional()),
    getBlock: z.function().args(L2BlockNumberSchema).returns(L2Block.schema.optional()),
    getBlockNumber: z.function().returns(z.number()),
    getProvenBlockNumber: z.function().returns(z.number()),
    isReady: z.function().returns(z.boolean()),
    getNodeInfo: z.function().returns(NodeInfoSchema),
    getBlocks: z.function().args(z.number(), z.number()).returns(z.array(L2Block.schema)),
    getPublishedBlocks: z.function().args(z.number(), z.number()).returns(z.array(PublishedL2BlockSchema)),
    getCurrentBaseFees: z.function().returns(GasFees.schema),
    getNodeVersion: z.function().returns(z.string()),
    getVersion: z.function().returns(z.number()),
    getChainId: z.function().returns(z.number()),
    getL1ContractAddresses: z.function().returns(L1ContractAddressesSchema),
    getProtocolContractAddresses: z.function().returns(ProtocolContractAddressesSchema),
    registerContractFunctionSignatures: z.function().args(schemas.AztecAddress, z.array(z.string())).returns(z.void()),
    getPrivateLogs: z.function().args(z.number(), z.number()).returns(z.array(PrivateLog.schema)),
    getPublicLogs: z.function().args(LogFilterSchema).returns(GetPublicLogsResponseSchema),
    getContractClassLogs: z.function().args(LogFilterSchema).returns(GetContractClassLogsResponseSchema),
    getLogsByTags: z.function().args(z.array(schemas.Fr)).returns(z.array(z.array(TxScopedL2Log.schema))),
    sendTx: z.function().args(Tx.schema).returns(z.void()),
    getTxReceipt: z.function().args(TxHash.schema).returns(TxReceipt.schema),
    getTxEffect: z.function().args(TxHash.schema).returns(indexedTxSchema().optional()),
    getPendingTxs: z.function().returns(z.array(Tx.schema)),
    getPendingTxCount: z.function().returns(z.number()),
    getTxByHash: z.function().args(TxHash.schema).returns(Tx.schema.optional()),
    getTxsByHash: z.function().args(z.array(TxHash.schema)).returns(z.array(Tx.schema)),
    getPublicStorageAt: z.function().args(L2BlockNumberSchema, schemas.AztecAddress, schemas.Fr).returns(schemas.Fr),
    getBlockHeader: z.function().args(optional(L2BlockNumberSchema)).returns(BlockHeader.schema.optional()),
    getValidatorsStats: z.function().returns(ValidatorsStatsSchema),
    simulatePublicCalls: z.function().args(Tx.schema, optional(z.boolean())).returns(PublicSimulationOutput.schema),
    isValidTx: z.function().args(Tx.schema, optional(z.object({
        isSimulation: optional(z.boolean()),
        skipFeeEnforcement: optional(z.boolean())
    }))).returns(TxValidationResultSchema),
    getContractClass: z.function().args(schemas.Fr).returns(ContractClassPublicSchema.optional()),
    getContract: z.function().args(schemas.AztecAddress).returns(ContractInstanceWithAddressSchema.optional()),
    getEncodedEnr: z.function().returns(z.string().optional())
};
export function createAztecNodeClient(url, versions = {}, fetch = defaultFetch) {
    return createSafeJsonRpcClient(url, AztecNodeApiSchema, {
        namespaceMethods: 'node',
        fetch,
        onResponse: getVersioningResponseHandler(versions)
    });
}
