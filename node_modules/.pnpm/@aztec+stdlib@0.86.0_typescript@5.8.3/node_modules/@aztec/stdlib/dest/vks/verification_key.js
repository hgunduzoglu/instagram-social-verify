import { HONK_VERIFICATION_KEY_LENGTH_IN_FIELDS, ROLLUP_HONK_VERIFICATION_KEY_LENGTH_IN_FIELDS } from '@aztec/constants';
import { makeTuple } from '@aztec/foundation/array';
import { times } from '@aztec/foundation/collection';
import { Fq, Fr } from '@aztec/foundation/fields';
import { bufferSchemaFor } from '@aztec/foundation/schemas';
import { BufferReader, serializeToBuffer } from '@aztec/foundation/serialize';
import { bufferToHex, hexToBuffer } from '@aztec/foundation/string';
import { CircuitType } from '../types/shared.js';
/**
 * Curve data.
 */ export class G1AffineElement {
    /**
   * Element's x coordinate.
   */ x;
    /**
   * Element's y coordinate.
   */ y;
    constructor(x, y){
        this.x = typeof x === 'bigint' ? new Fq(x) : x;
        this.y = typeof y === 'bigint' ? new Fq(y) : y;
    }
    /**
   * Serialize as a buffer.
   * @returns The buffer.
   */ toBuffer() {
        return serializeToBuffer(this.x, this.y);
    }
    /**
   * Deserializes from a buffer or reader, corresponding to a write in cpp.
   * @param buffer - Buffer  or BufferReader to read from.
   * @returns The G1AffineElement.
   */ static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new G1AffineElement(Fq.fromBuffer(reader), Fq.fromBuffer(reader));
    }
}
/**
 * Used store and serialize a key-value map of commitments where key is the name of the commitment and value is
 * the commitment itself. The name can be e.g. Q_1, Q_2, SIGMA_1 etc.
 */ export class CommitmentMap {
    record;
    constructor(/**
     * An object used to store the commitments.
     */ record){
        this.record = record;
    }
    /**
   * Serialize as a buffer.
   * @returns The buffer.
   */ toBuffer() {
        const values = Object.entries(this.record);
        return serializeToBuffer(values.length, ...values.flat());
    }
    /**
   * Deserializes from a buffer or reader, corresponding to a write in cpp.
   * @param buffer - Buffer or BufferReader to read from.
   * @returns The CommitmentMap.
   */ static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new CommitmentMap(reader.readMap(G1AffineElement));
    }
}
// TODO: find better home for these constants
export const CIRCUIT_SIZE_INDEX = 0;
export const CIRCUIT_PUBLIC_INPUTS_INDEX = 1;
export const CIRCUIT_RECURSIVE_INDEX = 3;
/**
 * Provides a 'fields' representation of a circuit's verification key
 */ export class VerificationKeyAsFields {
    key;
    hash;
    constructor(key, hash){
        this.key = key;
        this.hash = hash;
    }
    get numPublicInputs() {
        return Number(this.key[CIRCUIT_PUBLIC_INPUTS_INDEX]);
    }
    get circuitSize() {
        return Number(this.key[CIRCUIT_SIZE_INDEX]);
    }
    get isRecursive() {
        return this.key[CIRCUIT_RECURSIVE_INDEX].equals(Fr.ONE);
    }
    static get schema() {
        // TODO(palla/schemas): Should we verify the hash matches the key when deserializing?
        return bufferSchemaFor(VerificationKeyAsFields);
    }
    toJSON() {
        return this.toBuffer();
    }
    /**
   * Serialize as a buffer.
   * @returns The buffer.
   */ toBuffer() {
        return serializeToBuffer(...this.toFields());
    }
    toFields() {
        return [
            this.key.length,
            ...this.key,
            this.hash
        ];
    }
    /**
   * Deserializes from a buffer or reader, corresponding to a write in cpp.
   * @param buffer - Buffer to read from.
   * @returns The VerificationKeyAsFields.
   */ static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new VerificationKeyAsFields(reader.readVector(Fr), reader.readObject(Fr));
    }
    /**
   * Builds a fake verification key that should be accepted by circuits.
   * @returns A fake verification key.
   */ static makeFake(size, seed = 1) {
        return new VerificationKeyAsFields(makeTuple(size, Fr.random, seed), Fr.random());
    }
    static makeFakeHonk(seed = 1) {
        return new VerificationKeyAsFields(makeTuple(HONK_VERIFICATION_KEY_LENGTH_IN_FIELDS, Fr.random, seed), Fr.random());
    }
    static makeFakeRollupHonk(seed = 1) {
        return new VerificationKeyAsFields(makeTuple(ROLLUP_HONK_VERIFICATION_KEY_LENGTH_IN_FIELDS, (i)=>new Fr(i), seed), new Fr(seed + 1));
    }
    /**
   * Builds an 'empty' verification key
   * @returns An 'empty' verification key
   */ static makeEmpty(size) {
        return new VerificationKeyAsFields(makeTuple(size, Fr.zero), Fr.zero());
    }
}
export class VerificationKey {
    circuitType;
    circuitSize;
    numPublicInputs;
    commitments;
    containsRecursiveProof;
    recursiveProofPublicInputIndices;
    constructor(/**
     * For Plonk, this is equivalent to the proving system used to prove and verify.
     */ circuitType, /**
     * The number of gates in this circuit.
     */ circuitSize, /**
     * The number of public inputs in this circuit.
     */ numPublicInputs, /**
     * The commitments for this circuit.
     */ commitments, /**
     * Contains a recursive proof?
     */ containsRecursiveProof, /**
     * Recursion stack.
     */ recursiveProofPublicInputIndices){
        this.circuitType = circuitType;
        this.circuitSize = circuitSize;
        this.numPublicInputs = numPublicInputs;
        this.commitments = commitments;
        this.containsRecursiveProof = containsRecursiveProof;
        this.recursiveProofPublicInputIndices = recursiveProofPublicInputIndices;
    }
    /**
   * Serialize as a buffer.
   * @returns The buffer.
   */ toBuffer() {
        return serializeToBuffer(this.circuitType, this.circuitSize, this.numPublicInputs, new CommitmentMap(this.commitments), this.containsRecursiveProof, serializeToBuffer(this.recursiveProofPublicInputIndices.length, this.recursiveProofPublicInputIndices));
    }
    /**
   * Deserializes class from a buffer.
   * @returns A VerificationKey instance.
   */ static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new VerificationKey(reader.readNumber(), reader.readNumber(), reader.readNumber(), reader.readObject(CommitmentMap).record, reader.readBoolean(), reader.readNumberVector());
    }
    /**
   * Builds a fake Rollup Honk verification key that should be accepted by circuits.
   * @returns A fake verification key.
   */ static makeRollupFake() {
        return new VerificationKey(CircuitType.ULTRA, 2048, 116, {}, false, times(16, (i)=>i));
    }
    /**
   * Builds a fake verification key that should be accepted by circuits.
   * @returns A fake verification key.
   */ static makeFake() {
        return new VerificationKey(CircuitType.ULTRA, 2048, 116, {}, false, times(16, (i)=>i));
    }
}
export class VerificationKeyData {
    keyAsFields;
    keyAsBytes;
    constructor(keyAsFields, keyAsBytes){
        this.keyAsFields = keyAsFields;
        this.keyAsBytes = keyAsBytes;
    }
    get numPublicInputs() {
        return this.keyAsFields.numPublicInputs;
    }
    get circuitSize() {
        return this.keyAsFields.circuitSize;
    }
    get isRecursive() {
        return this.keyAsFields.isRecursive;
    }
    static empty() {
        return new VerificationKeyData(VerificationKeyAsFields.makeEmpty(0), Buffer.alloc(0));
    }
    static makeFakeHonk() {
        return new VerificationKeyData(VerificationKeyAsFields.makeFakeHonk(), VerificationKey.makeFake().toBuffer());
    }
    static makeFakeRollupHonk() {
        return new VerificationKeyData(VerificationKeyAsFields.makeFakeRollupHonk(), VerificationKey.makeRollupFake().toBuffer());
    }
    static makeFake(len = ROLLUP_HONK_VERIFICATION_KEY_LENGTH_IN_FIELDS) {
        return new VerificationKeyData(VerificationKeyAsFields.makeFake(len), VerificationKey.makeFake().toBuffer());
    }
    /**
   * Serialize as a buffer.
   * @returns The buffer.
   */ toBuffer() {
        return serializeToBuffer(this.keyAsFields, this.keyAsBytes.length, this.keyAsBytes);
    }
    toString() {
        return bufferToHex(this.toBuffer());
    }
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        const verificationKeyAsFields = reader.readObject(VerificationKeyAsFields);
        const length = reader.readNumber();
        const bytes = reader.readBytes(length);
        return new VerificationKeyData(verificationKeyAsFields, bytes);
    }
    static fromString(str) {
        return VerificationKeyData.fromBuffer(hexToBuffer(str));
    }
    clone() {
        return VerificationKeyData.fromBuffer(this.toBuffer());
    }
    /** Returns a hex representation for JSON serialization. */ toJSON() {
        return this.toBuffer();
    }
    /** Creates an instance from a hex string. */ static get schema() {
        return bufferSchemaFor(VerificationKeyData);
    }
}
