import { VK_TREE_HEIGHT } from '@aztec/constants';
import { makeTuple } from '@aztec/foundation/array';
import { Fr } from '@aztec/foundation/fields';
import { BufferReader, serializeToBuffer } from '@aztec/foundation/serialize';
import { bufferToHex } from '@aztec/foundation/string';
import { VerificationKeyData } from './verification_key.js';
export class VkWitnessData {
    vk;
    vkIndex;
    vkPath;
    constructor(vk, /**
     * Index of the vk in the vk tree.
     */ vkIndex, /**
     * Sibling path of the vk in the vk tree.
     */ vkPath){
        this.vk = vk;
        this.vkIndex = vkIndex;
        this.vkPath = vkPath;
    }
    static empty() {
        return new VkWitnessData(VerificationKeyData.empty(), 0, makeTuple(VK_TREE_HEIGHT, Fr.zero));
    }
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new VkWitnessData(reader.readObject(VerificationKeyData), reader.readNumber(), reader.readArray(VK_TREE_HEIGHT, Fr));
    }
    toBuffer() {
        return serializeToBuffer(this.vk, this.vkIndex, this.vkPath);
    }
    toString() {
        return bufferToHex(this.toBuffer());
    }
}
