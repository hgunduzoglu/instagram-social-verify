import { z } from 'zod';
export declare const ValidatorStatusInSlotSchema: z.ZodEnum<["block-mined", "block-proposed", "block-missed", "attestation-sent", "attestation-missed"]>;
export declare const ValidatorStatusHistorySchema: z.ZodArray<z.ZodObject<{
    slot: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
    status: z.ZodEnum<["block-mined", "block-proposed", "block-missed", "attestation-sent", "attestation-missed"]>;
}, "strip", z.ZodTypeAny, {
    status: "block-mined" | "block-proposed" | "block-missed" | "attestation-sent" | "attestation-missed";
    slot: bigint;
}, {
    status: "block-mined" | "block-proposed" | "block-missed" | "attestation-sent" | "attestation-missed";
    slot: string | number | bigint;
}>, "many">;
export declare const ValidatorStatusHistorySchemaArray: z.ZodArray<z.ZodArray<z.ZodObject<{
    slot: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
    status: z.ZodEnum<["block-mined", "block-proposed", "block-missed", "attestation-sent", "attestation-missed"]>;
}, "strip", z.ZodTypeAny, {
    status: "block-mined" | "block-proposed" | "block-missed" | "attestation-sent" | "attestation-missed";
    slot: bigint;
}, {
    status: "block-mined" | "block-proposed" | "block-missed" | "attestation-sent" | "attestation-missed";
    slot: string | number | bigint;
}>, "many">, "many">;
export declare const ValidatorStatusHistorySchemaMap: z.ZodRecord<z.ZodString, z.ZodArray<z.ZodArray<z.ZodObject<{
    slot: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
    status: z.ZodEnum<["block-mined", "block-proposed", "block-missed", "attestation-sent", "attestation-missed"]>;
}, "strip", z.ZodTypeAny, {
    status: "block-mined" | "block-proposed" | "block-missed" | "attestation-sent" | "attestation-missed";
    slot: bigint;
}, {
    status: "block-mined" | "block-proposed" | "block-missed" | "attestation-sent" | "attestation-missed";
    slot: string | number | bigint;
}>, "many">, "many">>;
export declare const ValidatorStatsSchema: z.ZodObject<{
    address: z.ZodType<import("@aztec/foundation/schemas").EthAddress, any, string>;
    lastProposal: z.ZodOptional<z.ZodObject<{
        timestamp: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
        slot: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
        date: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        date: string;
        slot: bigint;
        timestamp: bigint;
    }, {
        date: string;
        slot: string | number | bigint;
        timestamp: string | number | bigint;
    }>>;
    lastAttestation: z.ZodOptional<z.ZodObject<{
        timestamp: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
        slot: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
        date: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        date: string;
        slot: bigint;
        timestamp: bigint;
    }, {
        date: string;
        slot: string | number | bigint;
        timestamp: string | number | bigint;
    }>>;
    totalSlots: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
    missedProposals: z.ZodObject<{
        currentStreak: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
        rate: z.ZodNumber;
        count: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        currentStreak: number;
        rate: number;
        count: number;
    }, {
        currentStreak: string | number | bigint;
        rate: number;
        count: string | number | bigint;
    }>;
    missedAttestations: z.ZodObject<{
        currentStreak: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
        rate: z.ZodNumber;
        count: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        currentStreak: number;
        rate: number;
        count: number;
    }, {
        currentStreak: string | number | bigint;
        rate: number;
        count: string | number | bigint;
    }>;
    history: z.ZodArray<z.ZodObject<{
        slot: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
        status: z.ZodEnum<["block-mined", "block-proposed", "block-missed", "attestation-sent", "attestation-missed"]>;
    }, "strip", z.ZodTypeAny, {
        status: "block-mined" | "block-proposed" | "block-missed" | "attestation-sent" | "attestation-missed";
        slot: bigint;
    }, {
        status: "block-mined" | "block-proposed" | "block-missed" | "attestation-sent" | "attestation-missed";
        slot: string | number | bigint;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    address: import("@aztec/foundation/schemas").EthAddress;
    totalSlots: number;
    missedProposals: {
        currentStreak: number;
        rate: number;
        count: number;
    };
    missedAttestations: {
        currentStreak: number;
        rate: number;
        count: number;
    };
    history: {
        status: "block-mined" | "block-proposed" | "block-missed" | "attestation-sent" | "attestation-missed";
        slot: bigint;
    }[];
    lastProposal?: {
        date: string;
        slot: bigint;
        timestamp: bigint;
    } | undefined;
    lastAttestation?: {
        date: string;
        slot: bigint;
        timestamp: bigint;
    } | undefined;
}, {
    address: string;
    totalSlots: string | number | bigint;
    missedProposals: {
        currentStreak: string | number | bigint;
        rate: number;
        count: string | number | bigint;
    };
    missedAttestations: {
        currentStreak: string | number | bigint;
        rate: number;
        count: string | number | bigint;
    };
    history: {
        status: "block-mined" | "block-proposed" | "block-missed" | "attestation-sent" | "attestation-missed";
        slot: string | number | bigint;
    }[];
    lastProposal?: {
        date: string;
        slot: string | number | bigint;
        timestamp: string | number | bigint;
    } | undefined;
    lastAttestation?: {
        date: string;
        slot: string | number | bigint;
        timestamp: string | number | bigint;
    } | undefined;
}>;
export declare const ValidatorsStatsSchema: z.ZodObject<{
    stats: z.ZodRecord<z.ZodString, z.ZodObject<{
        address: z.ZodType<import("@aztec/foundation/schemas").EthAddress, any, string>;
        lastProposal: z.ZodOptional<z.ZodObject<{
            timestamp: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
            slot: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
            date: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            date: string;
            slot: bigint;
            timestamp: bigint;
        }, {
            date: string;
            slot: string | number | bigint;
            timestamp: string | number | bigint;
        }>>;
        lastAttestation: z.ZodOptional<z.ZodObject<{
            timestamp: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
            slot: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
            date: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            date: string;
            slot: bigint;
            timestamp: bigint;
        }, {
            date: string;
            slot: string | number | bigint;
            timestamp: string | number | bigint;
        }>>;
        totalSlots: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
        missedProposals: z.ZodObject<{
            currentStreak: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
            rate: z.ZodNumber;
            count: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            currentStreak: number;
            rate: number;
            count: number;
        }, {
            currentStreak: string | number | bigint;
            rate: number;
            count: string | number | bigint;
        }>;
        missedAttestations: z.ZodObject<{
            currentStreak: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
            rate: z.ZodNumber;
            count: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            currentStreak: number;
            rate: number;
            count: number;
        }, {
            currentStreak: string | number | bigint;
            rate: number;
            count: string | number | bigint;
        }>;
        history: z.ZodArray<z.ZodObject<{
            slot: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
            status: z.ZodEnum<["block-mined", "block-proposed", "block-missed", "attestation-sent", "attestation-missed"]>;
        }, "strip", z.ZodTypeAny, {
            status: "block-mined" | "block-proposed" | "block-missed" | "attestation-sent" | "attestation-missed";
            slot: bigint;
        }, {
            status: "block-mined" | "block-proposed" | "block-missed" | "attestation-sent" | "attestation-missed";
            slot: string | number | bigint;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        address: import("@aztec/foundation/schemas").EthAddress;
        totalSlots: number;
        missedProposals: {
            currentStreak: number;
            rate: number;
            count: number;
        };
        missedAttestations: {
            currentStreak: number;
            rate: number;
            count: number;
        };
        history: {
            status: "block-mined" | "block-proposed" | "block-missed" | "attestation-sent" | "attestation-missed";
            slot: bigint;
        }[];
        lastProposal?: {
            date: string;
            slot: bigint;
            timestamp: bigint;
        } | undefined;
        lastAttestation?: {
            date: string;
            slot: bigint;
            timestamp: bigint;
        } | undefined;
    }, {
        address: string;
        totalSlots: string | number | bigint;
        missedProposals: {
            currentStreak: string | number | bigint;
            rate: number;
            count: string | number | bigint;
        };
        missedAttestations: {
            currentStreak: string | number | bigint;
            rate: number;
            count: string | number | bigint;
        };
        history: {
            status: "block-mined" | "block-proposed" | "block-missed" | "attestation-sent" | "attestation-missed";
            slot: string | number | bigint;
        }[];
        lastProposal?: {
            date: string;
            slot: string | number | bigint;
            timestamp: string | number | bigint;
        } | undefined;
        lastAttestation?: {
            date: string;
            slot: string | number | bigint;
            timestamp: string | number | bigint;
        } | undefined;
    }>>;
    lastProcessedSlot: z.ZodOptional<z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>>;
    initialSlot: z.ZodOptional<z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>>;
    slotWindow: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    stats: Record<string, {
        address: import("@aztec/foundation/schemas").EthAddress;
        totalSlots: number;
        missedProposals: {
            currentStreak: number;
            rate: number;
            count: number;
        };
        missedAttestations: {
            currentStreak: number;
            rate: number;
            count: number;
        };
        history: {
            status: "block-mined" | "block-proposed" | "block-missed" | "attestation-sent" | "attestation-missed";
            slot: bigint;
        }[];
        lastProposal?: {
            date: string;
            slot: bigint;
            timestamp: bigint;
        } | undefined;
        lastAttestation?: {
            date: string;
            slot: bigint;
            timestamp: bigint;
        } | undefined;
    }>;
    slotWindow: number;
    lastProcessedSlot?: bigint | undefined;
    initialSlot?: bigint | undefined;
}, {
    stats: Record<string, {
        address: string;
        totalSlots: string | number | bigint;
        missedProposals: {
            currentStreak: string | number | bigint;
            rate: number;
            count: string | number | bigint;
        };
        missedAttestations: {
            currentStreak: string | number | bigint;
            rate: number;
            count: string | number | bigint;
        };
        history: {
            status: "block-mined" | "block-proposed" | "block-missed" | "attestation-sent" | "attestation-missed";
            slot: string | number | bigint;
        }[];
        lastProposal?: {
            date: string;
            slot: string | number | bigint;
            timestamp: string | number | bigint;
        } | undefined;
        lastAttestation?: {
            date: string;
            slot: string | number | bigint;
            timestamp: string | number | bigint;
        } | undefined;
    }>;
    slotWindow: string | number | bigint;
    lastProcessedSlot?: string | number | bigint | undefined;
    initialSlot?: string | number | bigint | undefined;
}>;
//# sourceMappingURL=schemas.d.ts.map