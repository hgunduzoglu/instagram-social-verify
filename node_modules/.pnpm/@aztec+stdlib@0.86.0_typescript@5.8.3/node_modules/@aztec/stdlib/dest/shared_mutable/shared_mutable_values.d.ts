/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import { Fr } from '@aztec/foundation/fields';
import { BufferReader, FieldReader } from '@aztec/foundation/serialize';
import { ScheduledDelayChange } from './scheduled_delay_change.js';
import { ScheduledValueChange } from './scheduled_value_change.js';
export declare const SHARED_MUTABLE_VALUES_LEN: number;
export declare class SharedMutableValues {
    svc: ScheduledValueChange;
    sdc: ScheduledDelayChange;
    constructor(svc: ScheduledValueChange, sdc: ScheduledDelayChange);
    static fromFields(fields: Fr[] | FieldReader): SharedMutableValues;
    toFields(): Fr[];
    toBuffer(): Buffer;
    static fromBuffer(buffer: Buffer | BufferReader, valueSize: number): SharedMutableValues;
    static empty(valueSize: number): SharedMutableValues;
    static readFromTree(sharedMutableSlot: Fr, readStorage: (storageSlot: Fr) => Promise<Fr>): Promise<SharedMutableValues>;
    isEmpty(): boolean;
    writeToTree(sharedMutableSlot: Fr, storageWrite: (storageSlot: Fr, value: Fr) => Promise<void>): Promise<void>;
    hash(): Promise<Fr>;
}
//# sourceMappingURL=shared_mutable_values.d.ts.map