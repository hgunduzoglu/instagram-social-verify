import { UPDATED_CLASS_IDS_SLOT } from '@aztec/constants';
import { Fr } from '@aztec/foundation/fields';
import { deriveStorageSlotInMap } from '../hash/map_slot.js';
import { SHARED_MUTABLE_VALUES_LEN, SharedMutableValues } from './shared_mutable_values.js';
export class SharedMutableValuesWithHash {
    smv;
    constructor(svc, sdc){
        this.smv = new SharedMutableValues(svc, sdc);
    }
    async toFields() {
        return [
            ...this.smv.toFields(),
            await this.smv.hash()
        ];
    }
    async writeToTree(sharedMutableSlot, storageWrite) {
        const fields = await this.toFields();
        for(let i = 0; i < fields.length; i++){
            await storageWrite(sharedMutableSlot.add(new Fr(i)), fields[i]);
        }
    }
    static async getContractUpdateSlots(contractAddress) {
        const sharedMutableSlot = await deriveStorageSlotInMap(new Fr(UPDATED_CLASS_IDS_SLOT), contractAddress);
        const sharedMutableHashSlot = sharedMutableSlot.add(new Fr(SHARED_MUTABLE_VALUES_LEN));
        return {
            sharedMutableSlot,
            sharedMutableHashSlot
        };
    }
}
