import { Fr } from '@aztec/foundation/fields';
import { BufferReader, FieldReader, serializeToBuffer } from '@aztec/foundation/serialize';
/**
 * Read operations from the public state tree.
 */ export class PublicDataRead {
    leafSlot;
    value;
    counter;
    constructor(/**
     * Index of the leaf in the public data tree.
     */ leafSlot, /**
     * Returned value from the public data tree.
     */ value, /**
     * Side effect counter tracking position of this event in tx execution.
     */ counter){
        this.leafSlot = leafSlot;
        this.value = value;
        this.counter = counter;
    }
    toBuffer() {
        return serializeToBuffer(this.leafSlot, this.value, this.counter);
    }
    isEmpty() {
        return this.leafSlot.isZero() && this.value.isZero() && !this.counter;
    }
    static fromFields(fields) {
        const reader = FieldReader.asReader(fields);
        return new PublicDataRead(reader.readField(), reader.readField(), reader.readU32());
    }
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new PublicDataRead(Fr.fromBuffer(reader), Fr.fromBuffer(reader), reader.readNumber());
    }
    static empty() {
        return new PublicDataRead(Fr.ZERO, Fr.ZERO, 0);
    }
    equals(other) {
        return this.leafSlot.equals(other.leafSlot) && this.value.equals(other.value) && this.counter == other.counter;
    }
}
