import { Fr } from '@aztec/foundation/fields';
import { BufferReader, FieldReader, serializeToBuffer } from '@aztec/foundation/serialize';
import { inspect } from 'util';
import { computePublicDataTreeLeafSlot } from '../hash/hash.js';
// TO BE REMOVED.
/**
 * Write operations on the public data tree including the previous value.
 */ export class PublicDataUpdateRequest {
    leafSlot;
    newValue;
    sideEffectCounter;
    constructor(/**
     * Index of the leaf in the public data tree which is to be updated.
     */ leafSlot, /**
     * New value of the leaf.
     */ newValue, /**
     * Side effect counter tracking position of this event in tx execution.
     */ sideEffectCounter){
        this.leafSlot = leafSlot;
        this.newValue = newValue;
        this.sideEffectCounter = sideEffectCounter;
    }
    static from(args) {
        return new PublicDataUpdateRequest(args.leafIndex, args.newValue, args.sideEffectCounter);
    }
    get counter() {
        return this.sideEffectCounter;
    }
    get position() {
        return this.leafSlot;
    }
    toBuffer() {
        return serializeToBuffer(this.leafSlot, this.newValue, this.sideEffectCounter);
    }
    isEmpty() {
        return this.leafSlot.isZero() && this.newValue.isZero();
    }
    static fromFields(fields) {
        const reader = FieldReader.asReader(fields);
        return new PublicDataUpdateRequest(reader.readField(), reader.readField(), reader.readU32());
    }
    static isEmpty(x) {
        return x.isEmpty();
    }
    equals(other) {
        return this.leafSlot.equals(other.leafSlot) && this.newValue.equals(other.newValue);
    }
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new PublicDataUpdateRequest(Fr.fromBuffer(reader), Fr.fromBuffer(reader), reader.readNumber());
    }
    static async fromContractStorageUpdateRequest(contractAddress, updateRequest) {
        const leafSlot = await computePublicDataTreeLeafSlot(contractAddress, updateRequest.storageSlot);
        return new PublicDataUpdateRequest(leafSlot, updateRequest.newValue, updateRequest.counter);
    }
    static empty() {
        return new PublicDataUpdateRequest(Fr.ZERO, Fr.ZERO, 0);
    }
    toFriendlyJSON() {
        return `Leaf=${this.leafSlot.toFriendlyJSON()}: ${this.newValue.toFriendlyJSON()}, SideEffectCounter=${this.sideEffectCounter}`;
    }
    [inspect.custom]() {
        return `PublicDataUpdateRequest { leafSlot: ${this.leafSlot.toFriendlyJSON()}, newValue: ${this.newValue.toFriendlyJSON()}, sideEffectCounter: ${this.sideEffectCounter} }`;
    }
}
