import { PUBLIC_CALL_STACK_ITEM_COMPRESSED_LENGTH } from '@aztec/constants';
import { Fr } from '@aztec/foundation/fields';
import { BufferReader, FieldReader, serializeToBuffer, serializeToFields } from '@aztec/foundation/serialize';
import { AztecAddress } from '../aztec-address/index.js';
import { Gas } from '../gas/gas.js';
import { CallContext } from '../tx/call_context.js';
import { RevertCode } from './revert_code.js';
// TO BE REMOVED
/**
 * Compressed call stack item on a public call.
 */ export class PublicCallStackItemCompressed {
    contractAddress;
    callContext;
    argsHash;
    returnsHash;
    revertCode;
    startGasLeft;
    endGasLeft;
    constructor(contractAddress, callContext, argsHash, returnsHash, revertCode, /** How much gas was available for execution. */ startGasLeft, /** How much gas was left after execution. */ endGasLeft){
        this.contractAddress = contractAddress;
        this.callContext = callContext;
        this.argsHash = argsHash;
        this.returnsHash = returnsHash;
        this.revertCode = revertCode;
        this.startGasLeft = startGasLeft;
        this.endGasLeft = endGasLeft;
    }
    static getFields(fields) {
        return [
            fields.contractAddress,
            fields.callContext,
            fields.argsHash,
            fields.returnsHash,
            fields.revertCode,
            fields.startGasLeft,
            fields.endGasLeft
        ];
    }
    toFields() {
        const fields = serializeToFields(...PublicCallStackItemCompressed.getFields(this));
        if (fields.length !== PUBLIC_CALL_STACK_ITEM_COMPRESSED_LENGTH) {
            throw new Error(`Invalid number of fields for PublicCallStackItemCompressed. Expected ${PUBLIC_CALL_STACK_ITEM_COMPRESSED_LENGTH}, got ${fields.length}`);
        }
        return fields;
    }
    toBuffer() {
        return serializeToBuffer(...PublicCallStackItemCompressed.getFields(this));
    }
    /**
   * Deserializes from a buffer or reader.
   * @param buffer - Buffer or reader to read from.
   * @returns The deserialized instance.
   */ static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new PublicCallStackItemCompressed(reader.readObject(AztecAddress), reader.readObject(CallContext), reader.readObject(Fr), reader.readObject(Fr), reader.readObject(RevertCode), reader.readObject(Gas), reader.readObject(Gas));
    }
    static fromFields(fields) {
        const reader = FieldReader.asReader(fields);
        return new PublicCallStackItemCompressed(AztecAddress.fromFields(reader), CallContext.fromFields(reader), reader.readField(), reader.readField(), RevertCode.fromFields(reader), Gas.fromFields(reader), Gas.fromFields(reader));
    }
    /**
   * Returns a new instance of PublicCallStackItem with zero contract address, function data and public inputs.
   * @returns A new instance of PublicCallStackItem with zero contract address, function data and public inputs.
   */ static empty() {
        return new PublicCallStackItemCompressed(AztecAddress.ZERO, CallContext.empty(), Fr.ZERO, Fr.ZERO, RevertCode.OK, Gas.empty(), Gas.empty());
    }
    isEmpty() {
        return this.contractAddress.isZero() && this.callContext.isEmpty() && this.argsHash.isEmpty() && this.returnsHash.isEmpty() && this.revertCode.equals(RevertCode.OK) && this.startGasLeft.isEmpty() && this.endGasLeft.isEmpty();
    }
}
