/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import { Fr } from '@aztec/foundation/fields';
import { BufferReader, FieldReader } from '@aztec/foundation/serialize';
import type { FieldsOf } from '@aztec/foundation/types';
import { z } from 'zod';
/**
 * Write operations on the public state tree.
 */
export declare class PublicDataWrite {
    /**
     * The updated leaf.
     */
    readonly leafSlot: Fr;
    /**
     * New value of the leaf.
     */
    readonly value: Fr;
    static SIZE_IN_BYTES: number;
    constructor(
    /**
     * The updated leaf.
     */
    leafSlot: Fr, 
    /**
     * New value of the leaf.
     */
    value: Fr);
    static get schema(): z.ZodEffects<z.ZodObject<{
        leafSlot: z.ZodType<Fr, any, string>;
        value: z.ZodType<Fr, any, string>;
    }, "strip", z.ZodTypeAny, {
        value: Fr;
        leafSlot: Fr;
    }, {
        value: string;
        leafSlot: string;
    }>, PublicDataWrite, {
        value: string;
        leafSlot: string;
    }>;
    static from(fields: FieldsOf<PublicDataWrite>): PublicDataWrite;
    static getFields(fields: FieldsOf<PublicDataWrite>): readonly [Fr, Fr];
    static fromFields(fields: Fr[] | FieldReader): PublicDataWrite;
    static fromBuffer(buffer: Buffer | BufferReader): PublicDataWrite;
    toBuffer(): Buffer;
    static fromString(str: string): PublicDataWrite;
    toString(): `0x${string}`;
    static empty(): PublicDataWrite;
    static random(): PublicDataWrite;
    static isEmpty(data: PublicDataWrite): boolean;
    isEmpty(): boolean;
    equals(other: PublicDataWrite): boolean;
}
//# sourceMappingURL=public_data_write.d.ts.map