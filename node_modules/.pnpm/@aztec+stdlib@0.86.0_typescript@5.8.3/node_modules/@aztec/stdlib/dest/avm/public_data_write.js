import { Fr } from '@aztec/foundation/fields';
import { schemas } from '@aztec/foundation/schemas';
import { BufferReader, FieldReader, serializeToBuffer } from '@aztec/foundation/serialize';
import { bufferToHex, hexToBuffer } from '@aztec/foundation/string';
import { z } from 'zod';
/**
 * Write operations on the public state tree.
 */ export class PublicDataWrite {
    leafSlot;
    value;
    static SIZE_IN_BYTES = Fr.SIZE_IN_BYTES * 2;
    constructor(/**
     * The updated leaf.
     */ leafSlot, /**
     * New value of the leaf.
     */ value){
        this.leafSlot = leafSlot;
        this.value = value;
    }
    static get schema() {
        return z.object({
            leafSlot: schemas.Fr,
            value: schemas.Fr
        }).transform(PublicDataWrite.from);
    }
    static from(fields) {
        return new PublicDataWrite(...PublicDataWrite.getFields(fields));
    }
    static getFields(fields) {
        return [
            fields.leafSlot,
            fields.value
        ];
    }
    static fromFields(fields) {
        const reader = FieldReader.asReader(fields);
        return new PublicDataWrite(reader.readField(), reader.readField());
    }
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new PublicDataWrite(Fr.fromBuffer(reader), Fr.fromBuffer(reader));
    }
    toBuffer() {
        return serializeToBuffer(...PublicDataWrite.getFields(this));
    }
    static fromString(str) {
        return PublicDataWrite.fromBuffer(hexToBuffer(str));
    }
    toString() {
        return bufferToHex(this.toBuffer());
    }
    static empty() {
        return new PublicDataWrite(Fr.ZERO, Fr.ZERO);
    }
    static random() {
        return new PublicDataWrite(Fr.random(), Fr.random());
    }
    static isEmpty(data) {
        return data.isEmpty();
    }
    isEmpty() {
        return this.leafSlot.isZero() && this.value.isZero();
    }
    equals(other) {
        return this.leafSlot.equals(other.leafSlot) && this.value.equals(other.value);
    }
}
