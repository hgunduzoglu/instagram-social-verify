/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import { MAX_ENQUEUED_CALLS_PER_TX } from '@aztec/constants';
import { Fr } from '@aztec/foundation/fields';
import { BufferReader, FieldReader, type Tuple } from '@aztec/foundation/serialize';
import { inspect } from 'util';
import { z } from 'zod';
import { AztecAddress } from '../aztec-address/index.js';
import { Gas, GasSettings } from '../gas/index.js';
import { PrivateToAvmAccumulatedData, PrivateToAvmAccumulatedDataArrayLengths } from '../kernel/private_to_avm_accumulated_data.js';
import { PublicCallRequest } from '../kernel/public_call_request.js';
import { GlobalVariables } from '../tx/global_variables.js';
import { TreeSnapshots } from '../tx/tree_snapshots.js';
import { AvmAccumulatedData } from './avm_accumulated_data.js';
export declare class AvmCircuitPublicInputs {
    globalVariables: GlobalVariables;
    startTreeSnapshots: TreeSnapshots;
    startGasUsed: Gas;
    gasSettings: GasSettings;
    feePayer: AztecAddress;
    publicSetupCallRequests: Tuple<PublicCallRequest, typeof MAX_ENQUEUED_CALLS_PER_TX>;
    publicAppLogicCallRequests: Tuple<PublicCallRequest, typeof MAX_ENQUEUED_CALLS_PER_TX>;
    publicTeardownCallRequest: PublicCallRequest;
    previousNonRevertibleAccumulatedDataArrayLengths: PrivateToAvmAccumulatedDataArrayLengths;
    previousRevertibleAccumulatedDataArrayLengths: PrivateToAvmAccumulatedDataArrayLengths;
    previousNonRevertibleAccumulatedData: PrivateToAvmAccumulatedData;
    previousRevertibleAccumulatedData: PrivateToAvmAccumulatedData;
    endTreeSnapshots: TreeSnapshots;
    endGasUsed: Gas;
    accumulatedData: AvmAccumulatedData;
    transactionFee: Fr;
    reverted: boolean;
    constructor(globalVariables: GlobalVariables, startTreeSnapshots: TreeSnapshots, startGasUsed: Gas, gasSettings: GasSettings, feePayer: AztecAddress, publicSetupCallRequests: Tuple<PublicCallRequest, typeof MAX_ENQUEUED_CALLS_PER_TX>, publicAppLogicCallRequests: Tuple<PublicCallRequest, typeof MAX_ENQUEUED_CALLS_PER_TX>, publicTeardownCallRequest: PublicCallRequest, previousNonRevertibleAccumulatedDataArrayLengths: PrivateToAvmAccumulatedDataArrayLengths, previousRevertibleAccumulatedDataArrayLengths: PrivateToAvmAccumulatedDataArrayLengths, previousNonRevertibleAccumulatedData: PrivateToAvmAccumulatedData, previousRevertibleAccumulatedData: PrivateToAvmAccumulatedData, endTreeSnapshots: TreeSnapshots, endGasUsed: Gas, accumulatedData: AvmAccumulatedData, transactionFee: Fr, reverted: boolean);
    static get schema(): z.ZodEffects<z.ZodObject<{
        globalVariables: z.ZodEffects<z.ZodObject<{
            chainId: import("@aztec/foundation/schemas").ZodFor<Fr>;
            version: import("@aztec/foundation/schemas").ZodFor<Fr>;
            blockNumber: import("@aztec/foundation/schemas").ZodFor<Fr>;
            slotNumber: import("@aztec/foundation/schemas").ZodFor<Fr>;
            timestamp: import("@aztec/foundation/schemas").ZodFor<Fr>;
            coinbase: import("@aztec/foundation/schemas").ZodFor<import("@aztec/foundation/schemas").EthAddress>;
            feeRecipient: import("@aztec/foundation/schemas").ZodFor<AztecAddress>;
            gasFees: z.ZodEffects<z.ZodObject<{
                feePerDaGas: z.ZodType<Fr, any, string>;
                feePerL2Gas: z.ZodType<Fr, any, string>;
            }, "strip", z.ZodTypeAny, {
                feePerDaGas: Fr;
                feePerL2Gas: Fr;
            }, {
                feePerDaGas: string;
                feePerL2Gas: string;
            }>, import("../gas/gas_fees.js").GasFees, {
                feePerDaGas: string;
                feePerL2Gas: string;
            }>;
        }, "strip", z.ZodTypeAny, {
            chainId: Fr;
            version: Fr;
            blockNumber: Fr;
            slotNumber: Fr;
            timestamp: Fr;
            coinbase: import("@aztec/foundation/schemas").EthAddress;
            feeRecipient: AztecAddress;
            gasFees: import("../gas/gas_fees.js").GasFees;
        }, {
            gasFees: {
                feePerDaGas: string;
                feePerL2Gas: string;
            };
            chainId?: any;
            version?: any;
            blockNumber?: any;
            slotNumber?: any;
            timestamp?: any;
            coinbase?: any;
            feeRecipient?: any;
        }>, GlobalVariables, {
            gasFees: {
                feePerDaGas: string;
                feePerL2Gas: string;
            };
            chainId?: any;
            version?: any;
            blockNumber?: any;
            slotNumber?: any;
            timestamp?: any;
            coinbase?: any;
            feeRecipient?: any;
        }>;
        startTreeSnapshots: z.ZodEffects<z.ZodObject<{
            l1ToL2MessageTree: z.ZodEffects<z.ZodObject<{
                root: z.ZodType<Fr, any, string>;
                nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                root: Fr;
                nextAvailableLeafIndex: number;
            }, {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            }>, import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot, {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            }>;
            noteHashTree: z.ZodEffects<z.ZodObject<{
                root: z.ZodType<Fr, any, string>;
                nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                root: Fr;
                nextAvailableLeafIndex: number;
            }, {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            }>, import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot, {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            }>;
            nullifierTree: z.ZodEffects<z.ZodObject<{
                root: z.ZodType<Fr, any, string>;
                nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                root: Fr;
                nextAvailableLeafIndex: number;
            }, {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            }>, import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot, {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            }>;
            publicDataTree: z.ZodEffects<z.ZodObject<{
                root: z.ZodType<Fr, any, string>;
                nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                root: Fr;
                nextAvailableLeafIndex: number;
            }, {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            }>, import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot, {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            }>;
        }, "strip", z.ZodTypeAny, {
            noteHashTree: import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot;
            nullifierTree: import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot;
            publicDataTree: import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot;
            l1ToL2MessageTree: import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot;
        }, {
            noteHashTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            nullifierTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            publicDataTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            l1ToL2MessageTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
        }>, TreeSnapshots, {
            noteHashTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            nullifierTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            publicDataTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            l1ToL2MessageTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
        }>;
        startGasUsed: z.ZodEffects<z.ZodObject<{
            daGas: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
            l2Gas: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            daGas: number;
            l2Gas: number;
        }, {
            daGas: string | number | bigint;
            l2Gas: string | number | bigint;
        }>, Gas, {
            daGas: string | number | bigint;
            l2Gas: string | number | bigint;
        }>;
        gasSettings: z.ZodEffects<z.ZodObject<{
            gasLimits: z.ZodEffects<z.ZodObject<{
                daGas: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                l2Gas: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                daGas: number;
                l2Gas: number;
            }, {
                daGas: string | number | bigint;
                l2Gas: string | number | bigint;
            }>, Gas, {
                daGas: string | number | bigint;
                l2Gas: string | number | bigint;
            }>;
            teardownGasLimits: z.ZodEffects<z.ZodObject<{
                daGas: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                l2Gas: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                daGas: number;
                l2Gas: number;
            }, {
                daGas: string | number | bigint;
                l2Gas: string | number | bigint;
            }>, Gas, {
                daGas: string | number | bigint;
                l2Gas: string | number | bigint;
            }>;
            maxFeesPerGas: z.ZodEffects<z.ZodObject<{
                feePerDaGas: z.ZodType<Fr, any, string>;
                feePerL2Gas: z.ZodType<Fr, any, string>;
            }, "strip", z.ZodTypeAny, {
                feePerDaGas: Fr;
                feePerL2Gas: Fr;
            }, {
                feePerDaGas: string;
                feePerL2Gas: string;
            }>, import("../gas/gas_fees.js").GasFees, {
                feePerDaGas: string;
                feePerL2Gas: string;
            }>;
            maxPriorityFeesPerGas: z.ZodEffects<z.ZodObject<{
                feePerDaGas: z.ZodType<Fr, any, string>;
                feePerL2Gas: z.ZodType<Fr, any, string>;
            }, "strip", z.ZodTypeAny, {
                feePerDaGas: Fr;
                feePerL2Gas: Fr;
            }, {
                feePerDaGas: string;
                feePerL2Gas: string;
            }>, import("../gas/gas_fees.js").GasFees, {
                feePerDaGas: string;
                feePerL2Gas: string;
            }>;
        }, "strip", z.ZodTypeAny, {
            gasLimits: Gas;
            teardownGasLimits: Gas;
            maxFeesPerGas: import("../gas/gas_fees.js").GasFees;
            maxPriorityFeesPerGas: import("../gas/gas_fees.js").GasFees;
        }, {
            gasLimits: {
                daGas: string | number | bigint;
                l2Gas: string | number | bigint;
            };
            teardownGasLimits: {
                daGas: string | number | bigint;
                l2Gas: string | number | bigint;
            };
            maxFeesPerGas: {
                feePerDaGas: string;
                feePerL2Gas: string;
            };
            maxPriorityFeesPerGas: {
                feePerDaGas: string;
                feePerL2Gas: string;
            };
        }>, GasSettings, {
            gasLimits: {
                daGas: string | number | bigint;
                l2Gas: string | number | bigint;
            };
            teardownGasLimits: {
                daGas: string | number | bigint;
                l2Gas: string | number | bigint;
            };
            maxFeesPerGas: {
                feePerDaGas: string;
                feePerL2Gas: string;
            };
            maxPriorityFeesPerGas: {
                feePerDaGas: string;
                feePerL2Gas: string;
            };
        }>;
        feePayer: import("@aztec/foundation/schemas").ZodFor<AztecAddress>;
        publicSetupCallRequests: z.ZodArray<z.ZodEffects<z.ZodObject<{
            msgSender: import("@aztec/foundation/schemas").ZodFor<AztecAddress>;
            contractAddress: import("@aztec/foundation/schemas").ZodFor<AztecAddress>;
            isStaticCall: z.ZodBoolean;
            calldataHash: z.ZodType<Fr, any, string>;
        }, "strip", z.ZodTypeAny, {
            contractAddress: AztecAddress;
            msgSender: AztecAddress;
            isStaticCall: boolean;
            calldataHash: Fr;
        }, {
            isStaticCall: boolean;
            calldataHash: string;
            contractAddress?: any;
            msgSender?: any;
        }>, PublicCallRequest, {
            isStaticCall: boolean;
            calldataHash: string;
            contractAddress?: any;
            msgSender?: any;
        }>, "many">;
        publicAppLogicCallRequests: z.ZodArray<z.ZodEffects<z.ZodObject<{
            msgSender: import("@aztec/foundation/schemas").ZodFor<AztecAddress>;
            contractAddress: import("@aztec/foundation/schemas").ZodFor<AztecAddress>;
            isStaticCall: z.ZodBoolean;
            calldataHash: z.ZodType<Fr, any, string>;
        }, "strip", z.ZodTypeAny, {
            contractAddress: AztecAddress;
            msgSender: AztecAddress;
            isStaticCall: boolean;
            calldataHash: Fr;
        }, {
            isStaticCall: boolean;
            calldataHash: string;
            contractAddress?: any;
            msgSender?: any;
        }>, PublicCallRequest, {
            isStaticCall: boolean;
            calldataHash: string;
            contractAddress?: any;
            msgSender?: any;
        }>, "many">;
        publicTeardownCallRequest: z.ZodEffects<z.ZodObject<{
            msgSender: import("@aztec/foundation/schemas").ZodFor<AztecAddress>;
            contractAddress: import("@aztec/foundation/schemas").ZodFor<AztecAddress>;
            isStaticCall: z.ZodBoolean;
            calldataHash: z.ZodType<Fr, any, string>;
        }, "strip", z.ZodTypeAny, {
            contractAddress: AztecAddress;
            msgSender: AztecAddress;
            isStaticCall: boolean;
            calldataHash: Fr;
        }, {
            isStaticCall: boolean;
            calldataHash: string;
            contractAddress?: any;
            msgSender?: any;
        }>, PublicCallRequest, {
            isStaticCall: boolean;
            calldataHash: string;
            contractAddress?: any;
            msgSender?: any;
        }>;
        previousNonRevertibleAccumulatedDataArrayLengths: z.ZodEffects<z.ZodObject<{
            noteHashes: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
            nullifiers: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
            l2ToL1Msgs: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            noteHashes: number;
            nullifiers: number;
            l2ToL1Msgs: number;
        }, {
            noteHashes: string | number | bigint;
            nullifiers: string | number | bigint;
            l2ToL1Msgs: string | number | bigint;
        }>, PrivateToAvmAccumulatedDataArrayLengths, {
            noteHashes: string | number | bigint;
            nullifiers: string | number | bigint;
            l2ToL1Msgs: string | number | bigint;
        }>;
        previousRevertibleAccumulatedDataArrayLengths: z.ZodEffects<z.ZodObject<{
            noteHashes: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
            nullifiers: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
            l2ToL1Msgs: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            noteHashes: number;
            nullifiers: number;
            l2ToL1Msgs: number;
        }, {
            noteHashes: string | number | bigint;
            nullifiers: string | number | bigint;
            l2ToL1Msgs: string | number | bigint;
        }>, PrivateToAvmAccumulatedDataArrayLengths, {
            noteHashes: string | number | bigint;
            nullifiers: string | number | bigint;
            l2ToL1Msgs: string | number | bigint;
        }>;
        previousNonRevertibleAccumulatedData: z.ZodEffects<z.ZodObject<{
            noteHashes: z.ZodArray<z.ZodType<Fr, any, string>, "many">;
            nullifiers: z.ZodArray<z.ZodType<Fr, any, string>, "many">;
            l2ToL1Msgs: z.ZodArray<z.ZodEffects<z.ZodObject<{
                message: z.ZodEffects<z.ZodObject<{
                    recipient: z.ZodType<import("@aztec/foundation/schemas").EthAddress, any, string>;
                    content: z.ZodType<Fr, any, string>;
                    counter: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    counter: number;
                    recipient: import("@aztec/foundation/schemas").EthAddress;
                    content: Fr;
                }, {
                    counter: number;
                    recipient: string;
                    content: string;
                }>, import("../messaging/l2_to_l1_message.js").L2ToL1Message, {
                    counter: number;
                    recipient: string;
                    content: string;
                }>;
                contractAddress: import("@aztec/foundation/schemas").ZodFor<AztecAddress>;
            }, "strip", z.ZodTypeAny, {
                message: import("../messaging/l2_to_l1_message.js").L2ToL1Message;
                contractAddress: AztecAddress;
            }, {
                message: {
                    counter: number;
                    recipient: string;
                    content: string;
                };
                contractAddress?: any;
            }>, import("../messaging/l2_to_l1_message.js").ScopedL2ToL1Message, {
                message: {
                    counter: number;
                    recipient: string;
                    content: string;
                };
                contractAddress?: any;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            noteHashes: Fr[];
            nullifiers: Fr[];
            l2ToL1Msgs: import("../messaging/l2_to_l1_message.js").ScopedL2ToL1Message[];
        }, {
            noteHashes: string[];
            nullifiers: string[];
            l2ToL1Msgs: {
                message: {
                    counter: number;
                    recipient: string;
                    content: string;
                };
                contractAddress?: any;
            }[];
        }>, PrivateToAvmAccumulatedData, {
            noteHashes: string[];
            nullifiers: string[];
            l2ToL1Msgs: {
                message: {
                    counter: number;
                    recipient: string;
                    content: string;
                };
                contractAddress?: any;
            }[];
        }>;
        previousRevertibleAccumulatedData: z.ZodEffects<z.ZodObject<{
            noteHashes: z.ZodArray<z.ZodType<Fr, any, string>, "many">;
            nullifiers: z.ZodArray<z.ZodType<Fr, any, string>, "many">;
            l2ToL1Msgs: z.ZodArray<z.ZodEffects<z.ZodObject<{
                message: z.ZodEffects<z.ZodObject<{
                    recipient: z.ZodType<import("@aztec/foundation/schemas").EthAddress, any, string>;
                    content: z.ZodType<Fr, any, string>;
                    counter: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    counter: number;
                    recipient: import("@aztec/foundation/schemas").EthAddress;
                    content: Fr;
                }, {
                    counter: number;
                    recipient: string;
                    content: string;
                }>, import("../messaging/l2_to_l1_message.js").L2ToL1Message, {
                    counter: number;
                    recipient: string;
                    content: string;
                }>;
                contractAddress: import("@aztec/foundation/schemas").ZodFor<AztecAddress>;
            }, "strip", z.ZodTypeAny, {
                message: import("../messaging/l2_to_l1_message.js").L2ToL1Message;
                contractAddress: AztecAddress;
            }, {
                message: {
                    counter: number;
                    recipient: string;
                    content: string;
                };
                contractAddress?: any;
            }>, import("../messaging/l2_to_l1_message.js").ScopedL2ToL1Message, {
                message: {
                    counter: number;
                    recipient: string;
                    content: string;
                };
                contractAddress?: any;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            noteHashes: Fr[];
            nullifiers: Fr[];
            l2ToL1Msgs: import("../messaging/l2_to_l1_message.js").ScopedL2ToL1Message[];
        }, {
            noteHashes: string[];
            nullifiers: string[];
            l2ToL1Msgs: {
                message: {
                    counter: number;
                    recipient: string;
                    content: string;
                };
                contractAddress?: any;
            }[];
        }>, PrivateToAvmAccumulatedData, {
            noteHashes: string[];
            nullifiers: string[];
            l2ToL1Msgs: {
                message: {
                    counter: number;
                    recipient: string;
                    content: string;
                };
                contractAddress?: any;
            }[];
        }>;
        endTreeSnapshots: z.ZodEffects<z.ZodObject<{
            l1ToL2MessageTree: z.ZodEffects<z.ZodObject<{
                root: z.ZodType<Fr, any, string>;
                nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                root: Fr;
                nextAvailableLeafIndex: number;
            }, {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            }>, import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot, {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            }>;
            noteHashTree: z.ZodEffects<z.ZodObject<{
                root: z.ZodType<Fr, any, string>;
                nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                root: Fr;
                nextAvailableLeafIndex: number;
            }, {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            }>, import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot, {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            }>;
            nullifierTree: z.ZodEffects<z.ZodObject<{
                root: z.ZodType<Fr, any, string>;
                nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                root: Fr;
                nextAvailableLeafIndex: number;
            }, {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            }>, import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot, {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            }>;
            publicDataTree: z.ZodEffects<z.ZodObject<{
                root: z.ZodType<Fr, any, string>;
                nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                root: Fr;
                nextAvailableLeafIndex: number;
            }, {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            }>, import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot, {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            }>;
        }, "strip", z.ZodTypeAny, {
            noteHashTree: import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot;
            nullifierTree: import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot;
            publicDataTree: import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot;
            l1ToL2MessageTree: import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot;
        }, {
            noteHashTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            nullifierTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            publicDataTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            l1ToL2MessageTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
        }>, TreeSnapshots, {
            noteHashTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            nullifierTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            publicDataTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            l1ToL2MessageTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
        }>;
        endGasUsed: z.ZodEffects<z.ZodObject<{
            daGas: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
            l2Gas: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            daGas: number;
            l2Gas: number;
        }, {
            daGas: string | number | bigint;
            l2Gas: string | number | bigint;
        }>, Gas, {
            daGas: string | number | bigint;
            l2Gas: string | number | bigint;
        }>;
        accumulatedData: z.ZodEffects<z.ZodObject<{
            noteHashes: z.ZodArray<z.ZodType<Fr, any, string>, "many">;
            nullifiers: z.ZodArray<z.ZodType<Fr, any, string>, "many">;
            l2ToL1Msgs: z.ZodArray<z.ZodEffects<z.ZodObject<{
                message: z.ZodEffects<z.ZodObject<{
                    recipient: z.ZodType<import("@aztec/foundation/schemas").EthAddress, any, string>;
                    content: z.ZodType<Fr, any, string>;
                    counter: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    counter: number;
                    recipient: import("@aztec/foundation/schemas").EthAddress;
                    content: Fr;
                }, {
                    counter: number;
                    recipient: string;
                    content: string;
                }>, import("../messaging/l2_to_l1_message.js").L2ToL1Message, {
                    counter: number;
                    recipient: string;
                    content: string;
                }>;
                contractAddress: import("@aztec/foundation/schemas").ZodFor<AztecAddress>;
            }, "strip", z.ZodTypeAny, {
                message: import("../messaging/l2_to_l1_message.js").L2ToL1Message;
                contractAddress: AztecAddress;
            }, {
                message: {
                    counter: number;
                    recipient: string;
                    content: string;
                };
                contractAddress?: any;
            }>, import("../messaging/l2_to_l1_message.js").ScopedL2ToL1Message, {
                message: {
                    counter: number;
                    recipient: string;
                    content: string;
                };
                contractAddress?: any;
            }>, "many">;
            publicLogs: z.ZodArray<import("@aztec/foundation/schemas").ZodFor<import("../logs/public_log.js").PublicLog>, "many">;
            publicDataWrites: z.ZodArray<z.ZodEffects<z.ZodObject<{
                leafSlot: z.ZodType<Fr, any, string>;
                value: z.ZodType<Fr, any, string>;
            }, "strip", z.ZodTypeAny, {
                value: Fr;
                leafSlot: Fr;
            }, {
                value: string;
                leafSlot: string;
            }>, import("./public_data_write.js").PublicDataWrite, {
                value: string;
                leafSlot: string;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            noteHashes: Fr[];
            nullifiers: Fr[];
            l2ToL1Msgs: import("../messaging/l2_to_l1_message.js").ScopedL2ToL1Message[];
            publicLogs: import("../logs/public_log.js").PublicLog[];
            publicDataWrites: import("./public_data_write.js").PublicDataWrite[];
        }, {
            noteHashes: string[];
            nullifiers: string[];
            l2ToL1Msgs: {
                message: {
                    counter: number;
                    recipient: string;
                    content: string;
                };
                contractAddress?: any;
            }[];
            publicLogs: any[];
            publicDataWrites: {
                value: string;
                leafSlot: string;
            }[];
        }>, AvmAccumulatedData, {
            noteHashes: string[];
            nullifiers: string[];
            l2ToL1Msgs: {
                message: {
                    counter: number;
                    recipient: string;
                    content: string;
                };
                contractAddress?: any;
            }[];
            publicLogs: any[];
            publicDataWrites: {
                value: string;
                leafSlot: string;
            }[];
        }>;
        transactionFee: z.ZodType<Fr, any, string>;
        reverted: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        globalVariables: GlobalVariables;
        gasSettings: GasSettings;
        publicTeardownCallRequest: PublicCallRequest;
        transactionFee: Fr;
        feePayer: AztecAddress;
        startTreeSnapshots: TreeSnapshots;
        startGasUsed: Gas;
        publicSetupCallRequests: PublicCallRequest[];
        publicAppLogicCallRequests: PublicCallRequest[];
        previousNonRevertibleAccumulatedDataArrayLengths: PrivateToAvmAccumulatedDataArrayLengths;
        previousRevertibleAccumulatedDataArrayLengths: PrivateToAvmAccumulatedDataArrayLengths;
        previousNonRevertibleAccumulatedData: PrivateToAvmAccumulatedData;
        previousRevertibleAccumulatedData: PrivateToAvmAccumulatedData;
        endTreeSnapshots: TreeSnapshots;
        endGasUsed: Gas;
        accumulatedData: AvmAccumulatedData;
        reverted: boolean;
    }, {
        globalVariables: {
            gasFees: {
                feePerDaGas: string;
                feePerL2Gas: string;
            };
            chainId?: any;
            version?: any;
            blockNumber?: any;
            slotNumber?: any;
            timestamp?: any;
            coinbase?: any;
            feeRecipient?: any;
        };
        gasSettings: {
            gasLimits: {
                daGas: string | number | bigint;
                l2Gas: string | number | bigint;
            };
            teardownGasLimits: {
                daGas: string | number | bigint;
                l2Gas: string | number | bigint;
            };
            maxFeesPerGas: {
                feePerDaGas: string;
                feePerL2Gas: string;
            };
            maxPriorityFeesPerGas: {
                feePerDaGas: string;
                feePerL2Gas: string;
            };
        };
        publicTeardownCallRequest: {
            isStaticCall: boolean;
            calldataHash: string;
            contractAddress?: any;
            msgSender?: any;
        };
        transactionFee: string;
        startTreeSnapshots: {
            noteHashTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            nullifierTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            publicDataTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            l1ToL2MessageTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
        };
        startGasUsed: {
            daGas: string | number | bigint;
            l2Gas: string | number | bigint;
        };
        publicSetupCallRequests: {
            isStaticCall: boolean;
            calldataHash: string;
            contractAddress?: any;
            msgSender?: any;
        }[];
        publicAppLogicCallRequests: {
            isStaticCall: boolean;
            calldataHash: string;
            contractAddress?: any;
            msgSender?: any;
        }[];
        previousNonRevertibleAccumulatedDataArrayLengths: {
            noteHashes: string | number | bigint;
            nullifiers: string | number | bigint;
            l2ToL1Msgs: string | number | bigint;
        };
        previousRevertibleAccumulatedDataArrayLengths: {
            noteHashes: string | number | bigint;
            nullifiers: string | number | bigint;
            l2ToL1Msgs: string | number | bigint;
        };
        previousNonRevertibleAccumulatedData: {
            noteHashes: string[];
            nullifiers: string[];
            l2ToL1Msgs: {
                message: {
                    counter: number;
                    recipient: string;
                    content: string;
                };
                contractAddress?: any;
            }[];
        };
        previousRevertibleAccumulatedData: {
            noteHashes: string[];
            nullifiers: string[];
            l2ToL1Msgs: {
                message: {
                    counter: number;
                    recipient: string;
                    content: string;
                };
                contractAddress?: any;
            }[];
        };
        endTreeSnapshots: {
            noteHashTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            nullifierTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            publicDataTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            l1ToL2MessageTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
        };
        endGasUsed: {
            daGas: string | number | bigint;
            l2Gas: string | number | bigint;
        };
        accumulatedData: {
            noteHashes: string[];
            nullifiers: string[];
            l2ToL1Msgs: {
                message: {
                    counter: number;
                    recipient: string;
                    content: string;
                };
                contractAddress?: any;
            }[];
            publicLogs: any[];
            publicDataWrites: {
                value: string;
                leafSlot: string;
            }[];
        };
        reverted: boolean;
        feePayer?: any;
    }>, AvmCircuitPublicInputs, {
        globalVariables: {
            gasFees: {
                feePerDaGas: string;
                feePerL2Gas: string;
            };
            chainId?: any;
            version?: any;
            blockNumber?: any;
            slotNumber?: any;
            timestamp?: any;
            coinbase?: any;
            feeRecipient?: any;
        };
        gasSettings: {
            gasLimits: {
                daGas: string | number | bigint;
                l2Gas: string | number | bigint;
            };
            teardownGasLimits: {
                daGas: string | number | bigint;
                l2Gas: string | number | bigint;
            };
            maxFeesPerGas: {
                feePerDaGas: string;
                feePerL2Gas: string;
            };
            maxPriorityFeesPerGas: {
                feePerDaGas: string;
                feePerL2Gas: string;
            };
        };
        publicTeardownCallRequest: {
            isStaticCall: boolean;
            calldataHash: string;
            contractAddress?: any;
            msgSender?: any;
        };
        transactionFee: string;
        startTreeSnapshots: {
            noteHashTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            nullifierTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            publicDataTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            l1ToL2MessageTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
        };
        startGasUsed: {
            daGas: string | number | bigint;
            l2Gas: string | number | bigint;
        };
        publicSetupCallRequests: {
            isStaticCall: boolean;
            calldataHash: string;
            contractAddress?: any;
            msgSender?: any;
        }[];
        publicAppLogicCallRequests: {
            isStaticCall: boolean;
            calldataHash: string;
            contractAddress?: any;
            msgSender?: any;
        }[];
        previousNonRevertibleAccumulatedDataArrayLengths: {
            noteHashes: string | number | bigint;
            nullifiers: string | number | bigint;
            l2ToL1Msgs: string | number | bigint;
        };
        previousRevertibleAccumulatedDataArrayLengths: {
            noteHashes: string | number | bigint;
            nullifiers: string | number | bigint;
            l2ToL1Msgs: string | number | bigint;
        };
        previousNonRevertibleAccumulatedData: {
            noteHashes: string[];
            nullifiers: string[];
            l2ToL1Msgs: {
                message: {
                    counter: number;
                    recipient: string;
                    content: string;
                };
                contractAddress?: any;
            }[];
        };
        previousRevertibleAccumulatedData: {
            noteHashes: string[];
            nullifiers: string[];
            l2ToL1Msgs: {
                message: {
                    counter: number;
                    recipient: string;
                    content: string;
                };
                contractAddress?: any;
            }[];
        };
        endTreeSnapshots: {
            noteHashTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            nullifierTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            publicDataTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            l1ToL2MessageTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
        };
        endGasUsed: {
            daGas: string | number | bigint;
            l2Gas: string | number | bigint;
        };
        accumulatedData: {
            noteHashes: string[];
            nullifiers: string[];
            l2ToL1Msgs: {
                message: {
                    counter: number;
                    recipient: string;
                    content: string;
                };
                contractAddress?: any;
            }[];
            publicLogs: any[];
            publicDataWrites: {
                value: string;
                leafSlot: string;
            }[];
        };
        reverted: boolean;
        feePayer?: any;
    }>;
    static fromBuffer(buffer: Buffer | BufferReader): AvmCircuitPublicInputs;
    toBuffer(): Buffer;
    static fromString(str: string): AvmCircuitPublicInputs;
    toString(): `0x${string}`;
    static fromFields(fields: Fr[] | FieldReader): AvmCircuitPublicInputs;
    static empty(): AvmCircuitPublicInputs;
    serializeWithMessagePack(): Buffer;
    [inspect.custom](): string;
}
//# sourceMappingURL=avm_circuit_public_inputs.d.ts.map