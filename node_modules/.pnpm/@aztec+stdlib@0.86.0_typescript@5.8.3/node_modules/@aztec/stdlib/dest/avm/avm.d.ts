/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import { Fr } from '@aztec/foundation/fields';
import { z } from 'zod';
import { AztecAddress } from '../aztec-address/index.js';
import { PublicKeys } from '../keys/public_keys.js';
import { AppendOnlyTreeSnapshot } from '../trees/append_only_tree_snapshot.js';
import { MerkleTreeId } from '../trees/merkle_tree_id.js';
import { NullifierLeafPreimage } from '../trees/nullifier_leaf.js';
import { PublicDataTreeLeafPreimage } from '../trees/public_data_leaf.js';
import { GlobalVariables, TreeSnapshots, type Tx } from '../tx/index.js';
import { AvmCircuitPublicInputs } from './avm_circuit_public_inputs.js';
export declare class AvmContractClassHint {
    readonly classId: Fr;
    readonly artifactHash: Fr;
    readonly privateFunctionsRoot: Fr;
    readonly packedBytecode: Buffer;
    constructor(classId: Fr, artifactHash: Fr, privateFunctionsRoot: Fr, packedBytecode: Buffer);
    static get schema(): z.ZodEffects<z.ZodObject<{
        classId: z.ZodType<Fr, any, string>;
        artifactHash: z.ZodType<Fr, any, string>;
        privateFunctionsRoot: z.ZodType<Fr, any, string>;
        packedBytecode: z.ZodUnion<[z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, Buffer, string>, z.ZodEffects<z.ZodObject<{
            type: z.ZodLiteral<"Buffer">;
            data: z.ZodArray<z.ZodNumber, "many">;
        }, "strip", z.ZodTypeAny, {
            type: "Buffer";
            data: number[];
        }, {
            type: "Buffer";
            data: number[];
        }>, Buffer, {
            type: "Buffer";
            data: number[];
        }>]>;
    }, "strip", z.ZodTypeAny, {
        classId: Fr;
        artifactHash: Fr;
        privateFunctionsRoot: Fr;
        packedBytecode: Buffer;
    }, {
        classId: string;
        artifactHash: string;
        privateFunctionsRoot: string;
        packedBytecode: string | {
            type: "Buffer";
            data: number[];
        };
    }>, AvmContractClassHint, {
        classId: string;
        artifactHash: string;
        privateFunctionsRoot: string;
        packedBytecode: string | {
            type: "Buffer";
            data: number[];
        };
    }>;
}
export declare class AvmBytecodeCommitmentHint {
    readonly classId: Fr;
    readonly commitment: Fr;
    constructor(classId: Fr, commitment: Fr);
    static get schema(): z.ZodEffects<z.ZodObject<{
        classId: z.ZodType<Fr, any, string>;
        commitment: z.ZodType<Fr, any, string>;
    }, "strip", z.ZodTypeAny, {
        classId: Fr;
        commitment: Fr;
    }, {
        classId: string;
        commitment: string;
    }>, AvmBytecodeCommitmentHint, {
        classId: string;
        commitment: string;
    }>;
}
export declare class AvmContractInstanceHint {
    readonly address: AztecAddress;
    readonly salt: Fr;
    readonly deployer: AztecAddress;
    readonly currentContractClassId: Fr;
    readonly originalContractClassId: Fr;
    readonly initializationHash: Fr;
    readonly publicKeys: PublicKeys;
    constructor(address: AztecAddress, salt: Fr, deployer: AztecAddress, currentContractClassId: Fr, originalContractClassId: Fr, initializationHash: Fr, publicKeys: PublicKeys);
    static get schema(): z.ZodEffects<z.ZodObject<{
        address: import("@aztec/foundation/schemas").ZodFor<AztecAddress>;
        salt: z.ZodType<Fr, any, string>;
        deployer: import("@aztec/foundation/schemas").ZodFor<AztecAddress>;
        currentContractClassId: z.ZodType<Fr, any, string>;
        originalContractClassId: z.ZodType<Fr, any, string>;
        initializationHash: z.ZodType<Fr, any, string>;
        publicKeys: z.ZodEffects<z.ZodObject<{
            masterNullifierPublicKey: z.ZodType<import("@aztec/foundation/fields").Point, any, string>;
            masterIncomingViewingPublicKey: z.ZodType<import("@aztec/foundation/fields").Point, any, string>;
            masterOutgoingViewingPublicKey: z.ZodType<import("@aztec/foundation/fields").Point, any, string>;
            masterTaggingPublicKey: z.ZodType<import("@aztec/foundation/fields").Point, any, string>;
        }, "strip", z.ZodTypeAny, {
            masterNullifierPublicKey: import("@aztec/foundation/fields").Point;
            masterIncomingViewingPublicKey: import("@aztec/foundation/fields").Point;
            masterOutgoingViewingPublicKey: import("@aztec/foundation/fields").Point;
            masterTaggingPublicKey: import("@aztec/foundation/fields").Point;
        }, {
            masterNullifierPublicKey: string;
            masterIncomingViewingPublicKey: string;
            masterOutgoingViewingPublicKey: string;
            masterTaggingPublicKey: string;
        }>, PublicKeys, {
            masterNullifierPublicKey: string;
            masterIncomingViewingPublicKey: string;
            masterOutgoingViewingPublicKey: string;
            masterTaggingPublicKey: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        address: AztecAddress;
        publicKeys: PublicKeys;
        salt: Fr;
        deployer: AztecAddress;
        currentContractClassId: Fr;
        originalContractClassId: Fr;
        initializationHash: Fr;
    }, {
        publicKeys: {
            masterNullifierPublicKey: string;
            masterIncomingViewingPublicKey: string;
            masterOutgoingViewingPublicKey: string;
            masterTaggingPublicKey: string;
        };
        salt: string;
        currentContractClassId: string;
        originalContractClassId: string;
        initializationHash: string;
        address?: any;
        deployer?: any;
    }>, AvmContractInstanceHint, {
        publicKeys: {
            masterNullifierPublicKey: string;
            masterIncomingViewingPublicKey: string;
            masterOutgoingViewingPublicKey: string;
            masterTaggingPublicKey: string;
        };
        salt: string;
        currentContractClassId: string;
        originalContractClassId: string;
        initializationHash: string;
        address?: any;
        deployer?: any;
    }>;
}
export declare class AvmGetSiblingPathHint {
    readonly hintKey: AppendOnlyTreeSnapshot;
    readonly treeId: MerkleTreeId;
    readonly index: bigint;
    readonly path: Fr[];
    constructor(hintKey: AppendOnlyTreeSnapshot, treeId: MerkleTreeId, index: bigint, path: Fr[]);
    static get schema(): z.ZodEffects<z.ZodObject<{
        hintKey: z.ZodEffects<z.ZodObject<{
            root: z.ZodType<Fr, any, string>;
            nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            root: Fr;
            nextAvailableLeafIndex: number;
        }, {
            root: string;
            nextAvailableLeafIndex: string | number | bigint;
        }>, AppendOnlyTreeSnapshot, {
            root: string;
            nextAvailableLeafIndex: string | number | bigint;
        }>;
        treeId: z.ZodNumber;
        index: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
        path: z.ZodArray<z.ZodType<Fr, any, string>, "many">;
    }, "strip", z.ZodTypeAny, {
        path: Fr[];
        index: bigint;
        hintKey: AppendOnlyTreeSnapshot;
        treeId: number;
    }, {
        path: string[];
        index: string | number | bigint;
        hintKey: {
            root: string;
            nextAvailableLeafIndex: string | number | bigint;
        };
        treeId: number;
    }>, AvmGetSiblingPathHint, {
        path: string[];
        index: string | number | bigint;
        hintKey: {
            root: string;
            nextAvailableLeafIndex: string | number | bigint;
        };
        treeId: number;
    }>;
}
export declare class AvmGetPreviousValueIndexHint {
    readonly hintKey: AppendOnlyTreeSnapshot;
    readonly treeId: MerkleTreeId;
    readonly value: Fr;
    readonly index: bigint;
    readonly alreadyPresent: boolean;
    constructor(hintKey: AppendOnlyTreeSnapshot, treeId: MerkleTreeId, value: Fr, index: bigint, alreadyPresent: boolean);
    static get schema(): z.ZodEffects<z.ZodObject<{
        hintKey: z.ZodEffects<z.ZodObject<{
            root: z.ZodType<Fr, any, string>;
            nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            root: Fr;
            nextAvailableLeafIndex: number;
        }, {
            root: string;
            nextAvailableLeafIndex: string | number | bigint;
        }>, AppendOnlyTreeSnapshot, {
            root: string;
            nextAvailableLeafIndex: string | number | bigint;
        }>;
        treeId: z.ZodNumber;
        value: z.ZodType<Fr, any, string>;
        index: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
        alreadyPresent: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        value: Fr;
        index: bigint;
        alreadyPresent: boolean;
        hintKey: AppendOnlyTreeSnapshot;
        treeId: number;
    }, {
        value: string;
        index: string | number | bigint;
        alreadyPresent: boolean;
        hintKey: {
            root: string;
            nextAvailableLeafIndex: string | number | bigint;
        };
        treeId: number;
    }>, AvmGetPreviousValueIndexHint, {
        value: string;
        index: string | number | bigint;
        alreadyPresent: boolean;
        hintKey: {
            root: string;
            nextAvailableLeafIndex: string | number | bigint;
        };
        treeId: number;
    }>;
}
type IndexedTreeLeafPreimages = NullifierLeafPreimage | PublicDataTreeLeafPreimage;
declare const AvmGetLeafPreimageHintPublicDataTree_base: {
    new (hintKey: AppendOnlyTreeSnapshot, index: bigint, leafPreimage: IndexedTreeLeafPreimages): {
        readonly hintKey: AppendOnlyTreeSnapshot;
        readonly index: bigint;
        readonly leafPreimage: IndexedTreeLeafPreimages;
    };
    readonly schema: z.ZodEffects<z.ZodObject<{
        hintKey: z.ZodEffects<z.ZodObject<{
            root: z.ZodType<Fr, any, string>;
            nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            root: Fr;
            nextAvailableLeafIndex: number;
        }, {
            root: string;
            nextAvailableLeafIndex: string | number | bigint;
        }>, AppendOnlyTreeSnapshot, {
            root: string;
            nextAvailableLeafIndex: string | number | bigint;
        }>;
        index: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
        leafPreimage: z.ZodEffects<z.ZodObject<{
            leaf: z.ZodEffects<z.ZodObject<{
                nullifier: z.ZodType<Fr, any, string>;
            }, "strip", z.ZodTypeAny, {
                nullifier: Fr;
            }, {
                nullifier: string;
            }>, import("../trees/nullifier_leaf.js").NullifierLeaf, {
                nullifier: string;
            }>;
            nextKey: z.ZodType<Fr, any, string>;
            nextIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
        }, "strip", z.ZodTypeAny, {
            leaf: import("../trees/nullifier_leaf.js").NullifierLeaf;
            nextKey: Fr;
            nextIndex: bigint;
        }, {
            leaf: {
                nullifier: string;
            };
            nextKey: string;
            nextIndex: string | number | bigint;
        }>, NullifierLeafPreimage, {
            leaf: {
                nullifier: string;
            };
            nextKey: string;
            nextIndex: string | number | bigint;
        }> | z.ZodEffects<z.ZodObject<{
            leaf: z.ZodEffects<z.ZodObject<{
                slot: z.ZodType<Fr, any, string>;
                value: z.ZodType<Fr, any, string>;
            }, "strip", z.ZodTypeAny, {
                value: Fr;
                slot: Fr;
            }, {
                value: string;
                slot: string;
            }>, import("../trees/public_data_leaf.js").PublicDataTreeLeaf, {
                value: string;
                slot: string;
            }>;
            nextKey: z.ZodType<Fr, any, string>;
            nextIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
        }, "strip", z.ZodTypeAny, {
            leaf: import("../trees/public_data_leaf.js").PublicDataTreeLeaf;
            nextKey: Fr;
            nextIndex: bigint;
        }, {
            leaf: {
                value: string;
                slot: string;
            };
            nextKey: string;
            nextIndex: string | number | bigint;
        }>, PublicDataTreeLeafPreimage, {
            leaf: {
                value: string;
                slot: string;
            };
            nextKey: string;
            nextIndex: string | number | bigint;
        }>;
    }, "strip", z.ZodTypeAny, {
        index: bigint;
        leafPreimage: NullifierLeafPreimage | PublicDataTreeLeafPreimage;
        hintKey: AppendOnlyTreeSnapshot;
    }, {
        index: string | number | bigint;
        leafPreimage: {
            leaf: {
                nullifier: string;
            };
            nextKey: string;
            nextIndex: string | number | bigint;
        } | {
            leaf: {
                value: string;
                slot: string;
            };
            nextKey: string;
            nextIndex: string | number | bigint;
        };
        hintKey: {
            root: string;
            nextAvailableLeafIndex: string | number | bigint;
        };
    }>, {
        readonly hintKey: AppendOnlyTreeSnapshot;
        readonly index: bigint;
        readonly leafPreimage: IndexedTreeLeafPreimages;
    }, {
        index: string | number | bigint;
        leafPreimage: {
            leaf: {
                nullifier: string;
            };
            nextKey: string;
            nextIndex: string | number | bigint;
        } | {
            leaf: {
                value: string;
                slot: string;
            };
            nextKey: string;
            nextIndex: string | number | bigint;
        };
        hintKey: {
            root: string;
            nextAvailableLeafIndex: string | number | bigint;
        };
    }>;
};
export declare class AvmGetLeafPreimageHintPublicDataTree extends AvmGetLeafPreimageHintPublicDataTree_base {
}
declare const AvmGetLeafPreimageHintNullifierTree_base: {
    new (hintKey: AppendOnlyTreeSnapshot, index: bigint, leafPreimage: IndexedTreeLeafPreimages): {
        readonly hintKey: AppendOnlyTreeSnapshot;
        readonly index: bigint;
        readonly leafPreimage: IndexedTreeLeafPreimages;
    };
    readonly schema: z.ZodEffects<z.ZodObject<{
        hintKey: z.ZodEffects<z.ZodObject<{
            root: z.ZodType<Fr, any, string>;
            nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            root: Fr;
            nextAvailableLeafIndex: number;
        }, {
            root: string;
            nextAvailableLeafIndex: string | number | bigint;
        }>, AppendOnlyTreeSnapshot, {
            root: string;
            nextAvailableLeafIndex: string | number | bigint;
        }>;
        index: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
        leafPreimage: z.ZodEffects<z.ZodObject<{
            leaf: z.ZodEffects<z.ZodObject<{
                nullifier: z.ZodType<Fr, any, string>;
            }, "strip", z.ZodTypeAny, {
                nullifier: Fr;
            }, {
                nullifier: string;
            }>, import("../trees/nullifier_leaf.js").NullifierLeaf, {
                nullifier: string;
            }>;
            nextKey: z.ZodType<Fr, any, string>;
            nextIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
        }, "strip", z.ZodTypeAny, {
            leaf: import("../trees/nullifier_leaf.js").NullifierLeaf;
            nextKey: Fr;
            nextIndex: bigint;
        }, {
            leaf: {
                nullifier: string;
            };
            nextKey: string;
            nextIndex: string | number | bigint;
        }>, NullifierLeafPreimage, {
            leaf: {
                nullifier: string;
            };
            nextKey: string;
            nextIndex: string | number | bigint;
        }> | z.ZodEffects<z.ZodObject<{
            leaf: z.ZodEffects<z.ZodObject<{
                slot: z.ZodType<Fr, any, string>;
                value: z.ZodType<Fr, any, string>;
            }, "strip", z.ZodTypeAny, {
                value: Fr;
                slot: Fr;
            }, {
                value: string;
                slot: string;
            }>, import("../trees/public_data_leaf.js").PublicDataTreeLeaf, {
                value: string;
                slot: string;
            }>;
            nextKey: z.ZodType<Fr, any, string>;
            nextIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
        }, "strip", z.ZodTypeAny, {
            leaf: import("../trees/public_data_leaf.js").PublicDataTreeLeaf;
            nextKey: Fr;
            nextIndex: bigint;
        }, {
            leaf: {
                value: string;
                slot: string;
            };
            nextKey: string;
            nextIndex: string | number | bigint;
        }>, PublicDataTreeLeafPreimage, {
            leaf: {
                value: string;
                slot: string;
            };
            nextKey: string;
            nextIndex: string | number | bigint;
        }>;
    }, "strip", z.ZodTypeAny, {
        index: bigint;
        leafPreimage: NullifierLeafPreimage | PublicDataTreeLeafPreimage;
        hintKey: AppendOnlyTreeSnapshot;
    }, {
        index: string | number | bigint;
        leafPreimage: {
            leaf: {
                nullifier: string;
            };
            nextKey: string;
            nextIndex: string | number | bigint;
        } | {
            leaf: {
                value: string;
                slot: string;
            };
            nextKey: string;
            nextIndex: string | number | bigint;
        };
        hintKey: {
            root: string;
            nextAvailableLeafIndex: string | number | bigint;
        };
    }>, {
        readonly hintKey: AppendOnlyTreeSnapshot;
        readonly index: bigint;
        readonly leafPreimage: IndexedTreeLeafPreimages;
    }, {
        index: string | number | bigint;
        leafPreimage: {
            leaf: {
                nullifier: string;
            };
            nextKey: string;
            nextIndex: string | number | bigint;
        } | {
            leaf: {
                value: string;
                slot: string;
            };
            nextKey: string;
            nextIndex: string | number | bigint;
        };
        hintKey: {
            root: string;
            nextAvailableLeafIndex: string | number | bigint;
        };
    }>;
};
export declare class AvmGetLeafPreimageHintNullifierTree extends AvmGetLeafPreimageHintNullifierTree_base {
}
export declare class AvmGetLeafValueHint {
    readonly hintKey: AppendOnlyTreeSnapshot;
    readonly treeId: MerkleTreeId;
    readonly index: bigint;
    readonly value: Fr;
    constructor(hintKey: AppendOnlyTreeSnapshot, treeId: MerkleTreeId, index: bigint, value: Fr);
    static get schema(): z.ZodEffects<z.ZodObject<{
        hintKey: z.ZodEffects<z.ZodObject<{
            root: z.ZodType<Fr, any, string>;
            nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            root: Fr;
            nextAvailableLeafIndex: number;
        }, {
            root: string;
            nextAvailableLeafIndex: string | number | bigint;
        }>, AppendOnlyTreeSnapshot, {
            root: string;
            nextAvailableLeafIndex: string | number | bigint;
        }>;
        treeId: z.ZodNumber;
        index: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
        value: z.ZodType<Fr, any, string>;
    }, "strip", z.ZodTypeAny, {
        value: Fr;
        index: bigint;
        hintKey: AppendOnlyTreeSnapshot;
        treeId: number;
    }, {
        value: string;
        index: string | number | bigint;
        hintKey: {
            root: string;
            nextAvailableLeafIndex: string | number | bigint;
        };
        treeId: number;
    }>, AvmGetLeafValueHint, {
        value: string;
        index: string | number | bigint;
        hintKey: {
            root: string;
            nextAvailableLeafIndex: string | number | bigint;
        };
        treeId: number;
    }>;
}
declare const AvmSequentialInsertHintPublicDataTree_base: {
    new (hintKey: AppendOnlyTreeSnapshot, stateAfter: AppendOnlyTreeSnapshot, treeId: MerkleTreeId, leaf: import("../trees/nullifier_leaf.js").NullifierLeaf | import("../trees/public_data_leaf.js").PublicDataTreeLeaf, lowLeavesWitnessData: {
        leaf: IndexedTreeLeafPreimages;
        index: bigint;
        path: Fr[];
    }, insertionWitnessData: {
        leaf: IndexedTreeLeafPreimages;
        index: bigint;
        path: Fr[];
    }): {
        readonly hintKey: AppendOnlyTreeSnapshot;
        readonly stateAfter: AppendOnlyTreeSnapshot;
        readonly treeId: MerkleTreeId;
        readonly leaf: import("../trees/nullifier_leaf.js").NullifierLeaf | import("../trees/public_data_leaf.js").PublicDataTreeLeaf;
        readonly lowLeavesWitnessData: {
            leaf: IndexedTreeLeafPreimages;
            index: bigint;
            path: Fr[];
        };
        readonly insertionWitnessData: {
            leaf: IndexedTreeLeafPreimages;
            index: bigint;
            path: Fr[];
        };
    };
    readonly schema: z.ZodEffects<z.ZodObject<{
        hintKey: z.ZodEffects<z.ZodObject<{
            root: z.ZodType<Fr, any, string>;
            nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            root: Fr;
            nextAvailableLeafIndex: number;
        }, {
            root: string;
            nextAvailableLeafIndex: string | number | bigint;
        }>, AppendOnlyTreeSnapshot, {
            root: string;
            nextAvailableLeafIndex: string | number | bigint;
        }>;
        stateAfter: z.ZodEffects<z.ZodObject<{
            root: z.ZodType<Fr, any, string>;
            nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            root: Fr;
            nextAvailableLeafIndex: number;
        }, {
            root: string;
            nextAvailableLeafIndex: string | number | bigint;
        }>, AppendOnlyTreeSnapshot, {
            root: string;
            nextAvailableLeafIndex: string | number | bigint;
        }>;
        treeId: z.ZodNumber;
        leaf: z.ZodEffects<z.ZodObject<{
            nullifier: z.ZodType<Fr, any, string>;
        }, "strip", z.ZodTypeAny, {
            nullifier: Fr;
        }, {
            nullifier: string;
        }>, import("../trees/nullifier_leaf.js").NullifierLeaf, {
            nullifier: string;
        }> | z.ZodEffects<z.ZodObject<{
            slot: z.ZodType<Fr, any, string>;
            value: z.ZodType<Fr, any, string>;
        }, "strip", z.ZodTypeAny, {
            value: Fr;
            slot: Fr;
        }, {
            value: string;
            slot: string;
        }>, import("../trees/public_data_leaf.js").PublicDataTreeLeaf, {
            value: string;
            slot: string;
        }>;
        lowLeavesWitnessData: z.ZodObject<{
            leaf: z.ZodEffects<z.ZodObject<{
                leaf: z.ZodEffects<z.ZodObject<{
                    nullifier: z.ZodType<Fr, any, string>;
                }, "strip", z.ZodTypeAny, {
                    nullifier: Fr;
                }, {
                    nullifier: string;
                }>, import("../trees/nullifier_leaf.js").NullifierLeaf, {
                    nullifier: string;
                }>;
                nextKey: z.ZodType<Fr, any, string>;
                nextIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
            }, "strip", z.ZodTypeAny, {
                leaf: import("../trees/nullifier_leaf.js").NullifierLeaf;
                nextKey: Fr;
                nextIndex: bigint;
            }, {
                leaf: {
                    nullifier: string;
                };
                nextKey: string;
                nextIndex: string | number | bigint;
            }>, NullifierLeafPreimage, {
                leaf: {
                    nullifier: string;
                };
                nextKey: string;
                nextIndex: string | number | bigint;
            }> | z.ZodEffects<z.ZodObject<{
                leaf: z.ZodEffects<z.ZodObject<{
                    slot: z.ZodType<Fr, any, string>;
                    value: z.ZodType<Fr, any, string>;
                }, "strip", z.ZodTypeAny, {
                    value: Fr;
                    slot: Fr;
                }, {
                    value: string;
                    slot: string;
                }>, import("../trees/public_data_leaf.js").PublicDataTreeLeaf, {
                    value: string;
                    slot: string;
                }>;
                nextKey: z.ZodType<Fr, any, string>;
                nextIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
            }, "strip", z.ZodTypeAny, {
                leaf: import("../trees/public_data_leaf.js").PublicDataTreeLeaf;
                nextKey: Fr;
                nextIndex: bigint;
            }, {
                leaf: {
                    value: string;
                    slot: string;
                };
                nextKey: string;
                nextIndex: string | number | bigint;
            }>, PublicDataTreeLeafPreimage, {
                leaf: {
                    value: string;
                    slot: string;
                };
                nextKey: string;
                nextIndex: string | number | bigint;
            }>;
            index: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
            path: z.ZodArray<z.ZodType<Fr, any, string>, "many">;
        }, "strip", z.ZodTypeAny, {
            path: Fr[];
            index: bigint;
            leaf: NullifierLeafPreimage | PublicDataTreeLeafPreimage;
        }, {
            path: string[];
            index: string | number | bigint;
            leaf: {
                leaf: {
                    nullifier: string;
                };
                nextKey: string;
                nextIndex: string | number | bigint;
            } | {
                leaf: {
                    value: string;
                    slot: string;
                };
                nextKey: string;
                nextIndex: string | number | bigint;
            };
        }>;
        insertionWitnessData: z.ZodObject<{
            leaf: z.ZodEffects<z.ZodObject<{
                leaf: z.ZodEffects<z.ZodObject<{
                    nullifier: z.ZodType<Fr, any, string>;
                }, "strip", z.ZodTypeAny, {
                    nullifier: Fr;
                }, {
                    nullifier: string;
                }>, import("../trees/nullifier_leaf.js").NullifierLeaf, {
                    nullifier: string;
                }>;
                nextKey: z.ZodType<Fr, any, string>;
                nextIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
            }, "strip", z.ZodTypeAny, {
                leaf: import("../trees/nullifier_leaf.js").NullifierLeaf;
                nextKey: Fr;
                nextIndex: bigint;
            }, {
                leaf: {
                    nullifier: string;
                };
                nextKey: string;
                nextIndex: string | number | bigint;
            }>, NullifierLeafPreimage, {
                leaf: {
                    nullifier: string;
                };
                nextKey: string;
                nextIndex: string | number | bigint;
            }> | z.ZodEffects<z.ZodObject<{
                leaf: z.ZodEffects<z.ZodObject<{
                    slot: z.ZodType<Fr, any, string>;
                    value: z.ZodType<Fr, any, string>;
                }, "strip", z.ZodTypeAny, {
                    value: Fr;
                    slot: Fr;
                }, {
                    value: string;
                    slot: string;
                }>, import("../trees/public_data_leaf.js").PublicDataTreeLeaf, {
                    value: string;
                    slot: string;
                }>;
                nextKey: z.ZodType<Fr, any, string>;
                nextIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
            }, "strip", z.ZodTypeAny, {
                leaf: import("../trees/public_data_leaf.js").PublicDataTreeLeaf;
                nextKey: Fr;
                nextIndex: bigint;
            }, {
                leaf: {
                    value: string;
                    slot: string;
                };
                nextKey: string;
                nextIndex: string | number | bigint;
            }>, PublicDataTreeLeafPreimage, {
                leaf: {
                    value: string;
                    slot: string;
                };
                nextKey: string;
                nextIndex: string | number | bigint;
            }>;
            index: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
            path: z.ZodArray<z.ZodType<Fr, any, string>, "many">;
        }, "strip", z.ZodTypeAny, {
            path: Fr[];
            index: bigint;
            leaf: NullifierLeafPreimage | PublicDataTreeLeafPreimage;
        }, {
            path: string[];
            index: string | number | bigint;
            leaf: {
                leaf: {
                    nullifier: string;
                };
                nextKey: string;
                nextIndex: string | number | bigint;
            } | {
                leaf: {
                    value: string;
                    slot: string;
                };
                nextKey: string;
                nextIndex: string | number | bigint;
            };
        }>;
    }, "strip", z.ZodTypeAny, {
        leaf: import("../trees/nullifier_leaf.js").NullifierLeaf | import("../trees/public_data_leaf.js").PublicDataTreeLeaf;
        hintKey: AppendOnlyTreeSnapshot;
        treeId: number;
        stateAfter: AppendOnlyTreeSnapshot;
        lowLeavesWitnessData: {
            path: Fr[];
            index: bigint;
            leaf: NullifierLeafPreimage | PublicDataTreeLeafPreimage;
        };
        insertionWitnessData: {
            path: Fr[];
            index: bigint;
            leaf: NullifierLeafPreimage | PublicDataTreeLeafPreimage;
        };
    }, {
        leaf: {
            nullifier: string;
        } | {
            value: string;
            slot: string;
        };
        hintKey: {
            root: string;
            nextAvailableLeafIndex: string | number | bigint;
        };
        treeId: number;
        stateAfter: {
            root: string;
            nextAvailableLeafIndex: string | number | bigint;
        };
        lowLeavesWitnessData: {
            path: string[];
            index: string | number | bigint;
            leaf: {
                leaf: {
                    nullifier: string;
                };
                nextKey: string;
                nextIndex: string | number | bigint;
            } | {
                leaf: {
                    value: string;
                    slot: string;
                };
                nextKey: string;
                nextIndex: string | number | bigint;
            };
        };
        insertionWitnessData: {
            path: string[];
            index: string | number | bigint;
            leaf: {
                leaf: {
                    nullifier: string;
                };
                nextKey: string;
                nextIndex: string | number | bigint;
            } | {
                leaf: {
                    value: string;
                    slot: string;
                };
                nextKey: string;
                nextIndex: string | number | bigint;
            };
        };
    }>, {
        readonly hintKey: AppendOnlyTreeSnapshot;
        readonly stateAfter: AppendOnlyTreeSnapshot;
        readonly treeId: MerkleTreeId;
        readonly leaf: import("../trees/nullifier_leaf.js").NullifierLeaf | import("../trees/public_data_leaf.js").PublicDataTreeLeaf;
        readonly lowLeavesWitnessData: {
            leaf: IndexedTreeLeafPreimages;
            index: bigint;
            path: Fr[];
        };
        readonly insertionWitnessData: {
            leaf: IndexedTreeLeafPreimages;
            index: bigint;
            path: Fr[];
        };
    }, {
        leaf: {
            nullifier: string;
        } | {
            value: string;
            slot: string;
        };
        hintKey: {
            root: string;
            nextAvailableLeafIndex: string | number | bigint;
        };
        treeId: number;
        stateAfter: {
            root: string;
            nextAvailableLeafIndex: string | number | bigint;
        };
        lowLeavesWitnessData: {
            path: string[];
            index: string | number | bigint;
            leaf: {
                leaf: {
                    nullifier: string;
                };
                nextKey: string;
                nextIndex: string | number | bigint;
            } | {
                leaf: {
                    value: string;
                    slot: string;
                };
                nextKey: string;
                nextIndex: string | number | bigint;
            };
        };
        insertionWitnessData: {
            path: string[];
            index: string | number | bigint;
            leaf: {
                leaf: {
                    nullifier: string;
                };
                nextKey: string;
                nextIndex: string | number | bigint;
            } | {
                leaf: {
                    value: string;
                    slot: string;
                };
                nextKey: string;
                nextIndex: string | number | bigint;
            };
        };
    }>;
};
export declare class AvmSequentialInsertHintPublicDataTree extends AvmSequentialInsertHintPublicDataTree_base {
}
declare const AvmSequentialInsertHintNullifierTree_base: {
    new (hintKey: AppendOnlyTreeSnapshot, stateAfter: AppendOnlyTreeSnapshot, treeId: MerkleTreeId, leaf: import("../trees/nullifier_leaf.js").NullifierLeaf | import("../trees/public_data_leaf.js").PublicDataTreeLeaf, lowLeavesWitnessData: {
        leaf: IndexedTreeLeafPreimages;
        index: bigint;
        path: Fr[];
    }, insertionWitnessData: {
        leaf: IndexedTreeLeafPreimages;
        index: bigint;
        path: Fr[];
    }): {
        readonly hintKey: AppendOnlyTreeSnapshot;
        readonly stateAfter: AppendOnlyTreeSnapshot;
        readonly treeId: MerkleTreeId;
        readonly leaf: import("../trees/nullifier_leaf.js").NullifierLeaf | import("../trees/public_data_leaf.js").PublicDataTreeLeaf;
        readonly lowLeavesWitnessData: {
            leaf: IndexedTreeLeafPreimages;
            index: bigint;
            path: Fr[];
        };
        readonly insertionWitnessData: {
            leaf: IndexedTreeLeafPreimages;
            index: bigint;
            path: Fr[];
        };
    };
    readonly schema: z.ZodEffects<z.ZodObject<{
        hintKey: z.ZodEffects<z.ZodObject<{
            root: z.ZodType<Fr, any, string>;
            nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            root: Fr;
            nextAvailableLeafIndex: number;
        }, {
            root: string;
            nextAvailableLeafIndex: string | number | bigint;
        }>, AppendOnlyTreeSnapshot, {
            root: string;
            nextAvailableLeafIndex: string | number | bigint;
        }>;
        stateAfter: z.ZodEffects<z.ZodObject<{
            root: z.ZodType<Fr, any, string>;
            nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            root: Fr;
            nextAvailableLeafIndex: number;
        }, {
            root: string;
            nextAvailableLeafIndex: string | number | bigint;
        }>, AppendOnlyTreeSnapshot, {
            root: string;
            nextAvailableLeafIndex: string | number | bigint;
        }>;
        treeId: z.ZodNumber;
        leaf: z.ZodEffects<z.ZodObject<{
            nullifier: z.ZodType<Fr, any, string>;
        }, "strip", z.ZodTypeAny, {
            nullifier: Fr;
        }, {
            nullifier: string;
        }>, import("../trees/nullifier_leaf.js").NullifierLeaf, {
            nullifier: string;
        }> | z.ZodEffects<z.ZodObject<{
            slot: z.ZodType<Fr, any, string>;
            value: z.ZodType<Fr, any, string>;
        }, "strip", z.ZodTypeAny, {
            value: Fr;
            slot: Fr;
        }, {
            value: string;
            slot: string;
        }>, import("../trees/public_data_leaf.js").PublicDataTreeLeaf, {
            value: string;
            slot: string;
        }>;
        lowLeavesWitnessData: z.ZodObject<{
            leaf: z.ZodEffects<z.ZodObject<{
                leaf: z.ZodEffects<z.ZodObject<{
                    nullifier: z.ZodType<Fr, any, string>;
                }, "strip", z.ZodTypeAny, {
                    nullifier: Fr;
                }, {
                    nullifier: string;
                }>, import("../trees/nullifier_leaf.js").NullifierLeaf, {
                    nullifier: string;
                }>;
                nextKey: z.ZodType<Fr, any, string>;
                nextIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
            }, "strip", z.ZodTypeAny, {
                leaf: import("../trees/nullifier_leaf.js").NullifierLeaf;
                nextKey: Fr;
                nextIndex: bigint;
            }, {
                leaf: {
                    nullifier: string;
                };
                nextKey: string;
                nextIndex: string | number | bigint;
            }>, NullifierLeafPreimage, {
                leaf: {
                    nullifier: string;
                };
                nextKey: string;
                nextIndex: string | number | bigint;
            }> | z.ZodEffects<z.ZodObject<{
                leaf: z.ZodEffects<z.ZodObject<{
                    slot: z.ZodType<Fr, any, string>;
                    value: z.ZodType<Fr, any, string>;
                }, "strip", z.ZodTypeAny, {
                    value: Fr;
                    slot: Fr;
                }, {
                    value: string;
                    slot: string;
                }>, import("../trees/public_data_leaf.js").PublicDataTreeLeaf, {
                    value: string;
                    slot: string;
                }>;
                nextKey: z.ZodType<Fr, any, string>;
                nextIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
            }, "strip", z.ZodTypeAny, {
                leaf: import("../trees/public_data_leaf.js").PublicDataTreeLeaf;
                nextKey: Fr;
                nextIndex: bigint;
            }, {
                leaf: {
                    value: string;
                    slot: string;
                };
                nextKey: string;
                nextIndex: string | number | bigint;
            }>, PublicDataTreeLeafPreimage, {
                leaf: {
                    value: string;
                    slot: string;
                };
                nextKey: string;
                nextIndex: string | number | bigint;
            }>;
            index: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
            path: z.ZodArray<z.ZodType<Fr, any, string>, "many">;
        }, "strip", z.ZodTypeAny, {
            path: Fr[];
            index: bigint;
            leaf: NullifierLeafPreimage | PublicDataTreeLeafPreimage;
        }, {
            path: string[];
            index: string | number | bigint;
            leaf: {
                leaf: {
                    nullifier: string;
                };
                nextKey: string;
                nextIndex: string | number | bigint;
            } | {
                leaf: {
                    value: string;
                    slot: string;
                };
                nextKey: string;
                nextIndex: string | number | bigint;
            };
        }>;
        insertionWitnessData: z.ZodObject<{
            leaf: z.ZodEffects<z.ZodObject<{
                leaf: z.ZodEffects<z.ZodObject<{
                    nullifier: z.ZodType<Fr, any, string>;
                }, "strip", z.ZodTypeAny, {
                    nullifier: Fr;
                }, {
                    nullifier: string;
                }>, import("../trees/nullifier_leaf.js").NullifierLeaf, {
                    nullifier: string;
                }>;
                nextKey: z.ZodType<Fr, any, string>;
                nextIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
            }, "strip", z.ZodTypeAny, {
                leaf: import("../trees/nullifier_leaf.js").NullifierLeaf;
                nextKey: Fr;
                nextIndex: bigint;
            }, {
                leaf: {
                    nullifier: string;
                };
                nextKey: string;
                nextIndex: string | number | bigint;
            }>, NullifierLeafPreimage, {
                leaf: {
                    nullifier: string;
                };
                nextKey: string;
                nextIndex: string | number | bigint;
            }> | z.ZodEffects<z.ZodObject<{
                leaf: z.ZodEffects<z.ZodObject<{
                    slot: z.ZodType<Fr, any, string>;
                    value: z.ZodType<Fr, any, string>;
                }, "strip", z.ZodTypeAny, {
                    value: Fr;
                    slot: Fr;
                }, {
                    value: string;
                    slot: string;
                }>, import("../trees/public_data_leaf.js").PublicDataTreeLeaf, {
                    value: string;
                    slot: string;
                }>;
                nextKey: z.ZodType<Fr, any, string>;
                nextIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
            }, "strip", z.ZodTypeAny, {
                leaf: import("../trees/public_data_leaf.js").PublicDataTreeLeaf;
                nextKey: Fr;
                nextIndex: bigint;
            }, {
                leaf: {
                    value: string;
                    slot: string;
                };
                nextKey: string;
                nextIndex: string | number | bigint;
            }>, PublicDataTreeLeafPreimage, {
                leaf: {
                    value: string;
                    slot: string;
                };
                nextKey: string;
                nextIndex: string | number | bigint;
            }>;
            index: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
            path: z.ZodArray<z.ZodType<Fr, any, string>, "many">;
        }, "strip", z.ZodTypeAny, {
            path: Fr[];
            index: bigint;
            leaf: NullifierLeafPreimage | PublicDataTreeLeafPreimage;
        }, {
            path: string[];
            index: string | number | bigint;
            leaf: {
                leaf: {
                    nullifier: string;
                };
                nextKey: string;
                nextIndex: string | number | bigint;
            } | {
                leaf: {
                    value: string;
                    slot: string;
                };
                nextKey: string;
                nextIndex: string | number | bigint;
            };
        }>;
    }, "strip", z.ZodTypeAny, {
        leaf: import("../trees/nullifier_leaf.js").NullifierLeaf | import("../trees/public_data_leaf.js").PublicDataTreeLeaf;
        hintKey: AppendOnlyTreeSnapshot;
        treeId: number;
        stateAfter: AppendOnlyTreeSnapshot;
        lowLeavesWitnessData: {
            path: Fr[];
            index: bigint;
            leaf: NullifierLeafPreimage | PublicDataTreeLeafPreimage;
        };
        insertionWitnessData: {
            path: Fr[];
            index: bigint;
            leaf: NullifierLeafPreimage | PublicDataTreeLeafPreimage;
        };
    }, {
        leaf: {
            nullifier: string;
        } | {
            value: string;
            slot: string;
        };
        hintKey: {
            root: string;
            nextAvailableLeafIndex: string | number | bigint;
        };
        treeId: number;
        stateAfter: {
            root: string;
            nextAvailableLeafIndex: string | number | bigint;
        };
        lowLeavesWitnessData: {
            path: string[];
            index: string | number | bigint;
            leaf: {
                leaf: {
                    nullifier: string;
                };
                nextKey: string;
                nextIndex: string | number | bigint;
            } | {
                leaf: {
                    value: string;
                    slot: string;
                };
                nextKey: string;
                nextIndex: string | number | bigint;
            };
        };
        insertionWitnessData: {
            path: string[];
            index: string | number | bigint;
            leaf: {
                leaf: {
                    nullifier: string;
                };
                nextKey: string;
                nextIndex: string | number | bigint;
            } | {
                leaf: {
                    value: string;
                    slot: string;
                };
                nextKey: string;
                nextIndex: string | number | bigint;
            };
        };
    }>, {
        readonly hintKey: AppendOnlyTreeSnapshot;
        readonly stateAfter: AppendOnlyTreeSnapshot;
        readonly treeId: MerkleTreeId;
        readonly leaf: import("../trees/nullifier_leaf.js").NullifierLeaf | import("../trees/public_data_leaf.js").PublicDataTreeLeaf;
        readonly lowLeavesWitnessData: {
            leaf: IndexedTreeLeafPreimages;
            index: bigint;
            path: Fr[];
        };
        readonly insertionWitnessData: {
            leaf: IndexedTreeLeafPreimages;
            index: bigint;
            path: Fr[];
        };
    }, {
        leaf: {
            nullifier: string;
        } | {
            value: string;
            slot: string;
        };
        hintKey: {
            root: string;
            nextAvailableLeafIndex: string | number | bigint;
        };
        treeId: number;
        stateAfter: {
            root: string;
            nextAvailableLeafIndex: string | number | bigint;
        };
        lowLeavesWitnessData: {
            path: string[];
            index: string | number | bigint;
            leaf: {
                leaf: {
                    nullifier: string;
                };
                nextKey: string;
                nextIndex: string | number | bigint;
            } | {
                leaf: {
                    value: string;
                    slot: string;
                };
                nextKey: string;
                nextIndex: string | number | bigint;
            };
        };
        insertionWitnessData: {
            path: string[];
            index: string | number | bigint;
            leaf: {
                leaf: {
                    nullifier: string;
                };
                nextKey: string;
                nextIndex: string | number | bigint;
            } | {
                leaf: {
                    value: string;
                    slot: string;
                };
                nextKey: string;
                nextIndex: string | number | bigint;
            };
        };
    }>;
};
export declare class AvmSequentialInsertHintNullifierTree extends AvmSequentialInsertHintNullifierTree_base {
}
export declare class AvmAppendLeavesHint {
    readonly hintKey: AppendOnlyTreeSnapshot;
    readonly stateAfter: AppendOnlyTreeSnapshot;
    readonly treeId: MerkleTreeId;
    readonly leaves: Fr[];
    constructor(hintKey: AppendOnlyTreeSnapshot, stateAfter: AppendOnlyTreeSnapshot, treeId: MerkleTreeId, leaves: Fr[]);
    static get schema(): z.ZodEffects<z.ZodObject<{
        hintKey: z.ZodEffects<z.ZodObject<{
            root: z.ZodType<Fr, any, string>;
            nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            root: Fr;
            nextAvailableLeafIndex: number;
        }, {
            root: string;
            nextAvailableLeafIndex: string | number | bigint;
        }>, AppendOnlyTreeSnapshot, {
            root: string;
            nextAvailableLeafIndex: string | number | bigint;
        }>;
        stateAfter: z.ZodEffects<z.ZodObject<{
            root: z.ZodType<Fr, any, string>;
            nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            root: Fr;
            nextAvailableLeafIndex: number;
        }, {
            root: string;
            nextAvailableLeafIndex: string | number | bigint;
        }>, AppendOnlyTreeSnapshot, {
            root: string;
            nextAvailableLeafIndex: string | number | bigint;
        }>;
        treeId: z.ZodNumber;
        leaves: z.ZodArray<z.ZodType<Fr, any, string>, "many">;
    }, "strip", z.ZodTypeAny, {
        hintKey: AppendOnlyTreeSnapshot;
        treeId: number;
        stateAfter: AppendOnlyTreeSnapshot;
        leaves: Fr[];
    }, {
        hintKey: {
            root: string;
            nextAvailableLeafIndex: string | number | bigint;
        };
        treeId: number;
        stateAfter: {
            root: string;
            nextAvailableLeafIndex: string | number | bigint;
        };
        leaves: string[];
    }>, AvmAppendLeavesHint, {
        hintKey: {
            root: string;
            nextAvailableLeafIndex: string | number | bigint;
        };
        treeId: number;
        stateAfter: {
            root: string;
            nextAvailableLeafIndex: string | number | bigint;
        };
        leaves: string[];
    }>;
}
declare class AvmCheckpointActionNoStateChangeHint {
    readonly actionCounter: number;
    readonly oldCheckpointId: number;
    readonly newCheckpointId: number;
    constructor(actionCounter: number, oldCheckpointId: number, newCheckpointId: number);
    static get schema(): z.ZodEffects<z.ZodObject<{
        actionCounter: z.ZodNumber;
        oldCheckpointId: z.ZodNumber;
        newCheckpointId: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        actionCounter: number;
        oldCheckpointId: number;
        newCheckpointId: number;
    }, {
        actionCounter: number;
        oldCheckpointId: number;
        newCheckpointId: number;
    }>, AvmCheckpointActionNoStateChangeHint, {
        actionCounter: number;
        oldCheckpointId: number;
        newCheckpointId: number;
    }>;
}
export declare class AvmCreateCheckpointHint extends AvmCheckpointActionNoStateChangeHint {
}
export declare class AvmCommitCheckpointHint extends AvmCheckpointActionNoStateChangeHint {
}
export declare class AvmRevertCheckpointHint {
    readonly actionCounter: number;
    readonly oldCheckpointId: number;
    readonly newCheckpointId: number;
    readonly stateBefore: TreeSnapshots;
    readonly stateAfter: TreeSnapshots;
    constructor(actionCounter: number, oldCheckpointId: number, newCheckpointId: number, stateBefore: TreeSnapshots, stateAfter: TreeSnapshots);
    static create(actionCounter: number, oldCheckpointId: number, newCheckpointId: number, stateBefore: Record<MerkleTreeId, AppendOnlyTreeSnapshot>, stateAfter: Record<MerkleTreeId, AppendOnlyTreeSnapshot>): AvmRevertCheckpointHint;
    static get schema(): z.ZodEffects<z.ZodObject<{
        actionCounter: z.ZodNumber;
        oldCheckpointId: z.ZodNumber;
        newCheckpointId: z.ZodNumber;
        stateBefore: z.ZodEffects<z.ZodObject<{
            l1ToL2MessageTree: z.ZodEffects<z.ZodObject<{
                root: z.ZodType<Fr, any, string>;
                nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                root: Fr;
                nextAvailableLeafIndex: number;
            }, {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            }>, AppendOnlyTreeSnapshot, {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            }>;
            noteHashTree: z.ZodEffects<z.ZodObject<{
                root: z.ZodType<Fr, any, string>;
                nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                root: Fr;
                nextAvailableLeafIndex: number;
            }, {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            }>, AppendOnlyTreeSnapshot, {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            }>;
            nullifierTree: z.ZodEffects<z.ZodObject<{
                root: z.ZodType<Fr, any, string>;
                nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                root: Fr;
                nextAvailableLeafIndex: number;
            }, {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            }>, AppendOnlyTreeSnapshot, {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            }>;
            publicDataTree: z.ZodEffects<z.ZodObject<{
                root: z.ZodType<Fr, any, string>;
                nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                root: Fr;
                nextAvailableLeafIndex: number;
            }, {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            }>, AppendOnlyTreeSnapshot, {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            }>;
        }, "strip", z.ZodTypeAny, {
            noteHashTree: AppendOnlyTreeSnapshot;
            nullifierTree: AppendOnlyTreeSnapshot;
            publicDataTree: AppendOnlyTreeSnapshot;
            l1ToL2MessageTree: AppendOnlyTreeSnapshot;
        }, {
            noteHashTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            nullifierTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            publicDataTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            l1ToL2MessageTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
        }>, TreeSnapshots, {
            noteHashTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            nullifierTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            publicDataTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            l1ToL2MessageTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
        }>;
        stateAfter: z.ZodEffects<z.ZodObject<{
            l1ToL2MessageTree: z.ZodEffects<z.ZodObject<{
                root: z.ZodType<Fr, any, string>;
                nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                root: Fr;
                nextAvailableLeafIndex: number;
            }, {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            }>, AppendOnlyTreeSnapshot, {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            }>;
            noteHashTree: z.ZodEffects<z.ZodObject<{
                root: z.ZodType<Fr, any, string>;
                nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                root: Fr;
                nextAvailableLeafIndex: number;
            }, {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            }>, AppendOnlyTreeSnapshot, {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            }>;
            nullifierTree: z.ZodEffects<z.ZodObject<{
                root: z.ZodType<Fr, any, string>;
                nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                root: Fr;
                nextAvailableLeafIndex: number;
            }, {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            }>, AppendOnlyTreeSnapshot, {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            }>;
            publicDataTree: z.ZodEffects<z.ZodObject<{
                root: z.ZodType<Fr, any, string>;
                nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                root: Fr;
                nextAvailableLeafIndex: number;
            }, {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            }>, AppendOnlyTreeSnapshot, {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            }>;
        }, "strip", z.ZodTypeAny, {
            noteHashTree: AppendOnlyTreeSnapshot;
            nullifierTree: AppendOnlyTreeSnapshot;
            publicDataTree: AppendOnlyTreeSnapshot;
            l1ToL2MessageTree: AppendOnlyTreeSnapshot;
        }, {
            noteHashTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            nullifierTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            publicDataTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            l1ToL2MessageTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
        }>, TreeSnapshots, {
            noteHashTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            nullifierTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            publicDataTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            l1ToL2MessageTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
        }>;
    }, "strip", z.ZodTypeAny, {
        stateAfter: TreeSnapshots;
        actionCounter: number;
        oldCheckpointId: number;
        newCheckpointId: number;
        stateBefore: TreeSnapshots;
    }, {
        stateAfter: {
            noteHashTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            nullifierTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            publicDataTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            l1ToL2MessageTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
        };
        actionCounter: number;
        oldCheckpointId: number;
        newCheckpointId: number;
        stateBefore: {
            noteHashTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            nullifierTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            publicDataTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            l1ToL2MessageTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
        };
    }>, AvmRevertCheckpointHint, {
        stateAfter: {
            noteHashTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            nullifierTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            publicDataTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            l1ToL2MessageTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
        };
        actionCounter: number;
        oldCheckpointId: number;
        newCheckpointId: number;
        stateBefore: {
            noteHashTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            nullifierTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            publicDataTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            l1ToL2MessageTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
        };
    }>;
}
export declare class AvmEnqueuedCallHint {
    readonly msgSender: AztecAddress;
    readonly contractAddress: AztecAddress;
    readonly calldata: Fr[];
    isStaticCall: boolean;
    constructor(msgSender: AztecAddress, contractAddress: AztecAddress, calldata: Fr[], isStaticCall: boolean);
    static get schema(): z.ZodEffects<z.ZodObject<{
        msgSender: import("@aztec/foundation/schemas").ZodFor<AztecAddress>;
        contractAddress: import("@aztec/foundation/schemas").ZodFor<AztecAddress>;
        calldata: z.ZodArray<z.ZodType<Fr, any, string>, "many">;
        isStaticCall: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        contractAddress: AztecAddress;
        msgSender: AztecAddress;
        isStaticCall: boolean;
        calldata: Fr[];
    }, {
        isStaticCall: boolean;
        calldata: string[];
        contractAddress?: any;
        msgSender?: any;
    }>, AvmEnqueuedCallHint, {
        isStaticCall: boolean;
        calldata: string[];
        contractAddress?: any;
        msgSender?: any;
    }>;
}
export declare class AvmTxHint {
    readonly hash: string;
    readonly globalVariables: GlobalVariables;
    readonly nonRevertibleAccumulatedData: {
        noteHashes: Fr[];
        nullifiers: Fr[];
    };
    readonly revertibleAccumulatedData: {
        noteHashes: Fr[];
        nullifiers: Fr[];
    };
    readonly setupEnqueuedCalls: AvmEnqueuedCallHint[];
    readonly appLogicEnqueuedCalls: AvmEnqueuedCallHint[];
    readonly teardownEnqueuedCall: AvmEnqueuedCallHint | null;
    constructor(hash: string, globalVariables: GlobalVariables, nonRevertibleAccumulatedData: {
        noteHashes: Fr[];
        nullifiers: Fr[];
    }, revertibleAccumulatedData: {
        noteHashes: Fr[];
        nullifiers: Fr[];
    }, setupEnqueuedCalls: AvmEnqueuedCallHint[], appLogicEnqueuedCalls: AvmEnqueuedCallHint[], teardownEnqueuedCall: AvmEnqueuedCallHint | null);
    static fromTx(tx: Tx): Promise<AvmTxHint>;
    static empty(): AvmTxHint;
    static get schema(): z.ZodEffects<z.ZodObject<{
        hash: z.ZodString;
        globalVariables: z.ZodEffects<z.ZodObject<{
            chainId: import("@aztec/foundation/schemas").ZodFor<Fr>;
            version: import("@aztec/foundation/schemas").ZodFor<Fr>;
            blockNumber: import("@aztec/foundation/schemas").ZodFor<Fr>;
            slotNumber: import("@aztec/foundation/schemas").ZodFor<Fr>;
            timestamp: import("@aztec/foundation/schemas").ZodFor<Fr>;
            coinbase: import("@aztec/foundation/schemas").ZodFor<import("@aztec/foundation/schemas").EthAddress>;
            feeRecipient: import("@aztec/foundation/schemas").ZodFor<AztecAddress>;
            gasFees: z.ZodEffects<z.ZodObject<{
                feePerDaGas: z.ZodType<Fr, any, string>;
                feePerL2Gas: z.ZodType<Fr, any, string>;
            }, "strip", z.ZodTypeAny, {
                feePerDaGas: Fr;
                feePerL2Gas: Fr;
            }, {
                feePerDaGas: string;
                feePerL2Gas: string;
            }>, import("../gas/gas_fees.js").GasFees, {
                feePerDaGas: string;
                feePerL2Gas: string;
            }>;
        }, "strip", z.ZodTypeAny, {
            chainId: Fr;
            version: Fr;
            blockNumber: Fr;
            slotNumber: Fr;
            timestamp: Fr;
            coinbase: import("@aztec/foundation/schemas").EthAddress;
            feeRecipient: AztecAddress;
            gasFees: import("../gas/gas_fees.js").GasFees;
        }, {
            gasFees: {
                feePerDaGas: string;
                feePerL2Gas: string;
            };
            chainId?: any;
            version?: any;
            blockNumber?: any;
            slotNumber?: any;
            timestamp?: any;
            coinbase?: any;
            feeRecipient?: any;
        }>, GlobalVariables, {
            gasFees: {
                feePerDaGas: string;
                feePerL2Gas: string;
            };
            chainId?: any;
            version?: any;
            blockNumber?: any;
            slotNumber?: any;
            timestamp?: any;
            coinbase?: any;
            feeRecipient?: any;
        }>;
        nonRevertibleAccumulatedData: z.ZodObject<{
            noteHashes: z.ZodArray<z.ZodType<Fr, any, string>, "many">;
            nullifiers: z.ZodArray<z.ZodType<Fr, any, string>, "many">;
        }, "strip", z.ZodTypeAny, {
            noteHashes: Fr[];
            nullifiers: Fr[];
        }, {
            noteHashes: string[];
            nullifiers: string[];
        }>;
        revertibleAccumulatedData: z.ZodObject<{
            noteHashes: z.ZodArray<z.ZodType<Fr, any, string>, "many">;
            nullifiers: z.ZodArray<z.ZodType<Fr, any, string>, "many">;
        }, "strip", z.ZodTypeAny, {
            noteHashes: Fr[];
            nullifiers: Fr[];
        }, {
            noteHashes: string[];
            nullifiers: string[];
        }>;
        setupEnqueuedCalls: z.ZodArray<z.ZodEffects<z.ZodObject<{
            msgSender: import("@aztec/foundation/schemas").ZodFor<AztecAddress>;
            contractAddress: import("@aztec/foundation/schemas").ZodFor<AztecAddress>;
            calldata: z.ZodArray<z.ZodType<Fr, any, string>, "many">;
            isStaticCall: z.ZodBoolean;
        }, "strip", z.ZodTypeAny, {
            contractAddress: AztecAddress;
            msgSender: AztecAddress;
            isStaticCall: boolean;
            calldata: Fr[];
        }, {
            isStaticCall: boolean;
            calldata: string[];
            contractAddress?: any;
            msgSender?: any;
        }>, AvmEnqueuedCallHint, {
            isStaticCall: boolean;
            calldata: string[];
            contractAddress?: any;
            msgSender?: any;
        }>, "many">;
        appLogicEnqueuedCalls: z.ZodArray<z.ZodEffects<z.ZodObject<{
            msgSender: import("@aztec/foundation/schemas").ZodFor<AztecAddress>;
            contractAddress: import("@aztec/foundation/schemas").ZodFor<AztecAddress>;
            calldata: z.ZodArray<z.ZodType<Fr, any, string>, "many">;
            isStaticCall: z.ZodBoolean;
        }, "strip", z.ZodTypeAny, {
            contractAddress: AztecAddress;
            msgSender: AztecAddress;
            isStaticCall: boolean;
            calldata: Fr[];
        }, {
            isStaticCall: boolean;
            calldata: string[];
            contractAddress?: any;
            msgSender?: any;
        }>, AvmEnqueuedCallHint, {
            isStaticCall: boolean;
            calldata: string[];
            contractAddress?: any;
            msgSender?: any;
        }>, "many">;
        teardownEnqueuedCall: z.ZodNullable<z.ZodEffects<z.ZodObject<{
            msgSender: import("@aztec/foundation/schemas").ZodFor<AztecAddress>;
            contractAddress: import("@aztec/foundation/schemas").ZodFor<AztecAddress>;
            calldata: z.ZodArray<z.ZodType<Fr, any, string>, "many">;
            isStaticCall: z.ZodBoolean;
        }, "strip", z.ZodTypeAny, {
            contractAddress: AztecAddress;
            msgSender: AztecAddress;
            isStaticCall: boolean;
            calldata: Fr[];
        }, {
            isStaticCall: boolean;
            calldata: string[];
            contractAddress?: any;
            msgSender?: any;
        }>, AvmEnqueuedCallHint, {
            isStaticCall: boolean;
            calldata: string[];
            contractAddress?: any;
            msgSender?: any;
        }>>;
    }, "strip", z.ZodTypeAny, {
        hash: string;
        globalVariables: GlobalVariables;
        nonRevertibleAccumulatedData: {
            noteHashes: Fr[];
            nullifiers: Fr[];
        };
        revertibleAccumulatedData: {
            noteHashes: Fr[];
            nullifiers: Fr[];
        };
        setupEnqueuedCalls: AvmEnqueuedCallHint[];
        appLogicEnqueuedCalls: AvmEnqueuedCallHint[];
        teardownEnqueuedCall: AvmEnqueuedCallHint | null;
    }, {
        hash: string;
        globalVariables: {
            gasFees: {
                feePerDaGas: string;
                feePerL2Gas: string;
            };
            chainId?: any;
            version?: any;
            blockNumber?: any;
            slotNumber?: any;
            timestamp?: any;
            coinbase?: any;
            feeRecipient?: any;
        };
        nonRevertibleAccumulatedData: {
            noteHashes: string[];
            nullifiers: string[];
        };
        revertibleAccumulatedData: {
            noteHashes: string[];
            nullifiers: string[];
        };
        setupEnqueuedCalls: {
            isStaticCall: boolean;
            calldata: string[];
            contractAddress?: any;
            msgSender?: any;
        }[];
        appLogicEnqueuedCalls: {
            isStaticCall: boolean;
            calldata: string[];
            contractAddress?: any;
            msgSender?: any;
        }[];
        teardownEnqueuedCall: {
            isStaticCall: boolean;
            calldata: string[];
            contractAddress?: any;
            msgSender?: any;
        } | null;
    }>, AvmTxHint, {
        hash: string;
        globalVariables: {
            gasFees: {
                feePerDaGas: string;
                feePerL2Gas: string;
            };
            chainId?: any;
            version?: any;
            blockNumber?: any;
            slotNumber?: any;
            timestamp?: any;
            coinbase?: any;
            feeRecipient?: any;
        };
        nonRevertibleAccumulatedData: {
            noteHashes: string[];
            nullifiers: string[];
        };
        revertibleAccumulatedData: {
            noteHashes: string[];
            nullifiers: string[];
        };
        setupEnqueuedCalls: {
            isStaticCall: boolean;
            calldata: string[];
            contractAddress?: any;
            msgSender?: any;
        }[];
        appLogicEnqueuedCalls: {
            isStaticCall: boolean;
            calldata: string[];
            contractAddress?: any;
            msgSender?: any;
        }[];
        teardownEnqueuedCall: {
            isStaticCall: boolean;
            calldata: string[];
            contractAddress?: any;
            msgSender?: any;
        } | null;
    }>;
}
export declare class AvmExecutionHints {
    tx: AvmTxHint;
    readonly contractInstances: AvmContractInstanceHint[];
    readonly contractClasses: AvmContractClassHint[];
    readonly bytecodeCommitments: AvmBytecodeCommitmentHint[];
    startingTreeRoots: TreeSnapshots;
    readonly getSiblingPathHints: AvmGetSiblingPathHint[];
    readonly getPreviousValueIndexHints: AvmGetPreviousValueIndexHint[];
    readonly getLeafPreimageHintsPublicDataTree: AvmGetLeafPreimageHintPublicDataTree[];
    readonly getLeafPreimageHintsNullifierTree: AvmGetLeafPreimageHintNullifierTree[];
    readonly getLeafValueHints: AvmGetLeafValueHint[];
    readonly sequentialInsertHintsPublicDataTree: AvmSequentialInsertHintPublicDataTree[];
    readonly sequentialInsertHintsNullifierTree: AvmSequentialInsertHintNullifierTree[];
    readonly appendLeavesHints: AvmAppendLeavesHint[];
    readonly createCheckpointHints: AvmCreateCheckpointHint[];
    readonly commitCheckpointHints: AvmCommitCheckpointHint[];
    readonly revertCheckpointHints: AvmRevertCheckpointHint[];
    constructor(tx: AvmTxHint, contractInstances?: AvmContractInstanceHint[], contractClasses?: AvmContractClassHint[], bytecodeCommitments?: AvmBytecodeCommitmentHint[], startingTreeRoots?: TreeSnapshots, getSiblingPathHints?: AvmGetSiblingPathHint[], getPreviousValueIndexHints?: AvmGetPreviousValueIndexHint[], getLeafPreimageHintsPublicDataTree?: AvmGetLeafPreimageHintPublicDataTree[], getLeafPreimageHintsNullifierTree?: AvmGetLeafPreimageHintNullifierTree[], getLeafValueHints?: AvmGetLeafValueHint[], sequentialInsertHintsPublicDataTree?: AvmSequentialInsertHintPublicDataTree[], sequentialInsertHintsNullifierTree?: AvmSequentialInsertHintNullifierTree[], appendLeavesHints?: AvmAppendLeavesHint[], createCheckpointHints?: AvmCreateCheckpointHint[], commitCheckpointHints?: AvmCommitCheckpointHint[], revertCheckpointHints?: AvmRevertCheckpointHint[]);
    static empty(): AvmExecutionHints;
    static get schema(): z.ZodEffects<z.ZodObject<{
        tx: z.ZodEffects<z.ZodObject<{
            hash: z.ZodString;
            globalVariables: z.ZodEffects<z.ZodObject<{
                chainId: import("@aztec/foundation/schemas").ZodFor<Fr>;
                version: import("@aztec/foundation/schemas").ZodFor<Fr>;
                blockNumber: import("@aztec/foundation/schemas").ZodFor<Fr>;
                slotNumber: import("@aztec/foundation/schemas").ZodFor<Fr>;
                timestamp: import("@aztec/foundation/schemas").ZodFor<Fr>;
                coinbase: import("@aztec/foundation/schemas").ZodFor<import("@aztec/foundation/schemas").EthAddress>;
                feeRecipient: import("@aztec/foundation/schemas").ZodFor<AztecAddress>;
                gasFees: z.ZodEffects<z.ZodObject<{
                    feePerDaGas: z.ZodType<Fr, any, string>;
                    feePerL2Gas: z.ZodType<Fr, any, string>;
                }, "strip", z.ZodTypeAny, {
                    feePerDaGas: Fr;
                    feePerL2Gas: Fr;
                }, {
                    feePerDaGas: string;
                    feePerL2Gas: string;
                }>, import("../gas/gas_fees.js").GasFees, {
                    feePerDaGas: string;
                    feePerL2Gas: string;
                }>;
            }, "strip", z.ZodTypeAny, {
                chainId: Fr;
                version: Fr;
                blockNumber: Fr;
                slotNumber: Fr;
                timestamp: Fr;
                coinbase: import("@aztec/foundation/schemas").EthAddress;
                feeRecipient: AztecAddress;
                gasFees: import("../gas/gas_fees.js").GasFees;
            }, {
                gasFees: {
                    feePerDaGas: string;
                    feePerL2Gas: string;
                };
                chainId?: any;
                version?: any;
                blockNumber?: any;
                slotNumber?: any;
                timestamp?: any;
                coinbase?: any;
                feeRecipient?: any;
            }>, GlobalVariables, {
                gasFees: {
                    feePerDaGas: string;
                    feePerL2Gas: string;
                };
                chainId?: any;
                version?: any;
                blockNumber?: any;
                slotNumber?: any;
                timestamp?: any;
                coinbase?: any;
                feeRecipient?: any;
            }>;
            nonRevertibleAccumulatedData: z.ZodObject<{
                noteHashes: z.ZodArray<z.ZodType<Fr, any, string>, "many">;
                nullifiers: z.ZodArray<z.ZodType<Fr, any, string>, "many">;
            }, "strip", z.ZodTypeAny, {
                noteHashes: Fr[];
                nullifiers: Fr[];
            }, {
                noteHashes: string[];
                nullifiers: string[];
            }>;
            revertibleAccumulatedData: z.ZodObject<{
                noteHashes: z.ZodArray<z.ZodType<Fr, any, string>, "many">;
                nullifiers: z.ZodArray<z.ZodType<Fr, any, string>, "many">;
            }, "strip", z.ZodTypeAny, {
                noteHashes: Fr[];
                nullifiers: Fr[];
            }, {
                noteHashes: string[];
                nullifiers: string[];
            }>;
            setupEnqueuedCalls: z.ZodArray<z.ZodEffects<z.ZodObject<{
                msgSender: import("@aztec/foundation/schemas").ZodFor<AztecAddress>;
                contractAddress: import("@aztec/foundation/schemas").ZodFor<AztecAddress>;
                calldata: z.ZodArray<z.ZodType<Fr, any, string>, "many">;
                isStaticCall: z.ZodBoolean;
            }, "strip", z.ZodTypeAny, {
                contractAddress: AztecAddress;
                msgSender: AztecAddress;
                isStaticCall: boolean;
                calldata: Fr[];
            }, {
                isStaticCall: boolean;
                calldata: string[];
                contractAddress?: any;
                msgSender?: any;
            }>, AvmEnqueuedCallHint, {
                isStaticCall: boolean;
                calldata: string[];
                contractAddress?: any;
                msgSender?: any;
            }>, "many">;
            appLogicEnqueuedCalls: z.ZodArray<z.ZodEffects<z.ZodObject<{
                msgSender: import("@aztec/foundation/schemas").ZodFor<AztecAddress>;
                contractAddress: import("@aztec/foundation/schemas").ZodFor<AztecAddress>;
                calldata: z.ZodArray<z.ZodType<Fr, any, string>, "many">;
                isStaticCall: z.ZodBoolean;
            }, "strip", z.ZodTypeAny, {
                contractAddress: AztecAddress;
                msgSender: AztecAddress;
                isStaticCall: boolean;
                calldata: Fr[];
            }, {
                isStaticCall: boolean;
                calldata: string[];
                contractAddress?: any;
                msgSender?: any;
            }>, AvmEnqueuedCallHint, {
                isStaticCall: boolean;
                calldata: string[];
                contractAddress?: any;
                msgSender?: any;
            }>, "many">;
            teardownEnqueuedCall: z.ZodNullable<z.ZodEffects<z.ZodObject<{
                msgSender: import("@aztec/foundation/schemas").ZodFor<AztecAddress>;
                contractAddress: import("@aztec/foundation/schemas").ZodFor<AztecAddress>;
                calldata: z.ZodArray<z.ZodType<Fr, any, string>, "many">;
                isStaticCall: z.ZodBoolean;
            }, "strip", z.ZodTypeAny, {
                contractAddress: AztecAddress;
                msgSender: AztecAddress;
                isStaticCall: boolean;
                calldata: Fr[];
            }, {
                isStaticCall: boolean;
                calldata: string[];
                contractAddress?: any;
                msgSender?: any;
            }>, AvmEnqueuedCallHint, {
                isStaticCall: boolean;
                calldata: string[];
                contractAddress?: any;
                msgSender?: any;
            }>>;
        }, "strip", z.ZodTypeAny, {
            hash: string;
            globalVariables: GlobalVariables;
            nonRevertibleAccumulatedData: {
                noteHashes: Fr[];
                nullifiers: Fr[];
            };
            revertibleAccumulatedData: {
                noteHashes: Fr[];
                nullifiers: Fr[];
            };
            setupEnqueuedCalls: AvmEnqueuedCallHint[];
            appLogicEnqueuedCalls: AvmEnqueuedCallHint[];
            teardownEnqueuedCall: AvmEnqueuedCallHint | null;
        }, {
            hash: string;
            globalVariables: {
                gasFees: {
                    feePerDaGas: string;
                    feePerL2Gas: string;
                };
                chainId?: any;
                version?: any;
                blockNumber?: any;
                slotNumber?: any;
                timestamp?: any;
                coinbase?: any;
                feeRecipient?: any;
            };
            nonRevertibleAccumulatedData: {
                noteHashes: string[];
                nullifiers: string[];
            };
            revertibleAccumulatedData: {
                noteHashes: string[];
                nullifiers: string[];
            };
            setupEnqueuedCalls: {
                isStaticCall: boolean;
                calldata: string[];
                contractAddress?: any;
                msgSender?: any;
            }[];
            appLogicEnqueuedCalls: {
                isStaticCall: boolean;
                calldata: string[];
                contractAddress?: any;
                msgSender?: any;
            }[];
            teardownEnqueuedCall: {
                isStaticCall: boolean;
                calldata: string[];
                contractAddress?: any;
                msgSender?: any;
            } | null;
        }>, AvmTxHint, {
            hash: string;
            globalVariables: {
                gasFees: {
                    feePerDaGas: string;
                    feePerL2Gas: string;
                };
                chainId?: any;
                version?: any;
                blockNumber?: any;
                slotNumber?: any;
                timestamp?: any;
                coinbase?: any;
                feeRecipient?: any;
            };
            nonRevertibleAccumulatedData: {
                noteHashes: string[];
                nullifiers: string[];
            };
            revertibleAccumulatedData: {
                noteHashes: string[];
                nullifiers: string[];
            };
            setupEnqueuedCalls: {
                isStaticCall: boolean;
                calldata: string[];
                contractAddress?: any;
                msgSender?: any;
            }[];
            appLogicEnqueuedCalls: {
                isStaticCall: boolean;
                calldata: string[];
                contractAddress?: any;
                msgSender?: any;
            }[];
            teardownEnqueuedCall: {
                isStaticCall: boolean;
                calldata: string[];
                contractAddress?: any;
                msgSender?: any;
            } | null;
        }>;
        contractInstances: z.ZodArray<z.ZodEffects<z.ZodObject<{
            address: import("@aztec/foundation/schemas").ZodFor<AztecAddress>;
            salt: z.ZodType<Fr, any, string>;
            deployer: import("@aztec/foundation/schemas").ZodFor<AztecAddress>;
            currentContractClassId: z.ZodType<Fr, any, string>;
            originalContractClassId: z.ZodType<Fr, any, string>;
            initializationHash: z.ZodType<Fr, any, string>;
            publicKeys: z.ZodEffects<z.ZodObject<{
                masterNullifierPublicKey: z.ZodType<import("@aztec/foundation/fields").Point, any, string>;
                masterIncomingViewingPublicKey: z.ZodType<import("@aztec/foundation/fields").Point, any, string>;
                masterOutgoingViewingPublicKey: z.ZodType<import("@aztec/foundation/fields").Point, any, string>;
                masterTaggingPublicKey: z.ZodType<import("@aztec/foundation/fields").Point, any, string>;
            }, "strip", z.ZodTypeAny, {
                masterNullifierPublicKey: import("@aztec/foundation/fields").Point;
                masterIncomingViewingPublicKey: import("@aztec/foundation/fields").Point;
                masterOutgoingViewingPublicKey: import("@aztec/foundation/fields").Point;
                masterTaggingPublicKey: import("@aztec/foundation/fields").Point;
            }, {
                masterNullifierPublicKey: string;
                masterIncomingViewingPublicKey: string;
                masterOutgoingViewingPublicKey: string;
                masterTaggingPublicKey: string;
            }>, PublicKeys, {
                masterNullifierPublicKey: string;
                masterIncomingViewingPublicKey: string;
                masterOutgoingViewingPublicKey: string;
                masterTaggingPublicKey: string;
            }>;
        }, "strip", z.ZodTypeAny, {
            address: AztecAddress;
            publicKeys: PublicKeys;
            salt: Fr;
            deployer: AztecAddress;
            currentContractClassId: Fr;
            originalContractClassId: Fr;
            initializationHash: Fr;
        }, {
            publicKeys: {
                masterNullifierPublicKey: string;
                masterIncomingViewingPublicKey: string;
                masterOutgoingViewingPublicKey: string;
                masterTaggingPublicKey: string;
            };
            salt: string;
            currentContractClassId: string;
            originalContractClassId: string;
            initializationHash: string;
            address?: any;
            deployer?: any;
        }>, AvmContractInstanceHint, {
            publicKeys: {
                masterNullifierPublicKey: string;
                masterIncomingViewingPublicKey: string;
                masterOutgoingViewingPublicKey: string;
                masterTaggingPublicKey: string;
            };
            salt: string;
            currentContractClassId: string;
            originalContractClassId: string;
            initializationHash: string;
            address?: any;
            deployer?: any;
        }>, "many">;
        contractClasses: z.ZodArray<z.ZodEffects<z.ZodObject<{
            classId: z.ZodType<Fr, any, string>;
            artifactHash: z.ZodType<Fr, any, string>;
            privateFunctionsRoot: z.ZodType<Fr, any, string>;
            packedBytecode: z.ZodUnion<[z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, Buffer, string>, z.ZodEffects<z.ZodObject<{
                type: z.ZodLiteral<"Buffer">;
                data: z.ZodArray<z.ZodNumber, "many">;
            }, "strip", z.ZodTypeAny, {
                type: "Buffer";
                data: number[];
            }, {
                type: "Buffer";
                data: number[];
            }>, Buffer, {
                type: "Buffer";
                data: number[];
            }>]>;
        }, "strip", z.ZodTypeAny, {
            classId: Fr;
            artifactHash: Fr;
            privateFunctionsRoot: Fr;
            packedBytecode: Buffer;
        }, {
            classId: string;
            artifactHash: string;
            privateFunctionsRoot: string;
            packedBytecode: string | {
                type: "Buffer";
                data: number[];
            };
        }>, AvmContractClassHint, {
            classId: string;
            artifactHash: string;
            privateFunctionsRoot: string;
            packedBytecode: string | {
                type: "Buffer";
                data: number[];
            };
        }>, "many">;
        bytecodeCommitments: z.ZodArray<z.ZodEffects<z.ZodObject<{
            classId: z.ZodType<Fr, any, string>;
            commitment: z.ZodType<Fr, any, string>;
        }, "strip", z.ZodTypeAny, {
            classId: Fr;
            commitment: Fr;
        }, {
            classId: string;
            commitment: string;
        }>, AvmBytecodeCommitmentHint, {
            classId: string;
            commitment: string;
        }>, "many">;
        startingTreeRoots: z.ZodEffects<z.ZodObject<{
            l1ToL2MessageTree: z.ZodEffects<z.ZodObject<{
                root: z.ZodType<Fr, any, string>;
                nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                root: Fr;
                nextAvailableLeafIndex: number;
            }, {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            }>, AppendOnlyTreeSnapshot, {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            }>;
            noteHashTree: z.ZodEffects<z.ZodObject<{
                root: z.ZodType<Fr, any, string>;
                nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                root: Fr;
                nextAvailableLeafIndex: number;
            }, {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            }>, AppendOnlyTreeSnapshot, {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            }>;
            nullifierTree: z.ZodEffects<z.ZodObject<{
                root: z.ZodType<Fr, any, string>;
                nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                root: Fr;
                nextAvailableLeafIndex: number;
            }, {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            }>, AppendOnlyTreeSnapshot, {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            }>;
            publicDataTree: z.ZodEffects<z.ZodObject<{
                root: z.ZodType<Fr, any, string>;
                nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                root: Fr;
                nextAvailableLeafIndex: number;
            }, {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            }>, AppendOnlyTreeSnapshot, {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            }>;
        }, "strip", z.ZodTypeAny, {
            noteHashTree: AppendOnlyTreeSnapshot;
            nullifierTree: AppendOnlyTreeSnapshot;
            publicDataTree: AppendOnlyTreeSnapshot;
            l1ToL2MessageTree: AppendOnlyTreeSnapshot;
        }, {
            noteHashTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            nullifierTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            publicDataTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            l1ToL2MessageTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
        }>, TreeSnapshots, {
            noteHashTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            nullifierTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            publicDataTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            l1ToL2MessageTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
        }>;
        getSiblingPathHints: z.ZodArray<z.ZodEffects<z.ZodObject<{
            hintKey: z.ZodEffects<z.ZodObject<{
                root: z.ZodType<Fr, any, string>;
                nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                root: Fr;
                nextAvailableLeafIndex: number;
            }, {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            }>, AppendOnlyTreeSnapshot, {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            }>;
            treeId: z.ZodNumber;
            index: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
            path: z.ZodArray<z.ZodType<Fr, any, string>, "many">;
        }, "strip", z.ZodTypeAny, {
            path: Fr[];
            index: bigint;
            hintKey: AppendOnlyTreeSnapshot;
            treeId: number;
        }, {
            path: string[];
            index: string | number | bigint;
            hintKey: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            treeId: number;
        }>, AvmGetSiblingPathHint, {
            path: string[];
            index: string | number | bigint;
            hintKey: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            treeId: number;
        }>, "many">;
        getPreviousValueIndexHints: z.ZodArray<z.ZodEffects<z.ZodObject<{
            hintKey: z.ZodEffects<z.ZodObject<{
                root: z.ZodType<Fr, any, string>;
                nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                root: Fr;
                nextAvailableLeafIndex: number;
            }, {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            }>, AppendOnlyTreeSnapshot, {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            }>;
            treeId: z.ZodNumber;
            value: z.ZodType<Fr, any, string>;
            index: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
            alreadyPresent: z.ZodBoolean;
        }, "strip", z.ZodTypeAny, {
            value: Fr;
            index: bigint;
            alreadyPresent: boolean;
            hintKey: AppendOnlyTreeSnapshot;
            treeId: number;
        }, {
            value: string;
            index: string | number | bigint;
            alreadyPresent: boolean;
            hintKey: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            treeId: number;
        }>, AvmGetPreviousValueIndexHint, {
            value: string;
            index: string | number | bigint;
            alreadyPresent: boolean;
            hintKey: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            treeId: number;
        }>, "many">;
        getLeafPreimageHintsPublicDataTree: z.ZodArray<z.ZodEffects<z.ZodObject<{
            hintKey: z.ZodEffects<z.ZodObject<{
                root: z.ZodType<Fr, any, string>;
                nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                root: Fr;
                nextAvailableLeafIndex: number;
            }, {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            }>, AppendOnlyTreeSnapshot, {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            }>;
            index: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
            leafPreimage: z.ZodEffects<z.ZodObject<{
                leaf: z.ZodEffects<z.ZodObject<{
                    nullifier: z.ZodType<Fr, any, string>;
                }, "strip", z.ZodTypeAny, {
                    nullifier: Fr;
                }, {
                    nullifier: string;
                }>, import("../trees/nullifier_leaf.js").NullifierLeaf, {
                    nullifier: string;
                }>;
                nextKey: z.ZodType<Fr, any, string>;
                nextIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
            }, "strip", z.ZodTypeAny, {
                leaf: import("../trees/nullifier_leaf.js").NullifierLeaf;
                nextKey: Fr;
                nextIndex: bigint;
            }, {
                leaf: {
                    nullifier: string;
                };
                nextKey: string;
                nextIndex: string | number | bigint;
            }>, NullifierLeafPreimage, {
                leaf: {
                    nullifier: string;
                };
                nextKey: string;
                nextIndex: string | number | bigint;
            }> | z.ZodEffects<z.ZodObject<{
                leaf: z.ZodEffects<z.ZodObject<{
                    slot: z.ZodType<Fr, any, string>;
                    value: z.ZodType<Fr, any, string>;
                }, "strip", z.ZodTypeAny, {
                    value: Fr;
                    slot: Fr;
                }, {
                    value: string;
                    slot: string;
                }>, import("../trees/public_data_leaf.js").PublicDataTreeLeaf, {
                    value: string;
                    slot: string;
                }>;
                nextKey: z.ZodType<Fr, any, string>;
                nextIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
            }, "strip", z.ZodTypeAny, {
                leaf: import("../trees/public_data_leaf.js").PublicDataTreeLeaf;
                nextKey: Fr;
                nextIndex: bigint;
            }, {
                leaf: {
                    value: string;
                    slot: string;
                };
                nextKey: string;
                nextIndex: string | number | bigint;
            }>, PublicDataTreeLeafPreimage, {
                leaf: {
                    value: string;
                    slot: string;
                };
                nextKey: string;
                nextIndex: string | number | bigint;
            }>;
        }, "strip", z.ZodTypeAny, {
            index: bigint;
            leafPreimage: NullifierLeafPreimage | PublicDataTreeLeafPreimage;
            hintKey: AppendOnlyTreeSnapshot;
        }, {
            index: string | number | bigint;
            leafPreimage: {
                leaf: {
                    nullifier: string;
                };
                nextKey: string;
                nextIndex: string | number | bigint;
            } | {
                leaf: {
                    value: string;
                    slot: string;
                };
                nextKey: string;
                nextIndex: string | number | bigint;
            };
            hintKey: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
        }>, {
            readonly hintKey: AppendOnlyTreeSnapshot;
            readonly index: bigint;
            readonly leafPreimage: IndexedTreeLeafPreimages;
        }, {
            index: string | number | bigint;
            leafPreimage: {
                leaf: {
                    nullifier: string;
                };
                nextKey: string;
                nextIndex: string | number | bigint;
            } | {
                leaf: {
                    value: string;
                    slot: string;
                };
                nextKey: string;
                nextIndex: string | number | bigint;
            };
            hintKey: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
        }>, "many">;
        getLeafPreimageHintsNullifierTree: z.ZodArray<z.ZodEffects<z.ZodObject<{
            hintKey: z.ZodEffects<z.ZodObject<{
                root: z.ZodType<Fr, any, string>;
                nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                root: Fr;
                nextAvailableLeafIndex: number;
            }, {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            }>, AppendOnlyTreeSnapshot, {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            }>;
            index: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
            leafPreimage: z.ZodEffects<z.ZodObject<{
                leaf: z.ZodEffects<z.ZodObject<{
                    nullifier: z.ZodType<Fr, any, string>;
                }, "strip", z.ZodTypeAny, {
                    nullifier: Fr;
                }, {
                    nullifier: string;
                }>, import("../trees/nullifier_leaf.js").NullifierLeaf, {
                    nullifier: string;
                }>;
                nextKey: z.ZodType<Fr, any, string>;
                nextIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
            }, "strip", z.ZodTypeAny, {
                leaf: import("../trees/nullifier_leaf.js").NullifierLeaf;
                nextKey: Fr;
                nextIndex: bigint;
            }, {
                leaf: {
                    nullifier: string;
                };
                nextKey: string;
                nextIndex: string | number | bigint;
            }>, NullifierLeafPreimage, {
                leaf: {
                    nullifier: string;
                };
                nextKey: string;
                nextIndex: string | number | bigint;
            }> | z.ZodEffects<z.ZodObject<{
                leaf: z.ZodEffects<z.ZodObject<{
                    slot: z.ZodType<Fr, any, string>;
                    value: z.ZodType<Fr, any, string>;
                }, "strip", z.ZodTypeAny, {
                    value: Fr;
                    slot: Fr;
                }, {
                    value: string;
                    slot: string;
                }>, import("../trees/public_data_leaf.js").PublicDataTreeLeaf, {
                    value: string;
                    slot: string;
                }>;
                nextKey: z.ZodType<Fr, any, string>;
                nextIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
            }, "strip", z.ZodTypeAny, {
                leaf: import("../trees/public_data_leaf.js").PublicDataTreeLeaf;
                nextKey: Fr;
                nextIndex: bigint;
            }, {
                leaf: {
                    value: string;
                    slot: string;
                };
                nextKey: string;
                nextIndex: string | number | bigint;
            }>, PublicDataTreeLeafPreimage, {
                leaf: {
                    value: string;
                    slot: string;
                };
                nextKey: string;
                nextIndex: string | number | bigint;
            }>;
        }, "strip", z.ZodTypeAny, {
            index: bigint;
            leafPreimage: NullifierLeafPreimage | PublicDataTreeLeafPreimage;
            hintKey: AppendOnlyTreeSnapshot;
        }, {
            index: string | number | bigint;
            leafPreimage: {
                leaf: {
                    nullifier: string;
                };
                nextKey: string;
                nextIndex: string | number | bigint;
            } | {
                leaf: {
                    value: string;
                    slot: string;
                };
                nextKey: string;
                nextIndex: string | number | bigint;
            };
            hintKey: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
        }>, {
            readonly hintKey: AppendOnlyTreeSnapshot;
            readonly index: bigint;
            readonly leafPreimage: IndexedTreeLeafPreimages;
        }, {
            index: string | number | bigint;
            leafPreimage: {
                leaf: {
                    nullifier: string;
                };
                nextKey: string;
                nextIndex: string | number | bigint;
            } | {
                leaf: {
                    value: string;
                    slot: string;
                };
                nextKey: string;
                nextIndex: string | number | bigint;
            };
            hintKey: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
        }>, "many">;
        getLeafValueHints: z.ZodArray<z.ZodEffects<z.ZodObject<{
            hintKey: z.ZodEffects<z.ZodObject<{
                root: z.ZodType<Fr, any, string>;
                nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                root: Fr;
                nextAvailableLeafIndex: number;
            }, {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            }>, AppendOnlyTreeSnapshot, {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            }>;
            treeId: z.ZodNumber;
            index: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
            value: z.ZodType<Fr, any, string>;
        }, "strip", z.ZodTypeAny, {
            value: Fr;
            index: bigint;
            hintKey: AppendOnlyTreeSnapshot;
            treeId: number;
        }, {
            value: string;
            index: string | number | bigint;
            hintKey: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            treeId: number;
        }>, AvmGetLeafValueHint, {
            value: string;
            index: string | number | bigint;
            hintKey: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            treeId: number;
        }>, "many">;
        sequentialInsertHintsPublicDataTree: z.ZodArray<z.ZodEffects<z.ZodObject<{
            hintKey: z.ZodEffects<z.ZodObject<{
                root: z.ZodType<Fr, any, string>;
                nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                root: Fr;
                nextAvailableLeafIndex: number;
            }, {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            }>, AppendOnlyTreeSnapshot, {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            }>;
            stateAfter: z.ZodEffects<z.ZodObject<{
                root: z.ZodType<Fr, any, string>;
                nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                root: Fr;
                nextAvailableLeafIndex: number;
            }, {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            }>, AppendOnlyTreeSnapshot, {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            }>;
            treeId: z.ZodNumber;
            leaf: z.ZodEffects<z.ZodObject<{
                nullifier: z.ZodType<Fr, any, string>;
            }, "strip", z.ZodTypeAny, {
                nullifier: Fr;
            }, {
                nullifier: string;
            }>, import("../trees/nullifier_leaf.js").NullifierLeaf, {
                nullifier: string;
            }> | z.ZodEffects<z.ZodObject<{
                slot: z.ZodType<Fr, any, string>;
                value: z.ZodType<Fr, any, string>;
            }, "strip", z.ZodTypeAny, {
                value: Fr;
                slot: Fr;
            }, {
                value: string;
                slot: string;
            }>, import("../trees/public_data_leaf.js").PublicDataTreeLeaf, {
                value: string;
                slot: string;
            }>;
            lowLeavesWitnessData: z.ZodObject<{
                leaf: z.ZodEffects<z.ZodObject<{
                    leaf: z.ZodEffects<z.ZodObject<{
                        nullifier: z.ZodType<Fr, any, string>;
                    }, "strip", z.ZodTypeAny, {
                        nullifier: Fr;
                    }, {
                        nullifier: string;
                    }>, import("../trees/nullifier_leaf.js").NullifierLeaf, {
                        nullifier: string;
                    }>;
                    nextKey: z.ZodType<Fr, any, string>;
                    nextIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
                }, "strip", z.ZodTypeAny, {
                    leaf: import("../trees/nullifier_leaf.js").NullifierLeaf;
                    nextKey: Fr;
                    nextIndex: bigint;
                }, {
                    leaf: {
                        nullifier: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                }>, NullifierLeafPreimage, {
                    leaf: {
                        nullifier: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                }> | z.ZodEffects<z.ZodObject<{
                    leaf: z.ZodEffects<z.ZodObject<{
                        slot: z.ZodType<Fr, any, string>;
                        value: z.ZodType<Fr, any, string>;
                    }, "strip", z.ZodTypeAny, {
                        value: Fr;
                        slot: Fr;
                    }, {
                        value: string;
                        slot: string;
                    }>, import("../trees/public_data_leaf.js").PublicDataTreeLeaf, {
                        value: string;
                        slot: string;
                    }>;
                    nextKey: z.ZodType<Fr, any, string>;
                    nextIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
                }, "strip", z.ZodTypeAny, {
                    leaf: import("../trees/public_data_leaf.js").PublicDataTreeLeaf;
                    nextKey: Fr;
                    nextIndex: bigint;
                }, {
                    leaf: {
                        value: string;
                        slot: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                }>, PublicDataTreeLeafPreimage, {
                    leaf: {
                        value: string;
                        slot: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                }>;
                index: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
                path: z.ZodArray<z.ZodType<Fr, any, string>, "many">;
            }, "strip", z.ZodTypeAny, {
                path: Fr[];
                index: bigint;
                leaf: NullifierLeafPreimage | PublicDataTreeLeafPreimage;
            }, {
                path: string[];
                index: string | number | bigint;
                leaf: {
                    leaf: {
                        nullifier: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                } | {
                    leaf: {
                        value: string;
                        slot: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                };
            }>;
            insertionWitnessData: z.ZodObject<{
                leaf: z.ZodEffects<z.ZodObject<{
                    leaf: z.ZodEffects<z.ZodObject<{
                        nullifier: z.ZodType<Fr, any, string>;
                    }, "strip", z.ZodTypeAny, {
                        nullifier: Fr;
                    }, {
                        nullifier: string;
                    }>, import("../trees/nullifier_leaf.js").NullifierLeaf, {
                        nullifier: string;
                    }>;
                    nextKey: z.ZodType<Fr, any, string>;
                    nextIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
                }, "strip", z.ZodTypeAny, {
                    leaf: import("../trees/nullifier_leaf.js").NullifierLeaf;
                    nextKey: Fr;
                    nextIndex: bigint;
                }, {
                    leaf: {
                        nullifier: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                }>, NullifierLeafPreimage, {
                    leaf: {
                        nullifier: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                }> | z.ZodEffects<z.ZodObject<{
                    leaf: z.ZodEffects<z.ZodObject<{
                        slot: z.ZodType<Fr, any, string>;
                        value: z.ZodType<Fr, any, string>;
                    }, "strip", z.ZodTypeAny, {
                        value: Fr;
                        slot: Fr;
                    }, {
                        value: string;
                        slot: string;
                    }>, import("../trees/public_data_leaf.js").PublicDataTreeLeaf, {
                        value: string;
                        slot: string;
                    }>;
                    nextKey: z.ZodType<Fr, any, string>;
                    nextIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
                }, "strip", z.ZodTypeAny, {
                    leaf: import("../trees/public_data_leaf.js").PublicDataTreeLeaf;
                    nextKey: Fr;
                    nextIndex: bigint;
                }, {
                    leaf: {
                        value: string;
                        slot: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                }>, PublicDataTreeLeafPreimage, {
                    leaf: {
                        value: string;
                        slot: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                }>;
                index: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
                path: z.ZodArray<z.ZodType<Fr, any, string>, "many">;
            }, "strip", z.ZodTypeAny, {
                path: Fr[];
                index: bigint;
                leaf: NullifierLeafPreimage | PublicDataTreeLeafPreimage;
            }, {
                path: string[];
                index: string | number | bigint;
                leaf: {
                    leaf: {
                        nullifier: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                } | {
                    leaf: {
                        value: string;
                        slot: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                };
            }>;
        }, "strip", z.ZodTypeAny, {
            leaf: import("../trees/nullifier_leaf.js").NullifierLeaf | import("../trees/public_data_leaf.js").PublicDataTreeLeaf;
            hintKey: AppendOnlyTreeSnapshot;
            treeId: number;
            stateAfter: AppendOnlyTreeSnapshot;
            lowLeavesWitnessData: {
                path: Fr[];
                index: bigint;
                leaf: NullifierLeafPreimage | PublicDataTreeLeafPreimage;
            };
            insertionWitnessData: {
                path: Fr[];
                index: bigint;
                leaf: NullifierLeafPreimage | PublicDataTreeLeafPreimage;
            };
        }, {
            leaf: {
                nullifier: string;
            } | {
                value: string;
                slot: string;
            };
            hintKey: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            treeId: number;
            stateAfter: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            lowLeavesWitnessData: {
                path: string[];
                index: string | number | bigint;
                leaf: {
                    leaf: {
                        nullifier: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                } | {
                    leaf: {
                        value: string;
                        slot: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                };
            };
            insertionWitnessData: {
                path: string[];
                index: string | number | bigint;
                leaf: {
                    leaf: {
                        nullifier: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                } | {
                    leaf: {
                        value: string;
                        slot: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                };
            };
        }>, {
            readonly hintKey: AppendOnlyTreeSnapshot;
            readonly stateAfter: AppendOnlyTreeSnapshot;
            readonly treeId: MerkleTreeId;
            readonly leaf: import("../trees/nullifier_leaf.js").NullifierLeaf | import("../trees/public_data_leaf.js").PublicDataTreeLeaf;
            readonly lowLeavesWitnessData: {
                leaf: IndexedTreeLeafPreimages;
                index: bigint;
                path: Fr[];
            };
            readonly insertionWitnessData: {
                leaf: IndexedTreeLeafPreimages;
                index: bigint;
                path: Fr[];
            };
        }, {
            leaf: {
                nullifier: string;
            } | {
                value: string;
                slot: string;
            };
            hintKey: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            treeId: number;
            stateAfter: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            lowLeavesWitnessData: {
                path: string[];
                index: string | number | bigint;
                leaf: {
                    leaf: {
                        nullifier: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                } | {
                    leaf: {
                        value: string;
                        slot: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                };
            };
            insertionWitnessData: {
                path: string[];
                index: string | number | bigint;
                leaf: {
                    leaf: {
                        nullifier: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                } | {
                    leaf: {
                        value: string;
                        slot: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                };
            };
        }>, "many">;
        sequentialInsertHintsNullifierTree: z.ZodArray<z.ZodEffects<z.ZodObject<{
            hintKey: z.ZodEffects<z.ZodObject<{
                root: z.ZodType<Fr, any, string>;
                nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                root: Fr;
                nextAvailableLeafIndex: number;
            }, {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            }>, AppendOnlyTreeSnapshot, {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            }>;
            stateAfter: z.ZodEffects<z.ZodObject<{
                root: z.ZodType<Fr, any, string>;
                nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                root: Fr;
                nextAvailableLeafIndex: number;
            }, {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            }>, AppendOnlyTreeSnapshot, {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            }>;
            treeId: z.ZodNumber;
            leaf: z.ZodEffects<z.ZodObject<{
                nullifier: z.ZodType<Fr, any, string>;
            }, "strip", z.ZodTypeAny, {
                nullifier: Fr;
            }, {
                nullifier: string;
            }>, import("../trees/nullifier_leaf.js").NullifierLeaf, {
                nullifier: string;
            }> | z.ZodEffects<z.ZodObject<{
                slot: z.ZodType<Fr, any, string>;
                value: z.ZodType<Fr, any, string>;
            }, "strip", z.ZodTypeAny, {
                value: Fr;
                slot: Fr;
            }, {
                value: string;
                slot: string;
            }>, import("../trees/public_data_leaf.js").PublicDataTreeLeaf, {
                value: string;
                slot: string;
            }>;
            lowLeavesWitnessData: z.ZodObject<{
                leaf: z.ZodEffects<z.ZodObject<{
                    leaf: z.ZodEffects<z.ZodObject<{
                        nullifier: z.ZodType<Fr, any, string>;
                    }, "strip", z.ZodTypeAny, {
                        nullifier: Fr;
                    }, {
                        nullifier: string;
                    }>, import("../trees/nullifier_leaf.js").NullifierLeaf, {
                        nullifier: string;
                    }>;
                    nextKey: z.ZodType<Fr, any, string>;
                    nextIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
                }, "strip", z.ZodTypeAny, {
                    leaf: import("../trees/nullifier_leaf.js").NullifierLeaf;
                    nextKey: Fr;
                    nextIndex: bigint;
                }, {
                    leaf: {
                        nullifier: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                }>, NullifierLeafPreimage, {
                    leaf: {
                        nullifier: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                }> | z.ZodEffects<z.ZodObject<{
                    leaf: z.ZodEffects<z.ZodObject<{
                        slot: z.ZodType<Fr, any, string>;
                        value: z.ZodType<Fr, any, string>;
                    }, "strip", z.ZodTypeAny, {
                        value: Fr;
                        slot: Fr;
                    }, {
                        value: string;
                        slot: string;
                    }>, import("../trees/public_data_leaf.js").PublicDataTreeLeaf, {
                        value: string;
                        slot: string;
                    }>;
                    nextKey: z.ZodType<Fr, any, string>;
                    nextIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
                }, "strip", z.ZodTypeAny, {
                    leaf: import("../trees/public_data_leaf.js").PublicDataTreeLeaf;
                    nextKey: Fr;
                    nextIndex: bigint;
                }, {
                    leaf: {
                        value: string;
                        slot: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                }>, PublicDataTreeLeafPreimage, {
                    leaf: {
                        value: string;
                        slot: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                }>;
                index: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
                path: z.ZodArray<z.ZodType<Fr, any, string>, "many">;
            }, "strip", z.ZodTypeAny, {
                path: Fr[];
                index: bigint;
                leaf: NullifierLeafPreimage | PublicDataTreeLeafPreimage;
            }, {
                path: string[];
                index: string | number | bigint;
                leaf: {
                    leaf: {
                        nullifier: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                } | {
                    leaf: {
                        value: string;
                        slot: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                };
            }>;
            insertionWitnessData: z.ZodObject<{
                leaf: z.ZodEffects<z.ZodObject<{
                    leaf: z.ZodEffects<z.ZodObject<{
                        nullifier: z.ZodType<Fr, any, string>;
                    }, "strip", z.ZodTypeAny, {
                        nullifier: Fr;
                    }, {
                        nullifier: string;
                    }>, import("../trees/nullifier_leaf.js").NullifierLeaf, {
                        nullifier: string;
                    }>;
                    nextKey: z.ZodType<Fr, any, string>;
                    nextIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
                }, "strip", z.ZodTypeAny, {
                    leaf: import("../trees/nullifier_leaf.js").NullifierLeaf;
                    nextKey: Fr;
                    nextIndex: bigint;
                }, {
                    leaf: {
                        nullifier: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                }>, NullifierLeafPreimage, {
                    leaf: {
                        nullifier: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                }> | z.ZodEffects<z.ZodObject<{
                    leaf: z.ZodEffects<z.ZodObject<{
                        slot: z.ZodType<Fr, any, string>;
                        value: z.ZodType<Fr, any, string>;
                    }, "strip", z.ZodTypeAny, {
                        value: Fr;
                        slot: Fr;
                    }, {
                        value: string;
                        slot: string;
                    }>, import("../trees/public_data_leaf.js").PublicDataTreeLeaf, {
                        value: string;
                        slot: string;
                    }>;
                    nextKey: z.ZodType<Fr, any, string>;
                    nextIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
                }, "strip", z.ZodTypeAny, {
                    leaf: import("../trees/public_data_leaf.js").PublicDataTreeLeaf;
                    nextKey: Fr;
                    nextIndex: bigint;
                }, {
                    leaf: {
                        value: string;
                        slot: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                }>, PublicDataTreeLeafPreimage, {
                    leaf: {
                        value: string;
                        slot: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                }>;
                index: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
                path: z.ZodArray<z.ZodType<Fr, any, string>, "many">;
            }, "strip", z.ZodTypeAny, {
                path: Fr[];
                index: bigint;
                leaf: NullifierLeafPreimage | PublicDataTreeLeafPreimage;
            }, {
                path: string[];
                index: string | number | bigint;
                leaf: {
                    leaf: {
                        nullifier: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                } | {
                    leaf: {
                        value: string;
                        slot: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                };
            }>;
        }, "strip", z.ZodTypeAny, {
            leaf: import("../trees/nullifier_leaf.js").NullifierLeaf | import("../trees/public_data_leaf.js").PublicDataTreeLeaf;
            hintKey: AppendOnlyTreeSnapshot;
            treeId: number;
            stateAfter: AppendOnlyTreeSnapshot;
            lowLeavesWitnessData: {
                path: Fr[];
                index: bigint;
                leaf: NullifierLeafPreimage | PublicDataTreeLeafPreimage;
            };
            insertionWitnessData: {
                path: Fr[];
                index: bigint;
                leaf: NullifierLeafPreimage | PublicDataTreeLeafPreimage;
            };
        }, {
            leaf: {
                nullifier: string;
            } | {
                value: string;
                slot: string;
            };
            hintKey: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            treeId: number;
            stateAfter: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            lowLeavesWitnessData: {
                path: string[];
                index: string | number | bigint;
                leaf: {
                    leaf: {
                        nullifier: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                } | {
                    leaf: {
                        value: string;
                        slot: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                };
            };
            insertionWitnessData: {
                path: string[];
                index: string | number | bigint;
                leaf: {
                    leaf: {
                        nullifier: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                } | {
                    leaf: {
                        value: string;
                        slot: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                };
            };
        }>, {
            readonly hintKey: AppendOnlyTreeSnapshot;
            readonly stateAfter: AppendOnlyTreeSnapshot;
            readonly treeId: MerkleTreeId;
            readonly leaf: import("../trees/nullifier_leaf.js").NullifierLeaf | import("../trees/public_data_leaf.js").PublicDataTreeLeaf;
            readonly lowLeavesWitnessData: {
                leaf: IndexedTreeLeafPreimages;
                index: bigint;
                path: Fr[];
            };
            readonly insertionWitnessData: {
                leaf: IndexedTreeLeafPreimages;
                index: bigint;
                path: Fr[];
            };
        }, {
            leaf: {
                nullifier: string;
            } | {
                value: string;
                slot: string;
            };
            hintKey: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            treeId: number;
            stateAfter: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            lowLeavesWitnessData: {
                path: string[];
                index: string | number | bigint;
                leaf: {
                    leaf: {
                        nullifier: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                } | {
                    leaf: {
                        value: string;
                        slot: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                };
            };
            insertionWitnessData: {
                path: string[];
                index: string | number | bigint;
                leaf: {
                    leaf: {
                        nullifier: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                } | {
                    leaf: {
                        value: string;
                        slot: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                };
            };
        }>, "many">;
        appendLeavesHints: z.ZodArray<z.ZodEffects<z.ZodObject<{
            hintKey: z.ZodEffects<z.ZodObject<{
                root: z.ZodType<Fr, any, string>;
                nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                root: Fr;
                nextAvailableLeafIndex: number;
            }, {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            }>, AppendOnlyTreeSnapshot, {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            }>;
            stateAfter: z.ZodEffects<z.ZodObject<{
                root: z.ZodType<Fr, any, string>;
                nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                root: Fr;
                nextAvailableLeafIndex: number;
            }, {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            }>, AppendOnlyTreeSnapshot, {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            }>;
            treeId: z.ZodNumber;
            leaves: z.ZodArray<z.ZodType<Fr, any, string>, "many">;
        }, "strip", z.ZodTypeAny, {
            hintKey: AppendOnlyTreeSnapshot;
            treeId: number;
            stateAfter: AppendOnlyTreeSnapshot;
            leaves: Fr[];
        }, {
            hintKey: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            treeId: number;
            stateAfter: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            leaves: string[];
        }>, AvmAppendLeavesHint, {
            hintKey: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            treeId: number;
            stateAfter: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            leaves: string[];
        }>, "many">;
        createCheckpointHints: z.ZodArray<z.ZodEffects<z.ZodObject<{
            actionCounter: z.ZodNumber;
            oldCheckpointId: z.ZodNumber;
            newCheckpointId: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            actionCounter: number;
            oldCheckpointId: number;
            newCheckpointId: number;
        }, {
            actionCounter: number;
            oldCheckpointId: number;
            newCheckpointId: number;
        }>, AvmCheckpointActionNoStateChangeHint, {
            actionCounter: number;
            oldCheckpointId: number;
            newCheckpointId: number;
        }>, "many">;
        commitCheckpointHints: z.ZodArray<z.ZodEffects<z.ZodObject<{
            actionCounter: z.ZodNumber;
            oldCheckpointId: z.ZodNumber;
            newCheckpointId: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            actionCounter: number;
            oldCheckpointId: number;
            newCheckpointId: number;
        }, {
            actionCounter: number;
            oldCheckpointId: number;
            newCheckpointId: number;
        }>, AvmCheckpointActionNoStateChangeHint, {
            actionCounter: number;
            oldCheckpointId: number;
            newCheckpointId: number;
        }>, "many">;
        revertCheckpointHints: z.ZodArray<z.ZodEffects<z.ZodObject<{
            actionCounter: z.ZodNumber;
            oldCheckpointId: z.ZodNumber;
            newCheckpointId: z.ZodNumber;
            stateBefore: z.ZodEffects<z.ZodObject<{
                l1ToL2MessageTree: z.ZodEffects<z.ZodObject<{
                    root: z.ZodType<Fr, any, string>;
                    nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    root: Fr;
                    nextAvailableLeafIndex: number;
                }, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>, AppendOnlyTreeSnapshot, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>;
                noteHashTree: z.ZodEffects<z.ZodObject<{
                    root: z.ZodType<Fr, any, string>;
                    nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    root: Fr;
                    nextAvailableLeafIndex: number;
                }, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>, AppendOnlyTreeSnapshot, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>;
                nullifierTree: z.ZodEffects<z.ZodObject<{
                    root: z.ZodType<Fr, any, string>;
                    nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    root: Fr;
                    nextAvailableLeafIndex: number;
                }, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>, AppendOnlyTreeSnapshot, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>;
                publicDataTree: z.ZodEffects<z.ZodObject<{
                    root: z.ZodType<Fr, any, string>;
                    nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    root: Fr;
                    nextAvailableLeafIndex: number;
                }, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>, AppendOnlyTreeSnapshot, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>;
            }, "strip", z.ZodTypeAny, {
                noteHashTree: AppendOnlyTreeSnapshot;
                nullifierTree: AppendOnlyTreeSnapshot;
                publicDataTree: AppendOnlyTreeSnapshot;
                l1ToL2MessageTree: AppendOnlyTreeSnapshot;
            }, {
                noteHashTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                nullifierTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                publicDataTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                l1ToL2MessageTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
            }>, TreeSnapshots, {
                noteHashTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                nullifierTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                publicDataTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                l1ToL2MessageTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
            }>;
            stateAfter: z.ZodEffects<z.ZodObject<{
                l1ToL2MessageTree: z.ZodEffects<z.ZodObject<{
                    root: z.ZodType<Fr, any, string>;
                    nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    root: Fr;
                    nextAvailableLeafIndex: number;
                }, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>, AppendOnlyTreeSnapshot, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>;
                noteHashTree: z.ZodEffects<z.ZodObject<{
                    root: z.ZodType<Fr, any, string>;
                    nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    root: Fr;
                    nextAvailableLeafIndex: number;
                }, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>, AppendOnlyTreeSnapshot, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>;
                nullifierTree: z.ZodEffects<z.ZodObject<{
                    root: z.ZodType<Fr, any, string>;
                    nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    root: Fr;
                    nextAvailableLeafIndex: number;
                }, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>, AppendOnlyTreeSnapshot, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>;
                publicDataTree: z.ZodEffects<z.ZodObject<{
                    root: z.ZodType<Fr, any, string>;
                    nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    root: Fr;
                    nextAvailableLeafIndex: number;
                }, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>, AppendOnlyTreeSnapshot, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>;
            }, "strip", z.ZodTypeAny, {
                noteHashTree: AppendOnlyTreeSnapshot;
                nullifierTree: AppendOnlyTreeSnapshot;
                publicDataTree: AppendOnlyTreeSnapshot;
                l1ToL2MessageTree: AppendOnlyTreeSnapshot;
            }, {
                noteHashTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                nullifierTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                publicDataTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                l1ToL2MessageTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
            }>, TreeSnapshots, {
                noteHashTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                nullifierTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                publicDataTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                l1ToL2MessageTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
            }>;
        }, "strip", z.ZodTypeAny, {
            stateAfter: TreeSnapshots;
            actionCounter: number;
            oldCheckpointId: number;
            newCheckpointId: number;
            stateBefore: TreeSnapshots;
        }, {
            stateAfter: {
                noteHashTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                nullifierTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                publicDataTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                l1ToL2MessageTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
            };
            actionCounter: number;
            oldCheckpointId: number;
            newCheckpointId: number;
            stateBefore: {
                noteHashTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                nullifierTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                publicDataTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                l1ToL2MessageTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
            };
        }>, AvmRevertCheckpointHint, {
            stateAfter: {
                noteHashTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                nullifierTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                publicDataTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                l1ToL2MessageTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
            };
            actionCounter: number;
            oldCheckpointId: number;
            newCheckpointId: number;
            stateBefore: {
                noteHashTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                nullifierTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                publicDataTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                l1ToL2MessageTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
            };
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        tx: AvmTxHint;
        contractInstances: AvmContractInstanceHint[];
        contractClasses: AvmContractClassHint[];
        bytecodeCommitments: AvmBytecodeCommitmentHint[];
        startingTreeRoots: TreeSnapshots;
        getSiblingPathHints: AvmGetSiblingPathHint[];
        getPreviousValueIndexHints: AvmGetPreviousValueIndexHint[];
        getLeafPreimageHintsPublicDataTree: {
            readonly hintKey: AppendOnlyTreeSnapshot;
            readonly index: bigint;
            readonly leafPreimage: IndexedTreeLeafPreimages;
        }[];
        getLeafPreimageHintsNullifierTree: {
            readonly hintKey: AppendOnlyTreeSnapshot;
            readonly index: bigint;
            readonly leafPreimage: IndexedTreeLeafPreimages;
        }[];
        getLeafValueHints: AvmGetLeafValueHint[];
        sequentialInsertHintsPublicDataTree: {
            readonly hintKey: AppendOnlyTreeSnapshot;
            readonly stateAfter: AppendOnlyTreeSnapshot;
            readonly treeId: MerkleTreeId;
            readonly leaf: import("../trees/nullifier_leaf.js").NullifierLeaf | import("../trees/public_data_leaf.js").PublicDataTreeLeaf;
            readonly lowLeavesWitnessData: {
                leaf: IndexedTreeLeafPreimages;
                index: bigint;
                path: Fr[];
            };
            readonly insertionWitnessData: {
                leaf: IndexedTreeLeafPreimages;
                index: bigint;
                path: Fr[];
            };
        }[];
        sequentialInsertHintsNullifierTree: {
            readonly hintKey: AppendOnlyTreeSnapshot;
            readonly stateAfter: AppendOnlyTreeSnapshot;
            readonly treeId: MerkleTreeId;
            readonly leaf: import("../trees/nullifier_leaf.js").NullifierLeaf | import("../trees/public_data_leaf.js").PublicDataTreeLeaf;
            readonly lowLeavesWitnessData: {
                leaf: IndexedTreeLeafPreimages;
                index: bigint;
                path: Fr[];
            };
            readonly insertionWitnessData: {
                leaf: IndexedTreeLeafPreimages;
                index: bigint;
                path: Fr[];
            };
        }[];
        appendLeavesHints: AvmAppendLeavesHint[];
        createCheckpointHints: AvmCheckpointActionNoStateChangeHint[];
        commitCheckpointHints: AvmCheckpointActionNoStateChangeHint[];
        revertCheckpointHints: AvmRevertCheckpointHint[];
    }, {
        tx: {
            hash: string;
            globalVariables: {
                gasFees: {
                    feePerDaGas: string;
                    feePerL2Gas: string;
                };
                chainId?: any;
                version?: any;
                blockNumber?: any;
                slotNumber?: any;
                timestamp?: any;
                coinbase?: any;
                feeRecipient?: any;
            };
            nonRevertibleAccumulatedData: {
                noteHashes: string[];
                nullifiers: string[];
            };
            revertibleAccumulatedData: {
                noteHashes: string[];
                nullifiers: string[];
            };
            setupEnqueuedCalls: {
                isStaticCall: boolean;
                calldata: string[];
                contractAddress?: any;
                msgSender?: any;
            }[];
            appLogicEnqueuedCalls: {
                isStaticCall: boolean;
                calldata: string[];
                contractAddress?: any;
                msgSender?: any;
            }[];
            teardownEnqueuedCall: {
                isStaticCall: boolean;
                calldata: string[];
                contractAddress?: any;
                msgSender?: any;
            } | null;
        };
        contractInstances: {
            publicKeys: {
                masterNullifierPublicKey: string;
                masterIncomingViewingPublicKey: string;
                masterOutgoingViewingPublicKey: string;
                masterTaggingPublicKey: string;
            };
            salt: string;
            currentContractClassId: string;
            originalContractClassId: string;
            initializationHash: string;
            address?: any;
            deployer?: any;
        }[];
        contractClasses: {
            classId: string;
            artifactHash: string;
            privateFunctionsRoot: string;
            packedBytecode: string | {
                type: "Buffer";
                data: number[];
            };
        }[];
        bytecodeCommitments: {
            classId: string;
            commitment: string;
        }[];
        startingTreeRoots: {
            noteHashTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            nullifierTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            publicDataTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            l1ToL2MessageTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
        };
        getSiblingPathHints: {
            path: string[];
            index: string | number | bigint;
            hintKey: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            treeId: number;
        }[];
        getPreviousValueIndexHints: {
            value: string;
            index: string | number | bigint;
            alreadyPresent: boolean;
            hintKey: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            treeId: number;
        }[];
        getLeafPreimageHintsPublicDataTree: {
            index: string | number | bigint;
            leafPreimage: {
                leaf: {
                    nullifier: string;
                };
                nextKey: string;
                nextIndex: string | number | bigint;
            } | {
                leaf: {
                    value: string;
                    slot: string;
                };
                nextKey: string;
                nextIndex: string | number | bigint;
            };
            hintKey: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
        }[];
        getLeafPreimageHintsNullifierTree: {
            index: string | number | bigint;
            leafPreimage: {
                leaf: {
                    nullifier: string;
                };
                nextKey: string;
                nextIndex: string | number | bigint;
            } | {
                leaf: {
                    value: string;
                    slot: string;
                };
                nextKey: string;
                nextIndex: string | number | bigint;
            };
            hintKey: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
        }[];
        getLeafValueHints: {
            value: string;
            index: string | number | bigint;
            hintKey: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            treeId: number;
        }[];
        sequentialInsertHintsPublicDataTree: {
            leaf: {
                nullifier: string;
            } | {
                value: string;
                slot: string;
            };
            hintKey: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            treeId: number;
            stateAfter: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            lowLeavesWitnessData: {
                path: string[];
                index: string | number | bigint;
                leaf: {
                    leaf: {
                        nullifier: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                } | {
                    leaf: {
                        value: string;
                        slot: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                };
            };
            insertionWitnessData: {
                path: string[];
                index: string | number | bigint;
                leaf: {
                    leaf: {
                        nullifier: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                } | {
                    leaf: {
                        value: string;
                        slot: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                };
            };
        }[];
        sequentialInsertHintsNullifierTree: {
            leaf: {
                nullifier: string;
            } | {
                value: string;
                slot: string;
            };
            hintKey: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            treeId: number;
            stateAfter: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            lowLeavesWitnessData: {
                path: string[];
                index: string | number | bigint;
                leaf: {
                    leaf: {
                        nullifier: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                } | {
                    leaf: {
                        value: string;
                        slot: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                };
            };
            insertionWitnessData: {
                path: string[];
                index: string | number | bigint;
                leaf: {
                    leaf: {
                        nullifier: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                } | {
                    leaf: {
                        value: string;
                        slot: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                };
            };
        }[];
        appendLeavesHints: {
            hintKey: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            treeId: number;
            stateAfter: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            leaves: string[];
        }[];
        createCheckpointHints: {
            actionCounter: number;
            oldCheckpointId: number;
            newCheckpointId: number;
        }[];
        commitCheckpointHints: {
            actionCounter: number;
            oldCheckpointId: number;
            newCheckpointId: number;
        }[];
        revertCheckpointHints: {
            stateAfter: {
                noteHashTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                nullifierTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                publicDataTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                l1ToL2MessageTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
            };
            actionCounter: number;
            oldCheckpointId: number;
            newCheckpointId: number;
            stateBefore: {
                noteHashTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                nullifierTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                publicDataTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                l1ToL2MessageTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
            };
        }[];
    }>, AvmExecutionHints, {
        tx: {
            hash: string;
            globalVariables: {
                gasFees: {
                    feePerDaGas: string;
                    feePerL2Gas: string;
                };
                chainId?: any;
                version?: any;
                blockNumber?: any;
                slotNumber?: any;
                timestamp?: any;
                coinbase?: any;
                feeRecipient?: any;
            };
            nonRevertibleAccumulatedData: {
                noteHashes: string[];
                nullifiers: string[];
            };
            revertibleAccumulatedData: {
                noteHashes: string[];
                nullifiers: string[];
            };
            setupEnqueuedCalls: {
                isStaticCall: boolean;
                calldata: string[];
                contractAddress?: any;
                msgSender?: any;
            }[];
            appLogicEnqueuedCalls: {
                isStaticCall: boolean;
                calldata: string[];
                contractAddress?: any;
                msgSender?: any;
            }[];
            teardownEnqueuedCall: {
                isStaticCall: boolean;
                calldata: string[];
                contractAddress?: any;
                msgSender?: any;
            } | null;
        };
        contractInstances: {
            publicKeys: {
                masterNullifierPublicKey: string;
                masterIncomingViewingPublicKey: string;
                masterOutgoingViewingPublicKey: string;
                masterTaggingPublicKey: string;
            };
            salt: string;
            currentContractClassId: string;
            originalContractClassId: string;
            initializationHash: string;
            address?: any;
            deployer?: any;
        }[];
        contractClasses: {
            classId: string;
            artifactHash: string;
            privateFunctionsRoot: string;
            packedBytecode: string | {
                type: "Buffer";
                data: number[];
            };
        }[];
        bytecodeCommitments: {
            classId: string;
            commitment: string;
        }[];
        startingTreeRoots: {
            noteHashTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            nullifierTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            publicDataTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            l1ToL2MessageTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
        };
        getSiblingPathHints: {
            path: string[];
            index: string | number | bigint;
            hintKey: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            treeId: number;
        }[];
        getPreviousValueIndexHints: {
            value: string;
            index: string | number | bigint;
            alreadyPresent: boolean;
            hintKey: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            treeId: number;
        }[];
        getLeafPreimageHintsPublicDataTree: {
            index: string | number | bigint;
            leafPreimage: {
                leaf: {
                    nullifier: string;
                };
                nextKey: string;
                nextIndex: string | number | bigint;
            } | {
                leaf: {
                    value: string;
                    slot: string;
                };
                nextKey: string;
                nextIndex: string | number | bigint;
            };
            hintKey: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
        }[];
        getLeafPreimageHintsNullifierTree: {
            index: string | number | bigint;
            leafPreimage: {
                leaf: {
                    nullifier: string;
                };
                nextKey: string;
                nextIndex: string | number | bigint;
            } | {
                leaf: {
                    value: string;
                    slot: string;
                };
                nextKey: string;
                nextIndex: string | number | bigint;
            };
            hintKey: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
        }[];
        getLeafValueHints: {
            value: string;
            index: string | number | bigint;
            hintKey: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            treeId: number;
        }[];
        sequentialInsertHintsPublicDataTree: {
            leaf: {
                nullifier: string;
            } | {
                value: string;
                slot: string;
            };
            hintKey: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            treeId: number;
            stateAfter: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            lowLeavesWitnessData: {
                path: string[];
                index: string | number | bigint;
                leaf: {
                    leaf: {
                        nullifier: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                } | {
                    leaf: {
                        value: string;
                        slot: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                };
            };
            insertionWitnessData: {
                path: string[];
                index: string | number | bigint;
                leaf: {
                    leaf: {
                        nullifier: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                } | {
                    leaf: {
                        value: string;
                        slot: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                };
            };
        }[];
        sequentialInsertHintsNullifierTree: {
            leaf: {
                nullifier: string;
            } | {
                value: string;
                slot: string;
            };
            hintKey: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            treeId: number;
            stateAfter: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            lowLeavesWitnessData: {
                path: string[];
                index: string | number | bigint;
                leaf: {
                    leaf: {
                        nullifier: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                } | {
                    leaf: {
                        value: string;
                        slot: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                };
            };
            insertionWitnessData: {
                path: string[];
                index: string | number | bigint;
                leaf: {
                    leaf: {
                        nullifier: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                } | {
                    leaf: {
                        value: string;
                        slot: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                };
            };
        }[];
        appendLeavesHints: {
            hintKey: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            treeId: number;
            stateAfter: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            leaves: string[];
        }[];
        createCheckpointHints: {
            actionCounter: number;
            oldCheckpointId: number;
            newCheckpointId: number;
        }[];
        commitCheckpointHints: {
            actionCounter: number;
            oldCheckpointId: number;
            newCheckpointId: number;
        }[];
        revertCheckpointHints: {
            stateAfter: {
                noteHashTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                nullifierTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                publicDataTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                l1ToL2MessageTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
            };
            actionCounter: number;
            oldCheckpointId: number;
            newCheckpointId: number;
            stateBefore: {
                noteHashTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                nullifierTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                publicDataTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                l1ToL2MessageTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
            };
        }[];
    }>;
}
export declare class AvmCircuitInputs {
    readonly hints: AvmExecutionHints;
    publicInputs: AvmCircuitPublicInputs;
    constructor(hints: AvmExecutionHints, publicInputs: AvmCircuitPublicInputs);
    static empty(): AvmCircuitInputs;
    static get schema(): z.ZodEffects<z.ZodObject<{
        hints: z.ZodEffects<z.ZodObject<{
            tx: z.ZodEffects<z.ZodObject<{
                hash: z.ZodString;
                globalVariables: z.ZodEffects<z.ZodObject<{
                    chainId: import("@aztec/foundation/schemas").ZodFor<Fr>;
                    version: import("@aztec/foundation/schemas").ZodFor<Fr>;
                    blockNumber: import("@aztec/foundation/schemas").ZodFor<Fr>;
                    slotNumber: import("@aztec/foundation/schemas").ZodFor<Fr>;
                    timestamp: import("@aztec/foundation/schemas").ZodFor<Fr>;
                    coinbase: import("@aztec/foundation/schemas").ZodFor<import("@aztec/foundation/schemas").EthAddress>;
                    feeRecipient: import("@aztec/foundation/schemas").ZodFor<AztecAddress>;
                    gasFees: z.ZodEffects<z.ZodObject<{
                        feePerDaGas: z.ZodType<Fr, any, string>;
                        feePerL2Gas: z.ZodType<Fr, any, string>;
                    }, "strip", z.ZodTypeAny, {
                        feePerDaGas: Fr;
                        feePerL2Gas: Fr;
                    }, {
                        feePerDaGas: string;
                        feePerL2Gas: string;
                    }>, import("../gas/gas_fees.js").GasFees, {
                        feePerDaGas: string;
                        feePerL2Gas: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    chainId: Fr;
                    version: Fr;
                    blockNumber: Fr;
                    slotNumber: Fr;
                    timestamp: Fr;
                    coinbase: import("@aztec/foundation/schemas").EthAddress;
                    feeRecipient: AztecAddress;
                    gasFees: import("../gas/gas_fees.js").GasFees;
                }, {
                    gasFees: {
                        feePerDaGas: string;
                        feePerL2Gas: string;
                    };
                    chainId?: any;
                    version?: any;
                    blockNumber?: any;
                    slotNumber?: any;
                    timestamp?: any;
                    coinbase?: any;
                    feeRecipient?: any;
                }>, GlobalVariables, {
                    gasFees: {
                        feePerDaGas: string;
                        feePerL2Gas: string;
                    };
                    chainId?: any;
                    version?: any;
                    blockNumber?: any;
                    slotNumber?: any;
                    timestamp?: any;
                    coinbase?: any;
                    feeRecipient?: any;
                }>;
                nonRevertibleAccumulatedData: z.ZodObject<{
                    noteHashes: z.ZodArray<z.ZodType<Fr, any, string>, "many">;
                    nullifiers: z.ZodArray<z.ZodType<Fr, any, string>, "many">;
                }, "strip", z.ZodTypeAny, {
                    noteHashes: Fr[];
                    nullifiers: Fr[];
                }, {
                    noteHashes: string[];
                    nullifiers: string[];
                }>;
                revertibleAccumulatedData: z.ZodObject<{
                    noteHashes: z.ZodArray<z.ZodType<Fr, any, string>, "many">;
                    nullifiers: z.ZodArray<z.ZodType<Fr, any, string>, "many">;
                }, "strip", z.ZodTypeAny, {
                    noteHashes: Fr[];
                    nullifiers: Fr[];
                }, {
                    noteHashes: string[];
                    nullifiers: string[];
                }>;
                setupEnqueuedCalls: z.ZodArray<z.ZodEffects<z.ZodObject<{
                    msgSender: import("@aztec/foundation/schemas").ZodFor<AztecAddress>;
                    contractAddress: import("@aztec/foundation/schemas").ZodFor<AztecAddress>;
                    calldata: z.ZodArray<z.ZodType<Fr, any, string>, "many">;
                    isStaticCall: z.ZodBoolean;
                }, "strip", z.ZodTypeAny, {
                    contractAddress: AztecAddress;
                    msgSender: AztecAddress;
                    isStaticCall: boolean;
                    calldata: Fr[];
                }, {
                    isStaticCall: boolean;
                    calldata: string[];
                    contractAddress?: any;
                    msgSender?: any;
                }>, AvmEnqueuedCallHint, {
                    isStaticCall: boolean;
                    calldata: string[];
                    contractAddress?: any;
                    msgSender?: any;
                }>, "many">;
                appLogicEnqueuedCalls: z.ZodArray<z.ZodEffects<z.ZodObject<{
                    msgSender: import("@aztec/foundation/schemas").ZodFor<AztecAddress>;
                    contractAddress: import("@aztec/foundation/schemas").ZodFor<AztecAddress>;
                    calldata: z.ZodArray<z.ZodType<Fr, any, string>, "many">;
                    isStaticCall: z.ZodBoolean;
                }, "strip", z.ZodTypeAny, {
                    contractAddress: AztecAddress;
                    msgSender: AztecAddress;
                    isStaticCall: boolean;
                    calldata: Fr[];
                }, {
                    isStaticCall: boolean;
                    calldata: string[];
                    contractAddress?: any;
                    msgSender?: any;
                }>, AvmEnqueuedCallHint, {
                    isStaticCall: boolean;
                    calldata: string[];
                    contractAddress?: any;
                    msgSender?: any;
                }>, "many">;
                teardownEnqueuedCall: z.ZodNullable<z.ZodEffects<z.ZodObject<{
                    msgSender: import("@aztec/foundation/schemas").ZodFor<AztecAddress>;
                    contractAddress: import("@aztec/foundation/schemas").ZodFor<AztecAddress>;
                    calldata: z.ZodArray<z.ZodType<Fr, any, string>, "many">;
                    isStaticCall: z.ZodBoolean;
                }, "strip", z.ZodTypeAny, {
                    contractAddress: AztecAddress;
                    msgSender: AztecAddress;
                    isStaticCall: boolean;
                    calldata: Fr[];
                }, {
                    isStaticCall: boolean;
                    calldata: string[];
                    contractAddress?: any;
                    msgSender?: any;
                }>, AvmEnqueuedCallHint, {
                    isStaticCall: boolean;
                    calldata: string[];
                    contractAddress?: any;
                    msgSender?: any;
                }>>;
            }, "strip", z.ZodTypeAny, {
                hash: string;
                globalVariables: GlobalVariables;
                nonRevertibleAccumulatedData: {
                    noteHashes: Fr[];
                    nullifiers: Fr[];
                };
                revertibleAccumulatedData: {
                    noteHashes: Fr[];
                    nullifiers: Fr[];
                };
                setupEnqueuedCalls: AvmEnqueuedCallHint[];
                appLogicEnqueuedCalls: AvmEnqueuedCallHint[];
                teardownEnqueuedCall: AvmEnqueuedCallHint | null;
            }, {
                hash: string;
                globalVariables: {
                    gasFees: {
                        feePerDaGas: string;
                        feePerL2Gas: string;
                    };
                    chainId?: any;
                    version?: any;
                    blockNumber?: any;
                    slotNumber?: any;
                    timestamp?: any;
                    coinbase?: any;
                    feeRecipient?: any;
                };
                nonRevertibleAccumulatedData: {
                    noteHashes: string[];
                    nullifiers: string[];
                };
                revertibleAccumulatedData: {
                    noteHashes: string[];
                    nullifiers: string[];
                };
                setupEnqueuedCalls: {
                    isStaticCall: boolean;
                    calldata: string[];
                    contractAddress?: any;
                    msgSender?: any;
                }[];
                appLogicEnqueuedCalls: {
                    isStaticCall: boolean;
                    calldata: string[];
                    contractAddress?: any;
                    msgSender?: any;
                }[];
                teardownEnqueuedCall: {
                    isStaticCall: boolean;
                    calldata: string[];
                    contractAddress?: any;
                    msgSender?: any;
                } | null;
            }>, AvmTxHint, {
                hash: string;
                globalVariables: {
                    gasFees: {
                        feePerDaGas: string;
                        feePerL2Gas: string;
                    };
                    chainId?: any;
                    version?: any;
                    blockNumber?: any;
                    slotNumber?: any;
                    timestamp?: any;
                    coinbase?: any;
                    feeRecipient?: any;
                };
                nonRevertibleAccumulatedData: {
                    noteHashes: string[];
                    nullifiers: string[];
                };
                revertibleAccumulatedData: {
                    noteHashes: string[];
                    nullifiers: string[];
                };
                setupEnqueuedCalls: {
                    isStaticCall: boolean;
                    calldata: string[];
                    contractAddress?: any;
                    msgSender?: any;
                }[];
                appLogicEnqueuedCalls: {
                    isStaticCall: boolean;
                    calldata: string[];
                    contractAddress?: any;
                    msgSender?: any;
                }[];
                teardownEnqueuedCall: {
                    isStaticCall: boolean;
                    calldata: string[];
                    contractAddress?: any;
                    msgSender?: any;
                } | null;
            }>;
            contractInstances: z.ZodArray<z.ZodEffects<z.ZodObject<{
                address: import("@aztec/foundation/schemas").ZodFor<AztecAddress>;
                salt: z.ZodType<Fr, any, string>;
                deployer: import("@aztec/foundation/schemas").ZodFor<AztecAddress>;
                currentContractClassId: z.ZodType<Fr, any, string>;
                originalContractClassId: z.ZodType<Fr, any, string>;
                initializationHash: z.ZodType<Fr, any, string>;
                publicKeys: z.ZodEffects<z.ZodObject<{
                    masterNullifierPublicKey: z.ZodType<import("@aztec/foundation/fields").Point, any, string>;
                    masterIncomingViewingPublicKey: z.ZodType<import("@aztec/foundation/fields").Point, any, string>;
                    masterOutgoingViewingPublicKey: z.ZodType<import("@aztec/foundation/fields").Point, any, string>;
                    masterTaggingPublicKey: z.ZodType<import("@aztec/foundation/fields").Point, any, string>;
                }, "strip", z.ZodTypeAny, {
                    masterNullifierPublicKey: import("@aztec/foundation/fields").Point;
                    masterIncomingViewingPublicKey: import("@aztec/foundation/fields").Point;
                    masterOutgoingViewingPublicKey: import("@aztec/foundation/fields").Point;
                    masterTaggingPublicKey: import("@aztec/foundation/fields").Point;
                }, {
                    masterNullifierPublicKey: string;
                    masterIncomingViewingPublicKey: string;
                    masterOutgoingViewingPublicKey: string;
                    masterTaggingPublicKey: string;
                }>, PublicKeys, {
                    masterNullifierPublicKey: string;
                    masterIncomingViewingPublicKey: string;
                    masterOutgoingViewingPublicKey: string;
                    masterTaggingPublicKey: string;
                }>;
            }, "strip", z.ZodTypeAny, {
                address: AztecAddress;
                publicKeys: PublicKeys;
                salt: Fr;
                deployer: AztecAddress;
                currentContractClassId: Fr;
                originalContractClassId: Fr;
                initializationHash: Fr;
            }, {
                publicKeys: {
                    masterNullifierPublicKey: string;
                    masterIncomingViewingPublicKey: string;
                    masterOutgoingViewingPublicKey: string;
                    masterTaggingPublicKey: string;
                };
                salt: string;
                currentContractClassId: string;
                originalContractClassId: string;
                initializationHash: string;
                address?: any;
                deployer?: any;
            }>, AvmContractInstanceHint, {
                publicKeys: {
                    masterNullifierPublicKey: string;
                    masterIncomingViewingPublicKey: string;
                    masterOutgoingViewingPublicKey: string;
                    masterTaggingPublicKey: string;
                };
                salt: string;
                currentContractClassId: string;
                originalContractClassId: string;
                initializationHash: string;
                address?: any;
                deployer?: any;
            }>, "many">;
            contractClasses: z.ZodArray<z.ZodEffects<z.ZodObject<{
                classId: z.ZodType<Fr, any, string>;
                artifactHash: z.ZodType<Fr, any, string>;
                privateFunctionsRoot: z.ZodType<Fr, any, string>;
                packedBytecode: z.ZodUnion<[z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, Buffer, string>, z.ZodEffects<z.ZodObject<{
                    type: z.ZodLiteral<"Buffer">;
                    data: z.ZodArray<z.ZodNumber, "many">;
                }, "strip", z.ZodTypeAny, {
                    type: "Buffer";
                    data: number[];
                }, {
                    type: "Buffer";
                    data: number[];
                }>, Buffer, {
                    type: "Buffer";
                    data: number[];
                }>]>;
            }, "strip", z.ZodTypeAny, {
                classId: Fr;
                artifactHash: Fr;
                privateFunctionsRoot: Fr;
                packedBytecode: Buffer;
            }, {
                classId: string;
                artifactHash: string;
                privateFunctionsRoot: string;
                packedBytecode: string | {
                    type: "Buffer";
                    data: number[];
                };
            }>, AvmContractClassHint, {
                classId: string;
                artifactHash: string;
                privateFunctionsRoot: string;
                packedBytecode: string | {
                    type: "Buffer";
                    data: number[];
                };
            }>, "many">;
            bytecodeCommitments: z.ZodArray<z.ZodEffects<z.ZodObject<{
                classId: z.ZodType<Fr, any, string>;
                commitment: z.ZodType<Fr, any, string>;
            }, "strip", z.ZodTypeAny, {
                classId: Fr;
                commitment: Fr;
            }, {
                classId: string;
                commitment: string;
            }>, AvmBytecodeCommitmentHint, {
                classId: string;
                commitment: string;
            }>, "many">;
            startingTreeRoots: z.ZodEffects<z.ZodObject<{
                l1ToL2MessageTree: z.ZodEffects<z.ZodObject<{
                    root: z.ZodType<Fr, any, string>;
                    nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    root: Fr;
                    nextAvailableLeafIndex: number;
                }, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>, AppendOnlyTreeSnapshot, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>;
                noteHashTree: z.ZodEffects<z.ZodObject<{
                    root: z.ZodType<Fr, any, string>;
                    nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    root: Fr;
                    nextAvailableLeafIndex: number;
                }, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>, AppendOnlyTreeSnapshot, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>;
                nullifierTree: z.ZodEffects<z.ZodObject<{
                    root: z.ZodType<Fr, any, string>;
                    nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    root: Fr;
                    nextAvailableLeafIndex: number;
                }, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>, AppendOnlyTreeSnapshot, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>;
                publicDataTree: z.ZodEffects<z.ZodObject<{
                    root: z.ZodType<Fr, any, string>;
                    nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    root: Fr;
                    nextAvailableLeafIndex: number;
                }, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>, AppendOnlyTreeSnapshot, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>;
            }, "strip", z.ZodTypeAny, {
                noteHashTree: AppendOnlyTreeSnapshot;
                nullifierTree: AppendOnlyTreeSnapshot;
                publicDataTree: AppendOnlyTreeSnapshot;
                l1ToL2MessageTree: AppendOnlyTreeSnapshot;
            }, {
                noteHashTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                nullifierTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                publicDataTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                l1ToL2MessageTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
            }>, TreeSnapshots, {
                noteHashTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                nullifierTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                publicDataTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                l1ToL2MessageTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
            }>;
            getSiblingPathHints: z.ZodArray<z.ZodEffects<z.ZodObject<{
                hintKey: z.ZodEffects<z.ZodObject<{
                    root: z.ZodType<Fr, any, string>;
                    nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    root: Fr;
                    nextAvailableLeafIndex: number;
                }, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>, AppendOnlyTreeSnapshot, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>;
                treeId: z.ZodNumber;
                index: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
                path: z.ZodArray<z.ZodType<Fr, any, string>, "many">;
            }, "strip", z.ZodTypeAny, {
                path: Fr[];
                index: bigint;
                hintKey: AppendOnlyTreeSnapshot;
                treeId: number;
            }, {
                path: string[];
                index: string | number | bigint;
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                treeId: number;
            }>, AvmGetSiblingPathHint, {
                path: string[];
                index: string | number | bigint;
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                treeId: number;
            }>, "many">;
            getPreviousValueIndexHints: z.ZodArray<z.ZodEffects<z.ZodObject<{
                hintKey: z.ZodEffects<z.ZodObject<{
                    root: z.ZodType<Fr, any, string>;
                    nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    root: Fr;
                    nextAvailableLeafIndex: number;
                }, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>, AppendOnlyTreeSnapshot, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>;
                treeId: z.ZodNumber;
                value: z.ZodType<Fr, any, string>;
                index: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
                alreadyPresent: z.ZodBoolean;
            }, "strip", z.ZodTypeAny, {
                value: Fr;
                index: bigint;
                alreadyPresent: boolean;
                hintKey: AppendOnlyTreeSnapshot;
                treeId: number;
            }, {
                value: string;
                index: string | number | bigint;
                alreadyPresent: boolean;
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                treeId: number;
            }>, AvmGetPreviousValueIndexHint, {
                value: string;
                index: string | number | bigint;
                alreadyPresent: boolean;
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                treeId: number;
            }>, "many">;
            getLeafPreimageHintsPublicDataTree: z.ZodArray<z.ZodEffects<z.ZodObject<{
                hintKey: z.ZodEffects<z.ZodObject<{
                    root: z.ZodType<Fr, any, string>;
                    nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    root: Fr;
                    nextAvailableLeafIndex: number;
                }, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>, AppendOnlyTreeSnapshot, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>;
                index: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
                leafPreimage: z.ZodEffects<z.ZodObject<{
                    leaf: z.ZodEffects<z.ZodObject<{
                        nullifier: z.ZodType<Fr, any, string>;
                    }, "strip", z.ZodTypeAny, {
                        nullifier: Fr;
                    }, {
                        nullifier: string;
                    }>, import("../trees/nullifier_leaf.js").NullifierLeaf, {
                        nullifier: string;
                    }>;
                    nextKey: z.ZodType<Fr, any, string>;
                    nextIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
                }, "strip", z.ZodTypeAny, {
                    leaf: import("../trees/nullifier_leaf.js").NullifierLeaf;
                    nextKey: Fr;
                    nextIndex: bigint;
                }, {
                    leaf: {
                        nullifier: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                }>, NullifierLeafPreimage, {
                    leaf: {
                        nullifier: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                }> | z.ZodEffects<z.ZodObject<{
                    leaf: z.ZodEffects<z.ZodObject<{
                        slot: z.ZodType<Fr, any, string>;
                        value: z.ZodType<Fr, any, string>;
                    }, "strip", z.ZodTypeAny, {
                        value: Fr;
                        slot: Fr;
                    }, {
                        value: string;
                        slot: string;
                    }>, import("../trees/public_data_leaf.js").PublicDataTreeLeaf, {
                        value: string;
                        slot: string;
                    }>;
                    nextKey: z.ZodType<Fr, any, string>;
                    nextIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
                }, "strip", z.ZodTypeAny, {
                    leaf: import("../trees/public_data_leaf.js").PublicDataTreeLeaf;
                    nextKey: Fr;
                    nextIndex: bigint;
                }, {
                    leaf: {
                        value: string;
                        slot: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                }>, PublicDataTreeLeafPreimage, {
                    leaf: {
                        value: string;
                        slot: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                }>;
            }, "strip", z.ZodTypeAny, {
                index: bigint;
                leafPreimage: NullifierLeafPreimage | PublicDataTreeLeafPreimage;
                hintKey: AppendOnlyTreeSnapshot;
            }, {
                index: string | number | bigint;
                leafPreimage: {
                    leaf: {
                        nullifier: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                } | {
                    leaf: {
                        value: string;
                        slot: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                };
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
            }>, {
                readonly hintKey: AppendOnlyTreeSnapshot;
                readonly index: bigint;
                readonly leafPreimage: IndexedTreeLeafPreimages;
            }, {
                index: string | number | bigint;
                leafPreimage: {
                    leaf: {
                        nullifier: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                } | {
                    leaf: {
                        value: string;
                        slot: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                };
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
            }>, "many">;
            getLeafPreimageHintsNullifierTree: z.ZodArray<z.ZodEffects<z.ZodObject<{
                hintKey: z.ZodEffects<z.ZodObject<{
                    root: z.ZodType<Fr, any, string>;
                    nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    root: Fr;
                    nextAvailableLeafIndex: number;
                }, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>, AppendOnlyTreeSnapshot, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>;
                index: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
                leafPreimage: z.ZodEffects<z.ZodObject<{
                    leaf: z.ZodEffects<z.ZodObject<{
                        nullifier: z.ZodType<Fr, any, string>;
                    }, "strip", z.ZodTypeAny, {
                        nullifier: Fr;
                    }, {
                        nullifier: string;
                    }>, import("../trees/nullifier_leaf.js").NullifierLeaf, {
                        nullifier: string;
                    }>;
                    nextKey: z.ZodType<Fr, any, string>;
                    nextIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
                }, "strip", z.ZodTypeAny, {
                    leaf: import("../trees/nullifier_leaf.js").NullifierLeaf;
                    nextKey: Fr;
                    nextIndex: bigint;
                }, {
                    leaf: {
                        nullifier: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                }>, NullifierLeafPreimage, {
                    leaf: {
                        nullifier: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                }> | z.ZodEffects<z.ZodObject<{
                    leaf: z.ZodEffects<z.ZodObject<{
                        slot: z.ZodType<Fr, any, string>;
                        value: z.ZodType<Fr, any, string>;
                    }, "strip", z.ZodTypeAny, {
                        value: Fr;
                        slot: Fr;
                    }, {
                        value: string;
                        slot: string;
                    }>, import("../trees/public_data_leaf.js").PublicDataTreeLeaf, {
                        value: string;
                        slot: string;
                    }>;
                    nextKey: z.ZodType<Fr, any, string>;
                    nextIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
                }, "strip", z.ZodTypeAny, {
                    leaf: import("../trees/public_data_leaf.js").PublicDataTreeLeaf;
                    nextKey: Fr;
                    nextIndex: bigint;
                }, {
                    leaf: {
                        value: string;
                        slot: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                }>, PublicDataTreeLeafPreimage, {
                    leaf: {
                        value: string;
                        slot: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                }>;
            }, "strip", z.ZodTypeAny, {
                index: bigint;
                leafPreimage: NullifierLeafPreimage | PublicDataTreeLeafPreimage;
                hintKey: AppendOnlyTreeSnapshot;
            }, {
                index: string | number | bigint;
                leafPreimage: {
                    leaf: {
                        nullifier: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                } | {
                    leaf: {
                        value: string;
                        slot: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                };
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
            }>, {
                readonly hintKey: AppendOnlyTreeSnapshot;
                readonly index: bigint;
                readonly leafPreimage: IndexedTreeLeafPreimages;
            }, {
                index: string | number | bigint;
                leafPreimage: {
                    leaf: {
                        nullifier: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                } | {
                    leaf: {
                        value: string;
                        slot: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                };
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
            }>, "many">;
            getLeafValueHints: z.ZodArray<z.ZodEffects<z.ZodObject<{
                hintKey: z.ZodEffects<z.ZodObject<{
                    root: z.ZodType<Fr, any, string>;
                    nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    root: Fr;
                    nextAvailableLeafIndex: number;
                }, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>, AppendOnlyTreeSnapshot, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>;
                treeId: z.ZodNumber;
                index: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
                value: z.ZodType<Fr, any, string>;
            }, "strip", z.ZodTypeAny, {
                value: Fr;
                index: bigint;
                hintKey: AppendOnlyTreeSnapshot;
                treeId: number;
            }, {
                value: string;
                index: string | number | bigint;
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                treeId: number;
            }>, AvmGetLeafValueHint, {
                value: string;
                index: string | number | bigint;
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                treeId: number;
            }>, "many">;
            sequentialInsertHintsPublicDataTree: z.ZodArray<z.ZodEffects<z.ZodObject<{
                hintKey: z.ZodEffects<z.ZodObject<{
                    root: z.ZodType<Fr, any, string>;
                    nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    root: Fr;
                    nextAvailableLeafIndex: number;
                }, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>, AppendOnlyTreeSnapshot, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>;
                stateAfter: z.ZodEffects<z.ZodObject<{
                    root: z.ZodType<Fr, any, string>;
                    nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    root: Fr;
                    nextAvailableLeafIndex: number;
                }, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>, AppendOnlyTreeSnapshot, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>;
                treeId: z.ZodNumber;
                leaf: z.ZodEffects<z.ZodObject<{
                    nullifier: z.ZodType<Fr, any, string>;
                }, "strip", z.ZodTypeAny, {
                    nullifier: Fr;
                }, {
                    nullifier: string;
                }>, import("../trees/nullifier_leaf.js").NullifierLeaf, {
                    nullifier: string;
                }> | z.ZodEffects<z.ZodObject<{
                    slot: z.ZodType<Fr, any, string>;
                    value: z.ZodType<Fr, any, string>;
                }, "strip", z.ZodTypeAny, {
                    value: Fr;
                    slot: Fr;
                }, {
                    value: string;
                    slot: string;
                }>, import("../trees/public_data_leaf.js").PublicDataTreeLeaf, {
                    value: string;
                    slot: string;
                }>;
                lowLeavesWitnessData: z.ZodObject<{
                    leaf: z.ZodEffects<z.ZodObject<{
                        leaf: z.ZodEffects<z.ZodObject<{
                            nullifier: z.ZodType<Fr, any, string>;
                        }, "strip", z.ZodTypeAny, {
                            nullifier: Fr;
                        }, {
                            nullifier: string;
                        }>, import("../trees/nullifier_leaf.js").NullifierLeaf, {
                            nullifier: string;
                        }>;
                        nextKey: z.ZodType<Fr, any, string>;
                        nextIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
                    }, "strip", z.ZodTypeAny, {
                        leaf: import("../trees/nullifier_leaf.js").NullifierLeaf;
                        nextKey: Fr;
                        nextIndex: bigint;
                    }, {
                        leaf: {
                            nullifier: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    }>, NullifierLeafPreimage, {
                        leaf: {
                            nullifier: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    }> | z.ZodEffects<z.ZodObject<{
                        leaf: z.ZodEffects<z.ZodObject<{
                            slot: z.ZodType<Fr, any, string>;
                            value: z.ZodType<Fr, any, string>;
                        }, "strip", z.ZodTypeAny, {
                            value: Fr;
                            slot: Fr;
                        }, {
                            value: string;
                            slot: string;
                        }>, import("../trees/public_data_leaf.js").PublicDataTreeLeaf, {
                            value: string;
                            slot: string;
                        }>;
                        nextKey: z.ZodType<Fr, any, string>;
                        nextIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
                    }, "strip", z.ZodTypeAny, {
                        leaf: import("../trees/public_data_leaf.js").PublicDataTreeLeaf;
                        nextKey: Fr;
                        nextIndex: bigint;
                    }, {
                        leaf: {
                            value: string;
                            slot: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    }>, PublicDataTreeLeafPreimage, {
                        leaf: {
                            value: string;
                            slot: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    }>;
                    index: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
                    path: z.ZodArray<z.ZodType<Fr, any, string>, "many">;
                }, "strip", z.ZodTypeAny, {
                    path: Fr[];
                    index: bigint;
                    leaf: NullifierLeafPreimage | PublicDataTreeLeafPreimage;
                }, {
                    path: string[];
                    index: string | number | bigint;
                    leaf: {
                        leaf: {
                            nullifier: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    } | {
                        leaf: {
                            value: string;
                            slot: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    };
                }>;
                insertionWitnessData: z.ZodObject<{
                    leaf: z.ZodEffects<z.ZodObject<{
                        leaf: z.ZodEffects<z.ZodObject<{
                            nullifier: z.ZodType<Fr, any, string>;
                        }, "strip", z.ZodTypeAny, {
                            nullifier: Fr;
                        }, {
                            nullifier: string;
                        }>, import("../trees/nullifier_leaf.js").NullifierLeaf, {
                            nullifier: string;
                        }>;
                        nextKey: z.ZodType<Fr, any, string>;
                        nextIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
                    }, "strip", z.ZodTypeAny, {
                        leaf: import("../trees/nullifier_leaf.js").NullifierLeaf;
                        nextKey: Fr;
                        nextIndex: bigint;
                    }, {
                        leaf: {
                            nullifier: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    }>, NullifierLeafPreimage, {
                        leaf: {
                            nullifier: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    }> | z.ZodEffects<z.ZodObject<{
                        leaf: z.ZodEffects<z.ZodObject<{
                            slot: z.ZodType<Fr, any, string>;
                            value: z.ZodType<Fr, any, string>;
                        }, "strip", z.ZodTypeAny, {
                            value: Fr;
                            slot: Fr;
                        }, {
                            value: string;
                            slot: string;
                        }>, import("../trees/public_data_leaf.js").PublicDataTreeLeaf, {
                            value: string;
                            slot: string;
                        }>;
                        nextKey: z.ZodType<Fr, any, string>;
                        nextIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
                    }, "strip", z.ZodTypeAny, {
                        leaf: import("../trees/public_data_leaf.js").PublicDataTreeLeaf;
                        nextKey: Fr;
                        nextIndex: bigint;
                    }, {
                        leaf: {
                            value: string;
                            slot: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    }>, PublicDataTreeLeafPreimage, {
                        leaf: {
                            value: string;
                            slot: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    }>;
                    index: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
                    path: z.ZodArray<z.ZodType<Fr, any, string>, "many">;
                }, "strip", z.ZodTypeAny, {
                    path: Fr[];
                    index: bigint;
                    leaf: NullifierLeafPreimage | PublicDataTreeLeafPreimage;
                }, {
                    path: string[];
                    index: string | number | bigint;
                    leaf: {
                        leaf: {
                            nullifier: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    } | {
                        leaf: {
                            value: string;
                            slot: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    };
                }>;
            }, "strip", z.ZodTypeAny, {
                leaf: import("../trees/nullifier_leaf.js").NullifierLeaf | import("../trees/public_data_leaf.js").PublicDataTreeLeaf;
                hintKey: AppendOnlyTreeSnapshot;
                treeId: number;
                stateAfter: AppendOnlyTreeSnapshot;
                lowLeavesWitnessData: {
                    path: Fr[];
                    index: bigint;
                    leaf: NullifierLeafPreimage | PublicDataTreeLeafPreimage;
                };
                insertionWitnessData: {
                    path: Fr[];
                    index: bigint;
                    leaf: NullifierLeafPreimage | PublicDataTreeLeafPreimage;
                };
            }, {
                leaf: {
                    nullifier: string;
                } | {
                    value: string;
                    slot: string;
                };
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                treeId: number;
                stateAfter: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                lowLeavesWitnessData: {
                    path: string[];
                    index: string | number | bigint;
                    leaf: {
                        leaf: {
                            nullifier: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    } | {
                        leaf: {
                            value: string;
                            slot: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    };
                };
                insertionWitnessData: {
                    path: string[];
                    index: string | number | bigint;
                    leaf: {
                        leaf: {
                            nullifier: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    } | {
                        leaf: {
                            value: string;
                            slot: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    };
                };
            }>, {
                readonly hintKey: AppendOnlyTreeSnapshot;
                readonly stateAfter: AppendOnlyTreeSnapshot;
                readonly treeId: MerkleTreeId;
                readonly leaf: import("../trees/nullifier_leaf.js").NullifierLeaf | import("../trees/public_data_leaf.js").PublicDataTreeLeaf;
                readonly lowLeavesWitnessData: {
                    leaf: IndexedTreeLeafPreimages;
                    index: bigint;
                    path: Fr[];
                };
                readonly insertionWitnessData: {
                    leaf: IndexedTreeLeafPreimages;
                    index: bigint;
                    path: Fr[];
                };
            }, {
                leaf: {
                    nullifier: string;
                } | {
                    value: string;
                    slot: string;
                };
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                treeId: number;
                stateAfter: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                lowLeavesWitnessData: {
                    path: string[];
                    index: string | number | bigint;
                    leaf: {
                        leaf: {
                            nullifier: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    } | {
                        leaf: {
                            value: string;
                            slot: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    };
                };
                insertionWitnessData: {
                    path: string[];
                    index: string | number | bigint;
                    leaf: {
                        leaf: {
                            nullifier: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    } | {
                        leaf: {
                            value: string;
                            slot: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    };
                };
            }>, "many">;
            sequentialInsertHintsNullifierTree: z.ZodArray<z.ZodEffects<z.ZodObject<{
                hintKey: z.ZodEffects<z.ZodObject<{
                    root: z.ZodType<Fr, any, string>;
                    nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    root: Fr;
                    nextAvailableLeafIndex: number;
                }, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>, AppendOnlyTreeSnapshot, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>;
                stateAfter: z.ZodEffects<z.ZodObject<{
                    root: z.ZodType<Fr, any, string>;
                    nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    root: Fr;
                    nextAvailableLeafIndex: number;
                }, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>, AppendOnlyTreeSnapshot, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>;
                treeId: z.ZodNumber;
                leaf: z.ZodEffects<z.ZodObject<{
                    nullifier: z.ZodType<Fr, any, string>;
                }, "strip", z.ZodTypeAny, {
                    nullifier: Fr;
                }, {
                    nullifier: string;
                }>, import("../trees/nullifier_leaf.js").NullifierLeaf, {
                    nullifier: string;
                }> | z.ZodEffects<z.ZodObject<{
                    slot: z.ZodType<Fr, any, string>;
                    value: z.ZodType<Fr, any, string>;
                }, "strip", z.ZodTypeAny, {
                    value: Fr;
                    slot: Fr;
                }, {
                    value: string;
                    slot: string;
                }>, import("../trees/public_data_leaf.js").PublicDataTreeLeaf, {
                    value: string;
                    slot: string;
                }>;
                lowLeavesWitnessData: z.ZodObject<{
                    leaf: z.ZodEffects<z.ZodObject<{
                        leaf: z.ZodEffects<z.ZodObject<{
                            nullifier: z.ZodType<Fr, any, string>;
                        }, "strip", z.ZodTypeAny, {
                            nullifier: Fr;
                        }, {
                            nullifier: string;
                        }>, import("../trees/nullifier_leaf.js").NullifierLeaf, {
                            nullifier: string;
                        }>;
                        nextKey: z.ZodType<Fr, any, string>;
                        nextIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
                    }, "strip", z.ZodTypeAny, {
                        leaf: import("../trees/nullifier_leaf.js").NullifierLeaf;
                        nextKey: Fr;
                        nextIndex: bigint;
                    }, {
                        leaf: {
                            nullifier: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    }>, NullifierLeafPreimage, {
                        leaf: {
                            nullifier: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    }> | z.ZodEffects<z.ZodObject<{
                        leaf: z.ZodEffects<z.ZodObject<{
                            slot: z.ZodType<Fr, any, string>;
                            value: z.ZodType<Fr, any, string>;
                        }, "strip", z.ZodTypeAny, {
                            value: Fr;
                            slot: Fr;
                        }, {
                            value: string;
                            slot: string;
                        }>, import("../trees/public_data_leaf.js").PublicDataTreeLeaf, {
                            value: string;
                            slot: string;
                        }>;
                        nextKey: z.ZodType<Fr, any, string>;
                        nextIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
                    }, "strip", z.ZodTypeAny, {
                        leaf: import("../trees/public_data_leaf.js").PublicDataTreeLeaf;
                        nextKey: Fr;
                        nextIndex: bigint;
                    }, {
                        leaf: {
                            value: string;
                            slot: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    }>, PublicDataTreeLeafPreimage, {
                        leaf: {
                            value: string;
                            slot: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    }>;
                    index: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
                    path: z.ZodArray<z.ZodType<Fr, any, string>, "many">;
                }, "strip", z.ZodTypeAny, {
                    path: Fr[];
                    index: bigint;
                    leaf: NullifierLeafPreimage | PublicDataTreeLeafPreimage;
                }, {
                    path: string[];
                    index: string | number | bigint;
                    leaf: {
                        leaf: {
                            nullifier: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    } | {
                        leaf: {
                            value: string;
                            slot: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    };
                }>;
                insertionWitnessData: z.ZodObject<{
                    leaf: z.ZodEffects<z.ZodObject<{
                        leaf: z.ZodEffects<z.ZodObject<{
                            nullifier: z.ZodType<Fr, any, string>;
                        }, "strip", z.ZodTypeAny, {
                            nullifier: Fr;
                        }, {
                            nullifier: string;
                        }>, import("../trees/nullifier_leaf.js").NullifierLeaf, {
                            nullifier: string;
                        }>;
                        nextKey: z.ZodType<Fr, any, string>;
                        nextIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
                    }, "strip", z.ZodTypeAny, {
                        leaf: import("../trees/nullifier_leaf.js").NullifierLeaf;
                        nextKey: Fr;
                        nextIndex: bigint;
                    }, {
                        leaf: {
                            nullifier: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    }>, NullifierLeafPreimage, {
                        leaf: {
                            nullifier: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    }> | z.ZodEffects<z.ZodObject<{
                        leaf: z.ZodEffects<z.ZodObject<{
                            slot: z.ZodType<Fr, any, string>;
                            value: z.ZodType<Fr, any, string>;
                        }, "strip", z.ZodTypeAny, {
                            value: Fr;
                            slot: Fr;
                        }, {
                            value: string;
                            slot: string;
                        }>, import("../trees/public_data_leaf.js").PublicDataTreeLeaf, {
                            value: string;
                            slot: string;
                        }>;
                        nextKey: z.ZodType<Fr, any, string>;
                        nextIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
                    }, "strip", z.ZodTypeAny, {
                        leaf: import("../trees/public_data_leaf.js").PublicDataTreeLeaf;
                        nextKey: Fr;
                        nextIndex: bigint;
                    }, {
                        leaf: {
                            value: string;
                            slot: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    }>, PublicDataTreeLeafPreimage, {
                        leaf: {
                            value: string;
                            slot: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    }>;
                    index: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
                    path: z.ZodArray<z.ZodType<Fr, any, string>, "many">;
                }, "strip", z.ZodTypeAny, {
                    path: Fr[];
                    index: bigint;
                    leaf: NullifierLeafPreimage | PublicDataTreeLeafPreimage;
                }, {
                    path: string[];
                    index: string | number | bigint;
                    leaf: {
                        leaf: {
                            nullifier: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    } | {
                        leaf: {
                            value: string;
                            slot: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    };
                }>;
            }, "strip", z.ZodTypeAny, {
                leaf: import("../trees/nullifier_leaf.js").NullifierLeaf | import("../trees/public_data_leaf.js").PublicDataTreeLeaf;
                hintKey: AppendOnlyTreeSnapshot;
                treeId: number;
                stateAfter: AppendOnlyTreeSnapshot;
                lowLeavesWitnessData: {
                    path: Fr[];
                    index: bigint;
                    leaf: NullifierLeafPreimage | PublicDataTreeLeafPreimage;
                };
                insertionWitnessData: {
                    path: Fr[];
                    index: bigint;
                    leaf: NullifierLeafPreimage | PublicDataTreeLeafPreimage;
                };
            }, {
                leaf: {
                    nullifier: string;
                } | {
                    value: string;
                    slot: string;
                };
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                treeId: number;
                stateAfter: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                lowLeavesWitnessData: {
                    path: string[];
                    index: string | number | bigint;
                    leaf: {
                        leaf: {
                            nullifier: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    } | {
                        leaf: {
                            value: string;
                            slot: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    };
                };
                insertionWitnessData: {
                    path: string[];
                    index: string | number | bigint;
                    leaf: {
                        leaf: {
                            nullifier: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    } | {
                        leaf: {
                            value: string;
                            slot: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    };
                };
            }>, {
                readonly hintKey: AppendOnlyTreeSnapshot;
                readonly stateAfter: AppendOnlyTreeSnapshot;
                readonly treeId: MerkleTreeId;
                readonly leaf: import("../trees/nullifier_leaf.js").NullifierLeaf | import("../trees/public_data_leaf.js").PublicDataTreeLeaf;
                readonly lowLeavesWitnessData: {
                    leaf: IndexedTreeLeafPreimages;
                    index: bigint;
                    path: Fr[];
                };
                readonly insertionWitnessData: {
                    leaf: IndexedTreeLeafPreimages;
                    index: bigint;
                    path: Fr[];
                };
            }, {
                leaf: {
                    nullifier: string;
                } | {
                    value: string;
                    slot: string;
                };
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                treeId: number;
                stateAfter: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                lowLeavesWitnessData: {
                    path: string[];
                    index: string | number | bigint;
                    leaf: {
                        leaf: {
                            nullifier: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    } | {
                        leaf: {
                            value: string;
                            slot: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    };
                };
                insertionWitnessData: {
                    path: string[];
                    index: string | number | bigint;
                    leaf: {
                        leaf: {
                            nullifier: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    } | {
                        leaf: {
                            value: string;
                            slot: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    };
                };
            }>, "many">;
            appendLeavesHints: z.ZodArray<z.ZodEffects<z.ZodObject<{
                hintKey: z.ZodEffects<z.ZodObject<{
                    root: z.ZodType<Fr, any, string>;
                    nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    root: Fr;
                    nextAvailableLeafIndex: number;
                }, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>, AppendOnlyTreeSnapshot, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>;
                stateAfter: z.ZodEffects<z.ZodObject<{
                    root: z.ZodType<Fr, any, string>;
                    nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    root: Fr;
                    nextAvailableLeafIndex: number;
                }, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>, AppendOnlyTreeSnapshot, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>;
                treeId: z.ZodNumber;
                leaves: z.ZodArray<z.ZodType<Fr, any, string>, "many">;
            }, "strip", z.ZodTypeAny, {
                hintKey: AppendOnlyTreeSnapshot;
                treeId: number;
                stateAfter: AppendOnlyTreeSnapshot;
                leaves: Fr[];
            }, {
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                treeId: number;
                stateAfter: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                leaves: string[];
            }>, AvmAppendLeavesHint, {
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                treeId: number;
                stateAfter: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                leaves: string[];
            }>, "many">;
            createCheckpointHints: z.ZodArray<z.ZodEffects<z.ZodObject<{
                actionCounter: z.ZodNumber;
                oldCheckpointId: z.ZodNumber;
                newCheckpointId: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                actionCounter: number;
                oldCheckpointId: number;
                newCheckpointId: number;
            }, {
                actionCounter: number;
                oldCheckpointId: number;
                newCheckpointId: number;
            }>, AvmCheckpointActionNoStateChangeHint, {
                actionCounter: number;
                oldCheckpointId: number;
                newCheckpointId: number;
            }>, "many">;
            commitCheckpointHints: z.ZodArray<z.ZodEffects<z.ZodObject<{
                actionCounter: z.ZodNumber;
                oldCheckpointId: z.ZodNumber;
                newCheckpointId: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                actionCounter: number;
                oldCheckpointId: number;
                newCheckpointId: number;
            }, {
                actionCounter: number;
                oldCheckpointId: number;
                newCheckpointId: number;
            }>, AvmCheckpointActionNoStateChangeHint, {
                actionCounter: number;
                oldCheckpointId: number;
                newCheckpointId: number;
            }>, "many">;
            revertCheckpointHints: z.ZodArray<z.ZodEffects<z.ZodObject<{
                actionCounter: z.ZodNumber;
                oldCheckpointId: z.ZodNumber;
                newCheckpointId: z.ZodNumber;
                stateBefore: z.ZodEffects<z.ZodObject<{
                    l1ToL2MessageTree: z.ZodEffects<z.ZodObject<{
                        root: z.ZodType<Fr, any, string>;
                        nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                    }, "strip", z.ZodTypeAny, {
                        root: Fr;
                        nextAvailableLeafIndex: number;
                    }, {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    }>, AppendOnlyTreeSnapshot, {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    }>;
                    noteHashTree: z.ZodEffects<z.ZodObject<{
                        root: z.ZodType<Fr, any, string>;
                        nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                    }, "strip", z.ZodTypeAny, {
                        root: Fr;
                        nextAvailableLeafIndex: number;
                    }, {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    }>, AppendOnlyTreeSnapshot, {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    }>;
                    nullifierTree: z.ZodEffects<z.ZodObject<{
                        root: z.ZodType<Fr, any, string>;
                        nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                    }, "strip", z.ZodTypeAny, {
                        root: Fr;
                        nextAvailableLeafIndex: number;
                    }, {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    }>, AppendOnlyTreeSnapshot, {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    }>;
                    publicDataTree: z.ZodEffects<z.ZodObject<{
                        root: z.ZodType<Fr, any, string>;
                        nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                    }, "strip", z.ZodTypeAny, {
                        root: Fr;
                        nextAvailableLeafIndex: number;
                    }, {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    }>, AppendOnlyTreeSnapshot, {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    noteHashTree: AppendOnlyTreeSnapshot;
                    nullifierTree: AppendOnlyTreeSnapshot;
                    publicDataTree: AppendOnlyTreeSnapshot;
                    l1ToL2MessageTree: AppendOnlyTreeSnapshot;
                }, {
                    noteHashTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    nullifierTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    publicDataTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    l1ToL2MessageTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                }>, TreeSnapshots, {
                    noteHashTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    nullifierTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    publicDataTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    l1ToL2MessageTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                }>;
                stateAfter: z.ZodEffects<z.ZodObject<{
                    l1ToL2MessageTree: z.ZodEffects<z.ZodObject<{
                        root: z.ZodType<Fr, any, string>;
                        nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                    }, "strip", z.ZodTypeAny, {
                        root: Fr;
                        nextAvailableLeafIndex: number;
                    }, {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    }>, AppendOnlyTreeSnapshot, {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    }>;
                    noteHashTree: z.ZodEffects<z.ZodObject<{
                        root: z.ZodType<Fr, any, string>;
                        nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                    }, "strip", z.ZodTypeAny, {
                        root: Fr;
                        nextAvailableLeafIndex: number;
                    }, {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    }>, AppendOnlyTreeSnapshot, {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    }>;
                    nullifierTree: z.ZodEffects<z.ZodObject<{
                        root: z.ZodType<Fr, any, string>;
                        nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                    }, "strip", z.ZodTypeAny, {
                        root: Fr;
                        nextAvailableLeafIndex: number;
                    }, {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    }>, AppendOnlyTreeSnapshot, {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    }>;
                    publicDataTree: z.ZodEffects<z.ZodObject<{
                        root: z.ZodType<Fr, any, string>;
                        nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                    }, "strip", z.ZodTypeAny, {
                        root: Fr;
                        nextAvailableLeafIndex: number;
                    }, {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    }>, AppendOnlyTreeSnapshot, {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    noteHashTree: AppendOnlyTreeSnapshot;
                    nullifierTree: AppendOnlyTreeSnapshot;
                    publicDataTree: AppendOnlyTreeSnapshot;
                    l1ToL2MessageTree: AppendOnlyTreeSnapshot;
                }, {
                    noteHashTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    nullifierTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    publicDataTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    l1ToL2MessageTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                }>, TreeSnapshots, {
                    noteHashTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    nullifierTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    publicDataTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    l1ToL2MessageTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                }>;
            }, "strip", z.ZodTypeAny, {
                stateAfter: TreeSnapshots;
                actionCounter: number;
                oldCheckpointId: number;
                newCheckpointId: number;
                stateBefore: TreeSnapshots;
            }, {
                stateAfter: {
                    noteHashTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    nullifierTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    publicDataTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    l1ToL2MessageTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                };
                actionCounter: number;
                oldCheckpointId: number;
                newCheckpointId: number;
                stateBefore: {
                    noteHashTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    nullifierTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    publicDataTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    l1ToL2MessageTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                };
            }>, AvmRevertCheckpointHint, {
                stateAfter: {
                    noteHashTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    nullifierTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    publicDataTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    l1ToL2MessageTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                };
                actionCounter: number;
                oldCheckpointId: number;
                newCheckpointId: number;
                stateBefore: {
                    noteHashTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    nullifierTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    publicDataTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    l1ToL2MessageTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                };
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            tx: AvmTxHint;
            contractInstances: AvmContractInstanceHint[];
            contractClasses: AvmContractClassHint[];
            bytecodeCommitments: AvmBytecodeCommitmentHint[];
            startingTreeRoots: TreeSnapshots;
            getSiblingPathHints: AvmGetSiblingPathHint[];
            getPreviousValueIndexHints: AvmGetPreviousValueIndexHint[];
            getLeafPreimageHintsPublicDataTree: {
                readonly hintKey: AppendOnlyTreeSnapshot;
                readonly index: bigint;
                readonly leafPreimage: IndexedTreeLeafPreimages;
            }[];
            getLeafPreimageHintsNullifierTree: {
                readonly hintKey: AppendOnlyTreeSnapshot;
                readonly index: bigint;
                readonly leafPreimage: IndexedTreeLeafPreimages;
            }[];
            getLeafValueHints: AvmGetLeafValueHint[];
            sequentialInsertHintsPublicDataTree: {
                readonly hintKey: AppendOnlyTreeSnapshot;
                readonly stateAfter: AppendOnlyTreeSnapshot;
                readonly treeId: MerkleTreeId;
                readonly leaf: import("../trees/nullifier_leaf.js").NullifierLeaf | import("../trees/public_data_leaf.js").PublicDataTreeLeaf;
                readonly lowLeavesWitnessData: {
                    leaf: IndexedTreeLeafPreimages;
                    index: bigint;
                    path: Fr[];
                };
                readonly insertionWitnessData: {
                    leaf: IndexedTreeLeafPreimages;
                    index: bigint;
                    path: Fr[];
                };
            }[];
            sequentialInsertHintsNullifierTree: {
                readonly hintKey: AppendOnlyTreeSnapshot;
                readonly stateAfter: AppendOnlyTreeSnapshot;
                readonly treeId: MerkleTreeId;
                readonly leaf: import("../trees/nullifier_leaf.js").NullifierLeaf | import("../trees/public_data_leaf.js").PublicDataTreeLeaf;
                readonly lowLeavesWitnessData: {
                    leaf: IndexedTreeLeafPreimages;
                    index: bigint;
                    path: Fr[];
                };
                readonly insertionWitnessData: {
                    leaf: IndexedTreeLeafPreimages;
                    index: bigint;
                    path: Fr[];
                };
            }[];
            appendLeavesHints: AvmAppendLeavesHint[];
            createCheckpointHints: AvmCheckpointActionNoStateChangeHint[];
            commitCheckpointHints: AvmCheckpointActionNoStateChangeHint[];
            revertCheckpointHints: AvmRevertCheckpointHint[];
        }, {
            tx: {
                hash: string;
                globalVariables: {
                    gasFees: {
                        feePerDaGas: string;
                        feePerL2Gas: string;
                    };
                    chainId?: any;
                    version?: any;
                    blockNumber?: any;
                    slotNumber?: any;
                    timestamp?: any;
                    coinbase?: any;
                    feeRecipient?: any;
                };
                nonRevertibleAccumulatedData: {
                    noteHashes: string[];
                    nullifiers: string[];
                };
                revertibleAccumulatedData: {
                    noteHashes: string[];
                    nullifiers: string[];
                };
                setupEnqueuedCalls: {
                    isStaticCall: boolean;
                    calldata: string[];
                    contractAddress?: any;
                    msgSender?: any;
                }[];
                appLogicEnqueuedCalls: {
                    isStaticCall: boolean;
                    calldata: string[];
                    contractAddress?: any;
                    msgSender?: any;
                }[];
                teardownEnqueuedCall: {
                    isStaticCall: boolean;
                    calldata: string[];
                    contractAddress?: any;
                    msgSender?: any;
                } | null;
            };
            contractInstances: {
                publicKeys: {
                    masterNullifierPublicKey: string;
                    masterIncomingViewingPublicKey: string;
                    masterOutgoingViewingPublicKey: string;
                    masterTaggingPublicKey: string;
                };
                salt: string;
                currentContractClassId: string;
                originalContractClassId: string;
                initializationHash: string;
                address?: any;
                deployer?: any;
            }[];
            contractClasses: {
                classId: string;
                artifactHash: string;
                privateFunctionsRoot: string;
                packedBytecode: string | {
                    type: "Buffer";
                    data: number[];
                };
            }[];
            bytecodeCommitments: {
                classId: string;
                commitment: string;
            }[];
            startingTreeRoots: {
                noteHashTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                nullifierTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                publicDataTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                l1ToL2MessageTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
            };
            getSiblingPathHints: {
                path: string[];
                index: string | number | bigint;
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                treeId: number;
            }[];
            getPreviousValueIndexHints: {
                value: string;
                index: string | number | bigint;
                alreadyPresent: boolean;
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                treeId: number;
            }[];
            getLeafPreimageHintsPublicDataTree: {
                index: string | number | bigint;
                leafPreimage: {
                    leaf: {
                        nullifier: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                } | {
                    leaf: {
                        value: string;
                        slot: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                };
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
            }[];
            getLeafPreimageHintsNullifierTree: {
                index: string | number | bigint;
                leafPreimage: {
                    leaf: {
                        nullifier: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                } | {
                    leaf: {
                        value: string;
                        slot: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                };
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
            }[];
            getLeafValueHints: {
                value: string;
                index: string | number | bigint;
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                treeId: number;
            }[];
            sequentialInsertHintsPublicDataTree: {
                leaf: {
                    nullifier: string;
                } | {
                    value: string;
                    slot: string;
                };
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                treeId: number;
                stateAfter: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                lowLeavesWitnessData: {
                    path: string[];
                    index: string | number | bigint;
                    leaf: {
                        leaf: {
                            nullifier: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    } | {
                        leaf: {
                            value: string;
                            slot: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    };
                };
                insertionWitnessData: {
                    path: string[];
                    index: string | number | bigint;
                    leaf: {
                        leaf: {
                            nullifier: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    } | {
                        leaf: {
                            value: string;
                            slot: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    };
                };
            }[];
            sequentialInsertHintsNullifierTree: {
                leaf: {
                    nullifier: string;
                } | {
                    value: string;
                    slot: string;
                };
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                treeId: number;
                stateAfter: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                lowLeavesWitnessData: {
                    path: string[];
                    index: string | number | bigint;
                    leaf: {
                        leaf: {
                            nullifier: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    } | {
                        leaf: {
                            value: string;
                            slot: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    };
                };
                insertionWitnessData: {
                    path: string[];
                    index: string | number | bigint;
                    leaf: {
                        leaf: {
                            nullifier: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    } | {
                        leaf: {
                            value: string;
                            slot: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    };
                };
            }[];
            appendLeavesHints: {
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                treeId: number;
                stateAfter: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                leaves: string[];
            }[];
            createCheckpointHints: {
                actionCounter: number;
                oldCheckpointId: number;
                newCheckpointId: number;
            }[];
            commitCheckpointHints: {
                actionCounter: number;
                oldCheckpointId: number;
                newCheckpointId: number;
            }[];
            revertCheckpointHints: {
                stateAfter: {
                    noteHashTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    nullifierTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    publicDataTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    l1ToL2MessageTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                };
                actionCounter: number;
                oldCheckpointId: number;
                newCheckpointId: number;
                stateBefore: {
                    noteHashTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    nullifierTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    publicDataTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    l1ToL2MessageTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                };
            }[];
        }>, AvmExecutionHints, {
            tx: {
                hash: string;
                globalVariables: {
                    gasFees: {
                        feePerDaGas: string;
                        feePerL2Gas: string;
                    };
                    chainId?: any;
                    version?: any;
                    blockNumber?: any;
                    slotNumber?: any;
                    timestamp?: any;
                    coinbase?: any;
                    feeRecipient?: any;
                };
                nonRevertibleAccumulatedData: {
                    noteHashes: string[];
                    nullifiers: string[];
                };
                revertibleAccumulatedData: {
                    noteHashes: string[];
                    nullifiers: string[];
                };
                setupEnqueuedCalls: {
                    isStaticCall: boolean;
                    calldata: string[];
                    contractAddress?: any;
                    msgSender?: any;
                }[];
                appLogicEnqueuedCalls: {
                    isStaticCall: boolean;
                    calldata: string[];
                    contractAddress?: any;
                    msgSender?: any;
                }[];
                teardownEnqueuedCall: {
                    isStaticCall: boolean;
                    calldata: string[];
                    contractAddress?: any;
                    msgSender?: any;
                } | null;
            };
            contractInstances: {
                publicKeys: {
                    masterNullifierPublicKey: string;
                    masterIncomingViewingPublicKey: string;
                    masterOutgoingViewingPublicKey: string;
                    masterTaggingPublicKey: string;
                };
                salt: string;
                currentContractClassId: string;
                originalContractClassId: string;
                initializationHash: string;
                address?: any;
                deployer?: any;
            }[];
            contractClasses: {
                classId: string;
                artifactHash: string;
                privateFunctionsRoot: string;
                packedBytecode: string | {
                    type: "Buffer";
                    data: number[];
                };
            }[];
            bytecodeCommitments: {
                classId: string;
                commitment: string;
            }[];
            startingTreeRoots: {
                noteHashTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                nullifierTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                publicDataTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                l1ToL2MessageTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
            };
            getSiblingPathHints: {
                path: string[];
                index: string | number | bigint;
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                treeId: number;
            }[];
            getPreviousValueIndexHints: {
                value: string;
                index: string | number | bigint;
                alreadyPresent: boolean;
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                treeId: number;
            }[];
            getLeafPreimageHintsPublicDataTree: {
                index: string | number | bigint;
                leafPreimage: {
                    leaf: {
                        nullifier: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                } | {
                    leaf: {
                        value: string;
                        slot: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                };
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
            }[];
            getLeafPreimageHintsNullifierTree: {
                index: string | number | bigint;
                leafPreimage: {
                    leaf: {
                        nullifier: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                } | {
                    leaf: {
                        value: string;
                        slot: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                };
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
            }[];
            getLeafValueHints: {
                value: string;
                index: string | number | bigint;
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                treeId: number;
            }[];
            sequentialInsertHintsPublicDataTree: {
                leaf: {
                    nullifier: string;
                } | {
                    value: string;
                    slot: string;
                };
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                treeId: number;
                stateAfter: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                lowLeavesWitnessData: {
                    path: string[];
                    index: string | number | bigint;
                    leaf: {
                        leaf: {
                            nullifier: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    } | {
                        leaf: {
                            value: string;
                            slot: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    };
                };
                insertionWitnessData: {
                    path: string[];
                    index: string | number | bigint;
                    leaf: {
                        leaf: {
                            nullifier: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    } | {
                        leaf: {
                            value: string;
                            slot: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    };
                };
            }[];
            sequentialInsertHintsNullifierTree: {
                leaf: {
                    nullifier: string;
                } | {
                    value: string;
                    slot: string;
                };
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                treeId: number;
                stateAfter: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                lowLeavesWitnessData: {
                    path: string[];
                    index: string | number | bigint;
                    leaf: {
                        leaf: {
                            nullifier: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    } | {
                        leaf: {
                            value: string;
                            slot: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    };
                };
                insertionWitnessData: {
                    path: string[];
                    index: string | number | bigint;
                    leaf: {
                        leaf: {
                            nullifier: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    } | {
                        leaf: {
                            value: string;
                            slot: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    };
                };
            }[];
            appendLeavesHints: {
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                treeId: number;
                stateAfter: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                leaves: string[];
            }[];
            createCheckpointHints: {
                actionCounter: number;
                oldCheckpointId: number;
                newCheckpointId: number;
            }[];
            commitCheckpointHints: {
                actionCounter: number;
                oldCheckpointId: number;
                newCheckpointId: number;
            }[];
            revertCheckpointHints: {
                stateAfter: {
                    noteHashTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    nullifierTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    publicDataTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    l1ToL2MessageTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                };
                actionCounter: number;
                oldCheckpointId: number;
                newCheckpointId: number;
                stateBefore: {
                    noteHashTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    nullifierTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    publicDataTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    l1ToL2MessageTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                };
            }[];
        }>;
        publicInputs: z.ZodEffects<z.ZodObject<{
            globalVariables: z.ZodEffects<z.ZodObject<{
                chainId: import("@aztec/foundation/schemas").ZodFor<Fr>;
                version: import("@aztec/foundation/schemas").ZodFor<Fr>;
                blockNumber: import("@aztec/foundation/schemas").ZodFor<Fr>;
                slotNumber: import("@aztec/foundation/schemas").ZodFor<Fr>;
                timestamp: import("@aztec/foundation/schemas").ZodFor<Fr>;
                coinbase: import("@aztec/foundation/schemas").ZodFor<import("@aztec/foundation/schemas").EthAddress>;
                feeRecipient: import("@aztec/foundation/schemas").ZodFor<AztecAddress>;
                gasFees: z.ZodEffects<z.ZodObject<{
                    feePerDaGas: z.ZodType<Fr, any, string>;
                    feePerL2Gas: z.ZodType<Fr, any, string>;
                }, "strip", z.ZodTypeAny, {
                    feePerDaGas: Fr;
                    feePerL2Gas: Fr;
                }, {
                    feePerDaGas: string;
                    feePerL2Gas: string;
                }>, import("../gas/gas_fees.js").GasFees, {
                    feePerDaGas: string;
                    feePerL2Gas: string;
                }>;
            }, "strip", z.ZodTypeAny, {
                chainId: Fr;
                version: Fr;
                blockNumber: Fr;
                slotNumber: Fr;
                timestamp: Fr;
                coinbase: import("@aztec/foundation/schemas").EthAddress;
                feeRecipient: AztecAddress;
                gasFees: import("../gas/gas_fees.js").GasFees;
            }, {
                gasFees: {
                    feePerDaGas: string;
                    feePerL2Gas: string;
                };
                chainId?: any;
                version?: any;
                blockNumber?: any;
                slotNumber?: any;
                timestamp?: any;
                coinbase?: any;
                feeRecipient?: any;
            }>, GlobalVariables, {
                gasFees: {
                    feePerDaGas: string;
                    feePerL2Gas: string;
                };
                chainId?: any;
                version?: any;
                blockNumber?: any;
                slotNumber?: any;
                timestamp?: any;
                coinbase?: any;
                feeRecipient?: any;
            }>;
            startTreeSnapshots: z.ZodEffects<z.ZodObject<{
                l1ToL2MessageTree: z.ZodEffects<z.ZodObject<{
                    root: z.ZodType<Fr, any, string>;
                    nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    root: Fr;
                    nextAvailableLeafIndex: number;
                }, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>, AppendOnlyTreeSnapshot, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>;
                noteHashTree: z.ZodEffects<z.ZodObject<{
                    root: z.ZodType<Fr, any, string>;
                    nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    root: Fr;
                    nextAvailableLeafIndex: number;
                }, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>, AppendOnlyTreeSnapshot, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>;
                nullifierTree: z.ZodEffects<z.ZodObject<{
                    root: z.ZodType<Fr, any, string>;
                    nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    root: Fr;
                    nextAvailableLeafIndex: number;
                }, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>, AppendOnlyTreeSnapshot, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>;
                publicDataTree: z.ZodEffects<z.ZodObject<{
                    root: z.ZodType<Fr, any, string>;
                    nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    root: Fr;
                    nextAvailableLeafIndex: number;
                }, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>, AppendOnlyTreeSnapshot, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>;
            }, "strip", z.ZodTypeAny, {
                noteHashTree: AppendOnlyTreeSnapshot;
                nullifierTree: AppendOnlyTreeSnapshot;
                publicDataTree: AppendOnlyTreeSnapshot;
                l1ToL2MessageTree: AppendOnlyTreeSnapshot;
            }, {
                noteHashTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                nullifierTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                publicDataTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                l1ToL2MessageTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
            }>, TreeSnapshots, {
                noteHashTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                nullifierTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                publicDataTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                l1ToL2MessageTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
            }>;
            startGasUsed: z.ZodEffects<z.ZodObject<{
                daGas: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                l2Gas: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                daGas: number;
                l2Gas: number;
            }, {
                daGas: string | number | bigint;
                l2Gas: string | number | bigint;
            }>, import("../gas/gas.js").Gas, {
                daGas: string | number | bigint;
                l2Gas: string | number | bigint;
            }>;
            gasSettings: z.ZodEffects<z.ZodObject<{
                gasLimits: z.ZodEffects<z.ZodObject<{
                    daGas: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                    l2Gas: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    daGas: number;
                    l2Gas: number;
                }, {
                    daGas: string | number | bigint;
                    l2Gas: string | number | bigint;
                }>, import("../gas/gas.js").Gas, {
                    daGas: string | number | bigint;
                    l2Gas: string | number | bigint;
                }>;
                teardownGasLimits: z.ZodEffects<z.ZodObject<{
                    daGas: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                    l2Gas: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    daGas: number;
                    l2Gas: number;
                }, {
                    daGas: string | number | bigint;
                    l2Gas: string | number | bigint;
                }>, import("../gas/gas.js").Gas, {
                    daGas: string | number | bigint;
                    l2Gas: string | number | bigint;
                }>;
                maxFeesPerGas: z.ZodEffects<z.ZodObject<{
                    feePerDaGas: z.ZodType<Fr, any, string>;
                    feePerL2Gas: z.ZodType<Fr, any, string>;
                }, "strip", z.ZodTypeAny, {
                    feePerDaGas: Fr;
                    feePerL2Gas: Fr;
                }, {
                    feePerDaGas: string;
                    feePerL2Gas: string;
                }>, import("../gas/gas_fees.js").GasFees, {
                    feePerDaGas: string;
                    feePerL2Gas: string;
                }>;
                maxPriorityFeesPerGas: z.ZodEffects<z.ZodObject<{
                    feePerDaGas: z.ZodType<Fr, any, string>;
                    feePerL2Gas: z.ZodType<Fr, any, string>;
                }, "strip", z.ZodTypeAny, {
                    feePerDaGas: Fr;
                    feePerL2Gas: Fr;
                }, {
                    feePerDaGas: string;
                    feePerL2Gas: string;
                }>, import("../gas/gas_fees.js").GasFees, {
                    feePerDaGas: string;
                    feePerL2Gas: string;
                }>;
            }, "strip", z.ZodTypeAny, {
                gasLimits: import("../gas/gas.js").Gas;
                teardownGasLimits: import("../gas/gas.js").Gas;
                maxFeesPerGas: import("../gas/gas_fees.js").GasFees;
                maxPriorityFeesPerGas: import("../gas/gas_fees.js").GasFees;
            }, {
                gasLimits: {
                    daGas: string | number | bigint;
                    l2Gas: string | number | bigint;
                };
                teardownGasLimits: {
                    daGas: string | number | bigint;
                    l2Gas: string | number | bigint;
                };
                maxFeesPerGas: {
                    feePerDaGas: string;
                    feePerL2Gas: string;
                };
                maxPriorityFeesPerGas: {
                    feePerDaGas: string;
                    feePerL2Gas: string;
                };
            }>, import("../gas/gas_settings.js").GasSettings, {
                gasLimits: {
                    daGas: string | number | bigint;
                    l2Gas: string | number | bigint;
                };
                teardownGasLimits: {
                    daGas: string | number | bigint;
                    l2Gas: string | number | bigint;
                };
                maxFeesPerGas: {
                    feePerDaGas: string;
                    feePerL2Gas: string;
                };
                maxPriorityFeesPerGas: {
                    feePerDaGas: string;
                    feePerL2Gas: string;
                };
            }>;
            feePayer: import("@aztec/foundation/schemas").ZodFor<AztecAddress>;
            publicSetupCallRequests: z.ZodArray<z.ZodEffects<z.ZodObject<{
                msgSender: import("@aztec/foundation/schemas").ZodFor<AztecAddress>;
                contractAddress: import("@aztec/foundation/schemas").ZodFor<AztecAddress>;
                isStaticCall: z.ZodBoolean;
                calldataHash: z.ZodType<Fr, any, string>;
            }, "strip", z.ZodTypeAny, {
                contractAddress: AztecAddress;
                msgSender: AztecAddress;
                isStaticCall: boolean;
                calldataHash: Fr;
            }, {
                isStaticCall: boolean;
                calldataHash: string;
                contractAddress?: any;
                msgSender?: any;
            }>, import("../kernel/public_call_request.js").PublicCallRequest, {
                isStaticCall: boolean;
                calldataHash: string;
                contractAddress?: any;
                msgSender?: any;
            }>, "many">;
            publicAppLogicCallRequests: z.ZodArray<z.ZodEffects<z.ZodObject<{
                msgSender: import("@aztec/foundation/schemas").ZodFor<AztecAddress>;
                contractAddress: import("@aztec/foundation/schemas").ZodFor<AztecAddress>;
                isStaticCall: z.ZodBoolean;
                calldataHash: z.ZodType<Fr, any, string>;
            }, "strip", z.ZodTypeAny, {
                contractAddress: AztecAddress;
                msgSender: AztecAddress;
                isStaticCall: boolean;
                calldataHash: Fr;
            }, {
                isStaticCall: boolean;
                calldataHash: string;
                contractAddress?: any;
                msgSender?: any;
            }>, import("../kernel/public_call_request.js").PublicCallRequest, {
                isStaticCall: boolean;
                calldataHash: string;
                contractAddress?: any;
                msgSender?: any;
            }>, "many">;
            publicTeardownCallRequest: z.ZodEffects<z.ZodObject<{
                msgSender: import("@aztec/foundation/schemas").ZodFor<AztecAddress>;
                contractAddress: import("@aztec/foundation/schemas").ZodFor<AztecAddress>;
                isStaticCall: z.ZodBoolean;
                calldataHash: z.ZodType<Fr, any, string>;
            }, "strip", z.ZodTypeAny, {
                contractAddress: AztecAddress;
                msgSender: AztecAddress;
                isStaticCall: boolean;
                calldataHash: Fr;
            }, {
                isStaticCall: boolean;
                calldataHash: string;
                contractAddress?: any;
                msgSender?: any;
            }>, import("../kernel/public_call_request.js").PublicCallRequest, {
                isStaticCall: boolean;
                calldataHash: string;
                contractAddress?: any;
                msgSender?: any;
            }>;
            previousNonRevertibleAccumulatedDataArrayLengths: z.ZodEffects<z.ZodObject<{
                noteHashes: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                nullifiers: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                l2ToL1Msgs: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                noteHashes: number;
                nullifiers: number;
                l2ToL1Msgs: number;
            }, {
                noteHashes: string | number | bigint;
                nullifiers: string | number | bigint;
                l2ToL1Msgs: string | number | bigint;
            }>, import("../kernel/private_to_avm_accumulated_data.js").PrivateToAvmAccumulatedDataArrayLengths, {
                noteHashes: string | number | bigint;
                nullifiers: string | number | bigint;
                l2ToL1Msgs: string | number | bigint;
            }>;
            previousRevertibleAccumulatedDataArrayLengths: z.ZodEffects<z.ZodObject<{
                noteHashes: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                nullifiers: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                l2ToL1Msgs: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                noteHashes: number;
                nullifiers: number;
                l2ToL1Msgs: number;
            }, {
                noteHashes: string | number | bigint;
                nullifiers: string | number | bigint;
                l2ToL1Msgs: string | number | bigint;
            }>, import("../kernel/private_to_avm_accumulated_data.js").PrivateToAvmAccumulatedDataArrayLengths, {
                noteHashes: string | number | bigint;
                nullifiers: string | number | bigint;
                l2ToL1Msgs: string | number | bigint;
            }>;
            previousNonRevertibleAccumulatedData: z.ZodEffects<z.ZodObject<{
                noteHashes: z.ZodArray<z.ZodType<Fr, any, string>, "many">;
                nullifiers: z.ZodArray<z.ZodType<Fr, any, string>, "many">;
                l2ToL1Msgs: z.ZodArray<z.ZodEffects<z.ZodObject<{
                    message: z.ZodEffects<z.ZodObject<{
                        recipient: z.ZodType<import("@aztec/foundation/schemas").EthAddress, any, string>;
                        content: z.ZodType<Fr, any, string>;
                        counter: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        counter: number;
                        recipient: import("@aztec/foundation/schemas").EthAddress;
                        content: Fr;
                    }, {
                        counter: number;
                        recipient: string;
                        content: string;
                    }>, import("../messaging/l2_to_l1_message.js").L2ToL1Message, {
                        counter: number;
                        recipient: string;
                        content: string;
                    }>;
                    contractAddress: import("@aztec/foundation/schemas").ZodFor<AztecAddress>;
                }, "strip", z.ZodTypeAny, {
                    message: import("../messaging/l2_to_l1_message.js").L2ToL1Message;
                    contractAddress: AztecAddress;
                }, {
                    message: {
                        counter: number;
                        recipient: string;
                        content: string;
                    };
                    contractAddress?: any;
                }>, import("../messaging/l2_to_l1_message.js").ScopedL2ToL1Message, {
                    message: {
                        counter: number;
                        recipient: string;
                        content: string;
                    };
                    contractAddress?: any;
                }>, "many">;
            }, "strip", z.ZodTypeAny, {
                noteHashes: Fr[];
                nullifiers: Fr[];
                l2ToL1Msgs: import("../messaging/l2_to_l1_message.js").ScopedL2ToL1Message[];
            }, {
                noteHashes: string[];
                nullifiers: string[];
                l2ToL1Msgs: {
                    message: {
                        counter: number;
                        recipient: string;
                        content: string;
                    };
                    contractAddress?: any;
                }[];
            }>, import("../kernel/private_to_avm_accumulated_data.js").PrivateToAvmAccumulatedData, {
                noteHashes: string[];
                nullifiers: string[];
                l2ToL1Msgs: {
                    message: {
                        counter: number;
                        recipient: string;
                        content: string;
                    };
                    contractAddress?: any;
                }[];
            }>;
            previousRevertibleAccumulatedData: z.ZodEffects<z.ZodObject<{
                noteHashes: z.ZodArray<z.ZodType<Fr, any, string>, "many">;
                nullifiers: z.ZodArray<z.ZodType<Fr, any, string>, "many">;
                l2ToL1Msgs: z.ZodArray<z.ZodEffects<z.ZodObject<{
                    message: z.ZodEffects<z.ZodObject<{
                        recipient: z.ZodType<import("@aztec/foundation/schemas").EthAddress, any, string>;
                        content: z.ZodType<Fr, any, string>;
                        counter: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        counter: number;
                        recipient: import("@aztec/foundation/schemas").EthAddress;
                        content: Fr;
                    }, {
                        counter: number;
                        recipient: string;
                        content: string;
                    }>, import("../messaging/l2_to_l1_message.js").L2ToL1Message, {
                        counter: number;
                        recipient: string;
                        content: string;
                    }>;
                    contractAddress: import("@aztec/foundation/schemas").ZodFor<AztecAddress>;
                }, "strip", z.ZodTypeAny, {
                    message: import("../messaging/l2_to_l1_message.js").L2ToL1Message;
                    contractAddress: AztecAddress;
                }, {
                    message: {
                        counter: number;
                        recipient: string;
                        content: string;
                    };
                    contractAddress?: any;
                }>, import("../messaging/l2_to_l1_message.js").ScopedL2ToL1Message, {
                    message: {
                        counter: number;
                        recipient: string;
                        content: string;
                    };
                    contractAddress?: any;
                }>, "many">;
            }, "strip", z.ZodTypeAny, {
                noteHashes: Fr[];
                nullifiers: Fr[];
                l2ToL1Msgs: import("../messaging/l2_to_l1_message.js").ScopedL2ToL1Message[];
            }, {
                noteHashes: string[];
                nullifiers: string[];
                l2ToL1Msgs: {
                    message: {
                        counter: number;
                        recipient: string;
                        content: string;
                    };
                    contractAddress?: any;
                }[];
            }>, import("../kernel/private_to_avm_accumulated_data.js").PrivateToAvmAccumulatedData, {
                noteHashes: string[];
                nullifiers: string[];
                l2ToL1Msgs: {
                    message: {
                        counter: number;
                        recipient: string;
                        content: string;
                    };
                    contractAddress?: any;
                }[];
            }>;
            endTreeSnapshots: z.ZodEffects<z.ZodObject<{
                l1ToL2MessageTree: z.ZodEffects<z.ZodObject<{
                    root: z.ZodType<Fr, any, string>;
                    nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    root: Fr;
                    nextAvailableLeafIndex: number;
                }, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>, AppendOnlyTreeSnapshot, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>;
                noteHashTree: z.ZodEffects<z.ZodObject<{
                    root: z.ZodType<Fr, any, string>;
                    nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    root: Fr;
                    nextAvailableLeafIndex: number;
                }, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>, AppendOnlyTreeSnapshot, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>;
                nullifierTree: z.ZodEffects<z.ZodObject<{
                    root: z.ZodType<Fr, any, string>;
                    nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    root: Fr;
                    nextAvailableLeafIndex: number;
                }, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>, AppendOnlyTreeSnapshot, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>;
                publicDataTree: z.ZodEffects<z.ZodObject<{
                    root: z.ZodType<Fr, any, string>;
                    nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    root: Fr;
                    nextAvailableLeafIndex: number;
                }, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>, AppendOnlyTreeSnapshot, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>;
            }, "strip", z.ZodTypeAny, {
                noteHashTree: AppendOnlyTreeSnapshot;
                nullifierTree: AppendOnlyTreeSnapshot;
                publicDataTree: AppendOnlyTreeSnapshot;
                l1ToL2MessageTree: AppendOnlyTreeSnapshot;
            }, {
                noteHashTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                nullifierTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                publicDataTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                l1ToL2MessageTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
            }>, TreeSnapshots, {
                noteHashTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                nullifierTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                publicDataTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                l1ToL2MessageTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
            }>;
            endGasUsed: z.ZodEffects<z.ZodObject<{
                daGas: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                l2Gas: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                daGas: number;
                l2Gas: number;
            }, {
                daGas: string | number | bigint;
                l2Gas: string | number | bigint;
            }>, import("../gas/gas.js").Gas, {
                daGas: string | number | bigint;
                l2Gas: string | number | bigint;
            }>;
            accumulatedData: z.ZodEffects<z.ZodObject<{
                noteHashes: z.ZodArray<z.ZodType<Fr, any, string>, "many">;
                nullifiers: z.ZodArray<z.ZodType<Fr, any, string>, "many">;
                l2ToL1Msgs: z.ZodArray<z.ZodEffects<z.ZodObject<{
                    message: z.ZodEffects<z.ZodObject<{
                        recipient: z.ZodType<import("@aztec/foundation/schemas").EthAddress, any, string>;
                        content: z.ZodType<Fr, any, string>;
                        counter: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        counter: number;
                        recipient: import("@aztec/foundation/schemas").EthAddress;
                        content: Fr;
                    }, {
                        counter: number;
                        recipient: string;
                        content: string;
                    }>, import("../messaging/l2_to_l1_message.js").L2ToL1Message, {
                        counter: number;
                        recipient: string;
                        content: string;
                    }>;
                    contractAddress: import("@aztec/foundation/schemas").ZodFor<AztecAddress>;
                }, "strip", z.ZodTypeAny, {
                    message: import("../messaging/l2_to_l1_message.js").L2ToL1Message;
                    contractAddress: AztecAddress;
                }, {
                    message: {
                        counter: number;
                        recipient: string;
                        content: string;
                    };
                    contractAddress?: any;
                }>, import("../messaging/l2_to_l1_message.js").ScopedL2ToL1Message, {
                    message: {
                        counter: number;
                        recipient: string;
                        content: string;
                    };
                    contractAddress?: any;
                }>, "many">;
                publicLogs: z.ZodArray<import("@aztec/foundation/schemas").ZodFor<import("../logs/public_log.js").PublicLog>, "many">;
                publicDataWrites: z.ZodArray<z.ZodEffects<z.ZodObject<{
                    leafSlot: z.ZodType<Fr, any, string>;
                    value: z.ZodType<Fr, any, string>;
                }, "strip", z.ZodTypeAny, {
                    value: Fr;
                    leafSlot: Fr;
                }, {
                    value: string;
                    leafSlot: string;
                }>, import("./public_data_write.js").PublicDataWrite, {
                    value: string;
                    leafSlot: string;
                }>, "many">;
            }, "strip", z.ZodTypeAny, {
                noteHashes: Fr[];
                nullifiers: Fr[];
                l2ToL1Msgs: import("../messaging/l2_to_l1_message.js").ScopedL2ToL1Message[];
                publicLogs: import("../logs/public_log.js").PublicLog[];
                publicDataWrites: import("./public_data_write.js").PublicDataWrite[];
            }, {
                noteHashes: string[];
                nullifiers: string[];
                l2ToL1Msgs: {
                    message: {
                        counter: number;
                        recipient: string;
                        content: string;
                    };
                    contractAddress?: any;
                }[];
                publicLogs: any[];
                publicDataWrites: {
                    value: string;
                    leafSlot: string;
                }[];
            }>, import("./avm_accumulated_data.js").AvmAccumulatedData, {
                noteHashes: string[];
                nullifiers: string[];
                l2ToL1Msgs: {
                    message: {
                        counter: number;
                        recipient: string;
                        content: string;
                    };
                    contractAddress?: any;
                }[];
                publicLogs: any[];
                publicDataWrites: {
                    value: string;
                    leafSlot: string;
                }[];
            }>;
            transactionFee: z.ZodType<Fr, any, string>;
            reverted: z.ZodBoolean;
        }, "strip", z.ZodTypeAny, {
            globalVariables: GlobalVariables;
            gasSettings: import("../gas/gas_settings.js").GasSettings;
            publicTeardownCallRequest: import("../kernel/public_call_request.js").PublicCallRequest;
            transactionFee: Fr;
            feePayer: AztecAddress;
            startTreeSnapshots: TreeSnapshots;
            startGasUsed: import("../gas/gas.js").Gas;
            publicSetupCallRequests: import("../kernel/public_call_request.js").PublicCallRequest[];
            publicAppLogicCallRequests: import("../kernel/public_call_request.js").PublicCallRequest[];
            previousNonRevertibleAccumulatedDataArrayLengths: import("../kernel/private_to_avm_accumulated_data.js").PrivateToAvmAccumulatedDataArrayLengths;
            previousRevertibleAccumulatedDataArrayLengths: import("../kernel/private_to_avm_accumulated_data.js").PrivateToAvmAccumulatedDataArrayLengths;
            previousNonRevertibleAccumulatedData: import("../kernel/private_to_avm_accumulated_data.js").PrivateToAvmAccumulatedData;
            previousRevertibleAccumulatedData: import("../kernel/private_to_avm_accumulated_data.js").PrivateToAvmAccumulatedData;
            endTreeSnapshots: TreeSnapshots;
            endGasUsed: import("../gas/gas.js").Gas;
            accumulatedData: import("./avm_accumulated_data.js").AvmAccumulatedData;
            reverted: boolean;
        }, {
            globalVariables: {
                gasFees: {
                    feePerDaGas: string;
                    feePerL2Gas: string;
                };
                chainId?: any;
                version?: any;
                blockNumber?: any;
                slotNumber?: any;
                timestamp?: any;
                coinbase?: any;
                feeRecipient?: any;
            };
            gasSettings: {
                gasLimits: {
                    daGas: string | number | bigint;
                    l2Gas: string | number | bigint;
                };
                teardownGasLimits: {
                    daGas: string | number | bigint;
                    l2Gas: string | number | bigint;
                };
                maxFeesPerGas: {
                    feePerDaGas: string;
                    feePerL2Gas: string;
                };
                maxPriorityFeesPerGas: {
                    feePerDaGas: string;
                    feePerL2Gas: string;
                };
            };
            publicTeardownCallRequest: {
                isStaticCall: boolean;
                calldataHash: string;
                contractAddress?: any;
                msgSender?: any;
            };
            transactionFee: string;
            startTreeSnapshots: {
                noteHashTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                nullifierTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                publicDataTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                l1ToL2MessageTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
            };
            startGasUsed: {
                daGas: string | number | bigint;
                l2Gas: string | number | bigint;
            };
            publicSetupCallRequests: {
                isStaticCall: boolean;
                calldataHash: string;
                contractAddress?: any;
                msgSender?: any;
            }[];
            publicAppLogicCallRequests: {
                isStaticCall: boolean;
                calldataHash: string;
                contractAddress?: any;
                msgSender?: any;
            }[];
            previousNonRevertibleAccumulatedDataArrayLengths: {
                noteHashes: string | number | bigint;
                nullifiers: string | number | bigint;
                l2ToL1Msgs: string | number | bigint;
            };
            previousRevertibleAccumulatedDataArrayLengths: {
                noteHashes: string | number | bigint;
                nullifiers: string | number | bigint;
                l2ToL1Msgs: string | number | bigint;
            };
            previousNonRevertibleAccumulatedData: {
                noteHashes: string[];
                nullifiers: string[];
                l2ToL1Msgs: {
                    message: {
                        counter: number;
                        recipient: string;
                        content: string;
                    };
                    contractAddress?: any;
                }[];
            };
            previousRevertibleAccumulatedData: {
                noteHashes: string[];
                nullifiers: string[];
                l2ToL1Msgs: {
                    message: {
                        counter: number;
                        recipient: string;
                        content: string;
                    };
                    contractAddress?: any;
                }[];
            };
            endTreeSnapshots: {
                noteHashTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                nullifierTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                publicDataTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                l1ToL2MessageTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
            };
            endGasUsed: {
                daGas: string | number | bigint;
                l2Gas: string | number | bigint;
            };
            accumulatedData: {
                noteHashes: string[];
                nullifiers: string[];
                l2ToL1Msgs: {
                    message: {
                        counter: number;
                        recipient: string;
                        content: string;
                    };
                    contractAddress?: any;
                }[];
                publicLogs: any[];
                publicDataWrites: {
                    value: string;
                    leafSlot: string;
                }[];
            };
            reverted: boolean;
            feePayer?: any;
        }>, AvmCircuitPublicInputs, {
            globalVariables: {
                gasFees: {
                    feePerDaGas: string;
                    feePerL2Gas: string;
                };
                chainId?: any;
                version?: any;
                blockNumber?: any;
                slotNumber?: any;
                timestamp?: any;
                coinbase?: any;
                feeRecipient?: any;
            };
            gasSettings: {
                gasLimits: {
                    daGas: string | number | bigint;
                    l2Gas: string | number | bigint;
                };
                teardownGasLimits: {
                    daGas: string | number | bigint;
                    l2Gas: string | number | bigint;
                };
                maxFeesPerGas: {
                    feePerDaGas: string;
                    feePerL2Gas: string;
                };
                maxPriorityFeesPerGas: {
                    feePerDaGas: string;
                    feePerL2Gas: string;
                };
            };
            publicTeardownCallRequest: {
                isStaticCall: boolean;
                calldataHash: string;
                contractAddress?: any;
                msgSender?: any;
            };
            transactionFee: string;
            startTreeSnapshots: {
                noteHashTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                nullifierTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                publicDataTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                l1ToL2MessageTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
            };
            startGasUsed: {
                daGas: string | number | bigint;
                l2Gas: string | number | bigint;
            };
            publicSetupCallRequests: {
                isStaticCall: boolean;
                calldataHash: string;
                contractAddress?: any;
                msgSender?: any;
            }[];
            publicAppLogicCallRequests: {
                isStaticCall: boolean;
                calldataHash: string;
                contractAddress?: any;
                msgSender?: any;
            }[];
            previousNonRevertibleAccumulatedDataArrayLengths: {
                noteHashes: string | number | bigint;
                nullifiers: string | number | bigint;
                l2ToL1Msgs: string | number | bigint;
            };
            previousRevertibleAccumulatedDataArrayLengths: {
                noteHashes: string | number | bigint;
                nullifiers: string | number | bigint;
                l2ToL1Msgs: string | number | bigint;
            };
            previousNonRevertibleAccumulatedData: {
                noteHashes: string[];
                nullifiers: string[];
                l2ToL1Msgs: {
                    message: {
                        counter: number;
                        recipient: string;
                        content: string;
                    };
                    contractAddress?: any;
                }[];
            };
            previousRevertibleAccumulatedData: {
                noteHashes: string[];
                nullifiers: string[];
                l2ToL1Msgs: {
                    message: {
                        counter: number;
                        recipient: string;
                        content: string;
                    };
                    contractAddress?: any;
                }[];
            };
            endTreeSnapshots: {
                noteHashTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                nullifierTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                publicDataTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                l1ToL2MessageTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
            };
            endGasUsed: {
                daGas: string | number | bigint;
                l2Gas: string | number | bigint;
            };
            accumulatedData: {
                noteHashes: string[];
                nullifiers: string[];
                l2ToL1Msgs: {
                    message: {
                        counter: number;
                        recipient: string;
                        content: string;
                    };
                    contractAddress?: any;
                }[];
                publicLogs: any[];
                publicDataWrites: {
                    value: string;
                    leafSlot: string;
                }[];
            };
            reverted: boolean;
            feePayer?: any;
        }>;
    }, "strip", z.ZodTypeAny, {
        publicInputs: AvmCircuitPublicInputs;
        hints: AvmExecutionHints;
    }, {
        publicInputs: {
            globalVariables: {
                gasFees: {
                    feePerDaGas: string;
                    feePerL2Gas: string;
                };
                chainId?: any;
                version?: any;
                blockNumber?: any;
                slotNumber?: any;
                timestamp?: any;
                coinbase?: any;
                feeRecipient?: any;
            };
            gasSettings: {
                gasLimits: {
                    daGas: string | number | bigint;
                    l2Gas: string | number | bigint;
                };
                teardownGasLimits: {
                    daGas: string | number | bigint;
                    l2Gas: string | number | bigint;
                };
                maxFeesPerGas: {
                    feePerDaGas: string;
                    feePerL2Gas: string;
                };
                maxPriorityFeesPerGas: {
                    feePerDaGas: string;
                    feePerL2Gas: string;
                };
            };
            publicTeardownCallRequest: {
                isStaticCall: boolean;
                calldataHash: string;
                contractAddress?: any;
                msgSender?: any;
            };
            transactionFee: string;
            startTreeSnapshots: {
                noteHashTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                nullifierTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                publicDataTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                l1ToL2MessageTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
            };
            startGasUsed: {
                daGas: string | number | bigint;
                l2Gas: string | number | bigint;
            };
            publicSetupCallRequests: {
                isStaticCall: boolean;
                calldataHash: string;
                contractAddress?: any;
                msgSender?: any;
            }[];
            publicAppLogicCallRequests: {
                isStaticCall: boolean;
                calldataHash: string;
                contractAddress?: any;
                msgSender?: any;
            }[];
            previousNonRevertibleAccumulatedDataArrayLengths: {
                noteHashes: string | number | bigint;
                nullifiers: string | number | bigint;
                l2ToL1Msgs: string | number | bigint;
            };
            previousRevertibleAccumulatedDataArrayLengths: {
                noteHashes: string | number | bigint;
                nullifiers: string | number | bigint;
                l2ToL1Msgs: string | number | bigint;
            };
            previousNonRevertibleAccumulatedData: {
                noteHashes: string[];
                nullifiers: string[];
                l2ToL1Msgs: {
                    message: {
                        counter: number;
                        recipient: string;
                        content: string;
                    };
                    contractAddress?: any;
                }[];
            };
            previousRevertibleAccumulatedData: {
                noteHashes: string[];
                nullifiers: string[];
                l2ToL1Msgs: {
                    message: {
                        counter: number;
                        recipient: string;
                        content: string;
                    };
                    contractAddress?: any;
                }[];
            };
            endTreeSnapshots: {
                noteHashTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                nullifierTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                publicDataTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                l1ToL2MessageTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
            };
            endGasUsed: {
                daGas: string | number | bigint;
                l2Gas: string | number | bigint;
            };
            accumulatedData: {
                noteHashes: string[];
                nullifiers: string[];
                l2ToL1Msgs: {
                    message: {
                        counter: number;
                        recipient: string;
                        content: string;
                    };
                    contractAddress?: any;
                }[];
                publicLogs: any[];
                publicDataWrites: {
                    value: string;
                    leafSlot: string;
                }[];
            };
            reverted: boolean;
            feePayer?: any;
        };
        hints: {
            tx: {
                hash: string;
                globalVariables: {
                    gasFees: {
                        feePerDaGas: string;
                        feePerL2Gas: string;
                    };
                    chainId?: any;
                    version?: any;
                    blockNumber?: any;
                    slotNumber?: any;
                    timestamp?: any;
                    coinbase?: any;
                    feeRecipient?: any;
                };
                nonRevertibleAccumulatedData: {
                    noteHashes: string[];
                    nullifiers: string[];
                };
                revertibleAccumulatedData: {
                    noteHashes: string[];
                    nullifiers: string[];
                };
                setupEnqueuedCalls: {
                    isStaticCall: boolean;
                    calldata: string[];
                    contractAddress?: any;
                    msgSender?: any;
                }[];
                appLogicEnqueuedCalls: {
                    isStaticCall: boolean;
                    calldata: string[];
                    contractAddress?: any;
                    msgSender?: any;
                }[];
                teardownEnqueuedCall: {
                    isStaticCall: boolean;
                    calldata: string[];
                    contractAddress?: any;
                    msgSender?: any;
                } | null;
            };
            contractInstances: {
                publicKeys: {
                    masterNullifierPublicKey: string;
                    masterIncomingViewingPublicKey: string;
                    masterOutgoingViewingPublicKey: string;
                    masterTaggingPublicKey: string;
                };
                salt: string;
                currentContractClassId: string;
                originalContractClassId: string;
                initializationHash: string;
                address?: any;
                deployer?: any;
            }[];
            contractClasses: {
                classId: string;
                artifactHash: string;
                privateFunctionsRoot: string;
                packedBytecode: string | {
                    type: "Buffer";
                    data: number[];
                };
            }[];
            bytecodeCommitments: {
                classId: string;
                commitment: string;
            }[];
            startingTreeRoots: {
                noteHashTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                nullifierTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                publicDataTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                l1ToL2MessageTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
            };
            getSiblingPathHints: {
                path: string[];
                index: string | number | bigint;
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                treeId: number;
            }[];
            getPreviousValueIndexHints: {
                value: string;
                index: string | number | bigint;
                alreadyPresent: boolean;
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                treeId: number;
            }[];
            getLeafPreimageHintsPublicDataTree: {
                index: string | number | bigint;
                leafPreimage: {
                    leaf: {
                        nullifier: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                } | {
                    leaf: {
                        value: string;
                        slot: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                };
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
            }[];
            getLeafPreimageHintsNullifierTree: {
                index: string | number | bigint;
                leafPreimage: {
                    leaf: {
                        nullifier: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                } | {
                    leaf: {
                        value: string;
                        slot: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                };
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
            }[];
            getLeafValueHints: {
                value: string;
                index: string | number | bigint;
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                treeId: number;
            }[];
            sequentialInsertHintsPublicDataTree: {
                leaf: {
                    nullifier: string;
                } | {
                    value: string;
                    slot: string;
                };
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                treeId: number;
                stateAfter: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                lowLeavesWitnessData: {
                    path: string[];
                    index: string | number | bigint;
                    leaf: {
                        leaf: {
                            nullifier: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    } | {
                        leaf: {
                            value: string;
                            slot: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    };
                };
                insertionWitnessData: {
                    path: string[];
                    index: string | number | bigint;
                    leaf: {
                        leaf: {
                            nullifier: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    } | {
                        leaf: {
                            value: string;
                            slot: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    };
                };
            }[];
            sequentialInsertHintsNullifierTree: {
                leaf: {
                    nullifier: string;
                } | {
                    value: string;
                    slot: string;
                };
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                treeId: number;
                stateAfter: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                lowLeavesWitnessData: {
                    path: string[];
                    index: string | number | bigint;
                    leaf: {
                        leaf: {
                            nullifier: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    } | {
                        leaf: {
                            value: string;
                            slot: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    };
                };
                insertionWitnessData: {
                    path: string[];
                    index: string | number | bigint;
                    leaf: {
                        leaf: {
                            nullifier: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    } | {
                        leaf: {
                            value: string;
                            slot: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    };
                };
            }[];
            appendLeavesHints: {
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                treeId: number;
                stateAfter: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                leaves: string[];
            }[];
            createCheckpointHints: {
                actionCounter: number;
                oldCheckpointId: number;
                newCheckpointId: number;
            }[];
            commitCheckpointHints: {
                actionCounter: number;
                oldCheckpointId: number;
                newCheckpointId: number;
            }[];
            revertCheckpointHints: {
                stateAfter: {
                    noteHashTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    nullifierTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    publicDataTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    l1ToL2MessageTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                };
                actionCounter: number;
                oldCheckpointId: number;
                newCheckpointId: number;
                stateBefore: {
                    noteHashTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    nullifierTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    publicDataTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    l1ToL2MessageTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                };
            }[];
        };
    }>, AvmCircuitInputs, {
        publicInputs: {
            globalVariables: {
                gasFees: {
                    feePerDaGas: string;
                    feePerL2Gas: string;
                };
                chainId?: any;
                version?: any;
                blockNumber?: any;
                slotNumber?: any;
                timestamp?: any;
                coinbase?: any;
                feeRecipient?: any;
            };
            gasSettings: {
                gasLimits: {
                    daGas: string | number | bigint;
                    l2Gas: string | number | bigint;
                };
                teardownGasLimits: {
                    daGas: string | number | bigint;
                    l2Gas: string | number | bigint;
                };
                maxFeesPerGas: {
                    feePerDaGas: string;
                    feePerL2Gas: string;
                };
                maxPriorityFeesPerGas: {
                    feePerDaGas: string;
                    feePerL2Gas: string;
                };
            };
            publicTeardownCallRequest: {
                isStaticCall: boolean;
                calldataHash: string;
                contractAddress?: any;
                msgSender?: any;
            };
            transactionFee: string;
            startTreeSnapshots: {
                noteHashTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                nullifierTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                publicDataTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                l1ToL2MessageTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
            };
            startGasUsed: {
                daGas: string | number | bigint;
                l2Gas: string | number | bigint;
            };
            publicSetupCallRequests: {
                isStaticCall: boolean;
                calldataHash: string;
                contractAddress?: any;
                msgSender?: any;
            }[];
            publicAppLogicCallRequests: {
                isStaticCall: boolean;
                calldataHash: string;
                contractAddress?: any;
                msgSender?: any;
            }[];
            previousNonRevertibleAccumulatedDataArrayLengths: {
                noteHashes: string | number | bigint;
                nullifiers: string | number | bigint;
                l2ToL1Msgs: string | number | bigint;
            };
            previousRevertibleAccumulatedDataArrayLengths: {
                noteHashes: string | number | bigint;
                nullifiers: string | number | bigint;
                l2ToL1Msgs: string | number | bigint;
            };
            previousNonRevertibleAccumulatedData: {
                noteHashes: string[];
                nullifiers: string[];
                l2ToL1Msgs: {
                    message: {
                        counter: number;
                        recipient: string;
                        content: string;
                    };
                    contractAddress?: any;
                }[];
            };
            previousRevertibleAccumulatedData: {
                noteHashes: string[];
                nullifiers: string[];
                l2ToL1Msgs: {
                    message: {
                        counter: number;
                        recipient: string;
                        content: string;
                    };
                    contractAddress?: any;
                }[];
            };
            endTreeSnapshots: {
                noteHashTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                nullifierTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                publicDataTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                l1ToL2MessageTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
            };
            endGasUsed: {
                daGas: string | number | bigint;
                l2Gas: string | number | bigint;
            };
            accumulatedData: {
                noteHashes: string[];
                nullifiers: string[];
                l2ToL1Msgs: {
                    message: {
                        counter: number;
                        recipient: string;
                        content: string;
                    };
                    contractAddress?: any;
                }[];
                publicLogs: any[];
                publicDataWrites: {
                    value: string;
                    leafSlot: string;
                }[];
            };
            reverted: boolean;
            feePayer?: any;
        };
        hints: {
            tx: {
                hash: string;
                globalVariables: {
                    gasFees: {
                        feePerDaGas: string;
                        feePerL2Gas: string;
                    };
                    chainId?: any;
                    version?: any;
                    blockNumber?: any;
                    slotNumber?: any;
                    timestamp?: any;
                    coinbase?: any;
                    feeRecipient?: any;
                };
                nonRevertibleAccumulatedData: {
                    noteHashes: string[];
                    nullifiers: string[];
                };
                revertibleAccumulatedData: {
                    noteHashes: string[];
                    nullifiers: string[];
                };
                setupEnqueuedCalls: {
                    isStaticCall: boolean;
                    calldata: string[];
                    contractAddress?: any;
                    msgSender?: any;
                }[];
                appLogicEnqueuedCalls: {
                    isStaticCall: boolean;
                    calldata: string[];
                    contractAddress?: any;
                    msgSender?: any;
                }[];
                teardownEnqueuedCall: {
                    isStaticCall: boolean;
                    calldata: string[];
                    contractAddress?: any;
                    msgSender?: any;
                } | null;
            };
            contractInstances: {
                publicKeys: {
                    masterNullifierPublicKey: string;
                    masterIncomingViewingPublicKey: string;
                    masterOutgoingViewingPublicKey: string;
                    masterTaggingPublicKey: string;
                };
                salt: string;
                currentContractClassId: string;
                originalContractClassId: string;
                initializationHash: string;
                address?: any;
                deployer?: any;
            }[];
            contractClasses: {
                classId: string;
                artifactHash: string;
                privateFunctionsRoot: string;
                packedBytecode: string | {
                    type: "Buffer";
                    data: number[];
                };
            }[];
            bytecodeCommitments: {
                classId: string;
                commitment: string;
            }[];
            startingTreeRoots: {
                noteHashTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                nullifierTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                publicDataTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                l1ToL2MessageTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
            };
            getSiblingPathHints: {
                path: string[];
                index: string | number | bigint;
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                treeId: number;
            }[];
            getPreviousValueIndexHints: {
                value: string;
                index: string | number | bigint;
                alreadyPresent: boolean;
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                treeId: number;
            }[];
            getLeafPreimageHintsPublicDataTree: {
                index: string | number | bigint;
                leafPreimage: {
                    leaf: {
                        nullifier: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                } | {
                    leaf: {
                        value: string;
                        slot: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                };
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
            }[];
            getLeafPreimageHintsNullifierTree: {
                index: string | number | bigint;
                leafPreimage: {
                    leaf: {
                        nullifier: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                } | {
                    leaf: {
                        value: string;
                        slot: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                };
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
            }[];
            getLeafValueHints: {
                value: string;
                index: string | number | bigint;
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                treeId: number;
            }[];
            sequentialInsertHintsPublicDataTree: {
                leaf: {
                    nullifier: string;
                } | {
                    value: string;
                    slot: string;
                };
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                treeId: number;
                stateAfter: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                lowLeavesWitnessData: {
                    path: string[];
                    index: string | number | bigint;
                    leaf: {
                        leaf: {
                            nullifier: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    } | {
                        leaf: {
                            value: string;
                            slot: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    };
                };
                insertionWitnessData: {
                    path: string[];
                    index: string | number | bigint;
                    leaf: {
                        leaf: {
                            nullifier: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    } | {
                        leaf: {
                            value: string;
                            slot: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    };
                };
            }[];
            sequentialInsertHintsNullifierTree: {
                leaf: {
                    nullifier: string;
                } | {
                    value: string;
                    slot: string;
                };
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                treeId: number;
                stateAfter: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                lowLeavesWitnessData: {
                    path: string[];
                    index: string | number | bigint;
                    leaf: {
                        leaf: {
                            nullifier: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    } | {
                        leaf: {
                            value: string;
                            slot: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    };
                };
                insertionWitnessData: {
                    path: string[];
                    index: string | number | bigint;
                    leaf: {
                        leaf: {
                            nullifier: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    } | {
                        leaf: {
                            value: string;
                            slot: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    };
                };
            }[];
            appendLeavesHints: {
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                treeId: number;
                stateAfter: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                leaves: string[];
            }[];
            createCheckpointHints: {
                actionCounter: number;
                oldCheckpointId: number;
                newCheckpointId: number;
            }[];
            commitCheckpointHints: {
                actionCounter: number;
                oldCheckpointId: number;
                newCheckpointId: number;
            }[];
            revertCheckpointHints: {
                stateAfter: {
                    noteHashTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    nullifierTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    publicDataTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    l1ToL2MessageTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                };
                actionCounter: number;
                oldCheckpointId: number;
                newCheckpointId: number;
                stateBefore: {
                    noteHashTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    nullifierTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    publicDataTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    l1ToL2MessageTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                };
            }[];
        };
    }>;
    serializeWithMessagePack(): Buffer;
    toBuffer(): Buffer;
    static fromBuffer(buf: Buffer): Promise<AvmCircuitInputs>;
}
export {};
//# sourceMappingURL=avm.d.ts.map