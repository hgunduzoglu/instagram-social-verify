/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import { z } from 'zod';
import { ProvingRequestType } from '../proofs/proving_request_type.js';
import { AvmCircuitInputs } from './avm.js';
export type AvmProvingRequest = z.infer<typeof AvmProvingRequestSchema>;
export declare const AvmProvingRequestSchema: z.ZodObject<{
    type: z.ZodLiteral<ProvingRequestType.PUBLIC_VM>;
    inputs: z.ZodEffects<z.ZodObject<{
        hints: z.ZodEffects<z.ZodObject<{
            tx: z.ZodEffects<z.ZodObject<{
                hash: z.ZodString;
                globalVariables: z.ZodEffects<z.ZodObject<{
                    chainId: import("@aztec/foundation/schemas").ZodFor<import("@aztec/foundation/schemas").Fr>;
                    version: import("@aztec/foundation/schemas").ZodFor<import("@aztec/foundation/schemas").Fr>;
                    blockNumber: import("@aztec/foundation/schemas").ZodFor<import("@aztec/foundation/schemas").Fr>;
                    slotNumber: import("@aztec/foundation/schemas").ZodFor<import("@aztec/foundation/schemas").Fr>;
                    timestamp: import("@aztec/foundation/schemas").ZodFor<import("@aztec/foundation/schemas").Fr>;
                    coinbase: import("@aztec/foundation/schemas").ZodFor<import("@aztec/foundation/schemas").EthAddress>;
                    feeRecipient: import("@aztec/foundation/schemas").ZodFor<import("../aztec-address/index.js").AztecAddress>;
                    gasFees: z.ZodEffects<z.ZodObject<{
                        feePerDaGas: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                        feePerL2Gas: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                    }, "strip", z.ZodTypeAny, {
                        feePerDaGas: import("@aztec/foundation/schemas").Fr;
                        feePerL2Gas: import("@aztec/foundation/schemas").Fr;
                    }, {
                        feePerDaGas: string;
                        feePerL2Gas: string;
                    }>, import("../gas/gas_fees.js").GasFees, {
                        feePerDaGas: string;
                        feePerL2Gas: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    chainId: import("@aztec/foundation/schemas").Fr;
                    version: import("@aztec/foundation/schemas").Fr;
                    blockNumber: import("@aztec/foundation/schemas").Fr;
                    slotNumber: import("@aztec/foundation/schemas").Fr;
                    timestamp: import("@aztec/foundation/schemas").Fr;
                    coinbase: import("@aztec/foundation/schemas").EthAddress;
                    feeRecipient: import("../aztec-address/index.js").AztecAddress;
                    gasFees: import("../gas/gas_fees.js").GasFees;
                }, {
                    gasFees: {
                        feePerDaGas: string;
                        feePerL2Gas: string;
                    };
                    chainId?: any;
                    version?: any;
                    blockNumber?: any;
                    slotNumber?: any;
                    timestamp?: any;
                    coinbase?: any;
                    feeRecipient?: any;
                }>, import("../tx/global_variables.js").GlobalVariables, {
                    gasFees: {
                        feePerDaGas: string;
                        feePerL2Gas: string;
                    };
                    chainId?: any;
                    version?: any;
                    blockNumber?: any;
                    slotNumber?: any;
                    timestamp?: any;
                    coinbase?: any;
                    feeRecipient?: any;
                }>;
                nonRevertibleAccumulatedData: z.ZodObject<{
                    noteHashes: z.ZodArray<z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>, "many">;
                    nullifiers: z.ZodArray<z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>, "many">;
                }, "strip", z.ZodTypeAny, {
                    noteHashes: import("@aztec/foundation/schemas").Fr[];
                    nullifiers: import("@aztec/foundation/schemas").Fr[];
                }, {
                    noteHashes: string[];
                    nullifiers: string[];
                }>;
                revertibleAccumulatedData: z.ZodObject<{
                    noteHashes: z.ZodArray<z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>, "many">;
                    nullifiers: z.ZodArray<z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>, "many">;
                }, "strip", z.ZodTypeAny, {
                    noteHashes: import("@aztec/foundation/schemas").Fr[];
                    nullifiers: import("@aztec/foundation/schemas").Fr[];
                }, {
                    noteHashes: string[];
                    nullifiers: string[];
                }>;
                setupEnqueuedCalls: z.ZodArray<z.ZodEffects<z.ZodObject<{
                    msgSender: import("@aztec/foundation/schemas").ZodFor<import("../aztec-address/index.js").AztecAddress>;
                    contractAddress: import("@aztec/foundation/schemas").ZodFor<import("../aztec-address/index.js").AztecAddress>;
                    calldata: z.ZodArray<z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>, "many">;
                    isStaticCall: z.ZodBoolean;
                }, "strip", z.ZodTypeAny, {
                    contractAddress: import("../aztec-address/index.js").AztecAddress;
                    msgSender: import("../aztec-address/index.js").AztecAddress;
                    isStaticCall: boolean;
                    calldata: import("@aztec/foundation/schemas").Fr[];
                }, {
                    isStaticCall: boolean;
                    calldata: string[];
                    contractAddress?: any;
                    msgSender?: any;
                }>, import("./avm.js").AvmEnqueuedCallHint, {
                    isStaticCall: boolean;
                    calldata: string[];
                    contractAddress?: any;
                    msgSender?: any;
                }>, "many">;
                appLogicEnqueuedCalls: z.ZodArray<z.ZodEffects<z.ZodObject<{
                    msgSender: import("@aztec/foundation/schemas").ZodFor<import("../aztec-address/index.js").AztecAddress>;
                    contractAddress: import("@aztec/foundation/schemas").ZodFor<import("../aztec-address/index.js").AztecAddress>;
                    calldata: z.ZodArray<z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>, "many">;
                    isStaticCall: z.ZodBoolean;
                }, "strip", z.ZodTypeAny, {
                    contractAddress: import("../aztec-address/index.js").AztecAddress;
                    msgSender: import("../aztec-address/index.js").AztecAddress;
                    isStaticCall: boolean;
                    calldata: import("@aztec/foundation/schemas").Fr[];
                }, {
                    isStaticCall: boolean;
                    calldata: string[];
                    contractAddress?: any;
                    msgSender?: any;
                }>, import("./avm.js").AvmEnqueuedCallHint, {
                    isStaticCall: boolean;
                    calldata: string[];
                    contractAddress?: any;
                    msgSender?: any;
                }>, "many">;
                teardownEnqueuedCall: z.ZodNullable<z.ZodEffects<z.ZodObject<{
                    msgSender: import("@aztec/foundation/schemas").ZodFor<import("../aztec-address/index.js").AztecAddress>;
                    contractAddress: import("@aztec/foundation/schemas").ZodFor<import("../aztec-address/index.js").AztecAddress>;
                    calldata: z.ZodArray<z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>, "many">;
                    isStaticCall: z.ZodBoolean;
                }, "strip", z.ZodTypeAny, {
                    contractAddress: import("../aztec-address/index.js").AztecAddress;
                    msgSender: import("../aztec-address/index.js").AztecAddress;
                    isStaticCall: boolean;
                    calldata: import("@aztec/foundation/schemas").Fr[];
                }, {
                    isStaticCall: boolean;
                    calldata: string[];
                    contractAddress?: any;
                    msgSender?: any;
                }>, import("./avm.js").AvmEnqueuedCallHint, {
                    isStaticCall: boolean;
                    calldata: string[];
                    contractAddress?: any;
                    msgSender?: any;
                }>>;
            }, "strip", z.ZodTypeAny, {
                hash: string;
                globalVariables: import("../tx/global_variables.js").GlobalVariables;
                nonRevertibleAccumulatedData: {
                    noteHashes: import("@aztec/foundation/schemas").Fr[];
                    nullifiers: import("@aztec/foundation/schemas").Fr[];
                };
                revertibleAccumulatedData: {
                    noteHashes: import("@aztec/foundation/schemas").Fr[];
                    nullifiers: import("@aztec/foundation/schemas").Fr[];
                };
                setupEnqueuedCalls: import("./avm.js").AvmEnqueuedCallHint[];
                appLogicEnqueuedCalls: import("./avm.js").AvmEnqueuedCallHint[];
                teardownEnqueuedCall: import("./avm.js").AvmEnqueuedCallHint | null;
            }, {
                hash: string;
                globalVariables: {
                    gasFees: {
                        feePerDaGas: string;
                        feePerL2Gas: string;
                    };
                    chainId?: any;
                    version?: any;
                    blockNumber?: any;
                    slotNumber?: any;
                    timestamp?: any;
                    coinbase?: any;
                    feeRecipient?: any;
                };
                nonRevertibleAccumulatedData: {
                    noteHashes: string[];
                    nullifiers: string[];
                };
                revertibleAccumulatedData: {
                    noteHashes: string[];
                    nullifiers: string[];
                };
                setupEnqueuedCalls: {
                    isStaticCall: boolean;
                    calldata: string[];
                    contractAddress?: any;
                    msgSender?: any;
                }[];
                appLogicEnqueuedCalls: {
                    isStaticCall: boolean;
                    calldata: string[];
                    contractAddress?: any;
                    msgSender?: any;
                }[];
                teardownEnqueuedCall: {
                    isStaticCall: boolean;
                    calldata: string[];
                    contractAddress?: any;
                    msgSender?: any;
                } | null;
            }>, import("./avm.js").AvmTxHint, {
                hash: string;
                globalVariables: {
                    gasFees: {
                        feePerDaGas: string;
                        feePerL2Gas: string;
                    };
                    chainId?: any;
                    version?: any;
                    blockNumber?: any;
                    slotNumber?: any;
                    timestamp?: any;
                    coinbase?: any;
                    feeRecipient?: any;
                };
                nonRevertibleAccumulatedData: {
                    noteHashes: string[];
                    nullifiers: string[];
                };
                revertibleAccumulatedData: {
                    noteHashes: string[];
                    nullifiers: string[];
                };
                setupEnqueuedCalls: {
                    isStaticCall: boolean;
                    calldata: string[];
                    contractAddress?: any;
                    msgSender?: any;
                }[];
                appLogicEnqueuedCalls: {
                    isStaticCall: boolean;
                    calldata: string[];
                    contractAddress?: any;
                    msgSender?: any;
                }[];
                teardownEnqueuedCall: {
                    isStaticCall: boolean;
                    calldata: string[];
                    contractAddress?: any;
                    msgSender?: any;
                } | null;
            }>;
            contractInstances: z.ZodArray<z.ZodEffects<z.ZodObject<{
                address: import("@aztec/foundation/schemas").ZodFor<import("../aztec-address/index.js").AztecAddress>;
                salt: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                deployer: import("@aztec/foundation/schemas").ZodFor<import("../aztec-address/index.js").AztecAddress>;
                currentContractClassId: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                originalContractClassId: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                initializationHash: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                publicKeys: z.ZodEffects<z.ZodObject<{
                    masterNullifierPublicKey: z.ZodType<import("@aztec/foundation/schemas").Point, any, string>;
                    masterIncomingViewingPublicKey: z.ZodType<import("@aztec/foundation/schemas").Point, any, string>;
                    masterOutgoingViewingPublicKey: z.ZodType<import("@aztec/foundation/schemas").Point, any, string>;
                    masterTaggingPublicKey: z.ZodType<import("@aztec/foundation/schemas").Point, any, string>;
                }, "strip", z.ZodTypeAny, {
                    masterNullifierPublicKey: import("@aztec/foundation/schemas").Point;
                    masterIncomingViewingPublicKey: import("@aztec/foundation/schemas").Point;
                    masterOutgoingViewingPublicKey: import("@aztec/foundation/schemas").Point;
                    masterTaggingPublicKey: import("@aztec/foundation/schemas").Point;
                }, {
                    masterNullifierPublicKey: string;
                    masterIncomingViewingPublicKey: string;
                    masterOutgoingViewingPublicKey: string;
                    masterTaggingPublicKey: string;
                }>, import("../keys/public_keys.js").PublicKeys, {
                    masterNullifierPublicKey: string;
                    masterIncomingViewingPublicKey: string;
                    masterOutgoingViewingPublicKey: string;
                    masterTaggingPublicKey: string;
                }>;
            }, "strip", z.ZodTypeAny, {
                address: import("../aztec-address/index.js").AztecAddress;
                publicKeys: import("../keys/public_keys.js").PublicKeys;
                salt: import("@aztec/foundation/schemas").Fr;
                deployer: import("../aztec-address/index.js").AztecAddress;
                currentContractClassId: import("@aztec/foundation/schemas").Fr;
                originalContractClassId: import("@aztec/foundation/schemas").Fr;
                initializationHash: import("@aztec/foundation/schemas").Fr;
            }, {
                publicKeys: {
                    masterNullifierPublicKey: string;
                    masterIncomingViewingPublicKey: string;
                    masterOutgoingViewingPublicKey: string;
                    masterTaggingPublicKey: string;
                };
                salt: string;
                currentContractClassId: string;
                originalContractClassId: string;
                initializationHash: string;
                address?: any;
                deployer?: any;
            }>, import("./avm.js").AvmContractInstanceHint, {
                publicKeys: {
                    masterNullifierPublicKey: string;
                    masterIncomingViewingPublicKey: string;
                    masterOutgoingViewingPublicKey: string;
                    masterTaggingPublicKey: string;
                };
                salt: string;
                currentContractClassId: string;
                originalContractClassId: string;
                initializationHash: string;
                address?: any;
                deployer?: any;
            }>, "many">;
            contractClasses: z.ZodArray<z.ZodEffects<z.ZodObject<{
                classId: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                artifactHash: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                privateFunctionsRoot: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                packedBytecode: z.ZodUnion<[z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, Buffer, string>, z.ZodEffects<z.ZodObject<{
                    type: z.ZodLiteral<"Buffer">;
                    data: z.ZodArray<z.ZodNumber, "many">;
                }, "strip", z.ZodTypeAny, {
                    type: "Buffer";
                    data: number[];
                }, {
                    type: "Buffer";
                    data: number[];
                }>, Buffer, {
                    type: "Buffer";
                    data: number[];
                }>]>;
            }, "strip", z.ZodTypeAny, {
                classId: import("@aztec/foundation/schemas").Fr;
                artifactHash: import("@aztec/foundation/schemas").Fr;
                privateFunctionsRoot: import("@aztec/foundation/schemas").Fr;
                packedBytecode: Buffer;
            }, {
                classId: string;
                artifactHash: string;
                privateFunctionsRoot: string;
                packedBytecode: string | {
                    type: "Buffer";
                    data: number[];
                };
            }>, import("./avm.js").AvmContractClassHint, {
                classId: string;
                artifactHash: string;
                privateFunctionsRoot: string;
                packedBytecode: string | {
                    type: "Buffer";
                    data: number[];
                };
            }>, "many">;
            bytecodeCommitments: z.ZodArray<z.ZodEffects<z.ZodObject<{
                classId: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                commitment: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
            }, "strip", z.ZodTypeAny, {
                classId: import("@aztec/foundation/schemas").Fr;
                commitment: import("@aztec/foundation/schemas").Fr;
            }, {
                classId: string;
                commitment: string;
            }>, import("./avm.js").AvmBytecodeCommitmentHint, {
                classId: string;
                commitment: string;
            }>, "many">;
            startingTreeRoots: z.ZodEffects<z.ZodObject<{
                l1ToL2MessageTree: z.ZodEffects<z.ZodObject<{
                    root: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                    nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    root: import("@aztec/foundation/schemas").Fr;
                    nextAvailableLeafIndex: number;
                }, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>, import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>;
                noteHashTree: z.ZodEffects<z.ZodObject<{
                    root: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                    nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    root: import("@aztec/foundation/schemas").Fr;
                    nextAvailableLeafIndex: number;
                }, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>, import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>;
                nullifierTree: z.ZodEffects<z.ZodObject<{
                    root: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                    nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    root: import("@aztec/foundation/schemas").Fr;
                    nextAvailableLeafIndex: number;
                }, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>, import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>;
                publicDataTree: z.ZodEffects<z.ZodObject<{
                    root: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                    nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    root: import("@aztec/foundation/schemas").Fr;
                    nextAvailableLeafIndex: number;
                }, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>, import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>;
            }, "strip", z.ZodTypeAny, {
                noteHashTree: import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot;
                nullifierTree: import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot;
                publicDataTree: import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot;
                l1ToL2MessageTree: import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot;
            }, {
                noteHashTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                nullifierTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                publicDataTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                l1ToL2MessageTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
            }>, import("../tx/tree_snapshots.js").TreeSnapshots, {
                noteHashTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                nullifierTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                publicDataTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                l1ToL2MessageTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
            }>;
            getSiblingPathHints: z.ZodArray<z.ZodEffects<z.ZodObject<{
                hintKey: z.ZodEffects<z.ZodObject<{
                    root: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                    nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    root: import("@aztec/foundation/schemas").Fr;
                    nextAvailableLeafIndex: number;
                }, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>, import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>;
                treeId: z.ZodNumber;
                index: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
                path: z.ZodArray<z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>, "many">;
            }, "strip", z.ZodTypeAny, {
                path: import("@aztec/foundation/schemas").Fr[];
                index: bigint;
                hintKey: import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot;
                treeId: number;
            }, {
                path: string[];
                index: string | number | bigint;
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                treeId: number;
            }>, import("./avm.js").AvmGetSiblingPathHint, {
                path: string[];
                index: string | number | bigint;
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                treeId: number;
            }>, "many">;
            getPreviousValueIndexHints: z.ZodArray<z.ZodEffects<z.ZodObject<{
                hintKey: z.ZodEffects<z.ZodObject<{
                    root: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                    nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    root: import("@aztec/foundation/schemas").Fr;
                    nextAvailableLeafIndex: number;
                }, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>, import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>;
                treeId: z.ZodNumber;
                value: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                index: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
                alreadyPresent: z.ZodBoolean;
            }, "strip", z.ZodTypeAny, {
                value: import("@aztec/foundation/schemas").Fr;
                index: bigint;
                alreadyPresent: boolean;
                hintKey: import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot;
                treeId: number;
            }, {
                value: string;
                index: string | number | bigint;
                alreadyPresent: boolean;
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                treeId: number;
            }>, import("./avm.js").AvmGetPreviousValueIndexHint, {
                value: string;
                index: string | number | bigint;
                alreadyPresent: boolean;
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                treeId: number;
            }>, "many">;
            getLeafPreimageHintsPublicDataTree: z.ZodArray<z.ZodEffects<z.ZodObject<{
                hintKey: z.ZodEffects<z.ZodObject<{
                    root: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                    nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    root: import("@aztec/foundation/schemas").Fr;
                    nextAvailableLeafIndex: number;
                }, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>, import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>;
                index: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
                leafPreimage: z.ZodEffects<z.ZodObject<{
                    leaf: z.ZodEffects<z.ZodObject<{
                        nullifier: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                    }, "strip", z.ZodTypeAny, {
                        nullifier: import("@aztec/foundation/schemas").Fr;
                    }, {
                        nullifier: string;
                    }>, import("../trees/nullifier_leaf.js").NullifierLeaf, {
                        nullifier: string;
                    }>;
                    nextKey: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                    nextIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
                }, "strip", z.ZodTypeAny, {
                    leaf: import("../trees/nullifier_leaf.js").NullifierLeaf;
                    nextKey: import("@aztec/foundation/schemas").Fr;
                    nextIndex: bigint;
                }, {
                    leaf: {
                        nullifier: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                }>, import("../trees/nullifier_leaf.js").NullifierLeafPreimage, {
                    leaf: {
                        nullifier: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                }> | z.ZodEffects<z.ZodObject<{
                    leaf: z.ZodEffects<z.ZodObject<{
                        slot: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                        value: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("@aztec/foundation/schemas").Fr;
                        slot: import("@aztec/foundation/schemas").Fr;
                    }, {
                        value: string;
                        slot: string;
                    }>, import("../trees/public_data_leaf.js").PublicDataTreeLeaf, {
                        value: string;
                        slot: string;
                    }>;
                    nextKey: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                    nextIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
                }, "strip", z.ZodTypeAny, {
                    leaf: import("../trees/public_data_leaf.js").PublicDataTreeLeaf;
                    nextKey: import("@aztec/foundation/schemas").Fr;
                    nextIndex: bigint;
                }, {
                    leaf: {
                        value: string;
                        slot: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                }>, import("../trees/public_data_leaf.js").PublicDataTreeLeafPreimage, {
                    leaf: {
                        value: string;
                        slot: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                }>;
            }, "strip", z.ZodTypeAny, {
                index: bigint;
                leafPreimage: import("../trees/nullifier_leaf.js").NullifierLeafPreimage | import("../trees/public_data_leaf.js").PublicDataTreeLeafPreimage;
                hintKey: import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot;
            }, {
                index: string | number | bigint;
                leafPreimage: {
                    leaf: {
                        nullifier: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                } | {
                    leaf: {
                        value: string;
                        slot: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                };
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
            }>, {
                readonly hintKey: import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot;
                readonly index: bigint;
                readonly leafPreimage: import("../trees/nullifier_leaf.js").NullifierLeafPreimage | import("../trees/public_data_leaf.js").PublicDataTreeLeafPreimage;
            }, {
                index: string | number | bigint;
                leafPreimage: {
                    leaf: {
                        nullifier: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                } | {
                    leaf: {
                        value: string;
                        slot: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                };
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
            }>, "many">;
            getLeafPreimageHintsNullifierTree: z.ZodArray<z.ZodEffects<z.ZodObject<{
                hintKey: z.ZodEffects<z.ZodObject<{
                    root: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                    nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    root: import("@aztec/foundation/schemas").Fr;
                    nextAvailableLeafIndex: number;
                }, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>, import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>;
                index: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
                leafPreimage: z.ZodEffects<z.ZodObject<{
                    leaf: z.ZodEffects<z.ZodObject<{
                        nullifier: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                    }, "strip", z.ZodTypeAny, {
                        nullifier: import("@aztec/foundation/schemas").Fr;
                    }, {
                        nullifier: string;
                    }>, import("../trees/nullifier_leaf.js").NullifierLeaf, {
                        nullifier: string;
                    }>;
                    nextKey: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                    nextIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
                }, "strip", z.ZodTypeAny, {
                    leaf: import("../trees/nullifier_leaf.js").NullifierLeaf;
                    nextKey: import("@aztec/foundation/schemas").Fr;
                    nextIndex: bigint;
                }, {
                    leaf: {
                        nullifier: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                }>, import("../trees/nullifier_leaf.js").NullifierLeafPreimage, {
                    leaf: {
                        nullifier: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                }> | z.ZodEffects<z.ZodObject<{
                    leaf: z.ZodEffects<z.ZodObject<{
                        slot: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                        value: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("@aztec/foundation/schemas").Fr;
                        slot: import("@aztec/foundation/schemas").Fr;
                    }, {
                        value: string;
                        slot: string;
                    }>, import("../trees/public_data_leaf.js").PublicDataTreeLeaf, {
                        value: string;
                        slot: string;
                    }>;
                    nextKey: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                    nextIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
                }, "strip", z.ZodTypeAny, {
                    leaf: import("../trees/public_data_leaf.js").PublicDataTreeLeaf;
                    nextKey: import("@aztec/foundation/schemas").Fr;
                    nextIndex: bigint;
                }, {
                    leaf: {
                        value: string;
                        slot: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                }>, import("../trees/public_data_leaf.js").PublicDataTreeLeafPreimage, {
                    leaf: {
                        value: string;
                        slot: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                }>;
            }, "strip", z.ZodTypeAny, {
                index: bigint;
                leafPreimage: import("../trees/nullifier_leaf.js").NullifierLeafPreimage | import("../trees/public_data_leaf.js").PublicDataTreeLeafPreimage;
                hintKey: import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot;
            }, {
                index: string | number | bigint;
                leafPreimage: {
                    leaf: {
                        nullifier: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                } | {
                    leaf: {
                        value: string;
                        slot: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                };
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
            }>, {
                readonly hintKey: import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot;
                readonly index: bigint;
                readonly leafPreimage: import("../trees/nullifier_leaf.js").NullifierLeafPreimage | import("../trees/public_data_leaf.js").PublicDataTreeLeafPreimage;
            }, {
                index: string | number | bigint;
                leafPreimage: {
                    leaf: {
                        nullifier: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                } | {
                    leaf: {
                        value: string;
                        slot: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                };
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
            }>, "many">;
            getLeafValueHints: z.ZodArray<z.ZodEffects<z.ZodObject<{
                hintKey: z.ZodEffects<z.ZodObject<{
                    root: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                    nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    root: import("@aztec/foundation/schemas").Fr;
                    nextAvailableLeafIndex: number;
                }, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>, import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>;
                treeId: z.ZodNumber;
                index: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
                value: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
            }, "strip", z.ZodTypeAny, {
                value: import("@aztec/foundation/schemas").Fr;
                index: bigint;
                hintKey: import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot;
                treeId: number;
            }, {
                value: string;
                index: string | number | bigint;
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                treeId: number;
            }>, import("./avm.js").AvmGetLeafValueHint, {
                value: string;
                index: string | number | bigint;
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                treeId: number;
            }>, "many">;
            sequentialInsertHintsPublicDataTree: z.ZodArray<z.ZodEffects<z.ZodObject<{
                hintKey: z.ZodEffects<z.ZodObject<{
                    root: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                    nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    root: import("@aztec/foundation/schemas").Fr;
                    nextAvailableLeafIndex: number;
                }, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>, import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>;
                stateAfter: z.ZodEffects<z.ZodObject<{
                    root: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                    nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    root: import("@aztec/foundation/schemas").Fr;
                    nextAvailableLeafIndex: number;
                }, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>, import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>;
                treeId: z.ZodNumber;
                leaf: z.ZodEffects<z.ZodObject<{
                    nullifier: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                }, "strip", z.ZodTypeAny, {
                    nullifier: import("@aztec/foundation/schemas").Fr;
                }, {
                    nullifier: string;
                }>, import("../trees/nullifier_leaf.js").NullifierLeaf, {
                    nullifier: string;
                }> | z.ZodEffects<z.ZodObject<{
                    slot: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                    value: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                }, "strip", z.ZodTypeAny, {
                    value: import("@aztec/foundation/schemas").Fr;
                    slot: import("@aztec/foundation/schemas").Fr;
                }, {
                    value: string;
                    slot: string;
                }>, import("../trees/public_data_leaf.js").PublicDataTreeLeaf, {
                    value: string;
                    slot: string;
                }>;
                lowLeavesWitnessData: z.ZodObject<{
                    leaf: z.ZodEffects<z.ZodObject<{
                        leaf: z.ZodEffects<z.ZodObject<{
                            nullifier: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                        }, "strip", z.ZodTypeAny, {
                            nullifier: import("@aztec/foundation/schemas").Fr;
                        }, {
                            nullifier: string;
                        }>, import("../trees/nullifier_leaf.js").NullifierLeaf, {
                            nullifier: string;
                        }>;
                        nextKey: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                        nextIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
                    }, "strip", z.ZodTypeAny, {
                        leaf: import("../trees/nullifier_leaf.js").NullifierLeaf;
                        nextKey: import("@aztec/foundation/schemas").Fr;
                        nextIndex: bigint;
                    }, {
                        leaf: {
                            nullifier: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    }>, import("../trees/nullifier_leaf.js").NullifierLeafPreimage, {
                        leaf: {
                            nullifier: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    }> | z.ZodEffects<z.ZodObject<{
                        leaf: z.ZodEffects<z.ZodObject<{
                            slot: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                            value: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                        }, "strip", z.ZodTypeAny, {
                            value: import("@aztec/foundation/schemas").Fr;
                            slot: import("@aztec/foundation/schemas").Fr;
                        }, {
                            value: string;
                            slot: string;
                        }>, import("../trees/public_data_leaf.js").PublicDataTreeLeaf, {
                            value: string;
                            slot: string;
                        }>;
                        nextKey: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                        nextIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
                    }, "strip", z.ZodTypeAny, {
                        leaf: import("../trees/public_data_leaf.js").PublicDataTreeLeaf;
                        nextKey: import("@aztec/foundation/schemas").Fr;
                        nextIndex: bigint;
                    }, {
                        leaf: {
                            value: string;
                            slot: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    }>, import("../trees/public_data_leaf.js").PublicDataTreeLeafPreimage, {
                        leaf: {
                            value: string;
                            slot: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    }>;
                    index: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
                    path: z.ZodArray<z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>, "many">;
                }, "strip", z.ZodTypeAny, {
                    path: import("@aztec/foundation/schemas").Fr[];
                    index: bigint;
                    leaf: import("../trees/nullifier_leaf.js").NullifierLeafPreimage | import("../trees/public_data_leaf.js").PublicDataTreeLeafPreimage;
                }, {
                    path: string[];
                    index: string | number | bigint;
                    leaf: {
                        leaf: {
                            nullifier: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    } | {
                        leaf: {
                            value: string;
                            slot: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    };
                }>;
                insertionWitnessData: z.ZodObject<{
                    leaf: z.ZodEffects<z.ZodObject<{
                        leaf: z.ZodEffects<z.ZodObject<{
                            nullifier: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                        }, "strip", z.ZodTypeAny, {
                            nullifier: import("@aztec/foundation/schemas").Fr;
                        }, {
                            nullifier: string;
                        }>, import("../trees/nullifier_leaf.js").NullifierLeaf, {
                            nullifier: string;
                        }>;
                        nextKey: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                        nextIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
                    }, "strip", z.ZodTypeAny, {
                        leaf: import("../trees/nullifier_leaf.js").NullifierLeaf;
                        nextKey: import("@aztec/foundation/schemas").Fr;
                        nextIndex: bigint;
                    }, {
                        leaf: {
                            nullifier: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    }>, import("../trees/nullifier_leaf.js").NullifierLeafPreimage, {
                        leaf: {
                            nullifier: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    }> | z.ZodEffects<z.ZodObject<{
                        leaf: z.ZodEffects<z.ZodObject<{
                            slot: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                            value: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                        }, "strip", z.ZodTypeAny, {
                            value: import("@aztec/foundation/schemas").Fr;
                            slot: import("@aztec/foundation/schemas").Fr;
                        }, {
                            value: string;
                            slot: string;
                        }>, import("../trees/public_data_leaf.js").PublicDataTreeLeaf, {
                            value: string;
                            slot: string;
                        }>;
                        nextKey: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                        nextIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
                    }, "strip", z.ZodTypeAny, {
                        leaf: import("../trees/public_data_leaf.js").PublicDataTreeLeaf;
                        nextKey: import("@aztec/foundation/schemas").Fr;
                        nextIndex: bigint;
                    }, {
                        leaf: {
                            value: string;
                            slot: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    }>, import("../trees/public_data_leaf.js").PublicDataTreeLeafPreimage, {
                        leaf: {
                            value: string;
                            slot: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    }>;
                    index: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
                    path: z.ZodArray<z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>, "many">;
                }, "strip", z.ZodTypeAny, {
                    path: import("@aztec/foundation/schemas").Fr[];
                    index: bigint;
                    leaf: import("../trees/nullifier_leaf.js").NullifierLeafPreimage | import("../trees/public_data_leaf.js").PublicDataTreeLeafPreimage;
                }, {
                    path: string[];
                    index: string | number | bigint;
                    leaf: {
                        leaf: {
                            nullifier: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    } | {
                        leaf: {
                            value: string;
                            slot: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    };
                }>;
            }, "strip", z.ZodTypeAny, {
                leaf: import("../trees/nullifier_leaf.js").NullifierLeaf | import("../trees/public_data_leaf.js").PublicDataTreeLeaf;
                hintKey: import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot;
                treeId: number;
                stateAfter: import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot;
                lowLeavesWitnessData: {
                    path: import("@aztec/foundation/schemas").Fr[];
                    index: bigint;
                    leaf: import("../trees/nullifier_leaf.js").NullifierLeafPreimage | import("../trees/public_data_leaf.js").PublicDataTreeLeafPreimage;
                };
                insertionWitnessData: {
                    path: import("@aztec/foundation/schemas").Fr[];
                    index: bigint;
                    leaf: import("../trees/nullifier_leaf.js").NullifierLeafPreimage | import("../trees/public_data_leaf.js").PublicDataTreeLeafPreimage;
                };
            }, {
                leaf: {
                    nullifier: string;
                } | {
                    value: string;
                    slot: string;
                };
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                treeId: number;
                stateAfter: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                lowLeavesWitnessData: {
                    path: string[];
                    index: string | number | bigint;
                    leaf: {
                        leaf: {
                            nullifier: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    } | {
                        leaf: {
                            value: string;
                            slot: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    };
                };
                insertionWitnessData: {
                    path: string[];
                    index: string | number | bigint;
                    leaf: {
                        leaf: {
                            nullifier: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    } | {
                        leaf: {
                            value: string;
                            slot: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    };
                };
            }>, {
                readonly hintKey: import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot;
                readonly stateAfter: import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot;
                readonly treeId: import("../trees/merkle_tree_id.js").MerkleTreeId;
                readonly leaf: import("../trees/nullifier_leaf.js").NullifierLeaf | import("../trees/public_data_leaf.js").PublicDataTreeLeaf;
                readonly lowLeavesWitnessData: {
                    leaf: import("../trees/nullifier_leaf.js").NullifierLeafPreimage | import("../trees/public_data_leaf.js").PublicDataTreeLeafPreimage;
                    index: bigint;
                    path: import("@aztec/foundation/schemas").Fr[];
                };
                readonly insertionWitnessData: {
                    leaf: import("../trees/nullifier_leaf.js").NullifierLeafPreimage | import("../trees/public_data_leaf.js").PublicDataTreeLeafPreimage;
                    index: bigint;
                    path: import("@aztec/foundation/schemas").Fr[];
                };
            }, {
                leaf: {
                    nullifier: string;
                } | {
                    value: string;
                    slot: string;
                };
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                treeId: number;
                stateAfter: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                lowLeavesWitnessData: {
                    path: string[];
                    index: string | number | bigint;
                    leaf: {
                        leaf: {
                            nullifier: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    } | {
                        leaf: {
                            value: string;
                            slot: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    };
                };
                insertionWitnessData: {
                    path: string[];
                    index: string | number | bigint;
                    leaf: {
                        leaf: {
                            nullifier: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    } | {
                        leaf: {
                            value: string;
                            slot: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    };
                };
            }>, "many">;
            sequentialInsertHintsNullifierTree: z.ZodArray<z.ZodEffects<z.ZodObject<{
                hintKey: z.ZodEffects<z.ZodObject<{
                    root: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                    nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    root: import("@aztec/foundation/schemas").Fr;
                    nextAvailableLeafIndex: number;
                }, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>, import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>;
                stateAfter: z.ZodEffects<z.ZodObject<{
                    root: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                    nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    root: import("@aztec/foundation/schemas").Fr;
                    nextAvailableLeafIndex: number;
                }, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>, import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>;
                treeId: z.ZodNumber;
                leaf: z.ZodEffects<z.ZodObject<{
                    nullifier: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                }, "strip", z.ZodTypeAny, {
                    nullifier: import("@aztec/foundation/schemas").Fr;
                }, {
                    nullifier: string;
                }>, import("../trees/nullifier_leaf.js").NullifierLeaf, {
                    nullifier: string;
                }> | z.ZodEffects<z.ZodObject<{
                    slot: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                    value: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                }, "strip", z.ZodTypeAny, {
                    value: import("@aztec/foundation/schemas").Fr;
                    slot: import("@aztec/foundation/schemas").Fr;
                }, {
                    value: string;
                    slot: string;
                }>, import("../trees/public_data_leaf.js").PublicDataTreeLeaf, {
                    value: string;
                    slot: string;
                }>;
                lowLeavesWitnessData: z.ZodObject<{
                    leaf: z.ZodEffects<z.ZodObject<{
                        leaf: z.ZodEffects<z.ZodObject<{
                            nullifier: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                        }, "strip", z.ZodTypeAny, {
                            nullifier: import("@aztec/foundation/schemas").Fr;
                        }, {
                            nullifier: string;
                        }>, import("../trees/nullifier_leaf.js").NullifierLeaf, {
                            nullifier: string;
                        }>;
                        nextKey: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                        nextIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
                    }, "strip", z.ZodTypeAny, {
                        leaf: import("../trees/nullifier_leaf.js").NullifierLeaf;
                        nextKey: import("@aztec/foundation/schemas").Fr;
                        nextIndex: bigint;
                    }, {
                        leaf: {
                            nullifier: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    }>, import("../trees/nullifier_leaf.js").NullifierLeafPreimage, {
                        leaf: {
                            nullifier: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    }> | z.ZodEffects<z.ZodObject<{
                        leaf: z.ZodEffects<z.ZodObject<{
                            slot: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                            value: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                        }, "strip", z.ZodTypeAny, {
                            value: import("@aztec/foundation/schemas").Fr;
                            slot: import("@aztec/foundation/schemas").Fr;
                        }, {
                            value: string;
                            slot: string;
                        }>, import("../trees/public_data_leaf.js").PublicDataTreeLeaf, {
                            value: string;
                            slot: string;
                        }>;
                        nextKey: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                        nextIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
                    }, "strip", z.ZodTypeAny, {
                        leaf: import("../trees/public_data_leaf.js").PublicDataTreeLeaf;
                        nextKey: import("@aztec/foundation/schemas").Fr;
                        nextIndex: bigint;
                    }, {
                        leaf: {
                            value: string;
                            slot: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    }>, import("../trees/public_data_leaf.js").PublicDataTreeLeafPreimage, {
                        leaf: {
                            value: string;
                            slot: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    }>;
                    index: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
                    path: z.ZodArray<z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>, "many">;
                }, "strip", z.ZodTypeAny, {
                    path: import("@aztec/foundation/schemas").Fr[];
                    index: bigint;
                    leaf: import("../trees/nullifier_leaf.js").NullifierLeafPreimage | import("../trees/public_data_leaf.js").PublicDataTreeLeafPreimage;
                }, {
                    path: string[];
                    index: string | number | bigint;
                    leaf: {
                        leaf: {
                            nullifier: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    } | {
                        leaf: {
                            value: string;
                            slot: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    };
                }>;
                insertionWitnessData: z.ZodObject<{
                    leaf: z.ZodEffects<z.ZodObject<{
                        leaf: z.ZodEffects<z.ZodObject<{
                            nullifier: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                        }, "strip", z.ZodTypeAny, {
                            nullifier: import("@aztec/foundation/schemas").Fr;
                        }, {
                            nullifier: string;
                        }>, import("../trees/nullifier_leaf.js").NullifierLeaf, {
                            nullifier: string;
                        }>;
                        nextKey: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                        nextIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
                    }, "strip", z.ZodTypeAny, {
                        leaf: import("../trees/nullifier_leaf.js").NullifierLeaf;
                        nextKey: import("@aztec/foundation/schemas").Fr;
                        nextIndex: bigint;
                    }, {
                        leaf: {
                            nullifier: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    }>, import("../trees/nullifier_leaf.js").NullifierLeafPreimage, {
                        leaf: {
                            nullifier: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    }> | z.ZodEffects<z.ZodObject<{
                        leaf: z.ZodEffects<z.ZodObject<{
                            slot: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                            value: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                        }, "strip", z.ZodTypeAny, {
                            value: import("@aztec/foundation/schemas").Fr;
                            slot: import("@aztec/foundation/schemas").Fr;
                        }, {
                            value: string;
                            slot: string;
                        }>, import("../trees/public_data_leaf.js").PublicDataTreeLeaf, {
                            value: string;
                            slot: string;
                        }>;
                        nextKey: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                        nextIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
                    }, "strip", z.ZodTypeAny, {
                        leaf: import("../trees/public_data_leaf.js").PublicDataTreeLeaf;
                        nextKey: import("@aztec/foundation/schemas").Fr;
                        nextIndex: bigint;
                    }, {
                        leaf: {
                            value: string;
                            slot: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    }>, import("../trees/public_data_leaf.js").PublicDataTreeLeafPreimage, {
                        leaf: {
                            value: string;
                            slot: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    }>;
                    index: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
                    path: z.ZodArray<z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>, "many">;
                }, "strip", z.ZodTypeAny, {
                    path: import("@aztec/foundation/schemas").Fr[];
                    index: bigint;
                    leaf: import("../trees/nullifier_leaf.js").NullifierLeafPreimage | import("../trees/public_data_leaf.js").PublicDataTreeLeafPreimage;
                }, {
                    path: string[];
                    index: string | number | bigint;
                    leaf: {
                        leaf: {
                            nullifier: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    } | {
                        leaf: {
                            value: string;
                            slot: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    };
                }>;
            }, "strip", z.ZodTypeAny, {
                leaf: import("../trees/nullifier_leaf.js").NullifierLeaf | import("../trees/public_data_leaf.js").PublicDataTreeLeaf;
                hintKey: import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot;
                treeId: number;
                stateAfter: import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot;
                lowLeavesWitnessData: {
                    path: import("@aztec/foundation/schemas").Fr[];
                    index: bigint;
                    leaf: import("../trees/nullifier_leaf.js").NullifierLeafPreimage | import("../trees/public_data_leaf.js").PublicDataTreeLeafPreimage;
                };
                insertionWitnessData: {
                    path: import("@aztec/foundation/schemas").Fr[];
                    index: bigint;
                    leaf: import("../trees/nullifier_leaf.js").NullifierLeafPreimage | import("../trees/public_data_leaf.js").PublicDataTreeLeafPreimage;
                };
            }, {
                leaf: {
                    nullifier: string;
                } | {
                    value: string;
                    slot: string;
                };
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                treeId: number;
                stateAfter: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                lowLeavesWitnessData: {
                    path: string[];
                    index: string | number | bigint;
                    leaf: {
                        leaf: {
                            nullifier: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    } | {
                        leaf: {
                            value: string;
                            slot: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    };
                };
                insertionWitnessData: {
                    path: string[];
                    index: string | number | bigint;
                    leaf: {
                        leaf: {
                            nullifier: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    } | {
                        leaf: {
                            value: string;
                            slot: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    };
                };
            }>, {
                readonly hintKey: import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot;
                readonly stateAfter: import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot;
                readonly treeId: import("../trees/merkle_tree_id.js").MerkleTreeId;
                readonly leaf: import("../trees/nullifier_leaf.js").NullifierLeaf | import("../trees/public_data_leaf.js").PublicDataTreeLeaf;
                readonly lowLeavesWitnessData: {
                    leaf: import("../trees/nullifier_leaf.js").NullifierLeafPreimage | import("../trees/public_data_leaf.js").PublicDataTreeLeafPreimage;
                    index: bigint;
                    path: import("@aztec/foundation/schemas").Fr[];
                };
                readonly insertionWitnessData: {
                    leaf: import("../trees/nullifier_leaf.js").NullifierLeafPreimage | import("../trees/public_data_leaf.js").PublicDataTreeLeafPreimage;
                    index: bigint;
                    path: import("@aztec/foundation/schemas").Fr[];
                };
            }, {
                leaf: {
                    nullifier: string;
                } | {
                    value: string;
                    slot: string;
                };
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                treeId: number;
                stateAfter: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                lowLeavesWitnessData: {
                    path: string[];
                    index: string | number | bigint;
                    leaf: {
                        leaf: {
                            nullifier: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    } | {
                        leaf: {
                            value: string;
                            slot: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    };
                };
                insertionWitnessData: {
                    path: string[];
                    index: string | number | bigint;
                    leaf: {
                        leaf: {
                            nullifier: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    } | {
                        leaf: {
                            value: string;
                            slot: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    };
                };
            }>, "many">;
            appendLeavesHints: z.ZodArray<z.ZodEffects<z.ZodObject<{
                hintKey: z.ZodEffects<z.ZodObject<{
                    root: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                    nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    root: import("@aztec/foundation/schemas").Fr;
                    nextAvailableLeafIndex: number;
                }, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>, import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>;
                stateAfter: z.ZodEffects<z.ZodObject<{
                    root: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                    nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    root: import("@aztec/foundation/schemas").Fr;
                    nextAvailableLeafIndex: number;
                }, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>, import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>;
                treeId: z.ZodNumber;
                leaves: z.ZodArray<z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>, "many">;
            }, "strip", z.ZodTypeAny, {
                hintKey: import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot;
                treeId: number;
                stateAfter: import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot;
                leaves: import("@aztec/foundation/schemas").Fr[];
            }, {
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                treeId: number;
                stateAfter: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                leaves: string[];
            }>, import("./avm.js").AvmAppendLeavesHint, {
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                treeId: number;
                stateAfter: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                leaves: string[];
            }>, "many">;
            createCheckpointHints: z.ZodArray<z.ZodEffects<z.ZodObject<{
                actionCounter: z.ZodNumber;
                oldCheckpointId: z.ZodNumber;
                newCheckpointId: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                actionCounter: number;
                oldCheckpointId: number;
                newCheckpointId: number;
            }, {
                actionCounter: number;
                oldCheckpointId: number;
                newCheckpointId: number;
            }>, {
                readonly actionCounter: number;
                readonly oldCheckpointId: number;
                readonly newCheckpointId: number;
            }, {
                actionCounter: number;
                oldCheckpointId: number;
                newCheckpointId: number;
            }>, "many">;
            commitCheckpointHints: z.ZodArray<z.ZodEffects<z.ZodObject<{
                actionCounter: z.ZodNumber;
                oldCheckpointId: z.ZodNumber;
                newCheckpointId: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                actionCounter: number;
                oldCheckpointId: number;
                newCheckpointId: number;
            }, {
                actionCounter: number;
                oldCheckpointId: number;
                newCheckpointId: number;
            }>, {
                readonly actionCounter: number;
                readonly oldCheckpointId: number;
                readonly newCheckpointId: number;
            }, {
                actionCounter: number;
                oldCheckpointId: number;
                newCheckpointId: number;
            }>, "many">;
            revertCheckpointHints: z.ZodArray<z.ZodEffects<z.ZodObject<{
                actionCounter: z.ZodNumber;
                oldCheckpointId: z.ZodNumber;
                newCheckpointId: z.ZodNumber;
                stateBefore: z.ZodEffects<z.ZodObject<{
                    l1ToL2MessageTree: z.ZodEffects<z.ZodObject<{
                        root: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                        nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                    }, "strip", z.ZodTypeAny, {
                        root: import("@aztec/foundation/schemas").Fr;
                        nextAvailableLeafIndex: number;
                    }, {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    }>, import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot, {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    }>;
                    noteHashTree: z.ZodEffects<z.ZodObject<{
                        root: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                        nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                    }, "strip", z.ZodTypeAny, {
                        root: import("@aztec/foundation/schemas").Fr;
                        nextAvailableLeafIndex: number;
                    }, {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    }>, import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot, {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    }>;
                    nullifierTree: z.ZodEffects<z.ZodObject<{
                        root: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                        nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                    }, "strip", z.ZodTypeAny, {
                        root: import("@aztec/foundation/schemas").Fr;
                        nextAvailableLeafIndex: number;
                    }, {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    }>, import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot, {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    }>;
                    publicDataTree: z.ZodEffects<z.ZodObject<{
                        root: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                        nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                    }, "strip", z.ZodTypeAny, {
                        root: import("@aztec/foundation/schemas").Fr;
                        nextAvailableLeafIndex: number;
                    }, {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    }>, import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot, {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    noteHashTree: import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot;
                    nullifierTree: import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot;
                    publicDataTree: import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot;
                    l1ToL2MessageTree: import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot;
                }, {
                    noteHashTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    nullifierTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    publicDataTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    l1ToL2MessageTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                }>, import("../tx/tree_snapshots.js").TreeSnapshots, {
                    noteHashTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    nullifierTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    publicDataTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    l1ToL2MessageTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                }>;
                stateAfter: z.ZodEffects<z.ZodObject<{
                    l1ToL2MessageTree: z.ZodEffects<z.ZodObject<{
                        root: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                        nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                    }, "strip", z.ZodTypeAny, {
                        root: import("@aztec/foundation/schemas").Fr;
                        nextAvailableLeafIndex: number;
                    }, {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    }>, import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot, {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    }>;
                    noteHashTree: z.ZodEffects<z.ZodObject<{
                        root: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                        nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                    }, "strip", z.ZodTypeAny, {
                        root: import("@aztec/foundation/schemas").Fr;
                        nextAvailableLeafIndex: number;
                    }, {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    }>, import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot, {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    }>;
                    nullifierTree: z.ZodEffects<z.ZodObject<{
                        root: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                        nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                    }, "strip", z.ZodTypeAny, {
                        root: import("@aztec/foundation/schemas").Fr;
                        nextAvailableLeafIndex: number;
                    }, {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    }>, import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot, {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    }>;
                    publicDataTree: z.ZodEffects<z.ZodObject<{
                        root: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                        nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                    }, "strip", z.ZodTypeAny, {
                        root: import("@aztec/foundation/schemas").Fr;
                        nextAvailableLeafIndex: number;
                    }, {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    }>, import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot, {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    noteHashTree: import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot;
                    nullifierTree: import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot;
                    publicDataTree: import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot;
                    l1ToL2MessageTree: import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot;
                }, {
                    noteHashTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    nullifierTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    publicDataTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    l1ToL2MessageTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                }>, import("../tx/tree_snapshots.js").TreeSnapshots, {
                    noteHashTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    nullifierTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    publicDataTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    l1ToL2MessageTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                }>;
            }, "strip", z.ZodTypeAny, {
                stateAfter: import("../tx/tree_snapshots.js").TreeSnapshots;
                actionCounter: number;
                oldCheckpointId: number;
                newCheckpointId: number;
                stateBefore: import("../tx/tree_snapshots.js").TreeSnapshots;
            }, {
                stateAfter: {
                    noteHashTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    nullifierTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    publicDataTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    l1ToL2MessageTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                };
                actionCounter: number;
                oldCheckpointId: number;
                newCheckpointId: number;
                stateBefore: {
                    noteHashTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    nullifierTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    publicDataTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    l1ToL2MessageTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                };
            }>, import("./avm.js").AvmRevertCheckpointHint, {
                stateAfter: {
                    noteHashTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    nullifierTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    publicDataTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    l1ToL2MessageTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                };
                actionCounter: number;
                oldCheckpointId: number;
                newCheckpointId: number;
                stateBefore: {
                    noteHashTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    nullifierTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    publicDataTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    l1ToL2MessageTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                };
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            tx: import("./avm.js").AvmTxHint;
            contractInstances: import("./avm.js").AvmContractInstanceHint[];
            contractClasses: import("./avm.js").AvmContractClassHint[];
            bytecodeCommitments: import("./avm.js").AvmBytecodeCommitmentHint[];
            startingTreeRoots: import("../tx/tree_snapshots.js").TreeSnapshots;
            getSiblingPathHints: import("./avm.js").AvmGetSiblingPathHint[];
            getPreviousValueIndexHints: import("./avm.js").AvmGetPreviousValueIndexHint[];
            getLeafPreimageHintsPublicDataTree: {
                readonly hintKey: import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot;
                readonly index: bigint;
                readonly leafPreimage: import("../trees/nullifier_leaf.js").NullifierLeafPreimage | import("../trees/public_data_leaf.js").PublicDataTreeLeafPreimage;
            }[];
            getLeafPreimageHintsNullifierTree: {
                readonly hintKey: import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot;
                readonly index: bigint;
                readonly leafPreimage: import("../trees/nullifier_leaf.js").NullifierLeafPreimage | import("../trees/public_data_leaf.js").PublicDataTreeLeafPreimage;
            }[];
            getLeafValueHints: import("./avm.js").AvmGetLeafValueHint[];
            sequentialInsertHintsPublicDataTree: {
                readonly hintKey: import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot;
                readonly stateAfter: import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot;
                readonly treeId: import("../trees/merkle_tree_id.js").MerkleTreeId;
                readonly leaf: import("../trees/nullifier_leaf.js").NullifierLeaf | import("../trees/public_data_leaf.js").PublicDataTreeLeaf;
                readonly lowLeavesWitnessData: {
                    leaf: import("../trees/nullifier_leaf.js").NullifierLeafPreimage | import("../trees/public_data_leaf.js").PublicDataTreeLeafPreimage;
                    index: bigint;
                    path: import("@aztec/foundation/schemas").Fr[];
                };
                readonly insertionWitnessData: {
                    leaf: import("../trees/nullifier_leaf.js").NullifierLeafPreimage | import("../trees/public_data_leaf.js").PublicDataTreeLeafPreimage;
                    index: bigint;
                    path: import("@aztec/foundation/schemas").Fr[];
                };
            }[];
            sequentialInsertHintsNullifierTree: {
                readonly hintKey: import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot;
                readonly stateAfter: import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot;
                readonly treeId: import("../trees/merkle_tree_id.js").MerkleTreeId;
                readonly leaf: import("../trees/nullifier_leaf.js").NullifierLeaf | import("../trees/public_data_leaf.js").PublicDataTreeLeaf;
                readonly lowLeavesWitnessData: {
                    leaf: import("../trees/nullifier_leaf.js").NullifierLeafPreimage | import("../trees/public_data_leaf.js").PublicDataTreeLeafPreimage;
                    index: bigint;
                    path: import("@aztec/foundation/schemas").Fr[];
                };
                readonly insertionWitnessData: {
                    leaf: import("../trees/nullifier_leaf.js").NullifierLeafPreimage | import("../trees/public_data_leaf.js").PublicDataTreeLeafPreimage;
                    index: bigint;
                    path: import("@aztec/foundation/schemas").Fr[];
                };
            }[];
            appendLeavesHints: import("./avm.js").AvmAppendLeavesHint[];
            createCheckpointHints: {
                readonly actionCounter: number;
                readonly oldCheckpointId: number;
                readonly newCheckpointId: number;
            }[];
            commitCheckpointHints: {
                readonly actionCounter: number;
                readonly oldCheckpointId: number;
                readonly newCheckpointId: number;
            }[];
            revertCheckpointHints: import("./avm.js").AvmRevertCheckpointHint[];
        }, {
            tx: {
                hash: string;
                globalVariables: {
                    gasFees: {
                        feePerDaGas: string;
                        feePerL2Gas: string;
                    };
                    chainId?: any;
                    version?: any;
                    blockNumber?: any;
                    slotNumber?: any;
                    timestamp?: any;
                    coinbase?: any;
                    feeRecipient?: any;
                };
                nonRevertibleAccumulatedData: {
                    noteHashes: string[];
                    nullifiers: string[];
                };
                revertibleAccumulatedData: {
                    noteHashes: string[];
                    nullifiers: string[];
                };
                setupEnqueuedCalls: {
                    isStaticCall: boolean;
                    calldata: string[];
                    contractAddress?: any;
                    msgSender?: any;
                }[];
                appLogicEnqueuedCalls: {
                    isStaticCall: boolean;
                    calldata: string[];
                    contractAddress?: any;
                    msgSender?: any;
                }[];
                teardownEnqueuedCall: {
                    isStaticCall: boolean;
                    calldata: string[];
                    contractAddress?: any;
                    msgSender?: any;
                } | null;
            };
            contractInstances: {
                publicKeys: {
                    masterNullifierPublicKey: string;
                    masterIncomingViewingPublicKey: string;
                    masterOutgoingViewingPublicKey: string;
                    masterTaggingPublicKey: string;
                };
                salt: string;
                currentContractClassId: string;
                originalContractClassId: string;
                initializationHash: string;
                address?: any;
                deployer?: any;
            }[];
            contractClasses: {
                classId: string;
                artifactHash: string;
                privateFunctionsRoot: string;
                packedBytecode: string | {
                    type: "Buffer";
                    data: number[];
                };
            }[];
            bytecodeCommitments: {
                classId: string;
                commitment: string;
            }[];
            startingTreeRoots: {
                noteHashTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                nullifierTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                publicDataTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                l1ToL2MessageTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
            };
            getSiblingPathHints: {
                path: string[];
                index: string | number | bigint;
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                treeId: number;
            }[];
            getPreviousValueIndexHints: {
                value: string;
                index: string | number | bigint;
                alreadyPresent: boolean;
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                treeId: number;
            }[];
            getLeafPreimageHintsPublicDataTree: {
                index: string | number | bigint;
                leafPreimage: {
                    leaf: {
                        nullifier: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                } | {
                    leaf: {
                        value: string;
                        slot: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                };
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
            }[];
            getLeafPreimageHintsNullifierTree: {
                index: string | number | bigint;
                leafPreimage: {
                    leaf: {
                        nullifier: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                } | {
                    leaf: {
                        value: string;
                        slot: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                };
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
            }[];
            getLeafValueHints: {
                value: string;
                index: string | number | bigint;
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                treeId: number;
            }[];
            sequentialInsertHintsPublicDataTree: {
                leaf: {
                    nullifier: string;
                } | {
                    value: string;
                    slot: string;
                };
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                treeId: number;
                stateAfter: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                lowLeavesWitnessData: {
                    path: string[];
                    index: string | number | bigint;
                    leaf: {
                        leaf: {
                            nullifier: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    } | {
                        leaf: {
                            value: string;
                            slot: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    };
                };
                insertionWitnessData: {
                    path: string[];
                    index: string | number | bigint;
                    leaf: {
                        leaf: {
                            nullifier: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    } | {
                        leaf: {
                            value: string;
                            slot: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    };
                };
            }[];
            sequentialInsertHintsNullifierTree: {
                leaf: {
                    nullifier: string;
                } | {
                    value: string;
                    slot: string;
                };
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                treeId: number;
                stateAfter: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                lowLeavesWitnessData: {
                    path: string[];
                    index: string | number | bigint;
                    leaf: {
                        leaf: {
                            nullifier: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    } | {
                        leaf: {
                            value: string;
                            slot: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    };
                };
                insertionWitnessData: {
                    path: string[];
                    index: string | number | bigint;
                    leaf: {
                        leaf: {
                            nullifier: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    } | {
                        leaf: {
                            value: string;
                            slot: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    };
                };
            }[];
            appendLeavesHints: {
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                treeId: number;
                stateAfter: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                leaves: string[];
            }[];
            createCheckpointHints: {
                actionCounter: number;
                oldCheckpointId: number;
                newCheckpointId: number;
            }[];
            commitCheckpointHints: {
                actionCounter: number;
                oldCheckpointId: number;
                newCheckpointId: number;
            }[];
            revertCheckpointHints: {
                stateAfter: {
                    noteHashTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    nullifierTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    publicDataTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    l1ToL2MessageTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                };
                actionCounter: number;
                oldCheckpointId: number;
                newCheckpointId: number;
                stateBefore: {
                    noteHashTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    nullifierTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    publicDataTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    l1ToL2MessageTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                };
            }[];
        }>, import("./avm.js").AvmExecutionHints, {
            tx: {
                hash: string;
                globalVariables: {
                    gasFees: {
                        feePerDaGas: string;
                        feePerL2Gas: string;
                    };
                    chainId?: any;
                    version?: any;
                    blockNumber?: any;
                    slotNumber?: any;
                    timestamp?: any;
                    coinbase?: any;
                    feeRecipient?: any;
                };
                nonRevertibleAccumulatedData: {
                    noteHashes: string[];
                    nullifiers: string[];
                };
                revertibleAccumulatedData: {
                    noteHashes: string[];
                    nullifiers: string[];
                };
                setupEnqueuedCalls: {
                    isStaticCall: boolean;
                    calldata: string[];
                    contractAddress?: any;
                    msgSender?: any;
                }[];
                appLogicEnqueuedCalls: {
                    isStaticCall: boolean;
                    calldata: string[];
                    contractAddress?: any;
                    msgSender?: any;
                }[];
                teardownEnqueuedCall: {
                    isStaticCall: boolean;
                    calldata: string[];
                    contractAddress?: any;
                    msgSender?: any;
                } | null;
            };
            contractInstances: {
                publicKeys: {
                    masterNullifierPublicKey: string;
                    masterIncomingViewingPublicKey: string;
                    masterOutgoingViewingPublicKey: string;
                    masterTaggingPublicKey: string;
                };
                salt: string;
                currentContractClassId: string;
                originalContractClassId: string;
                initializationHash: string;
                address?: any;
                deployer?: any;
            }[];
            contractClasses: {
                classId: string;
                artifactHash: string;
                privateFunctionsRoot: string;
                packedBytecode: string | {
                    type: "Buffer";
                    data: number[];
                };
            }[];
            bytecodeCommitments: {
                classId: string;
                commitment: string;
            }[];
            startingTreeRoots: {
                noteHashTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                nullifierTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                publicDataTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                l1ToL2MessageTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
            };
            getSiblingPathHints: {
                path: string[];
                index: string | number | bigint;
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                treeId: number;
            }[];
            getPreviousValueIndexHints: {
                value: string;
                index: string | number | bigint;
                alreadyPresent: boolean;
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                treeId: number;
            }[];
            getLeafPreimageHintsPublicDataTree: {
                index: string | number | bigint;
                leafPreimage: {
                    leaf: {
                        nullifier: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                } | {
                    leaf: {
                        value: string;
                        slot: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                };
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
            }[];
            getLeafPreimageHintsNullifierTree: {
                index: string | number | bigint;
                leafPreimage: {
                    leaf: {
                        nullifier: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                } | {
                    leaf: {
                        value: string;
                        slot: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                };
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
            }[];
            getLeafValueHints: {
                value: string;
                index: string | number | bigint;
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                treeId: number;
            }[];
            sequentialInsertHintsPublicDataTree: {
                leaf: {
                    nullifier: string;
                } | {
                    value: string;
                    slot: string;
                };
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                treeId: number;
                stateAfter: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                lowLeavesWitnessData: {
                    path: string[];
                    index: string | number | bigint;
                    leaf: {
                        leaf: {
                            nullifier: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    } | {
                        leaf: {
                            value: string;
                            slot: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    };
                };
                insertionWitnessData: {
                    path: string[];
                    index: string | number | bigint;
                    leaf: {
                        leaf: {
                            nullifier: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    } | {
                        leaf: {
                            value: string;
                            slot: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    };
                };
            }[];
            sequentialInsertHintsNullifierTree: {
                leaf: {
                    nullifier: string;
                } | {
                    value: string;
                    slot: string;
                };
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                treeId: number;
                stateAfter: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                lowLeavesWitnessData: {
                    path: string[];
                    index: string | number | bigint;
                    leaf: {
                        leaf: {
                            nullifier: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    } | {
                        leaf: {
                            value: string;
                            slot: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    };
                };
                insertionWitnessData: {
                    path: string[];
                    index: string | number | bigint;
                    leaf: {
                        leaf: {
                            nullifier: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    } | {
                        leaf: {
                            value: string;
                            slot: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    };
                };
            }[];
            appendLeavesHints: {
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                treeId: number;
                stateAfter: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                leaves: string[];
            }[];
            createCheckpointHints: {
                actionCounter: number;
                oldCheckpointId: number;
                newCheckpointId: number;
            }[];
            commitCheckpointHints: {
                actionCounter: number;
                oldCheckpointId: number;
                newCheckpointId: number;
            }[];
            revertCheckpointHints: {
                stateAfter: {
                    noteHashTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    nullifierTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    publicDataTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    l1ToL2MessageTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                };
                actionCounter: number;
                oldCheckpointId: number;
                newCheckpointId: number;
                stateBefore: {
                    noteHashTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    nullifierTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    publicDataTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    l1ToL2MessageTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                };
            }[];
        }>;
        publicInputs: z.ZodEffects<z.ZodObject<{
            globalVariables: z.ZodEffects<z.ZodObject<{
                chainId: import("@aztec/foundation/schemas").ZodFor<import("@aztec/foundation/schemas").Fr>;
                version: import("@aztec/foundation/schemas").ZodFor<import("@aztec/foundation/schemas").Fr>;
                blockNumber: import("@aztec/foundation/schemas").ZodFor<import("@aztec/foundation/schemas").Fr>;
                slotNumber: import("@aztec/foundation/schemas").ZodFor<import("@aztec/foundation/schemas").Fr>;
                timestamp: import("@aztec/foundation/schemas").ZodFor<import("@aztec/foundation/schemas").Fr>;
                coinbase: import("@aztec/foundation/schemas").ZodFor<import("@aztec/foundation/schemas").EthAddress>;
                feeRecipient: import("@aztec/foundation/schemas").ZodFor<import("../aztec-address/index.js").AztecAddress>;
                gasFees: z.ZodEffects<z.ZodObject<{
                    feePerDaGas: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                    feePerL2Gas: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                }, "strip", z.ZodTypeAny, {
                    feePerDaGas: import("@aztec/foundation/schemas").Fr;
                    feePerL2Gas: import("@aztec/foundation/schemas").Fr;
                }, {
                    feePerDaGas: string;
                    feePerL2Gas: string;
                }>, import("../gas/gas_fees.js").GasFees, {
                    feePerDaGas: string;
                    feePerL2Gas: string;
                }>;
            }, "strip", z.ZodTypeAny, {
                chainId: import("@aztec/foundation/schemas").Fr;
                version: import("@aztec/foundation/schemas").Fr;
                blockNumber: import("@aztec/foundation/schemas").Fr;
                slotNumber: import("@aztec/foundation/schemas").Fr;
                timestamp: import("@aztec/foundation/schemas").Fr;
                coinbase: import("@aztec/foundation/schemas").EthAddress;
                feeRecipient: import("../aztec-address/index.js").AztecAddress;
                gasFees: import("../gas/gas_fees.js").GasFees;
            }, {
                gasFees: {
                    feePerDaGas: string;
                    feePerL2Gas: string;
                };
                chainId?: any;
                version?: any;
                blockNumber?: any;
                slotNumber?: any;
                timestamp?: any;
                coinbase?: any;
                feeRecipient?: any;
            }>, import("../tx/global_variables.js").GlobalVariables, {
                gasFees: {
                    feePerDaGas: string;
                    feePerL2Gas: string;
                };
                chainId?: any;
                version?: any;
                blockNumber?: any;
                slotNumber?: any;
                timestamp?: any;
                coinbase?: any;
                feeRecipient?: any;
            }>;
            startTreeSnapshots: z.ZodEffects<z.ZodObject<{
                l1ToL2MessageTree: z.ZodEffects<z.ZodObject<{
                    root: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                    nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    root: import("@aztec/foundation/schemas").Fr;
                    nextAvailableLeafIndex: number;
                }, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>, import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>;
                noteHashTree: z.ZodEffects<z.ZodObject<{
                    root: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                    nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    root: import("@aztec/foundation/schemas").Fr;
                    nextAvailableLeafIndex: number;
                }, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>, import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>;
                nullifierTree: z.ZodEffects<z.ZodObject<{
                    root: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                    nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    root: import("@aztec/foundation/schemas").Fr;
                    nextAvailableLeafIndex: number;
                }, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>, import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>;
                publicDataTree: z.ZodEffects<z.ZodObject<{
                    root: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                    nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    root: import("@aztec/foundation/schemas").Fr;
                    nextAvailableLeafIndex: number;
                }, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>, import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>;
            }, "strip", z.ZodTypeAny, {
                noteHashTree: import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot;
                nullifierTree: import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot;
                publicDataTree: import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot;
                l1ToL2MessageTree: import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot;
            }, {
                noteHashTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                nullifierTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                publicDataTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                l1ToL2MessageTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
            }>, import("../tx/tree_snapshots.js").TreeSnapshots, {
                noteHashTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                nullifierTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                publicDataTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                l1ToL2MessageTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
            }>;
            startGasUsed: z.ZodEffects<z.ZodObject<{
                daGas: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                l2Gas: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                daGas: number;
                l2Gas: number;
            }, {
                daGas: string | number | bigint;
                l2Gas: string | number | bigint;
            }>, import("../gas/gas.js").Gas, {
                daGas: string | number | bigint;
                l2Gas: string | number | bigint;
            }>;
            gasSettings: z.ZodEffects<z.ZodObject<{
                gasLimits: z.ZodEffects<z.ZodObject<{
                    daGas: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                    l2Gas: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    daGas: number;
                    l2Gas: number;
                }, {
                    daGas: string | number | bigint;
                    l2Gas: string | number | bigint;
                }>, import("../gas/gas.js").Gas, {
                    daGas: string | number | bigint;
                    l2Gas: string | number | bigint;
                }>;
                teardownGasLimits: z.ZodEffects<z.ZodObject<{
                    daGas: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                    l2Gas: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    daGas: number;
                    l2Gas: number;
                }, {
                    daGas: string | number | bigint;
                    l2Gas: string | number | bigint;
                }>, import("../gas/gas.js").Gas, {
                    daGas: string | number | bigint;
                    l2Gas: string | number | bigint;
                }>;
                maxFeesPerGas: z.ZodEffects<z.ZodObject<{
                    feePerDaGas: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                    feePerL2Gas: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                }, "strip", z.ZodTypeAny, {
                    feePerDaGas: import("@aztec/foundation/schemas").Fr;
                    feePerL2Gas: import("@aztec/foundation/schemas").Fr;
                }, {
                    feePerDaGas: string;
                    feePerL2Gas: string;
                }>, import("../gas/gas_fees.js").GasFees, {
                    feePerDaGas: string;
                    feePerL2Gas: string;
                }>;
                maxPriorityFeesPerGas: z.ZodEffects<z.ZodObject<{
                    feePerDaGas: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                    feePerL2Gas: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                }, "strip", z.ZodTypeAny, {
                    feePerDaGas: import("@aztec/foundation/schemas").Fr;
                    feePerL2Gas: import("@aztec/foundation/schemas").Fr;
                }, {
                    feePerDaGas: string;
                    feePerL2Gas: string;
                }>, import("../gas/gas_fees.js").GasFees, {
                    feePerDaGas: string;
                    feePerL2Gas: string;
                }>;
            }, "strip", z.ZodTypeAny, {
                gasLimits: import("../gas/gas.js").Gas;
                teardownGasLimits: import("../gas/gas.js").Gas;
                maxFeesPerGas: import("../gas/gas_fees.js").GasFees;
                maxPriorityFeesPerGas: import("../gas/gas_fees.js").GasFees;
            }, {
                gasLimits: {
                    daGas: string | number | bigint;
                    l2Gas: string | number | bigint;
                };
                teardownGasLimits: {
                    daGas: string | number | bigint;
                    l2Gas: string | number | bigint;
                };
                maxFeesPerGas: {
                    feePerDaGas: string;
                    feePerL2Gas: string;
                };
                maxPriorityFeesPerGas: {
                    feePerDaGas: string;
                    feePerL2Gas: string;
                };
            }>, import("../gas/gas_settings.js").GasSettings, {
                gasLimits: {
                    daGas: string | number | bigint;
                    l2Gas: string | number | bigint;
                };
                teardownGasLimits: {
                    daGas: string | number | bigint;
                    l2Gas: string | number | bigint;
                };
                maxFeesPerGas: {
                    feePerDaGas: string;
                    feePerL2Gas: string;
                };
                maxPriorityFeesPerGas: {
                    feePerDaGas: string;
                    feePerL2Gas: string;
                };
            }>;
            feePayer: import("@aztec/foundation/schemas").ZodFor<import("../aztec-address/index.js").AztecAddress>;
            publicSetupCallRequests: z.ZodArray<z.ZodEffects<z.ZodObject<{
                msgSender: import("@aztec/foundation/schemas").ZodFor<import("../aztec-address/index.js").AztecAddress>;
                contractAddress: import("@aztec/foundation/schemas").ZodFor<import("../aztec-address/index.js").AztecAddress>;
                isStaticCall: z.ZodBoolean;
                calldataHash: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
            }, "strip", z.ZodTypeAny, {
                contractAddress: import("../aztec-address/index.js").AztecAddress;
                msgSender: import("../aztec-address/index.js").AztecAddress;
                isStaticCall: boolean;
                calldataHash: import("@aztec/foundation/schemas").Fr;
            }, {
                isStaticCall: boolean;
                calldataHash: string;
                contractAddress?: any;
                msgSender?: any;
            }>, import("../kernel/public_call_request.js").PublicCallRequest, {
                isStaticCall: boolean;
                calldataHash: string;
                contractAddress?: any;
                msgSender?: any;
            }>, "many">;
            publicAppLogicCallRequests: z.ZodArray<z.ZodEffects<z.ZodObject<{
                msgSender: import("@aztec/foundation/schemas").ZodFor<import("../aztec-address/index.js").AztecAddress>;
                contractAddress: import("@aztec/foundation/schemas").ZodFor<import("../aztec-address/index.js").AztecAddress>;
                isStaticCall: z.ZodBoolean;
                calldataHash: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
            }, "strip", z.ZodTypeAny, {
                contractAddress: import("../aztec-address/index.js").AztecAddress;
                msgSender: import("../aztec-address/index.js").AztecAddress;
                isStaticCall: boolean;
                calldataHash: import("@aztec/foundation/schemas").Fr;
            }, {
                isStaticCall: boolean;
                calldataHash: string;
                contractAddress?: any;
                msgSender?: any;
            }>, import("../kernel/public_call_request.js").PublicCallRequest, {
                isStaticCall: boolean;
                calldataHash: string;
                contractAddress?: any;
                msgSender?: any;
            }>, "many">;
            publicTeardownCallRequest: z.ZodEffects<z.ZodObject<{
                msgSender: import("@aztec/foundation/schemas").ZodFor<import("../aztec-address/index.js").AztecAddress>;
                contractAddress: import("@aztec/foundation/schemas").ZodFor<import("../aztec-address/index.js").AztecAddress>;
                isStaticCall: z.ZodBoolean;
                calldataHash: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
            }, "strip", z.ZodTypeAny, {
                contractAddress: import("../aztec-address/index.js").AztecAddress;
                msgSender: import("../aztec-address/index.js").AztecAddress;
                isStaticCall: boolean;
                calldataHash: import("@aztec/foundation/schemas").Fr;
            }, {
                isStaticCall: boolean;
                calldataHash: string;
                contractAddress?: any;
                msgSender?: any;
            }>, import("../kernel/public_call_request.js").PublicCallRequest, {
                isStaticCall: boolean;
                calldataHash: string;
                contractAddress?: any;
                msgSender?: any;
            }>;
            previousNonRevertibleAccumulatedDataArrayLengths: z.ZodEffects<z.ZodObject<{
                noteHashes: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                nullifiers: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                l2ToL1Msgs: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                noteHashes: number;
                nullifiers: number;
                l2ToL1Msgs: number;
            }, {
                noteHashes: string | number | bigint;
                nullifiers: string | number | bigint;
                l2ToL1Msgs: string | number | bigint;
            }>, import("../kernel/private_to_avm_accumulated_data.js").PrivateToAvmAccumulatedDataArrayLengths, {
                noteHashes: string | number | bigint;
                nullifiers: string | number | bigint;
                l2ToL1Msgs: string | number | bigint;
            }>;
            previousRevertibleAccumulatedDataArrayLengths: z.ZodEffects<z.ZodObject<{
                noteHashes: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                nullifiers: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                l2ToL1Msgs: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                noteHashes: number;
                nullifiers: number;
                l2ToL1Msgs: number;
            }, {
                noteHashes: string | number | bigint;
                nullifiers: string | number | bigint;
                l2ToL1Msgs: string | number | bigint;
            }>, import("../kernel/private_to_avm_accumulated_data.js").PrivateToAvmAccumulatedDataArrayLengths, {
                noteHashes: string | number | bigint;
                nullifiers: string | number | bigint;
                l2ToL1Msgs: string | number | bigint;
            }>;
            previousNonRevertibleAccumulatedData: z.ZodEffects<z.ZodObject<{
                noteHashes: z.ZodArray<z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>, "many">;
                nullifiers: z.ZodArray<z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>, "many">;
                l2ToL1Msgs: z.ZodArray<z.ZodEffects<z.ZodObject<{
                    message: z.ZodEffects<z.ZodObject<{
                        recipient: z.ZodType<import("@aztec/foundation/schemas").EthAddress, any, string>;
                        content: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                        counter: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        counter: number;
                        recipient: import("@aztec/foundation/schemas").EthAddress;
                        content: import("@aztec/foundation/schemas").Fr;
                    }, {
                        counter: number;
                        recipient: string;
                        content: string;
                    }>, import("../messaging/l2_to_l1_message.js").L2ToL1Message, {
                        counter: number;
                        recipient: string;
                        content: string;
                    }>;
                    contractAddress: import("@aztec/foundation/schemas").ZodFor<import("../aztec-address/index.js").AztecAddress>;
                }, "strip", z.ZodTypeAny, {
                    message: import("../messaging/l2_to_l1_message.js").L2ToL1Message;
                    contractAddress: import("../aztec-address/index.js").AztecAddress;
                }, {
                    message: {
                        counter: number;
                        recipient: string;
                        content: string;
                    };
                    contractAddress?: any;
                }>, import("../messaging/l2_to_l1_message.js").ScopedL2ToL1Message, {
                    message: {
                        counter: number;
                        recipient: string;
                        content: string;
                    };
                    contractAddress?: any;
                }>, "many">;
            }, "strip", z.ZodTypeAny, {
                noteHashes: import("@aztec/foundation/schemas").Fr[];
                nullifiers: import("@aztec/foundation/schemas").Fr[];
                l2ToL1Msgs: import("../messaging/l2_to_l1_message.js").ScopedL2ToL1Message[];
            }, {
                noteHashes: string[];
                nullifiers: string[];
                l2ToL1Msgs: {
                    message: {
                        counter: number;
                        recipient: string;
                        content: string;
                    };
                    contractAddress?: any;
                }[];
            }>, import("../kernel/private_to_avm_accumulated_data.js").PrivateToAvmAccumulatedData, {
                noteHashes: string[];
                nullifiers: string[];
                l2ToL1Msgs: {
                    message: {
                        counter: number;
                        recipient: string;
                        content: string;
                    };
                    contractAddress?: any;
                }[];
            }>;
            previousRevertibleAccumulatedData: z.ZodEffects<z.ZodObject<{
                noteHashes: z.ZodArray<z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>, "many">;
                nullifiers: z.ZodArray<z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>, "many">;
                l2ToL1Msgs: z.ZodArray<z.ZodEffects<z.ZodObject<{
                    message: z.ZodEffects<z.ZodObject<{
                        recipient: z.ZodType<import("@aztec/foundation/schemas").EthAddress, any, string>;
                        content: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                        counter: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        counter: number;
                        recipient: import("@aztec/foundation/schemas").EthAddress;
                        content: import("@aztec/foundation/schemas").Fr;
                    }, {
                        counter: number;
                        recipient: string;
                        content: string;
                    }>, import("../messaging/l2_to_l1_message.js").L2ToL1Message, {
                        counter: number;
                        recipient: string;
                        content: string;
                    }>;
                    contractAddress: import("@aztec/foundation/schemas").ZodFor<import("../aztec-address/index.js").AztecAddress>;
                }, "strip", z.ZodTypeAny, {
                    message: import("../messaging/l2_to_l1_message.js").L2ToL1Message;
                    contractAddress: import("../aztec-address/index.js").AztecAddress;
                }, {
                    message: {
                        counter: number;
                        recipient: string;
                        content: string;
                    };
                    contractAddress?: any;
                }>, import("../messaging/l2_to_l1_message.js").ScopedL2ToL1Message, {
                    message: {
                        counter: number;
                        recipient: string;
                        content: string;
                    };
                    contractAddress?: any;
                }>, "many">;
            }, "strip", z.ZodTypeAny, {
                noteHashes: import("@aztec/foundation/schemas").Fr[];
                nullifiers: import("@aztec/foundation/schemas").Fr[];
                l2ToL1Msgs: import("../messaging/l2_to_l1_message.js").ScopedL2ToL1Message[];
            }, {
                noteHashes: string[];
                nullifiers: string[];
                l2ToL1Msgs: {
                    message: {
                        counter: number;
                        recipient: string;
                        content: string;
                    };
                    contractAddress?: any;
                }[];
            }>, import("../kernel/private_to_avm_accumulated_data.js").PrivateToAvmAccumulatedData, {
                noteHashes: string[];
                nullifiers: string[];
                l2ToL1Msgs: {
                    message: {
                        counter: number;
                        recipient: string;
                        content: string;
                    };
                    contractAddress?: any;
                }[];
            }>;
            endTreeSnapshots: z.ZodEffects<z.ZodObject<{
                l1ToL2MessageTree: z.ZodEffects<z.ZodObject<{
                    root: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                    nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    root: import("@aztec/foundation/schemas").Fr;
                    nextAvailableLeafIndex: number;
                }, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>, import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>;
                noteHashTree: z.ZodEffects<z.ZodObject<{
                    root: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                    nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    root: import("@aztec/foundation/schemas").Fr;
                    nextAvailableLeafIndex: number;
                }, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>, import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>;
                nullifierTree: z.ZodEffects<z.ZodObject<{
                    root: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                    nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    root: import("@aztec/foundation/schemas").Fr;
                    nextAvailableLeafIndex: number;
                }, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>, import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>;
                publicDataTree: z.ZodEffects<z.ZodObject<{
                    root: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                    nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    root: import("@aztec/foundation/schemas").Fr;
                    nextAvailableLeafIndex: number;
                }, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>, import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot, {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                }>;
            }, "strip", z.ZodTypeAny, {
                noteHashTree: import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot;
                nullifierTree: import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot;
                publicDataTree: import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot;
                l1ToL2MessageTree: import("../trees/append_only_tree_snapshot.js").AppendOnlyTreeSnapshot;
            }, {
                noteHashTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                nullifierTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                publicDataTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                l1ToL2MessageTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
            }>, import("../tx/tree_snapshots.js").TreeSnapshots, {
                noteHashTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                nullifierTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                publicDataTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                l1ToL2MessageTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
            }>;
            endGasUsed: z.ZodEffects<z.ZodObject<{
                daGas: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                l2Gas: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                daGas: number;
                l2Gas: number;
            }, {
                daGas: string | number | bigint;
                l2Gas: string | number | bigint;
            }>, import("../gas/gas.js").Gas, {
                daGas: string | number | bigint;
                l2Gas: string | number | bigint;
            }>;
            accumulatedData: z.ZodEffects<z.ZodObject<{
                noteHashes: z.ZodArray<z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>, "many">;
                nullifiers: z.ZodArray<z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>, "many">;
                l2ToL1Msgs: z.ZodArray<z.ZodEffects<z.ZodObject<{
                    message: z.ZodEffects<z.ZodObject<{
                        recipient: z.ZodType<import("@aztec/foundation/schemas").EthAddress, any, string>;
                        content: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                        counter: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        counter: number;
                        recipient: import("@aztec/foundation/schemas").EthAddress;
                        content: import("@aztec/foundation/schemas").Fr;
                    }, {
                        counter: number;
                        recipient: string;
                        content: string;
                    }>, import("../messaging/l2_to_l1_message.js").L2ToL1Message, {
                        counter: number;
                        recipient: string;
                        content: string;
                    }>;
                    contractAddress: import("@aztec/foundation/schemas").ZodFor<import("../aztec-address/index.js").AztecAddress>;
                }, "strip", z.ZodTypeAny, {
                    message: import("../messaging/l2_to_l1_message.js").L2ToL1Message;
                    contractAddress: import("../aztec-address/index.js").AztecAddress;
                }, {
                    message: {
                        counter: number;
                        recipient: string;
                        content: string;
                    };
                    contractAddress?: any;
                }>, import("../messaging/l2_to_l1_message.js").ScopedL2ToL1Message, {
                    message: {
                        counter: number;
                        recipient: string;
                        content: string;
                    };
                    contractAddress?: any;
                }>, "many">;
                publicLogs: z.ZodArray<import("@aztec/foundation/schemas").ZodFor<import("../logs/public_log.js").PublicLog>, "many">;
                publicDataWrites: z.ZodArray<z.ZodEffects<z.ZodObject<{
                    leafSlot: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                    value: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
                }, "strip", z.ZodTypeAny, {
                    value: import("@aztec/foundation/schemas").Fr;
                    leafSlot: import("@aztec/foundation/schemas").Fr;
                }, {
                    value: string;
                    leafSlot: string;
                }>, import("./public_data_write.js").PublicDataWrite, {
                    value: string;
                    leafSlot: string;
                }>, "many">;
            }, "strip", z.ZodTypeAny, {
                noteHashes: import("@aztec/foundation/schemas").Fr[];
                nullifiers: import("@aztec/foundation/schemas").Fr[];
                l2ToL1Msgs: import("../messaging/l2_to_l1_message.js").ScopedL2ToL1Message[];
                publicLogs: import("../logs/public_log.js").PublicLog[];
                publicDataWrites: import("./public_data_write.js").PublicDataWrite[];
            }, {
                noteHashes: string[];
                nullifiers: string[];
                l2ToL1Msgs: {
                    message: {
                        counter: number;
                        recipient: string;
                        content: string;
                    };
                    contractAddress?: any;
                }[];
                publicLogs: any[];
                publicDataWrites: {
                    value: string;
                    leafSlot: string;
                }[];
            }>, import("./avm_accumulated_data.js").AvmAccumulatedData, {
                noteHashes: string[];
                nullifiers: string[];
                l2ToL1Msgs: {
                    message: {
                        counter: number;
                        recipient: string;
                        content: string;
                    };
                    contractAddress?: any;
                }[];
                publicLogs: any[];
                publicDataWrites: {
                    value: string;
                    leafSlot: string;
                }[];
            }>;
            transactionFee: z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>;
            reverted: z.ZodBoolean;
        }, "strip", z.ZodTypeAny, {
            globalVariables: import("../tx/global_variables.js").GlobalVariables;
            gasSettings: import("../gas/gas_settings.js").GasSettings;
            publicTeardownCallRequest: import("../kernel/public_call_request.js").PublicCallRequest;
            transactionFee: import("@aztec/foundation/schemas").Fr;
            feePayer: import("../aztec-address/index.js").AztecAddress;
            startTreeSnapshots: import("../tx/tree_snapshots.js").TreeSnapshots;
            startGasUsed: import("../gas/gas.js").Gas;
            publicSetupCallRequests: import("../kernel/public_call_request.js").PublicCallRequest[];
            publicAppLogicCallRequests: import("../kernel/public_call_request.js").PublicCallRequest[];
            previousNonRevertibleAccumulatedDataArrayLengths: import("../kernel/private_to_avm_accumulated_data.js").PrivateToAvmAccumulatedDataArrayLengths;
            previousRevertibleAccumulatedDataArrayLengths: import("../kernel/private_to_avm_accumulated_data.js").PrivateToAvmAccumulatedDataArrayLengths;
            previousNonRevertibleAccumulatedData: import("../kernel/private_to_avm_accumulated_data.js").PrivateToAvmAccumulatedData;
            previousRevertibleAccumulatedData: import("../kernel/private_to_avm_accumulated_data.js").PrivateToAvmAccumulatedData;
            endTreeSnapshots: import("../tx/tree_snapshots.js").TreeSnapshots;
            endGasUsed: import("../gas/gas.js").Gas;
            accumulatedData: import("./avm_accumulated_data.js").AvmAccumulatedData;
            reverted: boolean;
        }, {
            globalVariables: {
                gasFees: {
                    feePerDaGas: string;
                    feePerL2Gas: string;
                };
                chainId?: any;
                version?: any;
                blockNumber?: any;
                slotNumber?: any;
                timestamp?: any;
                coinbase?: any;
                feeRecipient?: any;
            };
            gasSettings: {
                gasLimits: {
                    daGas: string | number | bigint;
                    l2Gas: string | number | bigint;
                };
                teardownGasLimits: {
                    daGas: string | number | bigint;
                    l2Gas: string | number | bigint;
                };
                maxFeesPerGas: {
                    feePerDaGas: string;
                    feePerL2Gas: string;
                };
                maxPriorityFeesPerGas: {
                    feePerDaGas: string;
                    feePerL2Gas: string;
                };
            };
            publicTeardownCallRequest: {
                isStaticCall: boolean;
                calldataHash: string;
                contractAddress?: any;
                msgSender?: any;
            };
            transactionFee: string;
            startTreeSnapshots: {
                noteHashTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                nullifierTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                publicDataTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                l1ToL2MessageTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
            };
            startGasUsed: {
                daGas: string | number | bigint;
                l2Gas: string | number | bigint;
            };
            publicSetupCallRequests: {
                isStaticCall: boolean;
                calldataHash: string;
                contractAddress?: any;
                msgSender?: any;
            }[];
            publicAppLogicCallRequests: {
                isStaticCall: boolean;
                calldataHash: string;
                contractAddress?: any;
                msgSender?: any;
            }[];
            previousNonRevertibleAccumulatedDataArrayLengths: {
                noteHashes: string | number | bigint;
                nullifiers: string | number | bigint;
                l2ToL1Msgs: string | number | bigint;
            };
            previousRevertibleAccumulatedDataArrayLengths: {
                noteHashes: string | number | bigint;
                nullifiers: string | number | bigint;
                l2ToL1Msgs: string | number | bigint;
            };
            previousNonRevertibleAccumulatedData: {
                noteHashes: string[];
                nullifiers: string[];
                l2ToL1Msgs: {
                    message: {
                        counter: number;
                        recipient: string;
                        content: string;
                    };
                    contractAddress?: any;
                }[];
            };
            previousRevertibleAccumulatedData: {
                noteHashes: string[];
                nullifiers: string[];
                l2ToL1Msgs: {
                    message: {
                        counter: number;
                        recipient: string;
                        content: string;
                    };
                    contractAddress?: any;
                }[];
            };
            endTreeSnapshots: {
                noteHashTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                nullifierTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                publicDataTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                l1ToL2MessageTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
            };
            endGasUsed: {
                daGas: string | number | bigint;
                l2Gas: string | number | bigint;
            };
            accumulatedData: {
                noteHashes: string[];
                nullifiers: string[];
                l2ToL1Msgs: {
                    message: {
                        counter: number;
                        recipient: string;
                        content: string;
                    };
                    contractAddress?: any;
                }[];
                publicLogs: any[];
                publicDataWrites: {
                    value: string;
                    leafSlot: string;
                }[];
            };
            reverted: boolean;
            feePayer?: any;
        }>, import("./avm_circuit_public_inputs.js").AvmCircuitPublicInputs, {
            globalVariables: {
                gasFees: {
                    feePerDaGas: string;
                    feePerL2Gas: string;
                };
                chainId?: any;
                version?: any;
                blockNumber?: any;
                slotNumber?: any;
                timestamp?: any;
                coinbase?: any;
                feeRecipient?: any;
            };
            gasSettings: {
                gasLimits: {
                    daGas: string | number | bigint;
                    l2Gas: string | number | bigint;
                };
                teardownGasLimits: {
                    daGas: string | number | bigint;
                    l2Gas: string | number | bigint;
                };
                maxFeesPerGas: {
                    feePerDaGas: string;
                    feePerL2Gas: string;
                };
                maxPriorityFeesPerGas: {
                    feePerDaGas: string;
                    feePerL2Gas: string;
                };
            };
            publicTeardownCallRequest: {
                isStaticCall: boolean;
                calldataHash: string;
                contractAddress?: any;
                msgSender?: any;
            };
            transactionFee: string;
            startTreeSnapshots: {
                noteHashTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                nullifierTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                publicDataTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                l1ToL2MessageTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
            };
            startGasUsed: {
                daGas: string | number | bigint;
                l2Gas: string | number | bigint;
            };
            publicSetupCallRequests: {
                isStaticCall: boolean;
                calldataHash: string;
                contractAddress?: any;
                msgSender?: any;
            }[];
            publicAppLogicCallRequests: {
                isStaticCall: boolean;
                calldataHash: string;
                contractAddress?: any;
                msgSender?: any;
            }[];
            previousNonRevertibleAccumulatedDataArrayLengths: {
                noteHashes: string | number | bigint;
                nullifiers: string | number | bigint;
                l2ToL1Msgs: string | number | bigint;
            };
            previousRevertibleAccumulatedDataArrayLengths: {
                noteHashes: string | number | bigint;
                nullifiers: string | number | bigint;
                l2ToL1Msgs: string | number | bigint;
            };
            previousNonRevertibleAccumulatedData: {
                noteHashes: string[];
                nullifiers: string[];
                l2ToL1Msgs: {
                    message: {
                        counter: number;
                        recipient: string;
                        content: string;
                    };
                    contractAddress?: any;
                }[];
            };
            previousRevertibleAccumulatedData: {
                noteHashes: string[];
                nullifiers: string[];
                l2ToL1Msgs: {
                    message: {
                        counter: number;
                        recipient: string;
                        content: string;
                    };
                    contractAddress?: any;
                }[];
            };
            endTreeSnapshots: {
                noteHashTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                nullifierTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                publicDataTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                l1ToL2MessageTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
            };
            endGasUsed: {
                daGas: string | number | bigint;
                l2Gas: string | number | bigint;
            };
            accumulatedData: {
                noteHashes: string[];
                nullifiers: string[];
                l2ToL1Msgs: {
                    message: {
                        counter: number;
                        recipient: string;
                        content: string;
                    };
                    contractAddress?: any;
                }[];
                publicLogs: any[];
                publicDataWrites: {
                    value: string;
                    leafSlot: string;
                }[];
            };
            reverted: boolean;
            feePayer?: any;
        }>;
    }, "strip", z.ZodTypeAny, {
        publicInputs: import("./avm_circuit_public_inputs.js").AvmCircuitPublicInputs;
        hints: import("./avm.js").AvmExecutionHints;
    }, {
        publicInputs: {
            globalVariables: {
                gasFees: {
                    feePerDaGas: string;
                    feePerL2Gas: string;
                };
                chainId?: any;
                version?: any;
                blockNumber?: any;
                slotNumber?: any;
                timestamp?: any;
                coinbase?: any;
                feeRecipient?: any;
            };
            gasSettings: {
                gasLimits: {
                    daGas: string | number | bigint;
                    l2Gas: string | number | bigint;
                };
                teardownGasLimits: {
                    daGas: string | number | bigint;
                    l2Gas: string | number | bigint;
                };
                maxFeesPerGas: {
                    feePerDaGas: string;
                    feePerL2Gas: string;
                };
                maxPriorityFeesPerGas: {
                    feePerDaGas: string;
                    feePerL2Gas: string;
                };
            };
            publicTeardownCallRequest: {
                isStaticCall: boolean;
                calldataHash: string;
                contractAddress?: any;
                msgSender?: any;
            };
            transactionFee: string;
            startTreeSnapshots: {
                noteHashTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                nullifierTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                publicDataTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                l1ToL2MessageTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
            };
            startGasUsed: {
                daGas: string | number | bigint;
                l2Gas: string | number | bigint;
            };
            publicSetupCallRequests: {
                isStaticCall: boolean;
                calldataHash: string;
                contractAddress?: any;
                msgSender?: any;
            }[];
            publicAppLogicCallRequests: {
                isStaticCall: boolean;
                calldataHash: string;
                contractAddress?: any;
                msgSender?: any;
            }[];
            previousNonRevertibleAccumulatedDataArrayLengths: {
                noteHashes: string | number | bigint;
                nullifiers: string | number | bigint;
                l2ToL1Msgs: string | number | bigint;
            };
            previousRevertibleAccumulatedDataArrayLengths: {
                noteHashes: string | number | bigint;
                nullifiers: string | number | bigint;
                l2ToL1Msgs: string | number | bigint;
            };
            previousNonRevertibleAccumulatedData: {
                noteHashes: string[];
                nullifiers: string[];
                l2ToL1Msgs: {
                    message: {
                        counter: number;
                        recipient: string;
                        content: string;
                    };
                    contractAddress?: any;
                }[];
            };
            previousRevertibleAccumulatedData: {
                noteHashes: string[];
                nullifiers: string[];
                l2ToL1Msgs: {
                    message: {
                        counter: number;
                        recipient: string;
                        content: string;
                    };
                    contractAddress?: any;
                }[];
            };
            endTreeSnapshots: {
                noteHashTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                nullifierTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                publicDataTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                l1ToL2MessageTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
            };
            endGasUsed: {
                daGas: string | number | bigint;
                l2Gas: string | number | bigint;
            };
            accumulatedData: {
                noteHashes: string[];
                nullifiers: string[];
                l2ToL1Msgs: {
                    message: {
                        counter: number;
                        recipient: string;
                        content: string;
                    };
                    contractAddress?: any;
                }[];
                publicLogs: any[];
                publicDataWrites: {
                    value: string;
                    leafSlot: string;
                }[];
            };
            reverted: boolean;
            feePayer?: any;
        };
        hints: {
            tx: {
                hash: string;
                globalVariables: {
                    gasFees: {
                        feePerDaGas: string;
                        feePerL2Gas: string;
                    };
                    chainId?: any;
                    version?: any;
                    blockNumber?: any;
                    slotNumber?: any;
                    timestamp?: any;
                    coinbase?: any;
                    feeRecipient?: any;
                };
                nonRevertibleAccumulatedData: {
                    noteHashes: string[];
                    nullifiers: string[];
                };
                revertibleAccumulatedData: {
                    noteHashes: string[];
                    nullifiers: string[];
                };
                setupEnqueuedCalls: {
                    isStaticCall: boolean;
                    calldata: string[];
                    contractAddress?: any;
                    msgSender?: any;
                }[];
                appLogicEnqueuedCalls: {
                    isStaticCall: boolean;
                    calldata: string[];
                    contractAddress?: any;
                    msgSender?: any;
                }[];
                teardownEnqueuedCall: {
                    isStaticCall: boolean;
                    calldata: string[];
                    contractAddress?: any;
                    msgSender?: any;
                } | null;
            };
            contractInstances: {
                publicKeys: {
                    masterNullifierPublicKey: string;
                    masterIncomingViewingPublicKey: string;
                    masterOutgoingViewingPublicKey: string;
                    masterTaggingPublicKey: string;
                };
                salt: string;
                currentContractClassId: string;
                originalContractClassId: string;
                initializationHash: string;
                address?: any;
                deployer?: any;
            }[];
            contractClasses: {
                classId: string;
                artifactHash: string;
                privateFunctionsRoot: string;
                packedBytecode: string | {
                    type: "Buffer";
                    data: number[];
                };
            }[];
            bytecodeCommitments: {
                classId: string;
                commitment: string;
            }[];
            startingTreeRoots: {
                noteHashTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                nullifierTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                publicDataTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                l1ToL2MessageTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
            };
            getSiblingPathHints: {
                path: string[];
                index: string | number | bigint;
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                treeId: number;
            }[];
            getPreviousValueIndexHints: {
                value: string;
                index: string | number | bigint;
                alreadyPresent: boolean;
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                treeId: number;
            }[];
            getLeafPreimageHintsPublicDataTree: {
                index: string | number | bigint;
                leafPreimage: {
                    leaf: {
                        nullifier: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                } | {
                    leaf: {
                        value: string;
                        slot: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                };
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
            }[];
            getLeafPreimageHintsNullifierTree: {
                index: string | number | bigint;
                leafPreimage: {
                    leaf: {
                        nullifier: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                } | {
                    leaf: {
                        value: string;
                        slot: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                };
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
            }[];
            getLeafValueHints: {
                value: string;
                index: string | number | bigint;
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                treeId: number;
            }[];
            sequentialInsertHintsPublicDataTree: {
                leaf: {
                    nullifier: string;
                } | {
                    value: string;
                    slot: string;
                };
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                treeId: number;
                stateAfter: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                lowLeavesWitnessData: {
                    path: string[];
                    index: string | number | bigint;
                    leaf: {
                        leaf: {
                            nullifier: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    } | {
                        leaf: {
                            value: string;
                            slot: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    };
                };
                insertionWitnessData: {
                    path: string[];
                    index: string | number | bigint;
                    leaf: {
                        leaf: {
                            nullifier: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    } | {
                        leaf: {
                            value: string;
                            slot: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    };
                };
            }[];
            sequentialInsertHintsNullifierTree: {
                leaf: {
                    nullifier: string;
                } | {
                    value: string;
                    slot: string;
                };
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                treeId: number;
                stateAfter: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                lowLeavesWitnessData: {
                    path: string[];
                    index: string | number | bigint;
                    leaf: {
                        leaf: {
                            nullifier: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    } | {
                        leaf: {
                            value: string;
                            slot: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    };
                };
                insertionWitnessData: {
                    path: string[];
                    index: string | number | bigint;
                    leaf: {
                        leaf: {
                            nullifier: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    } | {
                        leaf: {
                            value: string;
                            slot: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    };
                };
            }[];
            appendLeavesHints: {
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                treeId: number;
                stateAfter: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                leaves: string[];
            }[];
            createCheckpointHints: {
                actionCounter: number;
                oldCheckpointId: number;
                newCheckpointId: number;
            }[];
            commitCheckpointHints: {
                actionCounter: number;
                oldCheckpointId: number;
                newCheckpointId: number;
            }[];
            revertCheckpointHints: {
                stateAfter: {
                    noteHashTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    nullifierTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    publicDataTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    l1ToL2MessageTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                };
                actionCounter: number;
                oldCheckpointId: number;
                newCheckpointId: number;
                stateBefore: {
                    noteHashTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    nullifierTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    publicDataTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    l1ToL2MessageTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                };
            }[];
        };
    }>, AvmCircuitInputs, {
        publicInputs: {
            globalVariables: {
                gasFees: {
                    feePerDaGas: string;
                    feePerL2Gas: string;
                };
                chainId?: any;
                version?: any;
                blockNumber?: any;
                slotNumber?: any;
                timestamp?: any;
                coinbase?: any;
                feeRecipient?: any;
            };
            gasSettings: {
                gasLimits: {
                    daGas: string | number | bigint;
                    l2Gas: string | number | bigint;
                };
                teardownGasLimits: {
                    daGas: string | number | bigint;
                    l2Gas: string | number | bigint;
                };
                maxFeesPerGas: {
                    feePerDaGas: string;
                    feePerL2Gas: string;
                };
                maxPriorityFeesPerGas: {
                    feePerDaGas: string;
                    feePerL2Gas: string;
                };
            };
            publicTeardownCallRequest: {
                isStaticCall: boolean;
                calldataHash: string;
                contractAddress?: any;
                msgSender?: any;
            };
            transactionFee: string;
            startTreeSnapshots: {
                noteHashTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                nullifierTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                publicDataTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                l1ToL2MessageTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
            };
            startGasUsed: {
                daGas: string | number | bigint;
                l2Gas: string | number | bigint;
            };
            publicSetupCallRequests: {
                isStaticCall: boolean;
                calldataHash: string;
                contractAddress?: any;
                msgSender?: any;
            }[];
            publicAppLogicCallRequests: {
                isStaticCall: boolean;
                calldataHash: string;
                contractAddress?: any;
                msgSender?: any;
            }[];
            previousNonRevertibleAccumulatedDataArrayLengths: {
                noteHashes: string | number | bigint;
                nullifiers: string | number | bigint;
                l2ToL1Msgs: string | number | bigint;
            };
            previousRevertibleAccumulatedDataArrayLengths: {
                noteHashes: string | number | bigint;
                nullifiers: string | number | bigint;
                l2ToL1Msgs: string | number | bigint;
            };
            previousNonRevertibleAccumulatedData: {
                noteHashes: string[];
                nullifiers: string[];
                l2ToL1Msgs: {
                    message: {
                        counter: number;
                        recipient: string;
                        content: string;
                    };
                    contractAddress?: any;
                }[];
            };
            previousRevertibleAccumulatedData: {
                noteHashes: string[];
                nullifiers: string[];
                l2ToL1Msgs: {
                    message: {
                        counter: number;
                        recipient: string;
                        content: string;
                    };
                    contractAddress?: any;
                }[];
            };
            endTreeSnapshots: {
                noteHashTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                nullifierTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                publicDataTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                l1ToL2MessageTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
            };
            endGasUsed: {
                daGas: string | number | bigint;
                l2Gas: string | number | bigint;
            };
            accumulatedData: {
                noteHashes: string[];
                nullifiers: string[];
                l2ToL1Msgs: {
                    message: {
                        counter: number;
                        recipient: string;
                        content: string;
                    };
                    contractAddress?: any;
                }[];
                publicLogs: any[];
                publicDataWrites: {
                    value: string;
                    leafSlot: string;
                }[];
            };
            reverted: boolean;
            feePayer?: any;
        };
        hints: {
            tx: {
                hash: string;
                globalVariables: {
                    gasFees: {
                        feePerDaGas: string;
                        feePerL2Gas: string;
                    };
                    chainId?: any;
                    version?: any;
                    blockNumber?: any;
                    slotNumber?: any;
                    timestamp?: any;
                    coinbase?: any;
                    feeRecipient?: any;
                };
                nonRevertibleAccumulatedData: {
                    noteHashes: string[];
                    nullifiers: string[];
                };
                revertibleAccumulatedData: {
                    noteHashes: string[];
                    nullifiers: string[];
                };
                setupEnqueuedCalls: {
                    isStaticCall: boolean;
                    calldata: string[];
                    contractAddress?: any;
                    msgSender?: any;
                }[];
                appLogicEnqueuedCalls: {
                    isStaticCall: boolean;
                    calldata: string[];
                    contractAddress?: any;
                    msgSender?: any;
                }[];
                teardownEnqueuedCall: {
                    isStaticCall: boolean;
                    calldata: string[];
                    contractAddress?: any;
                    msgSender?: any;
                } | null;
            };
            contractInstances: {
                publicKeys: {
                    masterNullifierPublicKey: string;
                    masterIncomingViewingPublicKey: string;
                    masterOutgoingViewingPublicKey: string;
                    masterTaggingPublicKey: string;
                };
                salt: string;
                currentContractClassId: string;
                originalContractClassId: string;
                initializationHash: string;
                address?: any;
                deployer?: any;
            }[];
            contractClasses: {
                classId: string;
                artifactHash: string;
                privateFunctionsRoot: string;
                packedBytecode: string | {
                    type: "Buffer";
                    data: number[];
                };
            }[];
            bytecodeCommitments: {
                classId: string;
                commitment: string;
            }[];
            startingTreeRoots: {
                noteHashTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                nullifierTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                publicDataTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                l1ToL2MessageTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
            };
            getSiblingPathHints: {
                path: string[];
                index: string | number | bigint;
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                treeId: number;
            }[];
            getPreviousValueIndexHints: {
                value: string;
                index: string | number | bigint;
                alreadyPresent: boolean;
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                treeId: number;
            }[];
            getLeafPreimageHintsPublicDataTree: {
                index: string | number | bigint;
                leafPreimage: {
                    leaf: {
                        nullifier: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                } | {
                    leaf: {
                        value: string;
                        slot: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                };
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
            }[];
            getLeafPreimageHintsNullifierTree: {
                index: string | number | bigint;
                leafPreimage: {
                    leaf: {
                        nullifier: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                } | {
                    leaf: {
                        value: string;
                        slot: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                };
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
            }[];
            getLeafValueHints: {
                value: string;
                index: string | number | bigint;
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                treeId: number;
            }[];
            sequentialInsertHintsPublicDataTree: {
                leaf: {
                    nullifier: string;
                } | {
                    value: string;
                    slot: string;
                };
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                treeId: number;
                stateAfter: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                lowLeavesWitnessData: {
                    path: string[];
                    index: string | number | bigint;
                    leaf: {
                        leaf: {
                            nullifier: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    } | {
                        leaf: {
                            value: string;
                            slot: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    };
                };
                insertionWitnessData: {
                    path: string[];
                    index: string | number | bigint;
                    leaf: {
                        leaf: {
                            nullifier: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    } | {
                        leaf: {
                            value: string;
                            slot: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    };
                };
            }[];
            sequentialInsertHintsNullifierTree: {
                leaf: {
                    nullifier: string;
                } | {
                    value: string;
                    slot: string;
                };
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                treeId: number;
                stateAfter: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                lowLeavesWitnessData: {
                    path: string[];
                    index: string | number | bigint;
                    leaf: {
                        leaf: {
                            nullifier: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    } | {
                        leaf: {
                            value: string;
                            slot: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    };
                };
                insertionWitnessData: {
                    path: string[];
                    index: string | number | bigint;
                    leaf: {
                        leaf: {
                            nullifier: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    } | {
                        leaf: {
                            value: string;
                            slot: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    };
                };
            }[];
            appendLeavesHints: {
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                treeId: number;
                stateAfter: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                leaves: string[];
            }[];
            createCheckpointHints: {
                actionCounter: number;
                oldCheckpointId: number;
                newCheckpointId: number;
            }[];
            commitCheckpointHints: {
                actionCounter: number;
                oldCheckpointId: number;
                newCheckpointId: number;
            }[];
            revertCheckpointHints: {
                stateAfter: {
                    noteHashTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    nullifierTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    publicDataTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    l1ToL2MessageTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                };
                actionCounter: number;
                oldCheckpointId: number;
                newCheckpointId: number;
                stateBefore: {
                    noteHashTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    nullifierTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    publicDataTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    l1ToL2MessageTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                };
            }[];
        };
    }>;
}, "strip", z.ZodTypeAny, {
    type: ProvingRequestType.PUBLIC_VM;
    inputs: AvmCircuitInputs;
}, {
    type: ProvingRequestType.PUBLIC_VM;
    inputs: {
        publicInputs: {
            globalVariables: {
                gasFees: {
                    feePerDaGas: string;
                    feePerL2Gas: string;
                };
                chainId?: any;
                version?: any;
                blockNumber?: any;
                slotNumber?: any;
                timestamp?: any;
                coinbase?: any;
                feeRecipient?: any;
            };
            gasSettings: {
                gasLimits: {
                    daGas: string | number | bigint;
                    l2Gas: string | number | bigint;
                };
                teardownGasLimits: {
                    daGas: string | number | bigint;
                    l2Gas: string | number | bigint;
                };
                maxFeesPerGas: {
                    feePerDaGas: string;
                    feePerL2Gas: string;
                };
                maxPriorityFeesPerGas: {
                    feePerDaGas: string;
                    feePerL2Gas: string;
                };
            };
            publicTeardownCallRequest: {
                isStaticCall: boolean;
                calldataHash: string;
                contractAddress?: any;
                msgSender?: any;
            };
            transactionFee: string;
            startTreeSnapshots: {
                noteHashTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                nullifierTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                publicDataTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                l1ToL2MessageTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
            };
            startGasUsed: {
                daGas: string | number | bigint;
                l2Gas: string | number | bigint;
            };
            publicSetupCallRequests: {
                isStaticCall: boolean;
                calldataHash: string;
                contractAddress?: any;
                msgSender?: any;
            }[];
            publicAppLogicCallRequests: {
                isStaticCall: boolean;
                calldataHash: string;
                contractAddress?: any;
                msgSender?: any;
            }[];
            previousNonRevertibleAccumulatedDataArrayLengths: {
                noteHashes: string | number | bigint;
                nullifiers: string | number | bigint;
                l2ToL1Msgs: string | number | bigint;
            };
            previousRevertibleAccumulatedDataArrayLengths: {
                noteHashes: string | number | bigint;
                nullifiers: string | number | bigint;
                l2ToL1Msgs: string | number | bigint;
            };
            previousNonRevertibleAccumulatedData: {
                noteHashes: string[];
                nullifiers: string[];
                l2ToL1Msgs: {
                    message: {
                        counter: number;
                        recipient: string;
                        content: string;
                    };
                    contractAddress?: any;
                }[];
            };
            previousRevertibleAccumulatedData: {
                noteHashes: string[];
                nullifiers: string[];
                l2ToL1Msgs: {
                    message: {
                        counter: number;
                        recipient: string;
                        content: string;
                    };
                    contractAddress?: any;
                }[];
            };
            endTreeSnapshots: {
                noteHashTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                nullifierTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                publicDataTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                l1ToL2MessageTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
            };
            endGasUsed: {
                daGas: string | number | bigint;
                l2Gas: string | number | bigint;
            };
            accumulatedData: {
                noteHashes: string[];
                nullifiers: string[];
                l2ToL1Msgs: {
                    message: {
                        counter: number;
                        recipient: string;
                        content: string;
                    };
                    contractAddress?: any;
                }[];
                publicLogs: any[];
                publicDataWrites: {
                    value: string;
                    leafSlot: string;
                }[];
            };
            reverted: boolean;
            feePayer?: any;
        };
        hints: {
            tx: {
                hash: string;
                globalVariables: {
                    gasFees: {
                        feePerDaGas: string;
                        feePerL2Gas: string;
                    };
                    chainId?: any;
                    version?: any;
                    blockNumber?: any;
                    slotNumber?: any;
                    timestamp?: any;
                    coinbase?: any;
                    feeRecipient?: any;
                };
                nonRevertibleAccumulatedData: {
                    noteHashes: string[];
                    nullifiers: string[];
                };
                revertibleAccumulatedData: {
                    noteHashes: string[];
                    nullifiers: string[];
                };
                setupEnqueuedCalls: {
                    isStaticCall: boolean;
                    calldata: string[];
                    contractAddress?: any;
                    msgSender?: any;
                }[];
                appLogicEnqueuedCalls: {
                    isStaticCall: boolean;
                    calldata: string[];
                    contractAddress?: any;
                    msgSender?: any;
                }[];
                teardownEnqueuedCall: {
                    isStaticCall: boolean;
                    calldata: string[];
                    contractAddress?: any;
                    msgSender?: any;
                } | null;
            };
            contractInstances: {
                publicKeys: {
                    masterNullifierPublicKey: string;
                    masterIncomingViewingPublicKey: string;
                    masterOutgoingViewingPublicKey: string;
                    masterTaggingPublicKey: string;
                };
                salt: string;
                currentContractClassId: string;
                originalContractClassId: string;
                initializationHash: string;
                address?: any;
                deployer?: any;
            }[];
            contractClasses: {
                classId: string;
                artifactHash: string;
                privateFunctionsRoot: string;
                packedBytecode: string | {
                    type: "Buffer";
                    data: number[];
                };
            }[];
            bytecodeCommitments: {
                classId: string;
                commitment: string;
            }[];
            startingTreeRoots: {
                noteHashTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                nullifierTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                publicDataTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                l1ToL2MessageTree: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
            };
            getSiblingPathHints: {
                path: string[];
                index: string | number | bigint;
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                treeId: number;
            }[];
            getPreviousValueIndexHints: {
                value: string;
                index: string | number | bigint;
                alreadyPresent: boolean;
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                treeId: number;
            }[];
            getLeafPreimageHintsPublicDataTree: {
                index: string | number | bigint;
                leafPreimage: {
                    leaf: {
                        nullifier: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                } | {
                    leaf: {
                        value: string;
                        slot: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                };
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
            }[];
            getLeafPreimageHintsNullifierTree: {
                index: string | number | bigint;
                leafPreimage: {
                    leaf: {
                        nullifier: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                } | {
                    leaf: {
                        value: string;
                        slot: string;
                    };
                    nextKey: string;
                    nextIndex: string | number | bigint;
                };
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
            }[];
            getLeafValueHints: {
                value: string;
                index: string | number | bigint;
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                treeId: number;
            }[];
            sequentialInsertHintsPublicDataTree: {
                leaf: {
                    nullifier: string;
                } | {
                    value: string;
                    slot: string;
                };
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                treeId: number;
                stateAfter: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                lowLeavesWitnessData: {
                    path: string[];
                    index: string | number | bigint;
                    leaf: {
                        leaf: {
                            nullifier: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    } | {
                        leaf: {
                            value: string;
                            slot: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    };
                };
                insertionWitnessData: {
                    path: string[];
                    index: string | number | bigint;
                    leaf: {
                        leaf: {
                            nullifier: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    } | {
                        leaf: {
                            value: string;
                            slot: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    };
                };
            }[];
            sequentialInsertHintsNullifierTree: {
                leaf: {
                    nullifier: string;
                } | {
                    value: string;
                    slot: string;
                };
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                treeId: number;
                stateAfter: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                lowLeavesWitnessData: {
                    path: string[];
                    index: string | number | bigint;
                    leaf: {
                        leaf: {
                            nullifier: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    } | {
                        leaf: {
                            value: string;
                            slot: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    };
                };
                insertionWitnessData: {
                    path: string[];
                    index: string | number | bigint;
                    leaf: {
                        leaf: {
                            nullifier: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    } | {
                        leaf: {
                            value: string;
                            slot: string;
                        };
                        nextKey: string;
                        nextIndex: string | number | bigint;
                    };
                };
            }[];
            appendLeavesHints: {
                hintKey: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                treeId: number;
                stateAfter: {
                    root: string;
                    nextAvailableLeafIndex: string | number | bigint;
                };
                leaves: string[];
            }[];
            createCheckpointHints: {
                actionCounter: number;
                oldCheckpointId: number;
                newCheckpointId: number;
            }[];
            commitCheckpointHints: {
                actionCounter: number;
                oldCheckpointId: number;
                newCheckpointId: number;
            }[];
            revertCheckpointHints: {
                stateAfter: {
                    noteHashTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    nullifierTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    publicDataTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    l1ToL2MessageTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                };
                actionCounter: number;
                oldCheckpointId: number;
                newCheckpointId: number;
                stateBefore: {
                    noteHashTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    nullifierTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    publicDataTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                    l1ToL2MessageTree: {
                        root: string;
                        nextAvailableLeafIndex: string | number | bigint;
                    };
                };
            }[];
        };
    };
}>;
//# sourceMappingURL=avm_proving_request.d.ts.map