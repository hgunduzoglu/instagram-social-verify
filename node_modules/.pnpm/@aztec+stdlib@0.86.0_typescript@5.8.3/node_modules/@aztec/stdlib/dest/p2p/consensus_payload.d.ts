/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import { Fr } from '@aztec/foundation/fields';
import { BufferReader } from '@aztec/foundation/serialize';
import type { FieldsOf } from '@aztec/foundation/types';
import { z } from 'zod';
import type { L2Block } from '../block/l2_block.js';
import { BlockHeader } from '../tx/block_header.js';
import { TxHash } from '../tx/tx_hash.js';
import type { Signable, SignatureDomainSeparator } from './signature_utils.js';
export declare class ConsensusPayload implements Signable {
    /** The block header the attestation is made over */
    readonly header: BlockHeader;
    readonly archive: Fr;
    /** The sequence of transactions in the block */
    readonly txHashes: TxHash[];
    private size;
    constructor(
    /** The block header the attestation is made over */
    header: BlockHeader, archive: Fr, 
    /** The sequence of transactions in the block */
    txHashes: TxHash[]);
    static get schema(): z.ZodEffects<z.ZodObject<{
        header: import("@aztec/foundation/schemas").ZodFor<BlockHeader>;
        archive: z.ZodType<Fr, any, string>;
        txHashes: z.ZodArray<z.ZodEffects<z.ZodEffects<z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>, Buffer, string>, TxHash, string>, "many">;
    }, "strip", z.ZodTypeAny, {
        archive: Fr;
        header: BlockHeader;
        txHashes: TxHash[];
    }, {
        archive: string;
        txHashes: string[];
        header?: any;
    }>, ConsensusPayload, {
        archive: string;
        txHashes: string[];
        header?: any;
    }>;
    static getFields(fields: FieldsOf<ConsensusPayload>): readonly [BlockHeader, Fr, TxHash[]];
    getPayloadToSign(domainSeparator: SignatureDomainSeparator): Buffer;
    toBuffer(): Buffer;
    static fromBuffer(buf: Buffer | BufferReader): ConsensusPayload;
    static fromFields(fields: FieldsOf<ConsensusPayload>): ConsensusPayload;
    static fromBlock(block: L2Block): ConsensusPayload;
    static empty(): ConsensusPayload;
    /**
     * Get the size of the consensus payload in bytes.
     * @returns The size of the consensus payload.
     */
    getSize(): number;
}
//# sourceMappingURL=consensus_payload.d.ts.map