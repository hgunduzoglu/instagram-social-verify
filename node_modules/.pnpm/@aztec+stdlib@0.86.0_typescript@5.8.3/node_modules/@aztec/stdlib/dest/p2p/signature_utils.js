import { Buffer32 } from '@aztec/foundation/buffer';
import { keccak256, makeEthSignDigest } from '@aztec/foundation/crypto';
export var SignatureDomainSeparator = /*#__PURE__*/ function(SignatureDomainSeparator) {
    SignatureDomainSeparator[SignatureDomainSeparator["blockProposal"] = 0] = "blockProposal";
    SignatureDomainSeparator[SignatureDomainSeparator["blockAttestation"] = 1] = "blockAttestation";
    return SignatureDomainSeparator;
}({});
/**
 * Get the hashed payload for the signature of the `Signable`
 * @param s - The `Signable` to sign
 * @returns The hashed payload for the signature of the `Signable`
 */ export function getHashedSignaturePayload(s, domainSeparator) {
    return Buffer32.fromBuffer(keccak256(s.getPayloadToSign(domainSeparator)));
}
/**
 * Get the hashed payload for the signature of the `Signable` as an Ethereum signed message EIP-712
 * @param s - the `Signable` to sign
 * @returns The hashed payload for the signature of the `Signable` as an Ethereum signed message
 */ export function getHashedSignaturePayloadEthSignedMessage(s, domainSeparator) {
    const payload = getHashedSignaturePayload(s, domainSeparator);
    return makeEthSignDigest(payload);
}
