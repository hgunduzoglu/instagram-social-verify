/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import { NULLIFIER_TREE_HEIGHT } from '@aztec/constants';
import { Fr } from '@aztec/foundation/fields';
import { SiblingPath } from '@aztec/foundation/trees';
import { z } from 'zod';
import { NullifierLeafPreimage } from './nullifier_leaf.js';
/**
 * Nullifier membership witness.
 * @remarks When this represents membership witness of a low nullifier it can be used to perform a nullifier
 * non-inclusion proof by leveraging the "linked list structure" of leaves and proving that a lower nullifier
 * is pointing to a bigger next value than the nullifier we are trying to prove non-inclusion for.
 */
export declare class NullifierMembershipWitness {
    /**
     * The index of the nullifier in a tree.
     */
    readonly index: bigint;
    /**
     * Preimage of the nullifier.
     */
    readonly leafPreimage: NullifierLeafPreimage;
    /**
     * Sibling path to prove membership of the nullifier.
     */
    readonly siblingPath: SiblingPath<typeof NULLIFIER_TREE_HEIGHT>;
    constructor(
    /**
     * The index of the nullifier in a tree.
     */
    index: bigint, 
    /**
     * Preimage of the nullifier.
     */
    leafPreimage: NullifierLeafPreimage, 
    /**
     * Sibling path to prove membership of the nullifier.
     */
    siblingPath: SiblingPath<typeof NULLIFIER_TREE_HEIGHT>);
    static get schema(): z.ZodEffects<z.ZodObject<{
        index: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
        leafPreimage: z.ZodEffects<z.ZodObject<{
            leaf: z.ZodEffects<z.ZodObject<{
                nullifier: z.ZodType<Fr, any, string>;
            }, "strip", z.ZodTypeAny, {
                nullifier: Fr;
            }, {
                nullifier: string;
            }>, import("./nullifier_leaf.js").NullifierLeaf, {
                nullifier: string;
            }>;
            nextKey: z.ZodType<Fr, any, string>;
            nextIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
        }, "strip", z.ZodTypeAny, {
            leaf: import("./nullifier_leaf.js").NullifierLeaf;
            nextKey: Fr;
            nextIndex: bigint;
        }, {
            leaf: {
                nullifier: string;
            };
            nextKey: string;
            nextIndex: string | number | bigint;
        }>, NullifierLeafPreimage, {
            leaf: {
                nullifier: string;
            };
            nextKey: string;
            nextIndex: string | number | bigint;
        }>;
        siblingPath: z.ZodEffects<z.ZodEffects<z.ZodUnion<[z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, Buffer, string>, z.ZodEffects<z.ZodObject<{
            type: z.ZodLiteral<"Buffer">;
            data: z.ZodArray<z.ZodNumber, "many">;
        }, "strip", z.ZodTypeAny, {
            type: "Buffer";
            data: number[];
        }, {
            type: "Buffer";
            data: number[];
        }>, Buffer, {
            type: "Buffer";
            data: number[];
        }>]>, SiblingPath<40>, string | {
            type: "Buffer";
            data: number[];
        }>, SiblingPath<40>, string | {
            type: "Buffer";
            data: number[];
        }>;
    }, "strip", z.ZodTypeAny, {
        index: bigint;
        leafPreimage: NullifierLeafPreimage;
        siblingPath: SiblingPath<40>;
    }, {
        index: string | number | bigint;
        leafPreimage: {
            leaf: {
                nullifier: string;
            };
            nextKey: string;
            nextIndex: string | number | bigint;
        };
        siblingPath: string | {
            type: "Buffer";
            data: number[];
        };
    }>, NullifierMembershipWitness, {
        index: string | number | bigint;
        leafPreimage: {
            leaf: {
                nullifier: string;
            };
            nextKey: string;
            nextIndex: string | number | bigint;
        };
        siblingPath: string | {
            type: "Buffer";
            data: number[];
        };
    }>;
    static random(): NullifierMembershipWitness;
    /**
     * Returns a field array representation of a nullifier witness.
     * @returns A field array representation of a nullifier witness.
     */
    toFields(): Fr[];
    /**
     * Returns a representation of the nullifier membership witness as expected by intrinsic Noir deserialization.
     */
    toNoirRepresentation(): (string | string[])[];
}
//# sourceMappingURL=nullifier_membership_witness.d.ts.map