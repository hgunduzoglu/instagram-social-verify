/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import { Fr } from '@aztec/foundation/fields';
import { BufferReader } from '@aztec/foundation/serialize';
import type { IndexedTreeLeaf, IndexedTreeLeafPreimage } from '@aztec/foundation/trees';
import { z } from 'zod';
/**
 * Class containing the data of a preimage of a single leaf in the protocol contract tree.
 * Note: It's called preimage because this data gets hashed before being inserted as a node into the `IndexedTree`.
 * Note: Though this tree contains addresses, they are converted to fields to avoid unnecessary conversions in the tree.
 */
export declare class ProtocolContractLeafPreimage implements IndexedTreeLeafPreimage {
    /**
     * Leaf value inside the indexed tree's linked list.
     */
    address: Fr;
    /**
     * Next value inside the indexed tree's linked list.
     */
    nextAddress: Fr;
    /**
     * Index of the next leaf in the indexed tree's linked list.
     */
    nextIndex: bigint;
    constructor(
    /**
     * Leaf value inside the indexed tree's linked list.
     */
    address: Fr, 
    /**
     * Next value inside the indexed tree's linked list.
     */
    nextAddress: Fr, 
    /**
     * Index of the next leaf in the indexed tree's linked list.
     */
    nextIndex: bigint);
    static get schema(): z.ZodEffects<z.ZodObject<{
        address: z.ZodType<Fr, any, string>;
        nextAddress: z.ZodType<Fr, any, string>;
        nextIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
    }, "strip", z.ZodTypeAny, {
        nextIndex: bigint;
        address: Fr;
        nextAddress: Fr;
    }, {
        nextIndex: string | number | bigint;
        address: string;
        nextAddress: string;
    }>, ProtocolContractLeafPreimage, {
        nextIndex: string | number | bigint;
        address: string;
        nextAddress: string;
    }>;
    getKey(): bigint;
    getNextKey(): bigint;
    getNextIndex(): bigint;
    asLeaf(): ProtocolContractLeaf;
    toBuffer(): Buffer;
    toHashInputs(): Buffer[];
    toFields(): Fr[];
    static random(): ProtocolContractLeafPreimage;
    static empty(): ProtocolContractLeafPreimage;
    static fromBuffer(buffer: Buffer | BufferReader): ProtocolContractLeafPreimage;
}
/**
 * An address to be inserted or checked in the protocol contract tree.
 */
export declare class ProtocolContractLeaf implements IndexedTreeLeaf {
    /**
     * Address value.
     */
    address: Fr;
    constructor(
    /**
     * Address value.
     */
    address: Fr);
    getKey(): bigint;
    toBuffer(): Buffer;
    isEmpty(): boolean;
    updateTo(_another: ProtocolContractLeaf): ProtocolContractLeaf;
    static buildDummy(key: bigint): ProtocolContractLeaf;
    static fromBuffer(buf: Buffer): ProtocolContractLeaf;
}
//# sourceMappingURL=protocol_contract_leaf.d.ts.map