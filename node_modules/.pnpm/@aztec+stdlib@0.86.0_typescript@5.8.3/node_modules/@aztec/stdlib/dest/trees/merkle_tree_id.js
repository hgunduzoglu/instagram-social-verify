import { ARCHIVE_HEIGHT, ARCHIVE_TREE_ID, L1_TO_L2_MESSAGE_TREE_ID, L1_TO_L2_MSG_TREE_HEIGHT, NOTE_HASH_TREE_HEIGHT, NOTE_HASH_TREE_ID, NULLIFIER_TREE_HEIGHT, NULLIFIER_TREE_ID, PUBLIC_DATA_TREE_HEIGHT, PUBLIC_DATA_TREE_ID } from '@aztec/constants';
/**
 * Defines the possible Merkle tree IDs.
 * @remarks The MerkleTrees class expects these to start from zero and be in incremental order.
 */ export var MerkleTreeId = /*#__PURE__*/ function(MerkleTreeId) {
    MerkleTreeId[MerkleTreeId["NULLIFIER_TREE"] = NULLIFIER_TREE_ID] = "NULLIFIER_TREE";
    MerkleTreeId[MerkleTreeId["NOTE_HASH_TREE"] = NOTE_HASH_TREE_ID] = "NOTE_HASH_TREE";
    MerkleTreeId[MerkleTreeId["PUBLIC_DATA_TREE"] = PUBLIC_DATA_TREE_ID] = "PUBLIC_DATA_TREE";
    MerkleTreeId[MerkleTreeId["L1_TO_L2_MESSAGE_TREE"] = L1_TO_L2_MESSAGE_TREE_ID] = "L1_TO_L2_MESSAGE_TREE";
    MerkleTreeId[MerkleTreeId["ARCHIVE"] = ARCHIVE_TREE_ID] = "ARCHIVE";
    return MerkleTreeId;
}({});
export const merkleTreeIds = ()=>{
    return Object.values(MerkleTreeId).filter((v)=>!isNaN(Number(v)));
};
const TREE_HEIGHTS = {
    [MerkleTreeId.NOTE_HASH_TREE]: NOTE_HASH_TREE_HEIGHT,
    [MerkleTreeId.ARCHIVE]: ARCHIVE_HEIGHT,
    [MerkleTreeId.L1_TO_L2_MESSAGE_TREE]: L1_TO_L2_MSG_TREE_HEIGHT,
    [MerkleTreeId.NULLIFIER_TREE]: NULLIFIER_TREE_HEIGHT,
    [MerkleTreeId.PUBLIC_DATA_TREE]: PUBLIC_DATA_TREE_HEIGHT
};
export function getTreeHeight(treeId) {
    return TREE_HEIGHTS[treeId];
}
const TREE_NAMES = {
    [MerkleTreeId.NULLIFIER_TREE]: 'NULLIFIER_TREE',
    [MerkleTreeId.NOTE_HASH_TREE]: 'NOTE_HASH_TREE',
    [MerkleTreeId.PUBLIC_DATA_TREE]: 'PUBLIC_DATA_TREE',
    [MerkleTreeId.L1_TO_L2_MESSAGE_TREE]: 'L1_TO_L2_MESSAGE_TREE',
    [MerkleTreeId.ARCHIVE]: 'ARCHIVE'
};
export function getTreeName(treeId) {
    return TREE_NAMES[treeId];
}
