/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import { Fr } from '@aztec/foundation/fields';
import { BufferReader, FieldReader } from '@aztec/foundation/serialize';
import { inspect } from 'util';
import { z } from 'zod';
import type { UInt32 } from '../types/shared.js';
/**
 * Snapshot of an append only tree.
 *
 * Used in circuits to verify that tree insertions are performed correctly.
 */
export declare class AppendOnlyTreeSnapshot {
    /**
     * Root of the append only tree when taking the snapshot.
     */
    root: Fr;
    /**
     * Index of the next available leaf in the append only tree.
     *
     * Note: We include the next available leaf index in the snapshot so that the snapshot can be used to verify that
     *       the insertion was performed at the correct place. If we only verified tree root then it could happen that
     *       some leaves would get overwritten and the tree root check would still pass.
     *       TLDR: We need to store the next available leaf index to ensure that the "append only" property was
     *             preserved when verifying state transitions.
     */
    nextAvailableLeafIndex: UInt32;
    constructor(
    /**
     * Root of the append only tree when taking the snapshot.
     */
    root: Fr, 
    /**
     * Index of the next available leaf in the append only tree.
     *
     * Note: We include the next available leaf index in the snapshot so that the snapshot can be used to verify that
     *       the insertion was performed at the correct place. If we only verified tree root then it could happen that
     *       some leaves would get overwritten and the tree root check would still pass.
     *       TLDR: We need to store the next available leaf index to ensure that the "append only" property was
     *             preserved when verifying state transitions.
     */
    nextAvailableLeafIndex: UInt32);
    static get schema(): z.ZodEffects<z.ZodObject<{
        root: z.ZodType<Fr, any, string>;
        nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        root: Fr;
        nextAvailableLeafIndex: number;
    }, {
        root: string;
        nextAvailableLeafIndex: string | number | bigint;
    }>, AppendOnlyTreeSnapshot, {
        root: string;
        nextAvailableLeafIndex: string | number | bigint;
    }>;
    getSize(): number;
    toBuffer(): Buffer;
    toFields(): Fr[];
    toString(): string;
    static fromBuffer(buffer: Buffer | BufferReader): AppendOnlyTreeSnapshot;
    static fromString(str: string): AppendOnlyTreeSnapshot;
    static fromFields(fields: Fr[] | FieldReader): AppendOnlyTreeSnapshot;
    static zero(): AppendOnlyTreeSnapshot;
    isZero(): boolean;
    [inspect.custom](): string;
    equals(other: this): boolean;
    static random(): AppendOnlyTreeSnapshot;
}
//# sourceMappingURL=append_only_tree_snapshot.d.ts.map