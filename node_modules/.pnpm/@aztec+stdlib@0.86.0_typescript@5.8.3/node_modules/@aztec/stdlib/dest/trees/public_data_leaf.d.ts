/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import { Fr } from '@aztec/foundation/fields';
import { BufferReader } from '@aztec/foundation/serialize';
import type { IndexedTreeLeaf, IndexedTreeLeafPreimage } from '@aztec/foundation/trees';
import { z } from 'zod';
/**
 * Class containing the data of a preimage of a single leaf in the public data tree.
 * Note: It's called preimage because this data gets hashed before being inserted as a node into the `IndexedTree`.
 */
export declare class PublicDataTreeLeafPreimage implements IndexedTreeLeafPreimage {
    /**
     * The leaf (slot, value).
     */
    leaf: PublicDataTreeLeaf;
    /**
     * Next key (slot) inside the indexed tree's linked list.
     */
    nextKey: Fr;
    /**
     * Index of the next leaf in the indexed tree's linked list.
     */
    nextIndex: bigint;
    constructor(
    /**
     * The leaf (slot, value).
     */
    leaf: PublicDataTreeLeaf, 
    /**
     * Next key (slot) inside the indexed tree's linked list.
     */
    nextKey: Fr, 
    /**
     * Index of the next leaf in the indexed tree's linked list.
     */
    nextIndex: bigint);
    static get schema(): z.ZodEffects<z.ZodObject<{
        leaf: z.ZodEffects<z.ZodObject<{
            slot: z.ZodType<Fr, any, string>;
            value: z.ZodType<Fr, any, string>;
        }, "strip", z.ZodTypeAny, {
            value: Fr;
            slot: Fr;
        }, {
            value: string;
            slot: string;
        }>, PublicDataTreeLeaf, {
            value: string;
            slot: string;
        }>;
        nextKey: z.ZodType<Fr, any, string>;
        nextIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
    }, "strip", z.ZodTypeAny, {
        leaf: PublicDataTreeLeaf;
        nextKey: Fr;
        nextIndex: bigint;
    }, {
        leaf: {
            value: string;
            slot: string;
        };
        nextKey: string;
        nextIndex: string | number | bigint;
    }>, PublicDataTreeLeafPreimage, {
        leaf: {
            value: string;
            slot: string;
        };
        nextKey: string;
        nextIndex: string | number | bigint;
    }>;
    static get leafSchema(): z.ZodEffects<z.ZodObject<{
        slot: z.ZodType<Fr, any, string>;
        value: z.ZodType<Fr, any, string>;
    }, "strip", z.ZodTypeAny, {
        value: Fr;
        slot: Fr;
    }, {
        value: string;
        slot: string;
    }>, PublicDataTreeLeaf, {
        value: string;
        slot: string;
    }>;
    getKey(): bigint;
    getNextKey(): bigint;
    getNextIndex(): bigint;
    asLeaf(): PublicDataTreeLeaf;
    toBuffer(): Buffer;
    toHashInputs(): Buffer[];
    clone(): PublicDataTreeLeafPreimage;
    static random(): PublicDataTreeLeafPreimage;
    static empty(): PublicDataTreeLeafPreimage;
    static fromBuffer(buffer: Buffer | BufferReader): PublicDataTreeLeafPreimage;
    static fromLeaf(leaf: PublicDataTreeLeaf, nextKey: bigint, nextIndex: bigint): PublicDataTreeLeafPreimage;
    static clone(preimage: PublicDataTreeLeafPreimage): PublicDataTreeLeafPreimage;
}
/**
 * A leaf in the public data indexed tree.
 */
export declare class PublicDataTreeLeaf implements IndexedTreeLeaf {
    /**
     * The slot the value is stored in
     */
    slot: Fr;
    /**
     * The value stored in the slot
     */
    value: Fr;
    constructor(
    /**
     * The slot the value is stored in
     */
    slot: Fr, 
    /**
     * The value stored in the slot
     */
    value: Fr);
    getKey(): bigint;
    toBuffer(): Buffer;
    clone(): PublicDataTreeLeaf;
    toHashInputs(): Buffer[];
    static fromBuffer(buffer: Buffer | BufferReader): PublicDataTreeLeaf;
    equals(another: PublicDataTreeLeaf): boolean;
    toString(): string;
    isEmpty(): boolean;
    updateTo(another: PublicDataTreeLeaf): PublicDataTreeLeaf;
    static buildDummy(key: bigint): PublicDataTreeLeaf;
    static empty(): PublicDataTreeLeaf;
    static get schema(): z.ZodEffects<z.ZodObject<{
        slot: z.ZodType<Fr, any, string>;
        value: z.ZodType<Fr, any, string>;
    }, "strip", z.ZodTypeAny, {
        value: Fr;
        slot: Fr;
    }, {
        value: string;
        slot: string;
    }>, PublicDataTreeLeaf, {
        value: string;
        slot: string;
    }>;
}
//# sourceMappingURL=public_data_leaf.d.ts.map