/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import { PUBLIC_DATA_TREE_HEIGHT } from '@aztec/constants';
import { Fr } from '@aztec/foundation/fields';
import { BufferReader } from '@aztec/foundation/serialize';
import { SiblingPath } from '@aztec/foundation/trees';
import { z } from 'zod';
import { PublicDataTreeLeafPreimage } from './public_data_leaf.js';
/**
 * Public data witness.
 * @remarks This allows to prove either:
 * - That a slot in the public data tree is empty (0 value) if it falls within the range of the leaf.
 * - The current value of a slot in the public data tree if it matches exactly the slot of the leaf.
 */
export declare class PublicDataWitness {
    /**
     * The index of the leaf in the public data tree.
     */
    readonly index: bigint;
    /**
     * Preimage of a low leaf. All the slots in the range of the leaf are empty, and the current value of the
     * leaf slot is stored in the leaf.
     */
    readonly leafPreimage: PublicDataTreeLeafPreimage;
    /**
     * Sibling path to prove membership of the leaf.
     */
    readonly siblingPath: SiblingPath<typeof PUBLIC_DATA_TREE_HEIGHT>;
    constructor(
    /**
     * The index of the leaf in the public data tree.
     */
    index: bigint, 
    /**
     * Preimage of a low leaf. All the slots in the range of the leaf are empty, and the current value of the
     * leaf slot is stored in the leaf.
     */
    leafPreimage: PublicDataTreeLeafPreimage, 
    /**
     * Sibling path to prove membership of the leaf.
     */
    siblingPath: SiblingPath<typeof PUBLIC_DATA_TREE_HEIGHT>);
    static get schema(): z.ZodEffects<z.ZodObject<{
        index: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
        leafPreimage: z.ZodEffects<z.ZodObject<{
            leaf: z.ZodEffects<z.ZodObject<{
                slot: z.ZodType<Fr, any, string>;
                value: z.ZodType<Fr, any, string>;
            }, "strip", z.ZodTypeAny, {
                value: Fr;
                slot: Fr;
            }, {
                value: string;
                slot: string;
            }>, import("./public_data_leaf.js").PublicDataTreeLeaf, {
                value: string;
                slot: string;
            }>;
            nextKey: z.ZodType<Fr, any, string>;
            nextIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
        }, "strip", z.ZodTypeAny, {
            leaf: import("./public_data_leaf.js").PublicDataTreeLeaf;
            nextKey: Fr;
            nextIndex: bigint;
        }, {
            leaf: {
                value: string;
                slot: string;
            };
            nextKey: string;
            nextIndex: string | number | bigint;
        }>, PublicDataTreeLeafPreimage, {
            leaf: {
                value: string;
                slot: string;
            };
            nextKey: string;
            nextIndex: string | number | bigint;
        }>;
        siblingPath: z.ZodEffects<z.ZodEffects<z.ZodUnion<[z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, Buffer, string>, z.ZodEffects<z.ZodObject<{
            type: z.ZodLiteral<"Buffer">;
            data: z.ZodArray<z.ZodNumber, "many">;
        }, "strip", z.ZodTypeAny, {
            type: "Buffer";
            data: number[];
        }, {
            type: "Buffer";
            data: number[];
        }>, Buffer, {
            type: "Buffer";
            data: number[];
        }>]>, SiblingPath<40>, string | {
            type: "Buffer";
            data: number[];
        }>, SiblingPath<40>, string | {
            type: "Buffer";
            data: number[];
        }>;
    }, "strip", z.ZodTypeAny, {
        index: bigint;
        leafPreimage: PublicDataTreeLeafPreimage;
        siblingPath: SiblingPath<40>;
    }, {
        index: string | number | bigint;
        leafPreimage: {
            leaf: {
                value: string;
                slot: string;
            };
            nextKey: string;
            nextIndex: string | number | bigint;
        };
        siblingPath: string | {
            type: "Buffer";
            data: number[];
        };
    }>, PublicDataWitness, {
        index: string | number | bigint;
        leafPreimage: {
            leaf: {
                value: string;
                slot: string;
            };
            nextKey: string;
            nextIndex: string | number | bigint;
        };
        siblingPath: string | {
            type: "Buffer";
            data: number[];
        };
    }>;
    /**
     * Returns a field array representation of a public data witness.
     * @returns A field array representation of a public data witness.
     */
    toFields(): Fr[];
    /**
     * Returns a representation of the public data witness as expected by intrinsic Noir deserialization.
     */
    toNoirRepresentation(): (string | string[])[];
    toBuffer(): Buffer;
    /**
     * Returns a string representation of the TxEffect object.
     */
    toString(): string;
    static random(): PublicDataWitness;
    /**
     * Deserializes an PublicDataWitness object from a buffer.
     * @param buf - Buffer or BufferReader to deserialize.
     * @returns An instance of PublicDataWitness.
     */
    static fromBuffer(buffer: Buffer | BufferReader): PublicDataWitness;
    /**
     * Deserializes an PublicDataWitness object from a string.
     * @param str - String to deserialize.
     * @returns An instance of PublicDataWitness.
     */
    static fromString(str: string): PublicDataWitness;
}
//# sourceMappingURL=public_data_witness.d.ts.map