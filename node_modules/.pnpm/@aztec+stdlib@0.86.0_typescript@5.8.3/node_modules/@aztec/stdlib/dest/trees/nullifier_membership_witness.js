import { NULLIFIER_TREE_HEIGHT } from '@aztec/constants';
import { Fr } from '@aztec/foundation/fields';
import { SiblingPath } from '@aztec/foundation/trees';
import { z } from 'zod';
import { schemas } from '../schemas/index.js';
import { NullifierLeafPreimage } from './nullifier_leaf.js';
/**
 * Nullifier membership witness.
 * @remarks When this represents membership witness of a low nullifier it can be used to perform a nullifier
 * non-inclusion proof by leveraging the "linked list structure" of leaves and proving that a lower nullifier
 * is pointing to a bigger next value than the nullifier we are trying to prove non-inclusion for.
 */ export class NullifierMembershipWitness {
    index;
    leafPreimage;
    siblingPath;
    constructor(/**
     * The index of the nullifier in a tree.
     */ index, /**
     * Preimage of the nullifier.
     */ leafPreimage, /**
     * Sibling path to prove membership of the nullifier.
     */ siblingPath){
        this.index = index;
        this.leafPreimage = leafPreimage;
        this.siblingPath = siblingPath;
    }
    static get schema() {
        return z.object({
            index: schemas.BigInt,
            leafPreimage: NullifierLeafPreimage.schema,
            siblingPath: SiblingPath.schemaFor(NULLIFIER_TREE_HEIGHT)
        }).transform(({ index, leafPreimage, siblingPath })=>new NullifierMembershipWitness(index, leafPreimage, siblingPath));
    }
    static random() {
        return new NullifierMembershipWitness(BigInt(Math.floor(Math.random() * 1000)), NullifierLeafPreimage.random(), SiblingPath.random(NULLIFIER_TREE_HEIGHT));
    }
    /**
   * Returns a field array representation of a nullifier witness.
   * @returns A field array representation of a nullifier witness.
   */ toFields() {
        return [
            new Fr(this.index),
            ...this.leafPreimage.toFields(),
            ...this.siblingPath.toFields()
        ];
    }
    /**
   * Returns a representation of the nullifier membership witness as expected by intrinsic Noir deserialization.
   */ toNoirRepresentation() {
        // TODO(#12874): remove the stupid as string conversion by modifying ForeignCallOutput type in acvm.js
        return [
            new Fr(this.index).toString(),
            ...this.leafPreimage.toFields().map((fr)=>fr.toString()),
            this.siblingPath.toFields().map((fr)=>fr.toString())
        ];
    }
}
