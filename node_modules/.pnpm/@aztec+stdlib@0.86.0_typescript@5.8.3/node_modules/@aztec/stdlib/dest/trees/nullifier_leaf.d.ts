/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import { Fr } from '@aztec/foundation/fields';
import { BufferReader } from '@aztec/foundation/serialize';
import type { IndexedTreeLeaf, IndexedTreeLeafPreimage } from '@aztec/foundation/trees';
import { z } from 'zod';
/**
 * Class containing the data of a preimage of a single leaf in the nullifier tree.
 * Note: It's called preimage because this data gets hashed before being inserted as a node into the `IndexedTree`.
 */
export declare class NullifierLeafPreimage implements IndexedTreeLeafPreimage {
    /**
     * Leaf value inside the indexed tree's linked list.
     */
    leaf: NullifierLeaf;
    /**
     * Next nullifier inside the indexed tree's linked list.
     */
    nextKey: Fr;
    /**
     * Index of the next leaf in the indexed tree's linked list.
     */
    nextIndex: bigint;
    constructor(
    /**
     * Leaf value inside the indexed tree's linked list.
     */
    leaf: NullifierLeaf, 
    /**
     * Next nullifier inside the indexed tree's linked list.
     */
    nextKey: Fr, 
    /**
     * Index of the next leaf in the indexed tree's linked list.
     */
    nextIndex: bigint);
    static get schema(): z.ZodEffects<z.ZodObject<{
        leaf: z.ZodEffects<z.ZodObject<{
            nullifier: z.ZodType<Fr, any, string>;
        }, "strip", z.ZodTypeAny, {
            nullifier: Fr;
        }, {
            nullifier: string;
        }>, NullifierLeaf, {
            nullifier: string;
        }>;
        nextKey: z.ZodType<Fr, any, string>;
        nextIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
    }, "strip", z.ZodTypeAny, {
        leaf: NullifierLeaf;
        nextKey: Fr;
        nextIndex: bigint;
    }, {
        leaf: {
            nullifier: string;
        };
        nextKey: string;
        nextIndex: string | number | bigint;
    }>, NullifierLeafPreimage, {
        leaf: {
            nullifier: string;
        };
        nextKey: string;
        nextIndex: string | number | bigint;
    }>;
    static get leafSchema(): z.ZodEffects<z.ZodObject<{
        nullifier: z.ZodType<Fr, any, string>;
    }, "strip", z.ZodTypeAny, {
        nullifier: Fr;
    }, {
        nullifier: string;
    }>, NullifierLeaf, {
        nullifier: string;
    }>;
    getKey(): bigint;
    getNextKey(): bigint;
    getNextIndex(): bigint;
    asLeaf(): NullifierLeaf;
    toBuffer(): Buffer;
    toHashInputs(): Buffer[];
    toFields(): Fr[];
    clone(): NullifierLeafPreimage;
    static random(): NullifierLeafPreimage;
    static empty(): NullifierLeafPreimage;
    static fromBuffer(buffer: Buffer | BufferReader): NullifierLeafPreimage;
    static fromLeaf(leaf: NullifierLeaf, nextKey: bigint, nextIndex: bigint): NullifierLeafPreimage;
    static clone(preimage: NullifierLeafPreimage): NullifierLeafPreimage;
}
/**
 * A nullifier to be inserted in the nullifier tree.
 */
export declare class NullifierLeaf implements IndexedTreeLeaf {
    /**
     * Nullifier value.
     */
    nullifier: Fr;
    constructor(
    /**
     * Nullifier value.
     */
    nullifier: Fr);
    getKey(): bigint;
    toBuffer(): Buffer;
    clone(): NullifierLeaf;
    toHashInputs(): Buffer[];
    static empty(): NullifierLeaf;
    static random(): NullifierLeaf;
    isEmpty(): boolean;
    updateTo(_another: NullifierLeaf): NullifierLeaf;
    static buildDummy(key: bigint): NullifierLeaf;
    static fromBuffer(buf: Buffer | BufferReader): NullifierLeaf;
    static get schema(): z.ZodEffects<z.ZodObject<{
        nullifier: z.ZodType<Fr, any, string>;
    }, "strip", z.ZodTypeAny, {
        nullifier: Fr;
    }, {
        nullifier: string;
    }>, NullifierLeaf, {
        nullifier: string;
    }>;
}
//# sourceMappingURL=nullifier_leaf.d.ts.map