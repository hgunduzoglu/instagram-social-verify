/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import { BufferReader } from '@aztec/foundation/serialize';
import type { FieldsOf } from '@aztec/foundation/types';
import { z } from 'zod';
import { LogId } from './log_id.js';
import { PublicLog } from './public_log.js';
/**
 * Represents an individual public log entry extended with info about the block and tx it was emitted in.
 */
export declare class ExtendedPublicLog {
    /** Globally unique id of the log. */
    readonly id: LogId;
    /** The data contents of the log. */
    readonly log: PublicLog;
    constructor(
    /** Globally unique id of the log. */
    id: LogId, 
    /** The data contents of the log. */
    log: PublicLog);
    static random(): Promise<ExtendedPublicLog>;
    static get schema(): z.ZodEffects<z.ZodObject<{
        id: z.ZodEffects<z.ZodObject<{
            blockNumber: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
            txIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
            logIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            blockNumber: number;
            txIndex: number;
            logIndex: number;
        }, {
            blockNumber: string | number | bigint;
            txIndex: string | number | bigint;
            logIndex: string | number | bigint;
        }>, LogId, {
            blockNumber: string | number | bigint;
            txIndex: string | number | bigint;
            logIndex: string | number | bigint;
        }>;
        log: import("@aztec/foundation/schemas").ZodFor<PublicLog>;
    }, "strip", z.ZodTypeAny, {
        id: LogId;
        log: PublicLog;
    }, {
        id: {
            blockNumber: string | number | bigint;
            txIndex: string | number | bigint;
            logIndex: string | number | bigint;
        };
        log?: any;
    }>, ExtendedPublicLog, {
        id: {
            blockNumber: string | number | bigint;
            txIndex: string | number | bigint;
            logIndex: string | number | bigint;
        };
        log?: any;
    }>;
    static from(fields: FieldsOf<ExtendedPublicLog>): ExtendedPublicLog;
    /**
     * Serializes log to a buffer.
     * @returns A buffer containing the serialized log.
     */
    toBuffer(): Buffer;
    /**
     * Serializes log to a string.
     * @returns A string containing the serialized log.
     */
    toString(): string;
    /**
     * Serializes log to a human readable string.
     * @returns A human readable representation of the log.
     */
    toHumanReadable(): string;
    /**
     * Checks if two ExtendedPublicLog objects are equal.
     * @param other - Another ExtendedPublicLog object to compare with.
     * @returns True if the two objects are equal, false otherwise.
     */
    equals(other: ExtendedPublicLog): boolean;
    /**
     * Deserializes log from a buffer.
     * @param buffer - The buffer or buffer reader containing the log.
     * @returns Deserialized instance of `Log`.
     */
    static fromBuffer(buffer: Buffer | BufferReader): ExtendedPublicLog;
    /**
     * Deserializes `ExtendedPublicLog` object from a hex string representation.
     * @param data - A hex string representation of the log.
     * @returns An `ExtendedPublicLog` object.
     */
    static fromString(data: string): ExtendedPublicLog;
}
//# sourceMappingURL=extended_public_log.d.ts.map