/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import { PUBLIC_LOG_DATA_SIZE_IN_FIELDS } from '@aztec/constants';
import { type FieldsOf } from '@aztec/foundation/array';
import { Fr } from '@aztec/foundation/fields';
import { type ZodFor } from '@aztec/foundation/schemas';
import { BufferReader, FieldReader, type Tuple } from '@aztec/foundation/serialize';
import { inspect } from 'util';
import { AztecAddress } from '../aztec-address/index.js';
export declare class PublicLog {
    contractAddress: AztecAddress;
    log: Tuple<Fr, typeof PUBLIC_LOG_DATA_SIZE_IN_FIELDS>;
    static SIZE_IN_BYTES: number;
    constructor(contractAddress: AztecAddress, log: Tuple<Fr, typeof PUBLIC_LOG_DATA_SIZE_IN_FIELDS>);
    toFields(): Fr[];
    static getFields(fields: FieldsOf<PublicLog>): readonly [AztecAddress, [Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr]];
    static fromFields(fields: Fr[] | FieldReader): PublicLog;
    isEmpty(): boolean;
    static empty(): PublicLog;
    toBuffer(): Buffer;
    static fromBuffer(buffer: Buffer | BufferReader): PublicLog;
    static random(): Promise<PublicLog>;
    getEmittedLength(): number;
    getEmittedFields(): Fr[];
    equals(other: this): boolean;
    toHumanReadable(): string;
    static get schema(): ZodFor<PublicLog>;
    [inspect.custom](): string;
}
//# sourceMappingURL=public_log.d.ts.map