/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import { PRIVATE_LOG_SIZE_IN_FIELDS } from '@aztec/constants';
import { Fr } from '@aztec/foundation/fields';
import { BufferReader, FieldReader, type Tuple } from '@aztec/foundation/serialize';
import { inspect } from 'util';
import { z } from 'zod';
export declare class PrivateLog {
    fields: Tuple<Fr, typeof PRIVATE_LOG_SIZE_IN_FIELDS>;
    static SIZE_IN_BYTES: number;
    constructor(fields: Tuple<Fr, typeof PRIVATE_LOG_SIZE_IN_FIELDS>);
    toFields(): Fr[];
    static fromFields(fields: Fr[] | FieldReader): PrivateLog;
    isEmpty(): boolean;
    static empty(): PrivateLog;
    toBuffer(): Buffer;
    static fromBuffer(buffer: Buffer | BufferReader): PrivateLog;
    static random(tag?: Fr): PrivateLog;
    getEmittedLength(): number;
    getEmittedFields(): Fr[];
    static get schema(): z.ZodEffects<z.ZodObject<{
        fields: z.ZodArray<z.ZodType<Fr, any, string>, "many">;
    }, "strip", z.ZodTypeAny, {
        fields: Fr[];
    }, {
        fields: string[];
    }>, PrivateLog, {
        fields: string[];
    }>;
    equals(other: PrivateLog): boolean;
    [inspect.custom](): string;
}
//# sourceMappingURL=private_log.d.ts.map