/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import { z } from 'zod';
import { TxHash } from '../tx/tx_hash.js';
import { PrivateLog } from './private_log.js';
import { PublicLog } from './public_log.js';
export declare class TxScopedL2Log {
    txHash: TxHash;
    dataStartIndexForTx: number;
    logIndexInTx: number;
    blockNumber: number;
    log: PrivateLog | PublicLog;
    constructor(txHash: TxHash, dataStartIndexForTx: number, logIndexInTx: number, blockNumber: number, log: PrivateLog | PublicLog);
    get isFromPublic(): boolean;
    static get schema(): z.ZodEffects<z.ZodObject<{
        txHash: z.ZodEffects<z.ZodEffects<z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>, Buffer, string>, TxHash, string>;
        dataStartIndexForTx: z.ZodNumber;
        logIndexInTx: z.ZodNumber;
        blockNumber: z.ZodNumber;
        log: z.ZodUnion<[z.ZodEffects<z.ZodObject<{
            fields: z.ZodArray<z.ZodType<import("@aztec/foundation/schemas").Fr, any, string>, "many">;
        }, "strip", z.ZodTypeAny, {
            fields: import("@aztec/foundation/schemas").Fr[];
        }, {
            fields: string[];
        }>, PrivateLog, {
            fields: string[];
        }>, import("@aztec/foundation/schemas").ZodFor<PublicLog>]>;
    }, "strip", z.ZodTypeAny, {
        blockNumber: number;
        log: PrivateLog | PublicLog;
        txHash: TxHash;
        dataStartIndexForTx: number;
        logIndexInTx: number;
    }, {
        blockNumber: number;
        txHash: string;
        dataStartIndexForTx: number;
        logIndexInTx: number;
        log?: any;
    }>, TxScopedL2Log, {
        blockNumber: number;
        txHash: string;
        dataStartIndexForTx: number;
        logIndexInTx: number;
        log?: any;
    }>;
    toBuffer(): Buffer;
    static fromBuffer(buffer: Buffer): TxScopedL2Log;
    static random(): Promise<TxScopedL2Log>;
    equals(other: TxScopedL2Log): boolean;
}
//# sourceMappingURL=tx_scoped_l2_log.d.ts.map