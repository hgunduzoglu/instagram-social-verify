/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import { Fr } from '@aztec/foundation/fields';
import { BufferReader, FieldReader } from '@aztec/foundation/serialize';
import { inspect } from 'util';
import { z } from 'zod';
import { AztecAddress } from '../aztec-address/index.js';
export declare class ContractClassLog {
    contractAddress: AztecAddress;
    fields: Fr[];
    static SIZE_IN_BYTES: number;
    unsiloedFirstField?: Fr | undefined;
    constructor(contractAddress: AztecAddress, fields: Fr[]);
    toFields(): Fr[];
    equals(other: ContractClassLog): boolean;
    static fromFields(fields: Fr[] | FieldReader): ContractClassLog;
    isEmpty(): boolean;
    static empty(): ContractClassLog;
    toBuffer(): Buffer;
    static fromBuffer(buffer: Buffer | BufferReader): ContractClassLog;
    clone(): ContractClassLog;
    static random(): Promise<ContractClassLog>;
    getEmittedLength(): number;
    getEmittedFields(): Fr[];
    setUnsiloedFirstField(field: Fr): void;
    toUnsiloed(): ContractClassLog;
    silo(): Promise<ContractClassLog>;
    hash(): Promise<Fr>;
    static get schema(): z.ZodEffects<z.ZodObject<{
        contractAddress: import("@aztec/foundation/schemas").ZodFor<AztecAddress>;
        fields: z.ZodArray<z.ZodType<Fr, any, string>, "many">;
    }, "strip", z.ZodTypeAny, {
        fields: Fr[];
        contractAddress: AztecAddress;
    }, {
        fields: string[];
        contractAddress?: any;
    }>, ContractClassLog, {
        fields: string[];
        contractAddress?: any;
    }>;
    [inspect.custom](): string;
}
//# sourceMappingURL=contract_class_log.d.ts.map