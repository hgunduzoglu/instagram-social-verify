import { fromEntries, getEntries, maxBy } from '@aztec/foundation/collection';
import { jsonParseWithSchemaSync } from '@aztec/foundation/json-rpc';
import { join } from 'path';
import { SnapshotDataKeys, SnapshotsIndexSchema } from './types.js';
export async function getSnapshotIndex(metadata, store) {
    const basePath = getBasePath(metadata);
    const snapshotIndexPath = `${basePath}/index.json`;
    try {
        if (await store.exists(snapshotIndexPath)) {
            const snapshotIndexData = await store.read(snapshotIndexPath);
            return jsonParseWithSchemaSync(snapshotIndexData.toString(), SnapshotsIndexSchema);
        } else {
            return undefined;
        }
    } catch (err) {
        throw new Error(`Error reading snapshot index from ${snapshotIndexPath}: ${err}`);
    }
}
export async function getLatestSnapshotMetadata(metadata, store) {
    const snapshotsIndex = await getSnapshotIndex(metadata, store);
    return snapshotsIndex?.snapshots && maxBy(snapshotsIndex?.snapshots, (s)=>s.l1BlockNumber);
}
export function getBasePath(metadata) {
    return `aztec-${metadata.l1ChainId}-${metadata.rollupVersion}-${metadata.rollupAddress}`;
}
export function getSnapshotIndexPath(metadata) {
    return `${getBasePath(metadata)}/index.json`;
}
export function makeSnapshotLocalPaths(baseDir) {
    return fromEntries(SnapshotDataKeys.map((key)=>[
            key,
            join(baseDir, `${key}.db`)
        ]));
}
export async function downloadSnapshot(snapshot, localPaths, store) {
    await Promise.all(getEntries(localPaths).map(([key, path])=>store.download(snapshot.dataUrls[key], path)));
}
