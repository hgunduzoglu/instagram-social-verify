import type { EthAddress } from '@aztec/foundation/eth-address';
import { z } from 'zod';
export declare const SnapshotDataKeys: readonly ["archiver", "nullifier-tree", "public-data-tree", "note-hash-tree", "archive-tree", "l1-to-l2-message-tree"];
export type SnapshotDataKeys = (typeof SnapshotDataKeys)[number];
export type SnapshotDataUrls = Record<SnapshotDataKeys, string>;
export type SnapshotMetadata = {
    l2BlockNumber: number;
    l2BlockHash: string;
    l1BlockNumber: number;
    timestamp: number;
    dataUrls: SnapshotDataUrls;
    schemaVersions: {
        archiver: number;
        worldState: number;
    };
};
export type SnapshotsIndexMetadata = {
    l1ChainId: number;
    rollupVersion: number;
    rollupAddress: EthAddress;
};
export type SnapshotsIndex = SnapshotsIndexMetadata & {
    snapshots: SnapshotMetadata[];
};
export declare const SnapshotsIndexSchema: z.ZodObject<{
    l1ChainId: z.ZodNumber;
    rollupVersion: z.ZodNumber;
    rollupAddress: z.ZodType<EthAddress, any, string>;
    snapshots: z.ZodArray<z.ZodObject<{
        l2BlockNumber: z.ZodNumber;
        l2BlockHash: z.ZodString;
        l1BlockNumber: z.ZodNumber;
        timestamp: z.ZodNumber;
        schemaVersions: z.ZodObject<{
            archiver: z.ZodNumber;
            worldState: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            archiver: number;
            worldState: number;
        }, {
            archiver: number;
            worldState: number;
        }>;
        dataUrls: z.ZodEffects<z.ZodRecord<z.ZodEnum<["archiver", "nullifier-tree", "public-data-tree", "note-hash-tree", "archive-tree", "l1-to-l2-message-tree"]>, z.ZodString>, Required<Partial<Record<"archiver" | "nullifier-tree" | "public-data-tree" | "note-hash-tree" | "archive-tree" | "l1-to-l2-message-tree", string>>>, Partial<Record<"archiver" | "nullifier-tree" | "public-data-tree" | "note-hash-tree" | "archive-tree" | "l1-to-l2-message-tree", string>>>;
    }, "strip", z.ZodTypeAny, {
        timestamp: number;
        l2BlockNumber: number;
        l2BlockHash: string;
        l1BlockNumber: number;
        schemaVersions: {
            archiver: number;
            worldState: number;
        };
        dataUrls: Required<Partial<Record<"archiver" | "nullifier-tree" | "public-data-tree" | "note-hash-tree" | "archive-tree" | "l1-to-l2-message-tree", string>>>;
    }, {
        timestamp: number;
        l2BlockNumber: number;
        l2BlockHash: string;
        l1BlockNumber: number;
        schemaVersions: {
            archiver: number;
            worldState: number;
        };
        dataUrls: Partial<Record<"archiver" | "nullifier-tree" | "public-data-tree" | "note-hash-tree" | "archive-tree" | "l1-to-l2-message-tree", string>>;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    rollupAddress: EthAddress;
    l1ChainId: number;
    rollupVersion: number;
    snapshots: {
        timestamp: number;
        l2BlockNumber: number;
        l2BlockHash: string;
        l1BlockNumber: number;
        schemaVersions: {
            archiver: number;
            worldState: number;
        };
        dataUrls: Required<Partial<Record<"archiver" | "nullifier-tree" | "public-data-tree" | "note-hash-tree" | "archive-tree" | "l1-to-l2-message-tree", string>>>;
    }[];
}, {
    rollupAddress: string;
    l1ChainId: number;
    rollupVersion: number;
    snapshots: {
        timestamp: number;
        l2BlockNumber: number;
        l2BlockHash: string;
        l1BlockNumber: number;
        schemaVersions: {
            archiver: number;
            worldState: number;
        };
        dataUrls: Partial<Record<"archiver" | "nullifier-tree" | "public-data-tree" | "note-hash-tree" | "archive-tree" | "l1-to-l2-message-tree", string>>;
    }[];
}>;
//# sourceMappingURL=types.d.ts.map