/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import { EthAddress } from '@aztec/foundation/eth-address';
import { type Logger } from '@aztec/foundation/log';
import fs from 'fs/promises';
import { inspect } from 'node:util';
import { z } from 'zod';
/**
 * Represents a version record for storing in a version file.
 */
export declare class DatabaseVersion {
    /** The version of the data on disk. Used to perform upgrades */
    readonly schemaVersion: number;
    /** The rollup the data pertains to */
    readonly rollupAddress: EthAddress;
    constructor(
    /** The version of the data on disk. Used to perform upgrades */
    schemaVersion: number, 
    /** The rollup the data pertains to */
    rollupAddress: EthAddress);
    toBuffer(): Buffer;
    static fromBuffer(buf: Buffer): DatabaseVersion;
    /**
     * Compares two versions. If the rollups addresses are different then it returns undefined
     */
    cmp(other: DatabaseVersion): undefined | -1 | 0 | 1;
    /**
     * Checks if two versions exactly match
     */
    equals(other: DatabaseVersion): boolean;
    /**
     * Returns the schema for this class
     */
    static get schema(): z.ZodEffects<z.ZodObject<{
        schemaVersion: z.ZodNumber;
        rollupAddress: z.ZodType<EthAddress, any, string>;
    }, "strip", z.ZodTypeAny, {
        rollupAddress: EthAddress;
        schemaVersion: number;
    }, {
        rollupAddress: string;
        schemaVersion: number;
    }>, DatabaseVersion, {
        rollupAddress: string;
        schemaVersion: number;
    }>;
    /** Allows for better introspection. */
    [inspect.custom](): string;
    toString(): string;
    /**
     * Returns an empty instance
     */
    static empty(): DatabaseVersion;
}
export type DatabaseVersionManagerFs = Pick<typeof fs, 'readFile' | 'writeFile' | 'rm' | 'mkdir'>;
export declare const DATABASE_VERSION_FILE_NAME = "db_version";
export type DatabaseVersionManagerOptions<T> = {
    schemaVersion: number;
    rollupAddress: EthAddress;
    dataDirectory: string;
    onOpen: (dataDir: string) => Promise<T>;
    onUpgrade?: (dataDir: string, currentVersion: number, latestVersion: number) => Promise<void>;
    fileSystem?: DatabaseVersionManagerFs;
    log?: Logger;
};
/**
 * A manager for handling database versioning and migrations.
 * This class will check the version of data in a directory and either
 * reset or upgrade based on version compatibility.
 */
export declare class DatabaseVersionManager<T> {
    static readonly VERSION_FILE = "db_version";
    private readonly versionFile;
    private readonly currentVersion;
    private dataDirectory;
    private onOpen;
    private onUpgrade?;
    private fileSystem;
    private log;
    /**
     * Create a new version manager
     *
     * @param schemaVersion - The current version of the application
     * @param rollupAddress - The rollup contract address
     * @param dataDirectory - The directory where version information will be stored
     * @param onOpen - A callback to the open the database at the given location
     * @param onUpgrade - An optional callback to upgrade the database before opening. If not provided it will reset the database
     * @param fileSystem - An interface to access the filesystem
     * @param log - Optional custom logger
     * @param options - Configuration options
     */
    constructor({ schemaVersion, rollupAddress, dataDirectory, onOpen, onUpgrade, fileSystem, log, }: DatabaseVersionManagerOptions<T>);
    static writeVersion(version: DatabaseVersion, dataDir: string, fileSystem?: DatabaseVersionManagerFs): Promise<void>;
    /**
     * Checks the stored version against the current version and handles the outcome
     * by either resetting the data directory or calling an upgrade function
     *
     * @param onReset - Function to call when a full reset is needed
     * @param onUpgrade - Function to call when an upgrade is needed
     * @returns True if data was reset, false if upgraded or no change needed
     */
    open(): Promise<[T, boolean]>;
    /**
     * Writes the current version to the version file
     */
    writeVersion(dir?: string): Promise<void>;
    /**
     * Resets the data directory by deleting it and recreating it
     */
    resetDataDirectory(): Promise<void>;
    /**
     * Get the data directory path
     */
    getDataDirectory(): string;
    /**
     * Get the current version number
     */
    getSchemaVersion(): number;
}
//# sourceMappingURL=version_manager.d.ts.map