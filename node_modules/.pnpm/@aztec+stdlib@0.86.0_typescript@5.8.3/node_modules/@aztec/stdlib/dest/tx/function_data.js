import { FUNCTION_DATA_LENGTH } from '@aztec/constants';
import { Fr } from '@aztec/foundation/fields';
import { BufferReader, FieldReader, serializeToBuffer } from '@aztec/foundation/serialize';
import { z } from 'zod';
import { FunctionSelector, FunctionType } from '../abi/index.js';
/** Function description for circuit. */ export class FunctionData {
    selector;
    isPrivate;
    constructor(/** Function selector of the function being called. */ selector, /** Indicates whether the function is private or public. */ isPrivate){
        this.selector = selector;
        this.isPrivate = isPrivate;
    }
    static async fromAbi(abi) {
        return new FunctionData(await FunctionSelector.fromNameAndParameters(abi.name, abi.parameters), abi.functionType === FunctionType.PRIVATE);
    }
    static get schema() {
        return z.object({
            selector: FunctionSelector.schema,
            isPrivate: z.boolean()
        }).transform(({ selector, isPrivate })=>new FunctionData(selector, isPrivate));
    }
    /**
   * Serialize this as a buffer.
   * @returns The buffer.
   */ toBuffer() {
        return serializeToBuffer(this.selector, this.isPrivate);
    }
    toFields() {
        const fields = [
            this.selector.toField(),
            new Fr(this.isPrivate)
        ];
        if (fields.length !== FUNCTION_DATA_LENGTH) {
            throw new Error(`Invalid number of fields for FunctionData. Expected ${FUNCTION_DATA_LENGTH}, got ${fields.length}`);
        }
        return fields;
    }
    /**
   * Returns whether this instance is empty.
   * @returns True if the function selector is zero.
   */ isEmpty() {
        return this.selector.isEmpty();
    }
    /**
   * Returns whether this instance is equal to another.
   * @param other
   * @returns
   */ equals(other) {
        return this.selector.equals(other.selector) && this.isPrivate === other.isPrivate;
    }
    /**
   * Returns a new instance of FunctionData with zero function selector.
   * @param args - Arguments to pass to the constructor.
   * @returns A new instance of FunctionData with zero function selector.
   */ static empty(args) {
        return new FunctionData(FunctionSelector.empty(), args?.isPrivate ?? false);
    }
    /**
   * Deserializes from a buffer or reader, corresponding to a write in cpp.
   * @param buffer - Buffer or reader to read from.
   * @returns A new instance of FunctionData.
   */ static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new FunctionData(reader.readObject(FunctionSelector), /*isPrivate=*/ reader.readBoolean());
    }
    static fromFields(fields) {
        const reader = FieldReader.asReader(fields);
        const selector = FunctionSelector.fromFields(reader);
        const isPrivate = reader.readBoolean();
        return new FunctionData(selector, isPrivate);
    }
}
