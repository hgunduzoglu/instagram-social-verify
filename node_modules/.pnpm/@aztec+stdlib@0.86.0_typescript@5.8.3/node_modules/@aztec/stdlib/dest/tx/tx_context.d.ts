/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import { Fr } from '@aztec/foundation/fields';
import { BufferReader, FieldReader } from '@aztec/foundation/serialize';
import type { FieldsOf } from '@aztec/foundation/types';
import { z } from 'zod';
import { GasSettings } from '../gas/gas_settings.js';
/**
 * Transaction context.
 */
export declare class TxContext {
    /** Gas limits for this transaction. */
    gasSettings: GasSettings;
    chainId: Fr;
    version: Fr;
    constructor(
    /** Chain ID of the transaction. Here for replay protection. */
    chainId: Fr | number | bigint, 
    /** Version of the transaction. Here for replay protection. */
    version: Fr | number | bigint, 
    /** Gas limits for this transaction. */
    gasSettings: GasSettings);
    static get schema(): z.ZodEffects<z.ZodObject<{
        chainId: z.ZodType<Fr, any, string>;
        version: z.ZodType<Fr, any, string>;
        gasSettings: z.ZodEffects<z.ZodObject<{
            gasLimits: z.ZodEffects<z.ZodObject<{
                daGas: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                l2Gas: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                daGas: number;
                l2Gas: number;
            }, {
                daGas: string | number | bigint;
                l2Gas: string | number | bigint;
            }>, import("../gas/gas.js").Gas, {
                daGas: string | number | bigint;
                l2Gas: string | number | bigint;
            }>;
            teardownGasLimits: z.ZodEffects<z.ZodObject<{
                daGas: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
                l2Gas: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                daGas: number;
                l2Gas: number;
            }, {
                daGas: string | number | bigint;
                l2Gas: string | number | bigint;
            }>, import("../gas/gas.js").Gas, {
                daGas: string | number | bigint;
                l2Gas: string | number | bigint;
            }>;
            maxFeesPerGas: z.ZodEffects<z.ZodObject<{
                feePerDaGas: z.ZodType<Fr, any, string>;
                feePerL2Gas: z.ZodType<Fr, any, string>;
            }, "strip", z.ZodTypeAny, {
                feePerDaGas: Fr;
                feePerL2Gas: Fr;
            }, {
                feePerDaGas: string;
                feePerL2Gas: string;
            }>, import("../gas/gas_fees.js").GasFees, {
                feePerDaGas: string;
                feePerL2Gas: string;
            }>;
            maxPriorityFeesPerGas: z.ZodEffects<z.ZodObject<{
                feePerDaGas: z.ZodType<Fr, any, string>;
                feePerL2Gas: z.ZodType<Fr, any, string>;
            }, "strip", z.ZodTypeAny, {
                feePerDaGas: Fr;
                feePerL2Gas: Fr;
            }, {
                feePerDaGas: string;
                feePerL2Gas: string;
            }>, import("../gas/gas_fees.js").GasFees, {
                feePerDaGas: string;
                feePerL2Gas: string;
            }>;
        }, "strip", z.ZodTypeAny, {
            gasLimits: import("../gas/gas.js").Gas;
            teardownGasLimits: import("../gas/gas.js").Gas;
            maxFeesPerGas: import("../gas/gas_fees.js").GasFees;
            maxPriorityFeesPerGas: import("../gas/gas_fees.js").GasFees;
        }, {
            gasLimits: {
                daGas: string | number | bigint;
                l2Gas: string | number | bigint;
            };
            teardownGasLimits: {
                daGas: string | number | bigint;
                l2Gas: string | number | bigint;
            };
            maxFeesPerGas: {
                feePerDaGas: string;
                feePerL2Gas: string;
            };
            maxPriorityFeesPerGas: {
                feePerDaGas: string;
                feePerL2Gas: string;
            };
        }>, GasSettings, {
            gasLimits: {
                daGas: string | number | bigint;
                l2Gas: string | number | bigint;
            };
            teardownGasLimits: {
                daGas: string | number | bigint;
                l2Gas: string | number | bigint;
            };
            maxFeesPerGas: {
                feePerDaGas: string;
                feePerL2Gas: string;
            };
            maxPriorityFeesPerGas: {
                feePerDaGas: string;
                feePerL2Gas: string;
            };
        }>;
    }, "strip", z.ZodTypeAny, {
        chainId: Fr;
        version: Fr;
        gasSettings: GasSettings;
    }, {
        chainId: string;
        version: string;
        gasSettings: {
            gasLimits: {
                daGas: string | number | bigint;
                l2Gas: string | number | bigint;
            };
            teardownGasLimits: {
                daGas: string | number | bigint;
                l2Gas: string | number | bigint;
            };
            maxFeesPerGas: {
                feePerDaGas: string;
                feePerL2Gas: string;
            };
            maxPriorityFeesPerGas: {
                feePerDaGas: string;
                feePerL2Gas: string;
            };
        };
    }>, TxContext, {
        chainId: string;
        version: string;
        gasSettings: {
            gasLimits: {
                daGas: string | number | bigint;
                l2Gas: string | number | bigint;
            };
            teardownGasLimits: {
                daGas: string | number | bigint;
                l2Gas: string | number | bigint;
            };
            maxFeesPerGas: {
                feePerDaGas: string;
                feePerL2Gas: string;
            };
            maxPriorityFeesPerGas: {
                feePerDaGas: string;
                feePerL2Gas: string;
            };
        };
    }>;
    getSize(): number;
    clone(): TxContext;
    /**
     * Serialize as a buffer.
     * @returns The buffer.
     */
    toBuffer(): Buffer;
    static fromFields(fields: Fr[] | FieldReader): TxContext;
    toFields(): Fr[];
    /**
     * Deserializes TxContext from a buffer or reader.
     * @param buffer - Buffer to read from.
     * @returns The TxContext.
     */
    static fromBuffer(buffer: Buffer | BufferReader): TxContext;
    static empty(chainId?: Fr | number, version?: Fr | number): TxContext;
    isEmpty(): boolean;
    /**
     * Create a new instance from a fields dictionary.
     * @param fields - The dictionary.
     * @returns A new instance.
     */
    static from(fields: FieldsOf<TxContext>): TxContext;
    /**
     * Serialize into a field array. Low-level utility.
     * @param fields - Object with fields.
     * @returns The array.
     */
    static getFields(fields: FieldsOf<TxContext>): readonly [Fr, Fr, GasSettings];
}
//# sourceMappingURL=tx_context.d.ts.map