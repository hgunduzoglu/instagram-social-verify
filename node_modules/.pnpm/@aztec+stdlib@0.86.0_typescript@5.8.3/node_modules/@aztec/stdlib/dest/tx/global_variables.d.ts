/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import { EthAddress } from '@aztec/foundation/eth-address';
import { Fr } from '@aztec/foundation/fields';
import { BufferReader, FieldReader } from '@aztec/foundation/serialize';
import type { FieldsOf } from '@aztec/foundation/types';
import { inspect } from 'util';
import { z } from 'zod';
import { AztecAddress } from '../aztec-address/index.js';
import { GasFees } from '../gas/gas_fees.js';
/**
 * Global variables of the L2 block.
 */
export declare class GlobalVariables {
    /** ChainId for the L2 block. */
    chainId: Fr;
    /** Version for the L2 block. */
    version: Fr;
    /** Block number of the L2 block. */
    blockNumber: Fr;
    /** Slot number of the L2 block */
    slotNumber: Fr;
    /** Timestamp of the L2 block. */
    timestamp: Fr;
    /** Recipient of block reward. */
    coinbase: EthAddress;
    /** Address to receive fees. */
    feeRecipient: AztecAddress;
    /** Global gas prices for this block. */
    gasFees: GasFees;
    constructor(
    /** ChainId for the L2 block. */
    chainId: Fr, 
    /** Version for the L2 block. */
    version: Fr, 
    /** Block number of the L2 block. */
    blockNumber: Fr, 
    /** Slot number of the L2 block */
    slotNumber: Fr, 
    /** Timestamp of the L2 block. */
    timestamp: Fr, 
    /** Recipient of block reward. */
    coinbase: EthAddress, 
    /** Address to receive fees. */
    feeRecipient: AztecAddress, 
    /** Global gas prices for this block. */
    gasFees: GasFees);
    static get schema(): z.ZodEffects<z.ZodObject<{
        chainId: import("../schemas/index.js").ZodFor<Fr>;
        version: import("../schemas/index.js").ZodFor<Fr>;
        blockNumber: import("../schemas/index.js").ZodFor<Fr>;
        slotNumber: import("../schemas/index.js").ZodFor<Fr>;
        timestamp: import("../schemas/index.js").ZodFor<Fr>;
        coinbase: import("../schemas/index.js").ZodFor<EthAddress>;
        feeRecipient: import("../schemas/index.js").ZodFor<AztecAddress>;
        gasFees: z.ZodEffects<z.ZodObject<{
            feePerDaGas: z.ZodType<Fr, any, string>;
            feePerL2Gas: z.ZodType<Fr, any, string>;
        }, "strip", z.ZodTypeAny, {
            feePerDaGas: Fr;
            feePerL2Gas: Fr;
        }, {
            feePerDaGas: string;
            feePerL2Gas: string;
        }>, GasFees, {
            feePerDaGas: string;
            feePerL2Gas: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        chainId: Fr;
        version: Fr;
        blockNumber: Fr;
        slotNumber: Fr;
        timestamp: Fr;
        coinbase: EthAddress;
        feeRecipient: AztecAddress;
        gasFees: GasFees;
    }, {
        gasFees: {
            feePerDaGas: string;
            feePerL2Gas: string;
        };
        chainId?: any;
        version?: any;
        blockNumber?: any;
        slotNumber?: any;
        timestamp?: any;
        coinbase?: any;
        feeRecipient?: any;
    }>, GlobalVariables, {
        gasFees: {
            feePerDaGas: string;
            feePerL2Gas: string;
        };
        chainId?: any;
        version?: any;
        blockNumber?: any;
        slotNumber?: any;
        timestamp?: any;
        coinbase?: any;
        feeRecipient?: any;
    }>;
    getSize(): number;
    static from(fields: FieldsOf<GlobalVariables>): GlobalVariables;
    static empty(fields?: Partial<FieldsOf<GlobalVariables>>): GlobalVariables;
    static fromBuffer(buffer: Buffer | BufferReader): GlobalVariables;
    static fromFields(fields: Fr[] | FieldReader): GlobalVariables;
    static getFields(fields: FieldsOf<GlobalVariables>): readonly [Fr, Fr, Fr, Fr, Fr, EthAddress, AztecAddress, GasFees];
    toBuffer(): Buffer;
    toFields(): Fr[];
    /**
     * A trimmed version of the JSON representation of the global variables,
     * tailored for human consumption.
     */
    toFriendlyJSON(): {
        blockNumber: number;
        slotNumber: number;
        timestamp: `0x${string}`;
        coinbase: `0x${string}`;
        gasFees: string;
    };
    clone(): GlobalVariables;
    isEmpty(): boolean;
    toInspect(): {
        chainId: number;
        version: number;
        blockNumber: number;
        slotNumber: number;
        timestamp: number;
        coinbase: `0x${string}`;
        feeRecipient: `0x${string}`;
        feePerDaGas: number;
        feePerL2Gas: number;
    };
    [inspect.custom](): string;
    equals(other: this): boolean;
}
//# sourceMappingURL=global_variables.d.ts.map