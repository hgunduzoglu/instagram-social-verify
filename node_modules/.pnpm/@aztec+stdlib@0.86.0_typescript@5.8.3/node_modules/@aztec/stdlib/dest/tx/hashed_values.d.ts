/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import { Fr } from '@aztec/foundation/fields';
import { BufferReader } from '@aztec/foundation/serialize';
import type { FieldsOf } from '@aztec/foundation/types';
import { type ZodFor } from '../schemas/schemas.js';
/**
 * A container for storing a list of values and their hash.
 */
export declare class HashedValues {
    /**
     *  Raw values.
     */
    readonly values: Fr[];
    /**
     * The hash of the raw values
     */
    readonly hash: Fr;
    constructor(
    /**
     *  Raw values.
     */
    values: Fr[], 
    /**
     * The hash of the raw values
     */
    hash: Fr);
    getSize(): number;
    static get schema(): ZodFor<HashedValues>;
    static from(fields: FieldsOf<HashedValues>): HashedValues;
    static getFields(fields: FieldsOf<HashedValues>): readonly [Fr[], Fr];
    static random(): HashedValues;
    toBuffer(): Buffer;
    static fromBuffer(buffer: Buffer | BufferReader): HashedValues;
    static fromArgs(args: Fr[]): Promise<HashedValues>;
    static fromCalldata(calldata: Fr[]): Promise<HashedValues>;
}
//# sourceMappingURL=hashed_values.d.ts.map