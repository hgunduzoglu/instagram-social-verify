/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import type { Fr } from '@aztec/foundation/fields';
import { BufferReader, FieldReader } from '@aztec/foundation/serialize';
import { z } from 'zod';
import { AppendOnlyTreeSnapshot } from '../trees/append_only_tree_snapshot.js';
/**
 * Stores snapshots of trees which are commonly needed by base or merge rollup circuits.
 */
export declare class PartialStateReference {
    /** Snapshot of the note hash tree. */
    readonly noteHashTree: AppendOnlyTreeSnapshot;
    /** Snapshot of the nullifier tree. */
    readonly nullifierTree: AppendOnlyTreeSnapshot;
    /** Snapshot of the public data tree. */
    readonly publicDataTree: AppendOnlyTreeSnapshot;
    constructor(
    /** Snapshot of the note hash tree. */
    noteHashTree: AppendOnlyTreeSnapshot, 
    /** Snapshot of the nullifier tree. */
    nullifierTree: AppendOnlyTreeSnapshot, 
    /** Snapshot of the public data tree. */
    publicDataTree: AppendOnlyTreeSnapshot);
    static get schema(): z.ZodEffects<z.ZodObject<{
        noteHashTree: z.ZodEffects<z.ZodObject<{
            root: z.ZodType<Fr, any, string>;
            nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            root: Fr;
            nextAvailableLeafIndex: number;
        }, {
            root: string;
            nextAvailableLeafIndex: string | number | bigint;
        }>, AppendOnlyTreeSnapshot, {
            root: string;
            nextAvailableLeafIndex: string | number | bigint;
        }>;
        nullifierTree: z.ZodEffects<z.ZodObject<{
            root: z.ZodType<Fr, any, string>;
            nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            root: Fr;
            nextAvailableLeafIndex: number;
        }, {
            root: string;
            nextAvailableLeafIndex: string | number | bigint;
        }>, AppendOnlyTreeSnapshot, {
            root: string;
            nextAvailableLeafIndex: string | number | bigint;
        }>;
        publicDataTree: z.ZodEffects<z.ZodObject<{
            root: z.ZodType<Fr, any, string>;
            nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            root: Fr;
            nextAvailableLeafIndex: number;
        }, {
            root: string;
            nextAvailableLeafIndex: string | number | bigint;
        }>, AppendOnlyTreeSnapshot, {
            root: string;
            nextAvailableLeafIndex: string | number | bigint;
        }>;
    }, "strip", z.ZodTypeAny, {
        noteHashTree: AppendOnlyTreeSnapshot;
        nullifierTree: AppendOnlyTreeSnapshot;
        publicDataTree: AppendOnlyTreeSnapshot;
    }, {
        noteHashTree: {
            root: string;
            nextAvailableLeafIndex: string | number | bigint;
        };
        nullifierTree: {
            root: string;
            nextAvailableLeafIndex: string | number | bigint;
        };
        publicDataTree: {
            root: string;
            nextAvailableLeafIndex: string | number | bigint;
        };
    }>, PartialStateReference, {
        noteHashTree: {
            root: string;
            nextAvailableLeafIndex: string | number | bigint;
        };
        nullifierTree: {
            root: string;
            nextAvailableLeafIndex: string | number | bigint;
        };
        publicDataTree: {
            root: string;
            nextAvailableLeafIndex: string | number | bigint;
        };
    }>;
    getSize(): number;
    static fromBuffer(buffer: Buffer | BufferReader): PartialStateReference;
    static fromFields(fields: Fr[] | FieldReader): PartialStateReference;
    static empty(): PartialStateReference;
    toBuffer(): Buffer;
    toFields(): Fr[];
    isEmpty(): boolean;
    equals(other: this): boolean;
}
//# sourceMappingURL=partial_state_reference.d.ts.map