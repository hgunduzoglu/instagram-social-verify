import { TX_CONTEXT_LENGTH } from '@aztec/constants';
import { Fr } from '@aztec/foundation/fields';
import { schemas } from '@aztec/foundation/schemas';
import { BufferReader, FieldReader, serializeToBuffer, serializeToFields } from '@aztec/foundation/serialize';
import { z } from 'zod';
import { GasSettings } from '../gas/gas_settings.js';
/**
 * Transaction context.
 */ export class TxContext {
    gasSettings;
    chainId;
    version;
    constructor(/** Chain ID of the transaction. Here for replay protection. */ chainId, /** Version of the transaction. Here for replay protection. */ version, /** Gas limits for this transaction. */ gasSettings){
        this.gasSettings = gasSettings;
        this.chainId = new Fr(chainId);
        this.version = new Fr(version);
    }
    static get schema() {
        return z.object({
            chainId: schemas.Fr,
            version: schemas.Fr,
            gasSettings: GasSettings.schema
        }).transform(TxContext.from);
    }
    getSize() {
        return this.chainId.size + this.version.size + this.gasSettings.getSize();
    }
    clone() {
        return new TxContext(this.chainId, this.version, this.gasSettings.clone());
    }
    /**
   * Serialize as a buffer.
   * @returns The buffer.
   */ toBuffer() {
        return serializeToBuffer(...TxContext.getFields(this));
    }
    static fromFields(fields) {
        const reader = FieldReader.asReader(fields);
        return new TxContext(reader.readField(), reader.readField(), reader.readObject(GasSettings));
    }
    toFields() {
        const fields = serializeToFields(...TxContext.getFields(this));
        if (fields.length !== TX_CONTEXT_LENGTH) {
            throw new Error(`Invalid number of fields for TxContext. Expected ${TX_CONTEXT_LENGTH}, got ${fields.length}`);
        }
        return fields;
    }
    /**
   * Deserializes TxContext from a buffer or reader.
   * @param buffer - Buffer to read from.
   * @returns The TxContext.
   */ static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new TxContext(Fr.fromBuffer(reader), Fr.fromBuffer(reader), reader.readObject(GasSettings));
    }
    static empty(chainId = 0, version = 0) {
        return new TxContext(new Fr(chainId), new Fr(version), GasSettings.empty());
    }
    isEmpty() {
        return this.chainId.isZero() && this.version.isZero() && this.gasSettings.isEmpty();
    }
    /**
   * Create a new instance from a fields dictionary.
   * @param fields - The dictionary.
   * @returns A new instance.
   */ static from(fields) {
        return new TxContext(...TxContext.getFields(fields));
    }
    /**
   * Serialize into a field array. Low-level utility.
   * @param fields - Object with fields.
   * @returns The array.
   */ static getFields(fields) {
        return [
            fields.chainId,
            fields.version,
            fields.gasSettings
        ];
    }
}
