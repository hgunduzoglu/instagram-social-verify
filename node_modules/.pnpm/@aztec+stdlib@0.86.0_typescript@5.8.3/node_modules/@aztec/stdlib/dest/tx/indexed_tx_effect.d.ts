import { type InBlock } from '../block/in_block.js';
import { TxEffect } from './tx_effect.js';
export type IndexedTxEffect = InBlock<TxEffect> & {
    txIndexInBlock: number;
};
export declare function indexedTxSchema(): import("zod").ZodObject<import("zod").objectUtil.extendShape<{
    data: import("@aztec/foundation/schemas").ZodFor<TxEffect>;
    l2BlockNumber: import("zod").ZodPipeline<import("zod").ZodUnion<[import("zod").ZodBigInt, import("zod").ZodNumber, import("zod").ZodString]>, import("zod").ZodNumber>;
    l2BlockHash: import("zod").ZodString;
}, {
    txIndexInBlock: import("zod").ZodPipeline<import("zod").ZodUnion<[import("zod").ZodBigInt, import("zod").ZodNumber, import("zod").ZodString]>, import("zod").ZodNumber>;
}>, "strip", import("zod").ZodTypeAny, {
    data: TxEffect;
    l2BlockNumber: number;
    l2BlockHash: string;
    txIndexInBlock: number;
}, {
    l2BlockNumber: string | number | bigint;
    l2BlockHash: string;
    txIndexInBlock: string | number | bigint;
    data?: any;
}>;
export declare function randomIndexedTxEffect(): Promise<IndexedTxEffect>;
//# sourceMappingURL=indexed_tx_effect.d.ts.map