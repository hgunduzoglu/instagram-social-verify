/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import { Fr } from '@aztec/foundation/fields';
import type { FieldsOf } from '@aztec/foundation/types';
import { z } from 'zod';
import { NoteSelector } from '../abi/note_selector.js';
import { PrivateCircuitPublicInputs } from '../kernel/private_circuit_public_inputs.js';
import type { IsEmpty } from '../kernel/utils/interfaces.js';
import { ContractClassLog } from '../logs/contract_class_log.js';
import { Note } from '../note/note.js';
import { type ZodFor } from '../schemas/index.js';
import { HashedValues } from './hashed_values.js';
/**
 * The contents of a new note.
 */
export declare class NoteAndSlot {
    /** The note. */
    note: Note;
    /** The storage slot of the note. */
    storageSlot: Fr;
    /** The note type identifier. */
    noteTypeId: NoteSelector;
    constructor(
    /** The note. */
    note: Note, 
    /** The storage slot of the note. */
    storageSlot: Fr, 
    /** The note type identifier. */
    noteTypeId: NoteSelector);
    static get schema(): z.ZodEffects<z.ZodObject<{
        note: z.ZodEffects<z.ZodUnion<[z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, Buffer, string>, z.ZodEffects<z.ZodObject<{
            type: z.ZodLiteral<"Buffer">;
            data: z.ZodArray<z.ZodNumber, "many">;
        }, "strip", z.ZodTypeAny, {
            type: "Buffer";
            data: number[];
        }, {
            type: "Buffer";
            data: number[];
        }>, Buffer, {
            type: "Buffer";
            data: number[];
        }>]>, Note, string | {
            type: "Buffer";
            data: number[];
        }>;
        storageSlot: ZodFor<Fr>;
        noteTypeId: z.ZodType<NoteSelector, any, string>;
    }, "strip", z.ZodTypeAny, {
        storageSlot: Fr;
        note: Note;
        noteTypeId: NoteSelector;
    }, {
        note: string | {
            type: "Buffer";
            data: number[];
        };
        noteTypeId: string;
        storageSlot?: any;
    }>, NoteAndSlot, {
        note: string | {
            type: "Buffer";
            data: number[];
        };
        noteTypeId: string;
        storageSlot?: any;
    }>;
    static from(fields: FieldsOf<NoteAndSlot>): NoteAndSlot;
    static random(): NoteAndSlot;
}
export declare class CountedContractClassLog implements IsEmpty {
    log: ContractClassLog;
    counter: number;
    constructor(log: ContractClassLog, counter: number);
    static get schema(): ZodFor<CountedContractClassLog>;
    static from(fields: {
        log: ContractClassLog;
        counter: number;
    }): CountedContractClassLog;
    isEmpty(): boolean;
}
export declare class PrivateExecutionResult {
    entrypoint: PrivateCallExecutionResult;
    /** The first non revertible nullifier, or zero if there was none. */
    firstNullifier: Fr;
    /** An array of calldata for the enqueued public function calls and the teardown function call. */
    publicFunctionCalldata: HashedValues[];
    constructor(entrypoint: PrivateCallExecutionResult, 
    /** The first non revertible nullifier, or zero if there was none. */
    firstNullifier: Fr, 
    /** An array of calldata for the enqueued public function calls and the teardown function call. */
    publicFunctionCalldata: HashedValues[]);
    static get schema(): ZodFor<PrivateExecutionResult>;
    static from(fields: FieldsOf<PrivateExecutionResult>): PrivateExecutionResult;
    static random(nested?: number): Promise<PrivateExecutionResult>;
    /**
     * The block number that this execution was simulated with.
     */
    getSimulationBlockNumber(): number;
}
/**
 * The result of executing a call to a private function.
 */
export declare class PrivateCallExecutionResult {
    /** The ACIR bytecode. */
    acir: Buffer;
    /** The verification key. */
    vk: Buffer;
    /** The partial witness. */
    partialWitness: Map<number, string>;
    /** The call stack item. */
    publicInputs: PrivateCircuitPublicInputs;
    /** Mapping of note hash to its index in the note hash tree. Used for building hints for note hash read requests. */
    noteHashLeafIndexMap: Map<bigint, bigint>;
    /** The notes created in the executed function. */
    newNotes: NoteAndSlot[];
    /** Mapping of note hash counter to the counter of its nullifier. */
    noteHashNullifierCounterMap: Map<number, number>;
    /** The raw return values of the executed function. */
    returnValues: Fr[];
    /** The nested executions. */
    nestedExecutions: PrivateCallExecutionResult[];
    /**
     * Contract class logs emitted during execution of this function call.
     * Note: These are preimages to `contractClassLogsHashes`.
     */
    contractClassLogs: CountedContractClassLog[];
    constructor(
    /** The ACIR bytecode. */
    acir: Buffer, 
    /** The verification key. */
    vk: Buffer, 
    /** The partial witness. */
    partialWitness: Map<number, string>, 
    /** The call stack item. */
    publicInputs: PrivateCircuitPublicInputs, 
    /** Mapping of note hash to its index in the note hash tree. Used for building hints for note hash read requests. */
    noteHashLeafIndexMap: Map<bigint, bigint>, 
    /** The notes created in the executed function. */
    newNotes: NoteAndSlot[], 
    /** Mapping of note hash counter to the counter of its nullifier. */
    noteHashNullifierCounterMap: Map<number, number>, 
    /** The raw return values of the executed function. */
    returnValues: Fr[], 
    /** The nested executions. */
    nestedExecutions: PrivateCallExecutionResult[], 
    /**
     * Contract class logs emitted during execution of this function call.
     * Note: These are preimages to `contractClassLogsHashes`.
     */
    contractClassLogs: CountedContractClassLog[]);
    static get schema(): ZodFor<PrivateCallExecutionResult>;
    static from(fields: FieldsOf<PrivateCallExecutionResult>): PrivateCallExecutionResult;
    static random(nested?: number): Promise<PrivateCallExecutionResult>;
}
export declare function collectNoteHashLeafIndexMap(execResult: PrivateExecutionResult): Map<bigint, bigint>;
export declare function collectNoteHashNullifierCounterMap(execResult: PrivateExecutionResult): Map<number, number>;
/**
 * Collect all contract class logs across all nested executions and sorts by counter.
 * @param execResult - The topmost execution result.
 * @returns All contract class logs.
 */
export declare function collectSortedContractClassLogs(execResult: PrivateExecutionResult): ContractClassLog[];
export declare function getFinalMinRevertibleSideEffectCounter(execResult: PrivateExecutionResult): number;
export declare function collectNested<T>(executionStack: PrivateCallExecutionResult[], extractExecutionItems: (execution: PrivateCallExecutionResult) => T[]): T[];
//# sourceMappingURL=private_execution_result.d.ts.map