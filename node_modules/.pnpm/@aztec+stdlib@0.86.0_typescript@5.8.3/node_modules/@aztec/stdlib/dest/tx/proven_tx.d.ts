import type { FieldsOf } from '@aztec/foundation/types';
import { z } from 'zod';
import { PrivateKernelTailCircuitPublicInputs } from '../kernel/private_kernel_tail_circuit_public_inputs.js';
import { ClientIvcProof } from '../proofs/client_ivc_proof.js';
import { PrivateExecutionResult } from './private_execution_result.js';
import { Tx } from './tx.js';
export declare class TxProvingResult {
    privateExecutionResult: PrivateExecutionResult;
    publicInputs: PrivateKernelTailCircuitPublicInputs;
    clientIvcProof: ClientIvcProof;
    constructor(privateExecutionResult: PrivateExecutionResult, publicInputs: PrivateKernelTailCircuitPublicInputs, clientIvcProof: ClientIvcProof);
    toTx(): Tx;
    static get schema(): z.ZodEffects<z.ZodObject<{
        privateExecutionResult: import("@aztec/foundation/schemas").ZodFor<PrivateExecutionResult>;
        publicInputs: z.ZodType<PrivateKernelTailCircuitPublicInputs, any, string>;
        clientIvcProof: z.ZodType<ClientIvcProof, any, string>;
    }, "strip", z.ZodTypeAny, {
        publicInputs: PrivateKernelTailCircuitPublicInputs;
        clientIvcProof: ClientIvcProof;
        privateExecutionResult: PrivateExecutionResult;
    }, {
        publicInputs: string;
        clientIvcProof: string;
        privateExecutionResult?: any;
    }>, TxProvingResult, {
        publicInputs: string;
        clientIvcProof: string;
        privateExecutionResult?: any;
    }>;
    static from(fields: FieldsOf<TxProvingResult>): TxProvingResult;
    static random(): Promise<TxProvingResult>;
}
//# sourceMappingURL=proven_tx.d.ts.map