import { Fr } from '@aztec/foundation/fields';
import type { AvmProvingRequest } from '../avm/avm_proving_request.js';
import type { PublicDataWrite } from '../avm/public_data_write.js';
import { RevertCode } from '../avm/revert_code.js';
import type { SimulationError } from '../errors/simulation_error.js';
import type { GasUsed } from '../gas/gas_used.js';
import { CombinedConstantData } from '../kernel/combined_constant_data.js';
import type { PrivateKernelTailCircuitPublicInputs } from '../kernel/private_kernel_tail_circuit_public_inputs.js';
import type { ClientIvcProof } from '../proofs/client_ivc_proof.js';
import type { GlobalVariables } from './global_variables.js';
import type { Tx } from './tx.js';
import { TxEffect } from './tx_effect.js';
import type { TxHash } from './tx_hash.js';
export declare enum TxExecutionPhase {
    SETUP = 0,
    APP_LOGIC = 1,
    TEARDOWN = 2
}
/**
 * Represents a tx that has been processed by the sequencer public processor,
 * so its kernel circuit public inputs are filled in.
 */
export type ProcessedTx = {
    /**
     * Hash of the transaction.
     */
    hash: TxHash;
    /**
     * Tx.data. The output of the private kernel tail or tail_to_public.
     */
    data: PrivateKernelTailCircuitPublicInputs;
    /**
     * Proof for the private execution.
     */
    clientIvcProof: ClientIvcProof;
    /**
     * The request for AVM proving.
     */
    avmProvingRequest: AvmProvingRequest | undefined;
    /**
     * Combining `TxConstantData` specified by the user, and `GlobalVariables` injected by the sequencer.
     */
    constants: CombinedConstantData;
    /**
     * Output data of the tx.
     */
    txEffect: TxEffect;
    gasUsed: GasUsed;
    /**
     * Code the tx was reverted (or OK).
     */
    revertCode: RevertCode;
    /**
     * Reason the tx was reverted.
     */
    revertReason: SimulationError | undefined;
};
/**
 * Represents a tx that failed to be processed by the sequencer public processor.
 */
export type FailedTx = {
    /**
     * The failing transaction.
     */
    tx: Tx;
    /**
     * The error that caused the tx to fail.
     */
    error: Error;
};
export declare function makeProcessedTxFromPrivateOnlyTx(tx: Tx, transactionFee: Fr, feePaymentPublicDataWrite: PublicDataWrite, globalVariables: GlobalVariables): Promise<ProcessedTx>;
export declare function toNumBlobFields(txs: ProcessedTx[]): number;
export declare function makeProcessedTxFromTxWithPublicCalls(tx: Tx, avmProvingRequest: AvmProvingRequest, gasUsed: GasUsed, revertCode: RevertCode, revertReason: SimulationError | undefined): Promise<ProcessedTx>;
//# sourceMappingURL=processed_tx.d.ts.map