/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import { Buffer32 } from '@aztec/foundation/buffer';
import { Fr } from '@aztec/foundation/fields';
import type { ZodFor } from '@aztec/foundation/schemas';
import { BufferReader } from '@aztec/foundation/serialize';
import type { FieldsOf } from '@aztec/foundation/types';
import type { GasSettings } from '../gas/gas_settings.js';
import type { GetPublicLogsResponse } from '../interfaces/get_logs_response.js';
import type { L2LogsSource } from '../interfaces/l2_logs_source.js';
import type { ScopedLogHash } from '../kernel/log_hash.js';
import { PrivateKernelTailCircuitPublicInputs } from '../kernel/private_kernel_tail_circuit_public_inputs.js';
import { ContractClassLog } from '../logs/contract_class_log.js';
import { Gossipable } from '../p2p/gossipable.js';
import { TopicType } from '../p2p/topic_type.js';
import { ClientIvcProof } from '../proofs/client_ivc_proof.js';
import type { TxStats } from '../stats/stats.js';
import { HashedValues } from './hashed_values.js';
import { PublicCallRequestWithCalldata } from './public_call_request_with_calldata.js';
import { TxHash } from './tx_hash.js';
/**
 * The interface of an L2 transaction.
 */
export declare class Tx extends Gossipable {
    #private;
    /**
     * Output of the private kernel circuit for this tx.
     */
    readonly data: PrivateKernelTailCircuitPublicInputs;
    /**
     * Proof from the private kernel circuit.
     * TODO(#7368): This client IVC object currently contains various VKs that will eventually be more like static data.
     */
    readonly clientIvcProof: ClientIvcProof;
    /**
     * Contract class logs generated by the tx.
     */
    contractClassLogs: ContractClassLog[];
    /**
     * An array of calldata for the enqueued public function calls and the teardown function call.
     */
    publicFunctionCalldata: HashedValues[];
    static p2pTopic: TopicType;
    private txHash;
    private calldataMap;
    constructor(
    /**
     * Output of the private kernel circuit for this tx.
     */
    data: PrivateKernelTailCircuitPublicInputs, 
    /**
     * Proof from the private kernel circuit.
     * TODO(#7368): This client IVC object currently contains various VKs that will eventually be more like static data.
     */
    clientIvcProof: ClientIvcProof, 
    /**
     * Contract class logs generated by the tx.
     */
    contractClassLogs: ContractClassLog[], 
    /**
     * An array of calldata for the enqueued public function calls and the teardown function call.
     */
    publicFunctionCalldata: HashedValues[]);
    p2pMessageIdentifier(): Promise<Buffer32>;
    hasPublicCalls(): boolean;
    numberOfPublicCalls(): number;
    getNonRevertiblePublicCallRequestsWithCalldata(): PublicCallRequestWithCalldata[];
    getRevertiblePublicCallRequestsWithCalldata(): PublicCallRequestWithCalldata[];
    getTeardownPublicCallRequestWithCalldata(): PublicCallRequestWithCalldata | undefined;
    getPublicCallRequestsWithCalldata(): PublicCallRequestWithCalldata[];
    getTotalPublicCalldataCount(): number;
    getGasSettings(): GasSettings;
    /**
     * Deserializes the Tx object from a Buffer.
     * @param buffer - Buffer or BufferReader object to deserialize.
     * @returns An instance of Tx.
     */
    static fromBuffer(buffer: Buffer | BufferReader): Tx;
    /**
     * Serializes the Tx object into a Buffer.
     * @returns Buffer representation of the Tx object.
     */
    toBuffer(): Buffer;
    static get schema(): ZodFor<Tx>;
    static from(fields: FieldsOf<Tx>): Tx;
    /**
     * Gets public logs emitted by this tx.
     * @param logsSource - An instance of `L2LogsSource` which can be used to obtain the logs.
     * @returns The requested logs.
     */
    getPublicLogs(logsSource: L2LogsSource): Promise<GetPublicLogsResponse>;
    /**
     * Gets either revertible or non revertible contract class logs emitted by this tx.
     * @param revertible - true for revertible only logs, false for non reverible only logs.
     * @returns The requested logs.
     */
    getSplitContractClassLogs(revertible: boolean, silo?: boolean): Promise<ContractClassLog[]>;
    /**
     * Filters contract class logs emitted by this tx.
     * @param logHashes - logs to keep represented by their hashes.
     * @param silo - whether to silo the logs before returning them.
     * @returns The requested logs.
     */
    filterContractClassLogs(logHashes: ScopedLogHash[], silo?: boolean): Promise<ContractClassLog[]>;
    /**
     * Computes (if necessary) & return transaction hash.
     * @returns The hash of the public inputs of the private kernel tail circuit.
     */
    getTxHash(forceRecompute?: boolean): Promise<TxHash>;
    /**
     * Allows setting the hash of the Tx.
     * Use this when you want to skip computing it from the original data.
     * Don't set a Tx hash received from an untrusted source.
     * @param hash - The hash to set.
     */
    setTxHash(hash: TxHash): void;
    getCalldataMap(): Map<string, Fr[]>;
    /** Returns stats about this tx. */
    getStats(): Promise<TxStats>;
    getSize(): number;
    /**
     * Estimates the tx size based on its private effects. Note that the actual size of the tx
     * after processing will probably be larger, as public execution would generate more data.
     */
    getEstimatedPrivateTxEffectsSize(): number;
    /**
     * Convenience function to get a hash out of a tx or a tx-like.
     * @param tx - Tx-like object.
     * @returns - The hash.
     */
    static getHash(tx: Tx | HasHash): Promise<TxHash>;
    /**
     * Convenience function to get array of hashes for an array of txs.
     * @param txs - The txs to get the hashes from.
     * @returns The corresponding array of hashes.
     */
    static getHashes(txs: (Tx | HasHash)[]): Promise<TxHash[]>;
    /**
     * Clones a tx, making a deep copy of all fields.
     * @param tx - The transaction to be cloned.
     * @returns The cloned transaction.
     */
    static clone(tx: Tx): Tx;
    /**
     * Creates a random tx.
     * @param randomProof - Whether to create a random proof - this will be random bytes of the full size.
     * @returns A random tx.
     */
    static random(randomProof?: boolean): Promise<Tx>;
    /**
     * Filters out logs from functions that are not present in the provided kernel output.
     *
     * The purpose of this is to remove logs that got dropped due to a revert,
     * in which case, we only have the kernel's hashes to go on, as opposed to
     * this grouping by function maintained in this class.
     *
     * The logic therefore is to drop all FunctionLogs if any constituent hash
     * does not appear in the provided hashes: it is impossible for part of a
     * function to revert.
     *
     * @param logHashes the individual log hashes we want to keep
     * @param out the output to put passing logs in, to keep this function abstract
     */
    filterRevertedLogs(): Promise<void>;
}
/** Utility type for an entity that has a hash property for a txhash */
type HasHash = {
    hash: TxHash;
};
export {};
//# sourceMappingURL=tx.d.ts.map