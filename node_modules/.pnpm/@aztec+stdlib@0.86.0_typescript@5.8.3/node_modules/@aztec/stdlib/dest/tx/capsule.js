import { Fr } from '@aztec/foundation/fields';
import { hexSchemaFor } from '@aztec/foundation/schemas';
import { BufferReader, serializeToBuffer } from '@aztec/foundation/serialize';
import { bufferToHex, hexToBuffer } from '@aztec/foundation/string';
import { AztecAddress } from '../aztec-address/index.js';
import { Vector } from '../types/shared.js';
/**
 * Read-only data that is passed to the contract through an oracle during a transaction execution.
 * TODO(#12425): Check whether this is always used to represent a transient capsule and if so, rename to
 * TransientCapsule.
 */ export class Capsule {
    contractAddress;
    storageSlot;
    data;
    constructor(/** The address of the contract the capsule is for */ contractAddress, /** The storage slot of the capsule */ storageSlot, /** Data passed to the contract  */ data){
        this.contractAddress = contractAddress;
        this.storageSlot = storageSlot;
        this.data = data;
    }
    static get schema() {
        return hexSchemaFor(Capsule);
    }
    toJSON() {
        return this.toString();
    }
    toBuffer() {
        return serializeToBuffer(this.contractAddress, this.storageSlot, new Vector(this.data));
    }
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new Capsule(AztecAddress.fromBuffer(reader), Fr.fromBuffer(reader), reader.readVector(Fr));
    }
    toString() {
        return bufferToHex(this.toBuffer());
    }
    static fromString(str) {
        return Capsule.fromBuffer(hexToBuffer(str));
    }
}
