import { z } from 'zod';
import { RevertCode } from '../avm/revert_code.js';
import { L2BlockHash } from '../block/block_hash.js';
import { schemas } from '../schemas/schemas.js';
import { TxHash } from './tx_hash.js';
/**
 * Possible status of a transaction.
 */ export var TxStatus = /*#__PURE__*/ function(TxStatus) {
    TxStatus["DROPPED"] = "dropped";
    TxStatus["PENDING"] = "pending";
    TxStatus["SUCCESS"] = "success";
    TxStatus["APP_LOGIC_REVERTED"] = "app_logic_reverted";
    TxStatus["TEARDOWN_REVERTED"] = "teardown_reverted";
    TxStatus["BOTH_REVERTED"] = "both_reverted";
    return TxStatus;
}({});
/**
 * Represents a transaction receipt in the Aztec network.
 * Contains essential information about the transaction including its status, origin, and associated addresses.
 * REFACTOR: TxReceipt should be returned only once the tx is mined, and all its fields should be required.
 * We should not be using a TxReceipt to answer a query for a pending or dropped tx.
 */ export class TxReceipt {
    txHash;
    status;
    error;
    transactionFee;
    blockHash;
    blockNumber;
    constructor(/** A unique identifier for a transaction. */ txHash, /** The transaction's status. */ status, /** Description of transaction error, if any. */ error, /** The transaction fee paid for the transaction. */ transactionFee, /** The hash of the block containing the transaction. */ blockHash, /** The block number in which the transaction was included. */ blockNumber){
        this.txHash = txHash;
        this.status = status;
        this.error = error;
        this.transactionFee = transactionFee;
        this.blockHash = blockHash;
        this.blockNumber = blockNumber;
    }
    static empty() {
        return new TxReceipt(TxHash.zero(), "dropped", '');
    }
    static get schema() {
        return z.object({
            txHash: TxHash.schema,
            status: z.nativeEnum(TxStatus),
            error: z.string(),
            blockHash: L2BlockHash.schema.optional(),
            blockNumber: z.number().int().nonnegative().optional(),
            transactionFee: schemas.BigInt.optional()
        }).transform(TxReceipt.from);
    }
    static from(fields) {
        return new TxReceipt(fields.txHash, fields.status, fields.error, fields.transactionFee, fields.blockHash, fields.blockNumber);
    }
    static statusFromRevertCode(revertCode) {
        if (revertCode.equals(RevertCode.OK)) {
            return "success";
        } else if (revertCode.equals(RevertCode.APP_LOGIC_REVERTED)) {
            return "app_logic_reverted";
        } else if (revertCode.equals(RevertCode.TEARDOWN_REVERTED)) {
            return "teardown_reverted";
        } else if (revertCode.equals(RevertCode.BOTH_REVERTED)) {
            return "both_reverted";
        } else {
            throw new Error(`Unknown revert code: ${revertCode}`);
        }
    }
}
