/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import { type FieldsOf } from '@aztec/foundation/array';
import { Fr } from '@aztec/foundation/fields';
import { type ZodFor } from '@aztec/foundation/schemas';
import { BufferReader, FieldReader } from '@aztec/foundation/serialize';
import { inspect } from 'util';
import { PublicDataWrite } from '../avm/public_data_write.js';
import { RevertCode } from '../avm/revert_code.js';
import { ContractClassLog } from '../logs/contract_class_log.js';
import { PrivateLog } from '../logs/private_log.js';
import { PublicLog } from '../logs/public_log.js';
import { TxHash } from './tx_hash.js';
export declare const TX_START_PREFIX = 8392562855083340404n;
export declare const TX_START_PREFIX_BYTES_LENGTH: number;
export declare const TX_EFFECT_PREFIX_BYTE_LENGTH: number;
export declare class TxEffect {
    /**
     * Whether the transaction reverted during public app logic.
     */
    revertCode: RevertCode;
    /**
     * The identifier of the transaction.
     */
    txHash: TxHash;
    /**
     * The transaction fee, denominated in FPA.
     */
    transactionFee: Fr;
    /**
     * The note hashes to be inserted into the note hash tree.
     */
    noteHashes: Fr[];
    /**
     * The nullifiers to be inserted into the nullifier tree.
     */
    nullifiers: Fr[];
    /**
     * The hash of L2 to L1 messages to be inserted into the messagebox on L1.
     * TODO(just-mitch): rename to l2ToL1MsgHashes
     */
    l2ToL1Msgs: Fr[];
    /**
     * The public data writes to be inserted into the public data tree.
     */
    publicDataWrites: PublicDataWrite[];
    /**
     * The private logs.
     */
    privateLogs: PrivateLog[];
    /**
     * The public logs.
     */
    publicLogs: PublicLog[];
    /**
     * The contract class logs.
     */
    contractClassLogs: ContractClassLog[];
    constructor(
    /**
     * Whether the transaction reverted during public app logic.
     */
    revertCode: RevertCode, 
    /**
     * The identifier of the transaction.
     */
    txHash: TxHash, 
    /**
     * The transaction fee, denominated in FPA.
     */
    transactionFee: Fr, 
    /**
     * The note hashes to be inserted into the note hash tree.
     */
    noteHashes: Fr[], 
    /**
     * The nullifiers to be inserted into the nullifier tree.
     */
    nullifiers: Fr[], 
    /**
     * The hash of L2 to L1 messages to be inserted into the messagebox on L1.
     * TODO(just-mitch): rename to l2ToL1MsgHashes
     */
    l2ToL1Msgs: Fr[], 
    /**
     * The public data writes to be inserted into the public data tree.
     */
    publicDataWrites: PublicDataWrite[], 
    /**
     * The private logs.
     */
    privateLogs: PrivateLog[], 
    /**
     * The public logs.
     */
    publicLogs: PublicLog[], 
    /**
     * The contract class logs.
     */
    contractClassLogs: ContractClassLog[]);
    toBuffer(): Buffer;
    equals(other: TxEffect): boolean;
    /** Returns the size of this tx effect in bytes as serialized onto DA. */
    getDASize(): number;
    /**
     * Deserializes the TxEffect object from a Buffer.
     * @param buffer - Buffer or BufferReader object to deserialize.
     * @returns An instance of TxEffect.
     */
    static fromBuffer(buffer: Buffer | BufferReader): TxEffect;
    /**
     * Computes txOutHash of this tx effect.
     * TODO(#7218): Revert to fixed height tree for outbox
     * @dev Follows new_sha in variable_merkle_tree.nr
     */
    txOutHash(): Buffer;
    static random(numPublicCallsPerTx?: number, numPublicLogsPerCall?: number): Promise<TxEffect>;
    static empty(): TxEffect;
    isEmpty(): boolean;
    /** Returns a hex representation of the TxEffect object. */
    toString(): `0x${string}`;
    /**
     * Returns the prefix as used in a blob.
     * Used to prefix a 'block' of tx effects with its type and length.
     */
    private toPrefix;
    /**
     * Decodes the prefix as used in a blob to tx effect type and length.
     */
    static fromPrefix(prefix: Fr): {
        type: number;
        length: number;
    };
    /**
     * Encodes the first field of a tx effect as used in a blob:
     * TX_START_PREFIX | 0 | txlen[0] txlen[1] | 0 | REVERT_CODE_PREFIX | 0 | revert_code
     */
    private encodeFirstField;
    /**
     * Decodes the first field of a tx effect as used in a blob:
     * TX_START_PREFIX | 0 | txlen[0] txlen[1] | 0 | REVERT_CODE_PREFIX | 0 | revert_code
     * Assumes that isFirstField has been called already.
     */
    static decodeFirstField(field: Fr): {
        length: number;
        revertCode: number;
    };
    /**
     * Determines whether a field is the first field of a tx effect
     */
    static isFirstField(field: Fr): boolean;
    /**
     * Returns a flat packed array of prefixed fields of all tx effects, used for blobs.
     */
    toBlobFields(): Fr[];
    /**
     * Decodes a flat packed array of prefixed fields to TxEffect
     */
    static fromBlobFields(fields: Fr[] | FieldReader): TxEffect;
    static from(fields: FieldsOf<TxEffect>): TxEffect;
    static get schema(): ZodFor<TxEffect>;
    [inspect.custom](): string;
    /**
     * Deserializes an TxEffect object from a string.
     * @param str - String to deserialize.
     * @returns An instance of TxEffect.
     */
    static fromString(str: string): TxEffect;
}
//# sourceMappingURL=tx_effect.d.ts.map