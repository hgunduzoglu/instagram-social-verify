import type { FieldsOf } from '@aztec/foundation/types';
import { RevertCode } from '../avm/revert_code.js';
import { L2BlockHash } from '../block/block_hash.js';
import { type ZodFor } from '../schemas/schemas.js';
import { TxHash } from './tx_hash.js';
/**
 * Possible status of a transaction.
 */
export declare enum TxStatus {
    DROPPED = "dropped",
    PENDING = "pending",
    SUCCESS = "success",
    APP_LOGIC_REVERTED = "app_logic_reverted",
    TEARDOWN_REVERTED = "teardown_reverted",
    BOTH_REVERTED = "both_reverted"
}
/**
 * Represents a transaction receipt in the Aztec network.
 * Contains essential information about the transaction including its status, origin, and associated addresses.
 * REFACTOR: TxReceipt should be returned only once the tx is mined, and all its fields should be required.
 * We should not be using a TxReceipt to answer a query for a pending or dropped tx.
 */
export declare class TxReceipt {
    /** A unique identifier for a transaction. */
    txHash: TxHash;
    /** The transaction's status. */
    status: TxStatus;
    /** Description of transaction error, if any. */
    error: string;
    /** The transaction fee paid for the transaction. */
    transactionFee?: bigint | undefined;
    /** The hash of the block containing the transaction. */
    blockHash?: L2BlockHash | undefined;
    /** The block number in which the transaction was included. */
    blockNumber?: number | undefined;
    constructor(
    /** A unique identifier for a transaction. */
    txHash: TxHash, 
    /** The transaction's status. */
    status: TxStatus, 
    /** Description of transaction error, if any. */
    error: string, 
    /** The transaction fee paid for the transaction. */
    transactionFee?: bigint | undefined, 
    /** The hash of the block containing the transaction. */
    blockHash?: L2BlockHash | undefined, 
    /** The block number in which the transaction was included. */
    blockNumber?: number | undefined);
    static empty(): TxReceipt;
    static get schema(): ZodFor<TxReceipt>;
    static from(fields: FieldsOf<TxReceipt>): TxReceipt;
    static statusFromRevertCode(revertCode: RevertCode): TxStatus.SUCCESS | TxStatus.APP_LOGIC_REVERTED | TxStatus.TEARDOWN_REVERTED | TxStatus.BOTH_REVERTED;
}
//# sourceMappingURL=tx_receipt.d.ts.map