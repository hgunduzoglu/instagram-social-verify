/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import type { Fr } from '@aztec/foundation/fields';
import { BufferReader, FieldReader } from '@aztec/foundation/serialize';
import { inspect } from 'util';
import { z } from 'zod';
import { AppendOnlyTreeSnapshot } from '../trees/append_only_tree_snapshot.js';
import { PartialStateReference } from './partial_state_reference.js';
/**
 * Stores snapshots of all the trees but archive.
 */
export declare class StateReference {
    /** Snapshot of the l1 to l2 message tree. */
    l1ToL2MessageTree: AppendOnlyTreeSnapshot;
    /** Reference to the rest of the state. */
    partial: PartialStateReference;
    constructor(
    /** Snapshot of the l1 to l2 message tree. */
    l1ToL2MessageTree: AppendOnlyTreeSnapshot, 
    /** Reference to the rest of the state. */
    partial: PartialStateReference);
    static get schema(): z.ZodEffects<z.ZodObject<{
        l1ToL2MessageTree: z.ZodEffects<z.ZodObject<{
            root: z.ZodType<Fr, any, string>;
            nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            root: Fr;
            nextAvailableLeafIndex: number;
        }, {
            root: string;
            nextAvailableLeafIndex: string | number | bigint;
        }>, AppendOnlyTreeSnapshot, {
            root: string;
            nextAvailableLeafIndex: string | number | bigint;
        }>;
        partial: z.ZodEffects<z.ZodObject<{
            noteHashTree: z.ZodEffects<z.ZodObject<{
                root: z.ZodType<Fr, any, string>;
                nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                root: Fr;
                nextAvailableLeafIndex: number;
            }, {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            }>, AppendOnlyTreeSnapshot, {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            }>;
            nullifierTree: z.ZodEffects<z.ZodObject<{
                root: z.ZodType<Fr, any, string>;
                nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                root: Fr;
                nextAvailableLeafIndex: number;
            }, {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            }>, AppendOnlyTreeSnapshot, {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            }>;
            publicDataTree: z.ZodEffects<z.ZodObject<{
                root: z.ZodType<Fr, any, string>;
                nextAvailableLeafIndex: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                root: Fr;
                nextAvailableLeafIndex: number;
            }, {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            }>, AppendOnlyTreeSnapshot, {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            }>;
        }, "strip", z.ZodTypeAny, {
            noteHashTree: AppendOnlyTreeSnapshot;
            nullifierTree: AppendOnlyTreeSnapshot;
            publicDataTree: AppendOnlyTreeSnapshot;
        }, {
            noteHashTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            nullifierTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            publicDataTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
        }>, PartialStateReference, {
            noteHashTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            nullifierTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            publicDataTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
        }>;
    }, "strip", z.ZodTypeAny, {
        partial: PartialStateReference;
        l1ToL2MessageTree: AppendOnlyTreeSnapshot;
    }, {
        partial: {
            noteHashTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            nullifierTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            publicDataTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
        };
        l1ToL2MessageTree: {
            root: string;
            nextAvailableLeafIndex: string | number | bigint;
        };
    }>, StateReference, {
        partial: {
            noteHashTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            nullifierTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
            publicDataTree: {
                root: string;
                nextAvailableLeafIndex: string | number | bigint;
            };
        };
        l1ToL2MessageTree: {
            root: string;
            nextAvailableLeafIndex: string | number | bigint;
        };
    }>;
    getSize(): number;
    toBuffer(): Buffer;
    toFields(): Fr[];
    static fromBuffer(buffer: Buffer | BufferReader): StateReference;
    static fromFields(fields: Fr[] | FieldReader): StateReference;
    static empty(): StateReference;
    isEmpty(): boolean;
    toInspect(): {
        l1ToL2MessageTree: `0x${string}`;
        noteHashTree: `0x${string}`;
        nullifierTree: `0x${string}`;
        publicDataTree: `0x${string}`;
    };
    [inspect.custom](): string;
    equals(other: this): boolean;
}
//# sourceMappingURL=state_reference.d.ts.map