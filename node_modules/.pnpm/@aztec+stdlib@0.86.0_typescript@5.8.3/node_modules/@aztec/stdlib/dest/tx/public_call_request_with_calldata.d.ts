/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import { Fr } from '@aztec/foundation/fields';
import { BufferReader } from '@aztec/foundation/serialize';
import { inspect } from 'util';
import { FunctionSelector } from '../abi/function_selector.js';
import { PublicCallRequest } from '../kernel/public_call_request.js';
import { type ZodFor } from '../schemas/index.js';
/**
 * The call request of a public function, including the calldata.
 */
export declare class PublicCallRequestWithCalldata {
    /**
     * Request of the public call.
     */
    request: PublicCallRequest;
    /**
     * Function selector and arguments of the public call.
     */
    calldata: Fr[];
    constructor(
    /**
     * Request of the public call.
     */
    request: PublicCallRequest, 
    /**
     * Function selector and arguments of the public call.
     */
    calldata: Fr[]);
    get functionSelector(): FunctionSelector;
    get args(): Fr[];
    static get schema(): ZodFor<PublicCallRequestWithCalldata>;
    static from(fields: Pick<PublicCallRequestWithCalldata, 'request' | 'calldata'>): PublicCallRequestWithCalldata;
    toBuffer(): Buffer;
    static fromBuffer(buffer: Buffer | BufferReader): PublicCallRequestWithCalldata;
    static empty(): PublicCallRequestWithCalldata;
    isEmpty(): boolean;
    [inspect.custom](): string;
}
//# sourceMappingURL=public_call_request_with_calldata.d.ts.map