import { Fr } from '@aztec/foundation/fields';
import { type ZodFor } from '@aztec/foundation/schemas';
import { SimulationError } from '../errors/simulation_error.js';
import type { GasUsed } from '../gas/gas_used.js';
import { CombinedConstantData } from '../kernel/combined_constant_data.js';
import { TxEffect } from '../tx/tx_effect.js';
/** Return values of simulating a circuit. */
export type ProcessReturnValues = Fr[] | undefined;
/** Return values of simulating complete callstack. */
export declare class NestedProcessReturnValues {
    values: ProcessReturnValues;
    nested: NestedProcessReturnValues[];
    constructor(values: ProcessReturnValues, nested?: NestedProcessReturnValues[]);
    static get schema(): ZodFor<NestedProcessReturnValues>;
    static empty(): NestedProcessReturnValues;
    static random(depth?: number): NestedProcessReturnValues;
}
/**
 * Outputs of processing the public component of a transaction.
 */
export declare class PublicSimulationOutput {
    revertReason: SimulationError | undefined;
    constants: CombinedConstantData;
    txEffect: TxEffect;
    publicReturnValues: NestedProcessReturnValues[];
    gasUsed: GasUsed;
    constructor(revertReason: SimulationError | undefined, constants: CombinedConstantData, txEffect: TxEffect, publicReturnValues: NestedProcessReturnValues[], gasUsed: GasUsed);
    static get schema(): ZodFor<PublicSimulationOutput>;
    static random(): Promise<PublicSimulationOutput>;
}
//# sourceMappingURL=public_simulation_output.d.ts.map