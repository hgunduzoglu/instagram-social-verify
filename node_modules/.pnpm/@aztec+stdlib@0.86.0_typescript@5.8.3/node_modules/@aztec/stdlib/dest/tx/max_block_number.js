import { MAX_BLOCK_NUMBER_LENGTH } from '@aztec/constants';
import { Fr } from '@aztec/foundation/fields';
import { BufferReader, FieldReader, serializeToBuffer, serializeToFields } from '@aztec/foundation/serialize';
/**
 * Maximum block number.
 */ export class MaxBlockNumber {
    isSome;
    value;
    constructor(/**
     * Whether a max block number was requested.
     */ isSome, /**
     * The requested max block number, if isSome is true.
     */ value){
        this.isSome = isSome;
        this.value = value;
    }
    /**
   * Serialize as a buffer.
   * @returns The buffer.
   */ toBuffer() {
        return serializeToBuffer(...MaxBlockNumber.getFields(this));
    }
    toFields() {
        const fields = serializeToFields(...MaxBlockNumber.getFields(this));
        if (fields.length !== MAX_BLOCK_NUMBER_LENGTH) {
            throw new Error(`Invalid number of fields for MaxBlockNumber. Expected ${MAX_BLOCK_NUMBER_LENGTH}, got ${fields.length}`);
        }
        return fields;
    }
    /**
   * Deserializes MaxBlockNumber from a buffer or reader.
   * @param buffer - Buffer to read from.
   * @returns The MaxBlockNumber.
   */ static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new MaxBlockNumber(reader.readBoolean(), Fr.fromBuffer(reader));
    }
    static fromFields(fields) {
        const reader = FieldReader.asReader(fields);
        return new MaxBlockNumber(reader.readBoolean(), reader.readField());
    }
    static empty() {
        return new MaxBlockNumber(false, Fr.ZERO);
    }
    isEmpty() {
        return !this.isSome && this.value.isZero();
    }
    /**
   * Create a new instance from a fields dictionary.
   * @param fields - The dictionary.
   * @returns A new instance.
   */ static from(fields) {
        return new MaxBlockNumber(...MaxBlockNumber.getFields(fields));
    }
    /**
   * Serialize into a field array. Low-level utility.
   * @param fields - Object with fields.
   * @returns The array.
   */ static getFields(fields) {
        return [
            fields.isSome,
            fields.value
        ];
    }
}
