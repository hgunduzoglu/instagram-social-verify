import { z } from 'zod';
import { PrivateKernelTailCircuitPublicInputs } from '../kernel/private_kernel_tail_circuit_public_inputs.js';
import { ClientIvcProof } from '../proofs/client_ivc_proof.js';
import { PrivateExecutionResult, collectSortedContractClassLogs } from './private_execution_result.js';
import { Tx } from './tx.js';
export class TxProvingResult {
    privateExecutionResult;
    publicInputs;
    clientIvcProof;
    constructor(privateExecutionResult, publicInputs, clientIvcProof){
        this.privateExecutionResult = privateExecutionResult;
        this.publicInputs = publicInputs;
        this.clientIvcProof = clientIvcProof;
    }
    toTx() {
        const contractClassLogs = collectSortedContractClassLogs(this.privateExecutionResult);
        const tx = new Tx(this.publicInputs, this.clientIvcProof, contractClassLogs, this.privateExecutionResult.publicFunctionCalldata);
        return tx;
    }
    static get schema() {
        return z.object({
            privateExecutionResult: PrivateExecutionResult.schema,
            publicInputs: PrivateKernelTailCircuitPublicInputs.schema,
            clientIvcProof: ClientIvcProof.schema
        }).transform(TxProvingResult.from);
    }
    static from(fields) {
        return new TxProvingResult(fields.privateExecutionResult, fields.publicInputs, fields.clientIvcProof);
    }
    static async random() {
        return new TxProvingResult(await PrivateExecutionResult.random(), PrivateKernelTailCircuitPublicInputs.empty(), ClientIvcProof.empty());
    }
}
