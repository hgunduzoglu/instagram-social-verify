import { Fr } from '@aztec/foundation/fields';
import { BufferReader, serializeToBuffer } from '@aztec/foundation/serialize';
import { z } from 'zod';
import { computeCalldataHash, computeVarArgsHash } from '../hash/index.js';
import { schemas } from '../schemas/schemas.js';
import { Vector } from '../types/index.js';
/**
 * A container for storing a list of values and their hash.
 */ export class HashedValues {
    values;
    hash;
    constructor(/**
     *  Raw values.
     */ values, /**
     * The hash of the raw values
     */ hash){
        this.values = values;
        this.hash = hash;
    }
    getSize() {
        return this.values.length + 1 /* hash */ ;
    }
    static get schema() {
        return z.object({
            values: z.array(schemas.Fr),
            hash: schemas.Fr
        }).transform(HashedValues.from);
    }
    static from(fields) {
        return new HashedValues(...HashedValues.getFields(fields));
    }
    static getFields(fields) {
        return [
            fields.values,
            fields.hash
        ];
    }
    static random() {
        return new HashedValues([
            Fr.random(),
            Fr.random()
        ], Fr.random());
    }
    toBuffer() {
        return serializeToBuffer(new Vector(this.values), this.hash);
    }
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new HashedValues(reader.readVector(Fr), Fr.fromBuffer(reader));
    }
    // Computes the hash of input arguments or return values for private functions, or for authwit creation.
    static async fromArgs(args) {
        return new HashedValues(args, await computeVarArgsHash(args));
    }
    // Computes the hash of calldata for public functions.
    static async fromCalldata(calldata) {
        return new HashedValues(calldata, await computeCalldataHash(calldata));
    }
}
