/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import { Fr } from '@aztec/foundation/fields';
import { BufferReader, FieldReader } from '@aztec/foundation/serialize';
import { z } from 'zod';
export declare const NUM_BYTES_PER_SHA256 = 32;
export declare class ContentCommitment {
    numTxs: Fr;
    blobsHash: Buffer;
    inHash: Buffer;
    outHash: Buffer;
    constructor(numTxs: Fr, blobsHash: Buffer, inHash: Buffer, outHash: Buffer);
    static get schema(): z.ZodEffects<z.ZodObject<{
        numTxs: z.ZodType<Fr, any, string>;
        blobsHash: z.ZodUnion<[z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, Buffer, string>, z.ZodEffects<z.ZodObject<{
            type: z.ZodLiteral<"Buffer">;
            data: z.ZodArray<z.ZodNumber, "many">;
        }, "strip", z.ZodTypeAny, {
            type: "Buffer";
            data: number[];
        }, {
            type: "Buffer";
            data: number[];
        }>, Buffer, {
            type: "Buffer";
            data: number[];
        }>]>;
        inHash: z.ZodUnion<[z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, Buffer, string>, z.ZodEffects<z.ZodObject<{
            type: z.ZodLiteral<"Buffer">;
            data: z.ZodArray<z.ZodNumber, "many">;
        }, "strip", z.ZodTypeAny, {
            type: "Buffer";
            data: number[];
        }, {
            type: "Buffer";
            data: number[];
        }>, Buffer, {
            type: "Buffer";
            data: number[];
        }>]>;
        outHash: z.ZodUnion<[z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, Buffer, string>, z.ZodEffects<z.ZodObject<{
            type: z.ZodLiteral<"Buffer">;
            data: z.ZodArray<z.ZodNumber, "many">;
        }, "strip", z.ZodTypeAny, {
            type: "Buffer";
            data: number[];
        }, {
            type: "Buffer";
            data: number[];
        }>, Buffer, {
            type: "Buffer";
            data: number[];
        }>]>;
    }, "strip", z.ZodTypeAny, {
        numTxs: Fr;
        blobsHash: Buffer;
        inHash: Buffer;
        outHash: Buffer;
    }, {
        numTxs: string;
        blobsHash: string | {
            type: "Buffer";
            data: number[];
        };
        inHash: string | {
            type: "Buffer";
            data: number[];
        };
        outHash: string | {
            type: "Buffer";
            data: number[];
        };
    }>, ContentCommitment, {
        numTxs: string;
        blobsHash: string | {
            type: "Buffer";
            data: number[];
        };
        inHash: string | {
            type: "Buffer";
            data: number[];
        };
        outHash: string | {
            type: "Buffer";
            data: number[];
        };
    }>;
    getSize(): number;
    toBuffer(): Buffer;
    toInspect(): {
        numTxs: number;
        blobsHash: `0x${string}`;
        inHash: `0x${string}`;
        outHash: `0x${string}`;
    };
    toFields(): Fr[];
    static fromBuffer(buffer: Buffer | BufferReader): ContentCommitment;
    static fromFields(fields: Fr[] | FieldReader): ContentCommitment;
    static empty(): ContentCommitment;
    isEmpty(): boolean;
    toString(): string;
    static fromString(str: string): ContentCommitment;
    equals(other: this): boolean;
}
//# sourceMappingURL=content_commitment.d.ts.map