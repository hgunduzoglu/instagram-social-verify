/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import { Fr } from '@aztec/foundation/fields';
import { BufferReader, FieldReader } from '@aztec/foundation/serialize';
import type { FieldsOf } from '@aztec/foundation/types';
import { BlockHeader } from './block_header.js';
import { TxContext } from './tx_context.js';
/**
 * Data that is constant/not modified by neither of the kernels.
 */
export declare class TxConstantData {
    /** Header of a block whose state is used during execution (not the block the transaction is included in). */
    historicalHeader: BlockHeader;
    /**
     * Context of the transaction.
     *
     * Note: `chainId` and `version` in txContext are not redundant to the values in
     * self.historical_header.global_variables because they can be different in case of a protocol upgrade. In such
     * a situation we could be using header from a block before the upgrade took place but be using the updated
     * protocol to execute and prove the transaction.
     */
    txContext: TxContext;
    /**
     * Root of the vk tree for the protocol circuits.
     */
    vkTreeRoot: Fr;
    /**
     * Root of the tree for the protocol contracts.
     */
    protocolContractTreeRoot: Fr;
    constructor(
    /** Header of a block whose state is used during execution (not the block the transaction is included in). */
    historicalHeader: BlockHeader, 
    /**
     * Context of the transaction.
     *
     * Note: `chainId` and `version` in txContext are not redundant to the values in
     * self.historical_header.global_variables because they can be different in case of a protocol upgrade. In such
     * a situation we could be using header from a block before the upgrade took place but be using the updated
     * protocol to execute and prove the transaction.
     */
    txContext: TxContext, 
    /**
     * Root of the vk tree for the protocol circuits.
     */
    vkTreeRoot: Fr, 
    /**
     * Root of the tree for the protocol contracts.
     */
    protocolContractTreeRoot: Fr);
    static from(fields: FieldsOf<TxConstantData>): TxConstantData;
    static getFields(fields: FieldsOf<TxConstantData>): readonly [BlockHeader, TxContext, Fr, Fr];
    static fromFields(fields: Fr[] | FieldReader): TxConstantData;
    toFields(): Fr[];
    static fromBuffer(buffer: Buffer | BufferReader): TxConstantData;
    toBuffer(): Buffer;
    static empty(): TxConstantData;
    getSize(): number;
    clone(): TxConstantData;
}
//# sourceMappingURL=tx_constant_data.d.ts.map