/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import type { Fr } from '@aztec/foundation/fields';
import { BufferReader, FieldReader } from '@aztec/foundation/serialize';
import type { FieldsOf } from '@aztec/foundation/types';
import { inspect } from 'util';
import { z } from 'zod';
import { FunctionSelector } from '../abi/index.js';
import { AztecAddress } from '../aztec-address/index.js';
/**
 * Call context.
 */
export declare class CallContext {
    /**
     * Address of the account which represents the entity who invoked the call.
     */
    msgSender: AztecAddress;
    /**
     * The contract address being called.
     */
    contractAddress: AztecAddress;
    /**
     * Function selector of the function being called.
     */
    functionSelector: FunctionSelector;
    /**
     * Determines whether the call is modifying state.
     */
    isStaticCall: boolean;
    constructor(
    /**
     * Address of the account which represents the entity who invoked the call.
     */
    msgSender: AztecAddress, 
    /**
     * The contract address being called.
     */
    contractAddress: AztecAddress, 
    /**
     * Function selector of the function being called.
     */
    functionSelector: FunctionSelector, 
    /**
     * Determines whether the call is modifying state.
     */
    isStaticCall: boolean);
    /**
     * Returns a new instance of CallContext with zero msg sender, storage contract address.
     * @returns A new instance of CallContext with zero msg sender, storage contract address.
     */
    static empty(): CallContext;
    static random(): Promise<CallContext>;
    static get schema(): z.ZodEffects<z.ZodObject<{
        msgSender: import("../schemas/index.js").ZodFor<AztecAddress>;
        contractAddress: import("../schemas/index.js").ZodFor<AztecAddress>;
        functionSelector: import("../schemas/index.js").ZodFor<FunctionSelector>;
        isStaticCall: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        contractAddress: AztecAddress;
        msgSender: AztecAddress;
        functionSelector: FunctionSelector;
        isStaticCall: boolean;
    }, {
        isStaticCall: boolean;
        contractAddress?: any;
        msgSender?: any;
        functionSelector?: any;
    }>, CallContext, {
        isStaticCall: boolean;
        contractAddress?: any;
        msgSender?: any;
        functionSelector?: any;
    }>;
    isEmpty(): boolean;
    static from(fields: FieldsOf<CallContext>): CallContext;
    static getFields(fields: FieldsOf<CallContext>): readonly [AztecAddress, AztecAddress, FunctionSelector, boolean];
    /**
     * Serialize this as a buffer.
     * @returns The buffer.
     */
    toBuffer(): Buffer;
    toFields(): Fr[];
    /**
     * Deserialize this from a buffer.
     * @param buffer - The bufferable type from which to deserialize.
     * @returns The deserialized instance of CallContext.
     */
    static fromBuffer(buffer: Buffer | BufferReader): CallContext;
    static fromFields(fields: Fr[] | FieldReader): CallContext;
    equals(callContext: CallContext): boolean;
    [inspect.custom](): string;
}
//# sourceMappingURL=call_context.d.ts.map