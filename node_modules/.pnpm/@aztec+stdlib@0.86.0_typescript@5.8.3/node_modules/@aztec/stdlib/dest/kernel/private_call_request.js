import { Fr } from '@aztec/foundation/fields';
import { BufferReader, FieldReader, serializeToBuffer, serializeToFields } from '@aztec/foundation/serialize';
import { CallContext } from '../tx/call_context.js';
export class PrivateCallRequest {
    callContext;
    argsHash;
    returnsHash;
    startSideEffectCounter;
    endSideEffectCounter;
    constructor(/**
     * The call context of the call.
     */ callContext, /**
     * The hash of the arguments of the call.
     */ argsHash, /**
     * The hash of the return values of the call.
     */ returnsHash, /**
     * The start counter of the call.
     */ startSideEffectCounter, /**
     * The end counter of the call.
     */ endSideEffectCounter){
        this.callContext = callContext;
        this.argsHash = argsHash;
        this.returnsHash = returnsHash;
        this.startSideEffectCounter = startSideEffectCounter;
        this.endSideEffectCounter = endSideEffectCounter;
    }
    toFields() {
        return serializeToFields([
            this.callContext,
            this.argsHash,
            this.returnsHash,
            this.startSideEffectCounter,
            this.endSideEffectCounter
        ]);
    }
    static fromFields(fields) {
        const reader = FieldReader.asReader(fields);
        return new PrivateCallRequest(reader.readObject(CallContext), reader.readField(), reader.readField(), reader.readU32(), reader.readU32());
    }
    toBuffer() {
        return serializeToBuffer(this.callContext, this.argsHash, this.returnsHash, this.startSideEffectCounter, this.endSideEffectCounter);
    }
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new PrivateCallRequest(reader.readObject(CallContext), Fr.fromBuffer(reader), Fr.fromBuffer(reader), reader.readNumber(), reader.readNumber());
    }
    isEmpty() {
        return this.callContext.isEmpty() && this.argsHash.isZero() && this.returnsHash.isZero() && this.startSideEffectCounter === 0 && this.endSideEffectCounter === 0;
    }
    static empty() {
        return new PrivateCallRequest(CallContext.empty(), Fr.ZERO, Fr.ZERO, 0, 0);
    }
    equals(callRequest) {
        return callRequest.callContext.equals(this.callContext) && callRequest.argsHash.equals(this.argsHash) && callRequest.returnsHash.equals(this.returnsHash) && callRequest.startSideEffectCounter === this.startSideEffectCounter && callRequest.endSideEffectCounter === this.endSideEffectCounter;
    }
    toString() {
        return `PrivateCallRequest(callContext: ${this.callContext}, argsHash: ${this.argsHash}, returnsHash: ${this.returnsHash}, startSideEffectCounter: ${this.startSideEffectCounter}, endSideEffectCounter: ${this.endSideEffectCounter})`;
    }
}
