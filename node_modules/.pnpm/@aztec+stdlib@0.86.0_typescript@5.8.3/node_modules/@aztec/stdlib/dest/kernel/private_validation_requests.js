import { MAX_KEY_VALIDATION_REQUESTS_PER_TX, MAX_NOTE_HASH_READ_REQUESTS_PER_TX, MAX_NULLIFIER_READ_REQUESTS_PER_TX } from '@aztec/constants';
import { makeTuple } from '@aztec/foundation/array';
import { arraySerializedSizeOfNonEmpty } from '@aztec/foundation/collection';
import { BufferReader, FieldReader, serializeToBuffer } from '@aztec/foundation/serialize';
import { bufferToHex, hexToBuffer } from '@aztec/foundation/string';
import { inspect } from 'util';
import { ScopedKeyValidationRequestAndGenerator } from '../kernel/hints/scoped_key_validation_request_and_generator.js';
import { ScopedReadRequest } from './hints/read_request.js';
import { RollupValidationRequests } from './hints/rollup_validation_requests.js';
import { OptionalNumber } from './utils/optional_number.js';
/**
 * Validation requests accumulated during the execution of the transaction.
 */ export class PrivateValidationRequests {
    forRollup;
    noteHashReadRequests;
    nullifierReadRequests;
    scopedKeyValidationRequestsAndGenerators;
    splitCounter;
    constructor(/**
     * Validation requests that cannot be fulfilled in the current context (private or public), and must be instead be
     * forwarded to the rollup for it to take care of them.
     */ forRollup, /**
     * All the read requests made in this transaction.
     */ noteHashReadRequests, /**
     * All the nullifier read requests made in this transaction.
     */ nullifierReadRequests, /**
     * All the key validation requests made in this transaction.
     */ scopedKeyValidationRequestsAndGenerators, /**
     * The counter to split the data for squashing.
     * A revertible nullifier and a non-revertible note hash will not be squashed.
     * It should be the "final" minRevertibleSideEffectCounter of a tx.
     */ splitCounter){
        this.forRollup = forRollup;
        this.noteHashReadRequests = noteHashReadRequests;
        this.nullifierReadRequests = nullifierReadRequests;
        this.scopedKeyValidationRequestsAndGenerators = scopedKeyValidationRequestsAndGenerators;
        this.splitCounter = splitCounter;
    }
    getSize() {
        return this.forRollup.getSize() + arraySerializedSizeOfNonEmpty(this.noteHashReadRequests) + arraySerializedSizeOfNonEmpty(this.nullifierReadRequests) + arraySerializedSizeOfNonEmpty(this.scopedKeyValidationRequestsAndGenerators) + this.splitCounter.getSize();
    }
    toBuffer() {
        return serializeToBuffer(this.forRollup, this.noteHashReadRequests, this.nullifierReadRequests, this.scopedKeyValidationRequestsAndGenerators, this.splitCounter);
    }
    toString() {
        return bufferToHex(this.toBuffer());
    }
    static fromFields(fields) {
        const reader = FieldReader.asReader(fields);
        return new PrivateValidationRequests(reader.readObject(RollupValidationRequests), reader.readArray(MAX_NOTE_HASH_READ_REQUESTS_PER_TX, ScopedReadRequest), reader.readArray(MAX_NULLIFIER_READ_REQUESTS_PER_TX, ScopedReadRequest), reader.readArray(MAX_KEY_VALIDATION_REQUESTS_PER_TX, ScopedKeyValidationRequestAndGenerator), reader.readObject(OptionalNumber));
    }
    /**
   * Deserializes from a buffer or reader, corresponding to a write in cpp.
   * @param buffer - Buffer or reader to read from.
   * @returns Deserialized object.
   */ static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new PrivateValidationRequests(reader.readObject(RollupValidationRequests), reader.readArray(MAX_NOTE_HASH_READ_REQUESTS_PER_TX, ScopedReadRequest), reader.readArray(MAX_NULLIFIER_READ_REQUESTS_PER_TX, ScopedReadRequest), reader.readArray(MAX_KEY_VALIDATION_REQUESTS_PER_TX, ScopedKeyValidationRequestAndGenerator), reader.readObject(OptionalNumber));
    }
    /**
   * Deserializes from a string, corresponding to a write in cpp.
   * @param str - String to read from.
   * @returns Deserialized object.
   */ static fromString(str) {
        return PrivateValidationRequests.fromBuffer(hexToBuffer(str));
    }
    static empty() {
        return new PrivateValidationRequests(RollupValidationRequests.empty(), makeTuple(MAX_NOTE_HASH_READ_REQUESTS_PER_TX, ScopedReadRequest.empty), makeTuple(MAX_NULLIFIER_READ_REQUESTS_PER_TX, ScopedReadRequest.empty), makeTuple(MAX_KEY_VALIDATION_REQUESTS_PER_TX, ScopedKeyValidationRequestAndGenerator.empty), OptionalNumber.empty());
    }
    [inspect.custom]() {
        return `PrivateValidationRequests {
  forRollup: ${inspect(this.forRollup)},
  noteHashReadRequests: [${this.noteHashReadRequests.filter((x)=>!x.isEmpty()).map((h)=>inspect(h)).join(', ')}],
  nullifierReadRequests: [${this.nullifierReadRequests.filter((x)=>!x.isEmpty()).map((h)=>inspect(h)).join(', ')}],
  scopedKeyValidationRequestsAndGenerators: [${this.scopedKeyValidationRequestsAndGenerators.filter((x)=>!x.isEmpty()).map((h)=>inspect(h)).join(', ')}],
  splitCounter: ${this.splitCounter}
  `;
    }
}
