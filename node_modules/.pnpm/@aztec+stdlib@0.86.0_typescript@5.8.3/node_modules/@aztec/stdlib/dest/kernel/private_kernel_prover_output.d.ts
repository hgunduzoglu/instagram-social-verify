/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import type { WitnessMap } from '@aztec/noir-acvm_js';
import { z } from 'zod';
import type { ClientIvcProof } from '../proofs/client_ivc_proof.js';
import type { PrivateKernelCircuitPublicInputs } from './private_kernel_circuit_public_inputs.js';
import type { PrivateKernelTailCircuitPublicInputs } from './private_kernel_tail_circuit_public_inputs.js';
export declare const PrivateExecutionStepSchema: z.ZodObject<{
    functionName: z.ZodString;
    gateCount: z.ZodOptional<z.ZodNumber>;
    bytecode: z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, Buffer, string>;
    witness: import("@aztec/foundation/schemas").ZodFor<Map<number, string>>;
    vk: z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, Buffer, string>;
}, "strip", z.ZodTypeAny, {
    bytecode: Buffer;
    vk: Buffer;
    functionName: string;
    witness: Map<number, string>;
    gateCount?: number | undefined;
}, {
    bytecode: string;
    vk: string;
    functionName: string;
    gateCount?: number | undefined;
    witness?: any;
}>;
/**
 *  Represents either a simulated private kernel circuit or one of our application function circuits.
 */
export interface PrivateExecutionStep {
    functionName: string;
    gateCount?: number;
    bytecode: Buffer;
    witness: WitnessMap;
    vk: Buffer;
}
/** Represents the output of proven PrivateKernelSimulateOutput.*/
export interface PrivateKernelExecutionProofOutput<PublicInputsType extends PrivateKernelCircuitPublicInputs | PrivateKernelTailCircuitPublicInputs> {
    /** The public inputs used by the proof generation process. */
    publicInputs: PublicInputsType;
    /** The private IVC proof optimized for user devices. It will be consumed by an Aztec prover,
     * which recursively verifies it through the "tube" circuit.*/
    clientIvcProof: ClientIvcProof;
    vk: Buffer;
    /**
     * The trace the clientIvcProof corresponds to.
     * A trace of app circuits interleaved with private kernel circuits.
     * If simulate is ran with profiling mode, also includes gate counts.
     */
    executionSteps: PrivateExecutionStep[];
}
export declare function serializePrivateExecutionSteps(steps: PrivateExecutionStep[]): Buffer;
//# sourceMappingURL=private_kernel_prover_output.d.ts.map