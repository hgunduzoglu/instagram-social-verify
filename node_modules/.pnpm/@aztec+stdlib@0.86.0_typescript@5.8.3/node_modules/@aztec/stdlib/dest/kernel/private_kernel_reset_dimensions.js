import { serializeToBuffer } from '@aztec/foundation/serialize';
export class PrivateKernelResetDimensions {
    NOTE_HASH_PENDING_AMOUNT;
    NOTE_HASH_SETTLED_AMOUNT;
    NULLIFIER_PENDING_AMOUNT;
    NULLIFIER_SETTLED_AMOUNT;
    NULLIFIER_KEYS;
    TRANSIENT_DATA_AMOUNT;
    NOTE_HASH_SILOING_AMOUNT;
    NULLIFIER_SILOING_AMOUNT;
    PRIVATE_LOG_SILOING_AMOUNT;
    constructor(NOTE_HASH_PENDING_AMOUNT, NOTE_HASH_SETTLED_AMOUNT, NULLIFIER_PENDING_AMOUNT, NULLIFIER_SETTLED_AMOUNT, NULLIFIER_KEYS, TRANSIENT_DATA_AMOUNT, NOTE_HASH_SILOING_AMOUNT, NULLIFIER_SILOING_AMOUNT, PRIVATE_LOG_SILOING_AMOUNT){
        this.NOTE_HASH_PENDING_AMOUNT = NOTE_HASH_PENDING_AMOUNT;
        this.NOTE_HASH_SETTLED_AMOUNT = NOTE_HASH_SETTLED_AMOUNT;
        this.NULLIFIER_PENDING_AMOUNT = NULLIFIER_PENDING_AMOUNT;
        this.NULLIFIER_SETTLED_AMOUNT = NULLIFIER_SETTLED_AMOUNT;
        this.NULLIFIER_KEYS = NULLIFIER_KEYS;
        this.TRANSIENT_DATA_AMOUNT = TRANSIENT_DATA_AMOUNT;
        this.NOTE_HASH_SILOING_AMOUNT = NOTE_HASH_SILOING_AMOUNT;
        this.NULLIFIER_SILOING_AMOUNT = NULLIFIER_SILOING_AMOUNT;
        this.PRIVATE_LOG_SILOING_AMOUNT = PRIVATE_LOG_SILOING_AMOUNT;
    }
    toBuffer() {
        return serializeToBuffer(this.NOTE_HASH_PENDING_AMOUNT, this.NOTE_HASH_SETTLED_AMOUNT, this.NULLIFIER_PENDING_AMOUNT, this.NULLIFIER_SETTLED_AMOUNT, this.NULLIFIER_KEYS, this.TRANSIENT_DATA_AMOUNT, this.NOTE_HASH_SILOING_AMOUNT, this.NULLIFIER_SILOING_AMOUNT, this.PRIVATE_LOG_SILOING_AMOUNT);
    }
    static empty() {
        return new PrivateKernelResetDimensions(0, 0, 0, 0, 0, 0, 0, 0, 0);
    }
    static from(fields) {
        const dimensions = PrivateKernelResetDimensions.empty();
        privateKernelResetDimensionNames.forEach((name)=>dimensions[name] = fields[name] ?? 0);
        return dimensions;
    }
    static fromValues(values) {
        if (values.length !== privateKernelResetDimensionNames.length) {
            throw new Error(`Not enough values for all dimensions. Required ${privateKernelResetDimensionNames.length}. Got ${values.length}.`);
        }
        const dimensions = PrivateKernelResetDimensions.empty();
        privateKernelResetDimensionNames.forEach((name, i)=>dimensions[name] = values[i]);
        return dimensions;
    }
    toValues() {
        return privateKernelResetDimensionNames.map((name)=>this[name]);
    }
}
export const privateKernelResetDimensionNames = [
    'NOTE_HASH_PENDING_AMOUNT',
    'NOTE_HASH_SETTLED_AMOUNT',
    'NULLIFIER_PENDING_AMOUNT',
    'NULLIFIER_SETTLED_AMOUNT',
    'NULLIFIER_KEYS',
    'TRANSIENT_DATA_AMOUNT',
    'NOTE_HASH_SILOING_AMOUNT',
    'NULLIFIER_SILOING_AMOUNT',
    'PRIVATE_LOG_SILOING_AMOUNT'
];
