/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import type { Fr } from '@aztec/foundation/fields';
import { BufferReader } from '@aztec/foundation/serialize';
import type { FieldsOf } from '@aztec/foundation/types';
import { AztecAddress } from '../aztec-address/index.js';
import { Gas } from '../gas/gas.js';
import { TxConstantData } from '../tx/tx_constant_data.js';
import { RollupValidationRequests } from './hints/rollup_validation_requests.js';
import { PrivateToRollupAccumulatedData } from './private_to_rollup_accumulated_data.js';
/**
 * Outputs from the public kernel circuits.
 * All Public kernels use this shape for outputs.
 */
export declare class PrivateToRollupKernelCircuitPublicInputs {
    /**
     * Data which is not modified by the circuits.
     */
    constants: TxConstantData;
    /**
     * Validation requests accumulated from private and public execution to be completed by the rollup.
     */
    rollupValidationRequests: RollupValidationRequests;
    /**
     * Data accumulated from both public and private circuits.
     */
    end: PrivateToRollupAccumulatedData;
    /**
     * Gas used during this transaction
     */
    gasUsed: Gas;
    /**
     * The address of the fee payer for the transaction.
     */
    feePayer: AztecAddress;
    constructor(
    /**
     * Data which is not modified by the circuits.
     */
    constants: TxConstantData, 
    /**
     * Validation requests accumulated from private and public execution to be completed by the rollup.
     */
    rollupValidationRequests: RollupValidationRequests, 
    /**
     * Data accumulated from both public and private circuits.
     */
    end: PrivateToRollupAccumulatedData, 
    /**
     * Gas used during this transaction
     */
    gasUsed: Gas, 
    /**
     * The address of the fee payer for the transaction.
     */
    feePayer: AztecAddress);
    getNonEmptyNullifiers(): Fr[];
    toBuffer(): Buffer;
    /**
     * Deserializes from a buffer or reader, corresponding to a write in cpp.
     * @param buffer - Buffer or reader to read from.
     * @returns A new instance of PrivateToRollupKernelCircuitPublicInputs.
     */
    static fromBuffer(buffer: Buffer | BufferReader): PrivateToRollupKernelCircuitPublicInputs;
    static empty(): PrivateToRollupKernelCircuitPublicInputs;
    toString(): `0x${string}`;
    static fromString(str: string): PrivateToRollupKernelCircuitPublicInputs;
    /** Returns a hex representation for JSON serialization. */
    toJSON(): Buffer;
    static getFields(fields: FieldsOf<PrivateToRollupKernelCircuitPublicInputs>): readonly [TxConstantData, RollupValidationRequests, PrivateToRollupAccumulatedData, Gas, AztecAddress];
    /** Creates an instance from a hex string. */
    static get schema(): import("zod").ZodType<PrivateToRollupKernelCircuitPublicInputs, any, string>;
    toFields(): Fr[];
    hash(): Promise<Fr>;
}
//# sourceMappingURL=private_to_rollup_kernel_circuit_public_inputs.d.ts.map