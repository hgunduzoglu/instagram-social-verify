import { Fr } from '@aztec/foundation/fields';
import { BufferReader, FieldReader, serializeToBuffer } from '@aztec/foundation/serialize';
import { AztecAddress } from '../aztec-address/index.js';
export class Nullifier {
    value;
    counter;
    noteHash;
    constructor(value, counter, noteHash){
        this.value = value;
        this.counter = counter;
        this.noteHash = noteHash;
    }
    toFields() {
        return [
            this.value,
            new Fr(this.counter),
            this.noteHash
        ];
    }
    static fromFields(fields) {
        const reader = FieldReader.asReader(fields);
        return new Nullifier(reader.readField(), reader.readU32(), reader.readField());
    }
    isEmpty() {
        return this.value.isZero() && !this.counter && this.noteHash.isZero();
    }
    static empty() {
        return new Nullifier(Fr.zero(), 0, Fr.zero());
    }
    toBuffer() {
        return serializeToBuffer(this.value, this.counter, this.noteHash);
    }
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new Nullifier(Fr.fromBuffer(reader), reader.readNumber(), Fr.fromBuffer(reader));
    }
    toString() {
        return `value=${this.value} counter=${this.counter} noteHash=${this.noteHash}`;
    }
    scope(contractAddress) {
        return new ScopedNullifier(this, contractAddress);
    }
}
export class ScopedNullifier {
    nullifier;
    contractAddress;
    constructor(nullifier, contractAddress){
        this.nullifier = nullifier;
        this.contractAddress = contractAddress;
    }
    get counter() {
        return this.nullifier.counter;
    }
    get value() {
        return this.nullifier.value;
    }
    get nullifiedNoteHash() {
        return this.nullifier.noteHash;
    }
    toFields() {
        return [
            ...this.nullifier.toFields(),
            this.contractAddress.toField()
        ];
    }
    static fromFields(fields) {
        const reader = FieldReader.asReader(fields);
        return new ScopedNullifier(reader.readObject(Nullifier), AztecAddress.fromField(reader.readField()));
    }
    isEmpty() {
        return this.nullifier.isEmpty() && this.contractAddress.isZero();
    }
    static empty() {
        return new ScopedNullifier(Nullifier.empty(), AztecAddress.ZERO);
    }
    toBuffer() {
        return serializeToBuffer(this.nullifier, this.contractAddress);
    }
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new ScopedNullifier(Nullifier.fromBuffer(reader), AztecAddress.fromBuffer(reader));
    }
    toString() {
        return `nullifier=${this.nullifier} contractAddress=${this.contractAddress}`;
    }
}
