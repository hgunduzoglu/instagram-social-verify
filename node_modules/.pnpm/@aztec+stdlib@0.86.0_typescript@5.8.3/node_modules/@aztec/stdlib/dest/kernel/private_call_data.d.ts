/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import { FUNCTION_TREE_HEIGHT, PROTOCOL_CONTRACT_TREE_HEIGHT, PUBLIC_DATA_TREE_HEIGHT } from '@aztec/constants';
import { Fr } from '@aztec/foundation/fields';
import { BufferReader } from '@aztec/foundation/serialize';
import { MembershipWitness } from '@aztec/foundation/trees';
import type { FieldsOf } from '@aztec/foundation/types';
import { PublicKeys } from '../keys/public_keys.js';
import { SharedMutableValues } from '../shared_mutable/shared_mutable_values.js';
import { ProtocolContractLeafPreimage, PublicDataTreeLeafPreimage } from '../trees/index.js';
import { VerificationKeyAsFields } from '../vks/verification_key.js';
import { PrivateCircuitPublicInputs } from './private_circuit_public_inputs.js';
/**
 * Private call data.
 */
export declare class PrivateCallData {
    /**
     * Public inputs of the private function circuit.
     */
    publicInputs: PrivateCircuitPublicInputs;
    /**
     * The verification key for the function being invoked.
     */
    vk: VerificationKeyAsFields;
    /**
     * Hints for the validation of the vk
     */
    verificationKeyHints: PrivateVerificationKeyHints;
    constructor(
    /**
     * Public inputs of the private function circuit.
     */
    publicInputs: PrivateCircuitPublicInputs, 
    /**
     * The verification key for the function being invoked.
     */
    vk: VerificationKeyAsFields, 
    /**
     * Hints for the validation of the vk
     */
    verificationKeyHints: PrivateVerificationKeyHints);
    /**
     * Serialize into a field array. Low-level utility.
     * @param fields - Object with fields.
     * @returns The array.
     */
    static getFields(fields: FieldsOf<PrivateCallData>): readonly [PrivateCircuitPublicInputs, VerificationKeyAsFields, PrivateVerificationKeyHints];
    static from(fields: FieldsOf<PrivateCallData>): PrivateCallData;
    /**
     * Serialize this as a buffer.
     * @returns The buffer.
     */
    toBuffer(): Buffer;
    /**
     * Deserializes from a buffer or reader.
     * @param buffer - Buffer or reader to read from.
     * @returns The deserialized instance.
     */
    static fromBuffer(buffer: Buffer | BufferReader): PrivateCallData;
}
export declare class PrivateVerificationKeyHints {
    /**
     * Artifact hash of the contract class for this private call.
     */
    contractClassArtifactHash: Fr;
    /**
     * Public bytecode commitment for the contract class for this private call.
     */
    contractClassPublicBytecodeCommitment: Fr;
    /**
     * Public keys hash of the contract instance.
     */
    publicKeys: PublicKeys;
    /**
     * Salted initialization hash of the contract instance.
     */
    saltedInitializationHash: Fr;
    /**
     * The membership witness for the function leaf corresponding to the function being invoked.
     */
    functionLeafMembershipWitness: MembershipWitness<typeof FUNCTION_TREE_HEIGHT>;
    /**
     * The membership witness for the protocolContractLeaf.
     */
    protocolContractMembershipWitness: MembershipWitness<typeof PROTOCOL_CONTRACT_TREE_HEIGHT>;
    /**
     * The leaf of the protocol contract tree, of either:
     *  The protocol contract being called.
     *  The low leaf showing that the address of the contract being called is not in the tree.
     */
    protocolContractLeaf: ProtocolContractLeafPreimage;
    updatedClassIdHints: UpdatedClassIdHints;
    constructor(
    /**
     * Artifact hash of the contract class for this private call.
     */
    contractClassArtifactHash: Fr, 
    /**
     * Public bytecode commitment for the contract class for this private call.
     */
    contractClassPublicBytecodeCommitment: Fr, 
    /**
     * Public keys hash of the contract instance.
     */
    publicKeys: PublicKeys, 
    /**
     * Salted initialization hash of the contract instance.
     */
    saltedInitializationHash: Fr, 
    /**
     * The membership witness for the function leaf corresponding to the function being invoked.
     */
    functionLeafMembershipWitness: MembershipWitness<typeof FUNCTION_TREE_HEIGHT>, 
    /**
     * The membership witness for the protocolContractLeaf.
     */
    protocolContractMembershipWitness: MembershipWitness<typeof PROTOCOL_CONTRACT_TREE_HEIGHT>, 
    /**
     * The leaf of the protocol contract tree, of either:
     *  The protocol contract being called.
     *  The low leaf showing that the address of the contract being called is not in the tree.
     */
    protocolContractLeaf: ProtocolContractLeafPreimage, updatedClassIdHints: UpdatedClassIdHints);
    /**
     * Serialize into a field array. Low-level utility.
     * @param fields - Object with fields.
     * @returns The array.
     */
    static getFields(fields: FieldsOf<PrivateVerificationKeyHints>): readonly [Fr, Fr, PublicKeys, Fr, MembershipWitness<5>, MembershipWitness<3>, ProtocolContractLeafPreimage, UpdatedClassIdHints];
    static from(fields: FieldsOf<PrivateVerificationKeyHints>): PrivateVerificationKeyHints;
    /**
     * Serialize this as a buffer.
     * @returns The buffer.
     */
    toBuffer(): Buffer;
    /**
     * Deserializes from a buffer or reader.
     * @param buffer - Buffer or reader to read from.
     * @returns The deserialized instance.
     */
    static fromBuffer(buffer: Buffer | BufferReader): PrivateVerificationKeyHints;
}
export declare class UpdatedClassIdHints {
    updatedClassIdWitness: MembershipWitness<typeof PUBLIC_DATA_TREE_HEIGHT>;
    updatedClassIdLeaf: PublicDataTreeLeafPreimage;
    updatedClassIdValues: SharedMutableValues;
    constructor(updatedClassIdWitness: MembershipWitness<typeof PUBLIC_DATA_TREE_HEIGHT>, updatedClassIdLeaf: PublicDataTreeLeafPreimage, updatedClassIdValues: SharedMutableValues);
    static getFields(fields: FieldsOf<UpdatedClassIdHints>): readonly [MembershipWitness<40>, PublicDataTreeLeafPreimage, SharedMutableValues];
    static from(fields: FieldsOf<UpdatedClassIdHints>): UpdatedClassIdHints;
    /**
     * Serialize this as a buffer.
     * @returns The buffer.
     */
    toBuffer(): Buffer;
    /**
     * Deserializes from a buffer or reader.
     * @param buffer - Buffer or reader to read from.
     * @returns The deserialized instance.
     */
    static fromBuffer(buffer: Buffer | BufferReader): UpdatedClassIdHints;
}
//# sourceMappingURL=private_call_data.d.ts.map