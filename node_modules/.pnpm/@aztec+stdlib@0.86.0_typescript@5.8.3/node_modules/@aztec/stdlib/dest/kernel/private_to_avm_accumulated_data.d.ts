/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import { MAX_L2_TO_L1_MSGS_PER_TX, MAX_NOTE_HASHES_PER_TX, MAX_NULLIFIERS_PER_TX } from '@aztec/constants';
import { type FieldsOf } from '@aztec/foundation/array';
import { Fr } from '@aztec/foundation/fields';
import { BufferReader, FieldReader, type Tuple } from '@aztec/foundation/serialize';
import { inspect } from 'util';
import { z } from 'zod';
import { ScopedL2ToL1Message } from '../messaging/l2_to_l1_message.js';
import type { UInt32 } from '../types/shared.js';
export declare class PrivateToAvmAccumulatedData {
    noteHashes: Tuple<Fr, typeof MAX_NOTE_HASHES_PER_TX>;
    nullifiers: Tuple<Fr, typeof MAX_NULLIFIERS_PER_TX>;
    l2ToL1Msgs: Tuple<ScopedL2ToL1Message, typeof MAX_L2_TO_L1_MSGS_PER_TX>;
    constructor(noteHashes: Tuple<Fr, typeof MAX_NOTE_HASHES_PER_TX>, nullifiers: Tuple<Fr, typeof MAX_NULLIFIERS_PER_TX>, l2ToL1Msgs: Tuple<ScopedL2ToL1Message, typeof MAX_L2_TO_L1_MSGS_PER_TX>);
    static get schema(): z.ZodEffects<z.ZodObject<{
        noteHashes: z.ZodArray<z.ZodType<Fr, any, string>, "many">;
        nullifiers: z.ZodArray<z.ZodType<Fr, any, string>, "many">;
        l2ToL1Msgs: z.ZodArray<z.ZodEffects<z.ZodObject<{
            message: z.ZodEffects<z.ZodObject<{
                recipient: z.ZodType<import("@aztec/foundation/schemas").EthAddress, any, string>;
                content: z.ZodType<Fr, any, string>;
                counter: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                counter: number;
                recipient: import("@aztec/foundation/schemas").EthAddress;
                content: Fr;
            }, {
                counter: number;
                recipient: string;
                content: string;
            }>, import("../messaging/l2_to_l1_message.js").L2ToL1Message, {
                counter: number;
                recipient: string;
                content: string;
            }>;
            contractAddress: import("@aztec/foundation/schemas").ZodFor<import("../aztec-address/index.js").AztecAddress>;
        }, "strip", z.ZodTypeAny, {
            message: import("../messaging/l2_to_l1_message.js").L2ToL1Message;
            contractAddress: import("../aztec-address/index.js").AztecAddress;
        }, {
            message: {
                counter: number;
                recipient: string;
                content: string;
            };
            contractAddress?: any;
        }>, ScopedL2ToL1Message, {
            message: {
                counter: number;
                recipient: string;
                content: string;
            };
            contractAddress?: any;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        noteHashes: Fr[];
        nullifiers: Fr[];
        l2ToL1Msgs: ScopedL2ToL1Message[];
    }, {
        noteHashes: string[];
        nullifiers: string[];
        l2ToL1Msgs: {
            message: {
                counter: number;
                recipient: string;
                content: string;
            };
            contractAddress?: any;
        }[];
    }>, PrivateToAvmAccumulatedData, {
        noteHashes: string[];
        nullifiers: string[];
        l2ToL1Msgs: {
            message: {
                counter: number;
                recipient: string;
                content: string;
            };
            contractAddress?: any;
        }[];
    }>;
    getSize(): number;
    static getFields(fields: FieldsOf<PrivateToAvmAccumulatedData>): readonly [[Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr], [Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr], [ScopedL2ToL1Message, ScopedL2ToL1Message, ScopedL2ToL1Message, ScopedL2ToL1Message, ScopedL2ToL1Message, ScopedL2ToL1Message, ScopedL2ToL1Message, ScopedL2ToL1Message]];
    static fromFields(fields: Fr[] | FieldReader): PrivateToAvmAccumulatedData;
    toFields(): Fr[];
    static from(fields: FieldsOf<PrivateToAvmAccumulatedData>): PrivateToAvmAccumulatedData;
    static fromBuffer(buffer: Buffer | BufferReader): PrivateToAvmAccumulatedData;
    toBuffer(): Buffer;
    static empty(): PrivateToAvmAccumulatedData;
    [inspect.custom](): string;
}
export declare class PrivateToAvmAccumulatedDataArrayLengths {
    noteHashes: UInt32;
    nullifiers: UInt32;
    l2ToL1Msgs: UInt32;
    constructor(noteHashes: UInt32, nullifiers: UInt32, l2ToL1Msgs: UInt32);
    static get schema(): z.ZodEffects<z.ZodObject<{
        noteHashes: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
        nullifiers: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
        l2ToL1Msgs: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        noteHashes: number;
        nullifiers: number;
        l2ToL1Msgs: number;
    }, {
        noteHashes: string | number | bigint;
        nullifiers: string | number | bigint;
        l2ToL1Msgs: string | number | bigint;
    }>, PrivateToAvmAccumulatedDataArrayLengths, {
        noteHashes: string | number | bigint;
        nullifiers: string | number | bigint;
        l2ToL1Msgs: string | number | bigint;
    }>;
    getSize(): number;
    static getFields(fields: FieldsOf<PrivateToAvmAccumulatedDataArrayLengths>): readonly [number, number, number];
    static fromFields(fields: Fr[] | FieldReader): PrivateToAvmAccumulatedDataArrayLengths;
    static from(fields: FieldsOf<PrivateToAvmAccumulatedDataArrayLengths>): PrivateToAvmAccumulatedDataArrayLengths;
    static fromBuffer(buffer: Buffer | BufferReader): PrivateToAvmAccumulatedDataArrayLengths;
    toBuffer(): Buffer;
    static empty(): PrivateToAvmAccumulatedDataArrayLengths;
    [inspect.custom](): string;
}
//# sourceMappingURL=private_to_avm_accumulated_data.d.ts.map