import { FUNCTION_TREE_HEIGHT, PROTOCOL_CONTRACT_TREE_HEIGHT, PUBLIC_DATA_TREE_HEIGHT, UPDATES_VALUE_SIZE } from '@aztec/constants';
import { Fr } from '@aztec/foundation/fields';
import { BufferReader, serializeToBuffer } from '@aztec/foundation/serialize';
import { MembershipWitness } from '@aztec/foundation/trees';
import { PublicKeys } from '../keys/public_keys.js';
import { SharedMutableValues } from '../shared_mutable/shared_mutable_values.js';
import { ProtocolContractLeafPreimage, PublicDataTreeLeafPreimage } from '../trees/index.js';
import { VerificationKeyAsFields } from '../vks/verification_key.js';
import { PrivateCircuitPublicInputs } from './private_circuit_public_inputs.js';
/**
 * Private call data.
 */ export class PrivateCallData {
    publicInputs;
    vk;
    verificationKeyHints;
    constructor(/**
     * Public inputs of the private function circuit.
     */ publicInputs, /**
     * The verification key for the function being invoked.
     */ vk, /**
     * Hints for the validation of the vk
     */ verificationKeyHints){
        this.publicInputs = publicInputs;
        this.vk = vk;
        this.verificationKeyHints = verificationKeyHints;
    }
    /**
   * Serialize into a field array. Low-level utility.
   * @param fields - Object with fields.
   * @returns The array.
   */ static getFields(fields) {
        return [
            fields.publicInputs,
            fields.vk,
            fields.verificationKeyHints
        ];
    }
    static from(fields) {
        return new PrivateCallData(...PrivateCallData.getFields(fields));
    }
    /**
   * Serialize this as a buffer.
   * @returns The buffer.
   */ toBuffer() {
        return serializeToBuffer(...PrivateCallData.getFields(this));
    }
    /**
   * Deserializes from a buffer or reader.
   * @param buffer - Buffer or reader to read from.
   * @returns The deserialized instance.
   */ static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new PrivateCallData(reader.readObject(PrivateCircuitPublicInputs), reader.readObject(VerificationKeyAsFields), reader.readObject(PrivateVerificationKeyHints));
    }
}
export class PrivateVerificationKeyHints {
    contractClassArtifactHash;
    contractClassPublicBytecodeCommitment;
    publicKeys;
    saltedInitializationHash;
    functionLeafMembershipWitness;
    protocolContractMembershipWitness;
    protocolContractLeaf;
    updatedClassIdHints;
    constructor(/**
     * Artifact hash of the contract class for this private call.
     */ contractClassArtifactHash, /**
     * Public bytecode commitment for the contract class for this private call.
     */ contractClassPublicBytecodeCommitment, /**
     * Public keys hash of the contract instance.
     */ publicKeys, /**
     * Salted initialization hash of the contract instance.
     */ saltedInitializationHash, /**
     * The membership witness for the function leaf corresponding to the function being invoked.
     */ functionLeafMembershipWitness, /**
     * The membership witness for the protocolContractLeaf.
     */ protocolContractMembershipWitness, /**
     * The leaf of the protocol contract tree, of either:
     *  The protocol contract being called.
     *  The low leaf showing that the address of the contract being called is not in the tree.
     */ protocolContractLeaf, updatedClassIdHints){
        this.contractClassArtifactHash = contractClassArtifactHash;
        this.contractClassPublicBytecodeCommitment = contractClassPublicBytecodeCommitment;
        this.publicKeys = publicKeys;
        this.saltedInitializationHash = saltedInitializationHash;
        this.functionLeafMembershipWitness = functionLeafMembershipWitness;
        this.protocolContractMembershipWitness = protocolContractMembershipWitness;
        this.protocolContractLeaf = protocolContractLeaf;
        this.updatedClassIdHints = updatedClassIdHints;
    }
    /**
   * Serialize into a field array. Low-level utility.
   * @param fields - Object with fields.
   * @returns The array.
   */ static getFields(fields) {
        return [
            fields.contractClassArtifactHash,
            fields.contractClassPublicBytecodeCommitment,
            fields.publicKeys,
            fields.saltedInitializationHash,
            fields.functionLeafMembershipWitness,
            fields.protocolContractMembershipWitness,
            fields.protocolContractLeaf,
            fields.updatedClassIdHints
        ];
    }
    static from(fields) {
        return new PrivateVerificationKeyHints(...PrivateVerificationKeyHints.getFields(fields));
    }
    /**
   * Serialize this as a buffer.
   * @returns The buffer.
   */ toBuffer() {
        return serializeToBuffer(...PrivateVerificationKeyHints.getFields(this));
    }
    /**
   * Deserializes from a buffer or reader.
   * @param buffer - Buffer or reader to read from.
   * @returns The deserialized instance.
   */ static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new PrivateVerificationKeyHints(reader.readObject(Fr), reader.readObject(Fr), reader.readObject(PublicKeys), reader.readObject(Fr), reader.readObject(MembershipWitness.deserializer(FUNCTION_TREE_HEIGHT)), reader.readObject(MembershipWitness.deserializer(PROTOCOL_CONTRACT_TREE_HEIGHT)), reader.readObject(ProtocolContractLeafPreimage), reader.readObject(UpdatedClassIdHints));
    }
}
export class UpdatedClassIdHints {
    updatedClassIdWitness;
    updatedClassIdLeaf;
    updatedClassIdValues;
    constructor(updatedClassIdWitness, updatedClassIdLeaf, updatedClassIdValues){
        this.updatedClassIdWitness = updatedClassIdWitness;
        this.updatedClassIdLeaf = updatedClassIdLeaf;
        this.updatedClassIdValues = updatedClassIdValues;
    }
    static getFields(fields) {
        return [
            fields.updatedClassIdWitness,
            fields.updatedClassIdLeaf,
            fields.updatedClassIdValues
        ];
    }
    static from(fields) {
        return new UpdatedClassIdHints(...UpdatedClassIdHints.getFields(fields));
    }
    /**
   * Serialize this as a buffer.
   * @returns The buffer.
   */ toBuffer() {
        return serializeToBuffer(...UpdatedClassIdHints.getFields(this));
    }
    /**
   * Deserializes from a buffer or reader.
   * @param buffer - Buffer or reader to read from.
   * @returns The deserialized instance.
   */ static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new UpdatedClassIdHints(reader.readObject(MembershipWitness.deserializer(PUBLIC_DATA_TREE_HEIGHT)), reader.readObject(PublicDataTreeLeafPreimage), reader.readObject({
            fromBuffer (reader) {
                return SharedMutableValues.fromBuffer(reader, UPDATES_VALUE_SIZE);
            }
        }));
    }
}
