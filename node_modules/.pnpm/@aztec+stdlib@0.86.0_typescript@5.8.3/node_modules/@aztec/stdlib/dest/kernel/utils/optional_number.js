import { BufferReader, FieldReader, serializeToBuffer, serializeToFields } from '@aztec/foundation/serialize';
export class OptionalNumber {
    isSome;
    value;
    constructor(/**
     * Whether a value was set.
     */ isSome, /**
     * The actual number, if isSome is true.
     */ value){
        this.isSome = isSome;
        this.value = value;
    }
    getSize() {
        return this.toBuffer().length;
    }
    static getFields(fields) {
        return [
            fields.isSome,
            fields.value
        ];
    }
    toBuffer() {
        return serializeToBuffer(...OptionalNumber.getFields(this));
    }
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new OptionalNumber(reader.readBoolean(), reader.readNumber());
    }
    toFields() {
        return serializeToFields(...OptionalNumber.getFields(this));
    }
    static fromFields(fields) {
        const reader = FieldReader.asReader(fields);
        return new OptionalNumber(reader.readBoolean(), reader.readU32());
    }
    isEmpty() {
        return !this.isSome && !this.value;
    }
    static empty() {
        return new OptionalNumber(false, 0);
    }
}
