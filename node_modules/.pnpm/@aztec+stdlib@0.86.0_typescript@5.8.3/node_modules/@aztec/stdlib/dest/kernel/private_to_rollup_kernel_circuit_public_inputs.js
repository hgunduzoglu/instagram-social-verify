import { GeneratorIndex, PRIVATE_TO_ROLLUP_KERNEL_CIRCUIT_PUBLIC_INPUTS_LENGTH } from '@aztec/constants';
import { poseidon2HashWithSeparator } from '@aztec/foundation/crypto';
import { bufferSchemaFor } from '@aztec/foundation/schemas';
import { BufferReader, serializeToBuffer, serializeToFields } from '@aztec/foundation/serialize';
import { bufferToHex, hexToBuffer } from '@aztec/foundation/string';
import { AztecAddress } from '../aztec-address/index.js';
import { Gas } from '../gas/gas.js';
import { TxConstantData } from '../tx/tx_constant_data.js';
import { RollupValidationRequests } from './hints/rollup_validation_requests.js';
import { PrivateToRollupAccumulatedData } from './private_to_rollup_accumulated_data.js';
/**
 * Outputs from the public kernel circuits.
 * All Public kernels use this shape for outputs.
 */ export class PrivateToRollupKernelCircuitPublicInputs {
    constants;
    rollupValidationRequests;
    end;
    gasUsed;
    feePayer;
    constructor(/**
     * Data which is not modified by the circuits.
     */ constants, /**
     * Validation requests accumulated from private and public execution to be completed by the rollup.
     */ rollupValidationRequests, /**
     * Data accumulated from both public and private circuits.
     */ end, /**
     * Gas used during this transaction
     */ gasUsed, /**
     * The address of the fee payer for the transaction.
     */ feePayer){
        this.constants = constants;
        this.rollupValidationRequests = rollupValidationRequests;
        this.end = end;
        this.gasUsed = gasUsed;
        this.feePayer = feePayer;
    }
    getNonEmptyNullifiers() {
        return this.end.nullifiers.filter((n)=>!n.isZero());
    }
    toBuffer() {
        return serializeToBuffer(this.constants, this.rollupValidationRequests, this.end, this.gasUsed, this.feePayer);
    }
    /**
   * Deserializes from a buffer or reader, corresponding to a write in cpp.
   * @param buffer - Buffer or reader to read from.
   * @returns A new instance of PrivateToRollupKernelCircuitPublicInputs.
   */ static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new PrivateToRollupKernelCircuitPublicInputs(reader.readObject(TxConstantData), reader.readObject(RollupValidationRequests), reader.readObject(PrivateToRollupAccumulatedData), reader.readObject(Gas), reader.readObject(AztecAddress));
    }
    static empty() {
        return new PrivateToRollupKernelCircuitPublicInputs(TxConstantData.empty(), RollupValidationRequests.empty(), PrivateToRollupAccumulatedData.empty(), Gas.empty(), AztecAddress.ZERO);
    }
    toString() {
        return bufferToHex(this.toBuffer());
    }
    static fromString(str) {
        return PrivateToRollupKernelCircuitPublicInputs.fromBuffer(hexToBuffer(str));
    }
    /** Returns a hex representation for JSON serialization. */ toJSON() {
        return this.toBuffer();
    }
    static getFields(fields) {
        return [
            fields.constants,
            fields.rollupValidationRequests,
            fields.end,
            fields.gasUsed,
            fields.feePayer
        ];
    }
    /** Creates an instance from a hex string. */ static get schema() {
        return bufferSchemaFor(PrivateToRollupKernelCircuitPublicInputs);
    }
    toFields() {
        const fields = serializeToFields(...PrivateToRollupKernelCircuitPublicInputs.getFields(this));
        if (fields.length !== PRIVATE_TO_ROLLUP_KERNEL_CIRCUIT_PUBLIC_INPUTS_LENGTH) {
            throw new Error(`Invalid number of fields for PrivateToRollupKernelCircuitPublicInputs. Expected ${PRIVATE_TO_ROLLUP_KERNEL_CIRCUIT_PUBLIC_INPUTS_LENGTH}, got ${fields.length}`);
        }
        return fields;
    }
    hash() {
        return poseidon2HashWithSeparator(this.toFields(), GeneratorIndex.PRIVATE_TX_HASH);
    }
}
