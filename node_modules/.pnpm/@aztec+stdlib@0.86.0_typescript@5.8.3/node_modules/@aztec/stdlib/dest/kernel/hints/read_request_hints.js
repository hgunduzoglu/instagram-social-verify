import { makeTuple } from '@aztec/foundation/array';
import { BufferReader, serializeToBuffer } from '@aztec/foundation/serialize';
import { MembershipWitness } from '@aztec/foundation/trees';
export var ReadRequestState = /*#__PURE__*/ function(ReadRequestState) {
    ReadRequestState[ReadRequestState["NADA"] = 0] = "NADA";
    ReadRequestState[ReadRequestState["PENDING"] = 1] = "PENDING";
    ReadRequestState[ReadRequestState["SETTLED"] = 2] = "SETTLED";
    return ReadRequestState;
}({});
export class ReadRequestStatus {
    state;
    hintIndex;
    constructor(state, hintIndex){
        this.state = state;
        this.hintIndex = hintIndex;
    }
    static nada() {
        return new ReadRequestStatus(0, 0);
    }
    static pending(hintIndex) {
        return new ReadRequestStatus(1, hintIndex);
    }
    static settled(hintIndex) {
        return new ReadRequestStatus(2, hintIndex);
    }
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new ReadRequestStatus(reader.readNumber(), reader.readNumber());
    }
    toBuffer() {
        return serializeToBuffer(this.state, this.hintIndex);
    }
}
export class PendingReadHint {
    readRequestIndex;
    pendingValueIndex;
    constructor(readRequestIndex, pendingValueIndex){
        this.readRequestIndex = readRequestIndex;
        this.pendingValueIndex = pendingValueIndex;
    }
    static nada(readRequestLen) {
        return new PendingReadHint(readRequestLen, 0);
    }
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new PendingReadHint(reader.readNumber(), reader.readNumber());
    }
    toBuffer() {
        return serializeToBuffer(this.readRequestIndex, this.pendingValueIndex);
    }
}
export class SettledReadHint {
    readRequestIndex;
    membershipWitness;
    leafPreimage;
    constructor(readRequestIndex, membershipWitness, leafPreimage){
        this.readRequestIndex = readRequestIndex;
        this.membershipWitness = membershipWitness;
        this.leafPreimage = leafPreimage;
    }
    static nada(readRequestLen, treeHeight, emptyLeafPreimage) {
        return new SettledReadHint(readRequestLen, MembershipWitness.empty(treeHeight), emptyLeafPreimage());
    }
    static fromBuffer(buffer, treeHeight, leafPreimage) {
        const reader = BufferReader.asReader(buffer);
        return new SettledReadHint(reader.readNumber(), MembershipWitness.fromBuffer(reader, treeHeight), reader.readObject(leafPreimage));
    }
    toBuffer() {
        return serializeToBuffer(this.readRequestIndex, this.membershipWitness, this.leafPreimage);
    }
}
/**
 * Hints for read request reset circuit.
 */ export class ReadRequestResetHints {
    readRequestStatuses;
    pendingReadHints;
    settledReadHints;
    constructor(readRequestStatuses, /**
     * The hints for read requests reading pending values.
     */ pendingReadHints, /**
     * The hints for read requests reading settled values.
     */ settledReadHints){
        this.readRequestStatuses = readRequestStatuses;
        this.pendingReadHints = pendingReadHints;
        this.settledReadHints = settledReadHints;
    }
    trimToSizes(numPendingReads, numSettledReads) {
        return new ReadRequestResetHints(this.readRequestStatuses, this.pendingReadHints.slice(0, numPendingReads), this.settledReadHints.slice(0, numSettledReads));
    }
    /**
   * Deserializes from a buffer or reader.
   * @param buffer - Buffer or reader to read from.
   * @returns The deserialized instance.
   */ static fromBuffer(buffer, readRequestLen, numPendingReads, numSettledReads, treeHeight, leafPreimageFromBuffer) {
        const reader = BufferReader.asReader(buffer);
        return new ReadRequestResetHints(reader.readArray(readRequestLen, ReadRequestStatus), reader.readArray(numPendingReads, PendingReadHint), reader.readArray(numSettledReads, {
            fromBuffer: (r)=>SettledReadHint.fromBuffer(r, treeHeight, leafPreimageFromBuffer)
        }));
    }
    toBuffer() {
        return serializeToBuffer(this.readRequestStatuses, this.pendingReadHints, this.settledReadHints);
    }
}
export class ReadRequestResetStates {
    states;
    pendingReadHints;
    constructor(states, pendingReadHints){
        this.states = states;
        this.pendingReadHints = pendingReadHints;
    }
    static empty(numReads) {
        return new ReadRequestResetStates(makeTuple(numReads, ()=>0), []);
    }
}
