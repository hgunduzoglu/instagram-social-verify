/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import { Fr } from '@aztec/foundation/fields';
import { BufferReader, FieldReader } from '@aztec/foundation/serialize';
import type { FieldsOf } from '@aztec/foundation/types';
import { inspect } from 'util';
import { z } from 'zod';
import { AztecAddress } from '../aztec-address/index.js';
import type { UInt32 } from '../types/shared.js';
/**
 * Represents a request to call a public function.
 */
export declare class PublicCallRequest {
    /**
     * Address of the account which represents the entity who invoked the call.
     */
    msgSender: AztecAddress;
    /**
     * The contract address being called.
     */
    contractAddress: AztecAddress;
    /**
     * Determines whether the call is modifying state.
     */
    isStaticCall: boolean;
    /**
     * Hash of the calldata of the function being called.
     */
    calldataHash: Fr;
    constructor(
    /**
     * Address of the account which represents the entity who invoked the call.
     */
    msgSender: AztecAddress, 
    /**
     * The contract address being called.
     */
    contractAddress: AztecAddress, 
    /**
     * Determines whether the call is modifying state.
     */
    isStaticCall: boolean, 
    /**
     * Hash of the calldata of the function being called.
     */
    calldataHash: Fr);
    static get schema(): z.ZodEffects<z.ZodObject<{
        msgSender: import("@aztec/foundation/schemas").ZodFor<AztecAddress>;
        contractAddress: import("@aztec/foundation/schemas").ZodFor<AztecAddress>;
        isStaticCall: z.ZodBoolean;
        calldataHash: z.ZodType<Fr, any, string>;
    }, "strip", z.ZodTypeAny, {
        contractAddress: AztecAddress;
        msgSender: AztecAddress;
        isStaticCall: boolean;
        calldataHash: Fr;
    }, {
        isStaticCall: boolean;
        calldataHash: string;
        contractAddress?: any;
        msgSender?: any;
    }>, PublicCallRequest, {
        isStaticCall: boolean;
        calldataHash: string;
        contractAddress?: any;
        msgSender?: any;
    }>;
    getSize(): number;
    static from(fields: FieldsOf<PublicCallRequest>): PublicCallRequest;
    static getFields(fields: FieldsOf<PublicCallRequest>): readonly [AztecAddress, AztecAddress, boolean, Fr];
    static fromFields(fields: Fr[] | FieldReader): PublicCallRequest;
    toFields(): Fr[];
    static fromBuffer(buffer: Buffer | BufferReader): PublicCallRequest;
    toBuffer(): Buffer;
    static empty(): PublicCallRequest;
    isEmpty(): boolean;
    [inspect.custom](): string;
    static fromCalldata(msgSender: AztecAddress, contractAddress: AztecAddress, isStaticCall: boolean, calldata: Fr[]): Promise<PublicCallRequest>;
}
export declare class CountedPublicCallRequest {
    inner: PublicCallRequest;
    counter: UInt32;
    constructor(inner: PublicCallRequest, counter: UInt32);
    getSize(): number;
    static getFields(fields: FieldsOf<CountedPublicCallRequest>): readonly [PublicCallRequest, number];
    static fromFields(fields: Fr[] | FieldReader): CountedPublicCallRequest;
    toFields(): Fr[];
    static fromBuffer(buffer: Buffer | BufferReader): CountedPublicCallRequest;
    toBuffer(): Buffer;
    static empty(): CountedPublicCallRequest;
    isEmpty(): boolean;
}
//# sourceMappingURL=public_call_request.d.ts.map