/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import { Fr } from '@aztec/foundation/fields';
import { BufferReader, FieldReader } from '@aztec/foundation/serialize';
import { inspect } from 'util';
import { AztecAddress } from '../aztec-address/index.js';
import type { Ordered } from './utils/interfaces.js';
export declare class LogHash implements Ordered {
    value: Fr;
    counter: number;
    length: number;
    constructor(value: Fr, counter: number, length: number);
    toFields(): Fr[];
    static fromFields(fields: Fr[] | FieldReader): LogHash;
    isEmpty(): boolean;
    static empty(): LogHash;
    toBuffer(): Buffer;
    static fromBuffer(buffer: Buffer | BufferReader): LogHash;
    toString(): string;
    scope(contractAddress: AztecAddress): ScopedLogHash;
    [inspect.custom](): string;
}
export declare class ScopedLogHash implements Ordered {
    logHash: LogHash;
    contractAddress: AztecAddress;
    constructor(logHash: LogHash, contractAddress: AztecAddress);
    get counter(): number;
    get value(): Fr;
    toFields(): Fr[];
    static fromFields(fields: Fr[] | FieldReader): ScopedLogHash;
    isEmpty(): boolean;
    static empty(): ScopedLogHash;
    toBuffer(): Buffer;
    static fromBuffer(buffer: Buffer | BufferReader): ScopedLogHash;
    toString(): string;
}
//# sourceMappingURL=log_hash.d.ts.map