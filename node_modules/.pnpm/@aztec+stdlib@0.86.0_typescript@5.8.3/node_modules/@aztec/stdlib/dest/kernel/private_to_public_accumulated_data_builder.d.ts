import { Fr } from '@aztec/foundation/fields';
import { PrivateLog } from '../logs/private_log.js';
import { ScopedL2ToL1Message } from '../messaging/l2_to_l1_message.js';
import { ScopedLogHash } from './log_hash.js';
import { PrivateToPublicAccumulatedData } from './private_to_public_accumulated_data.js';
import { PublicCallRequest } from './public_call_request.js';
/**
 * TESTS-ONLY CLASS
 * Builder for PrivateToPublicAccumulatedData, used to conveniently construct instances for testing,
 * as PrivateToPublicAccumulatedData is (or will shortly be) immutable.
 *
 */
export declare class PrivateToPublicAccumulatedDataBuilder {
    private noteHashes;
    private nullifiers;
    private l2ToL1Msgs;
    private privateLogs;
    private contractClassLogsHashes;
    private publicCallRequests;
    pushNoteHash(newNoteHash: Fr): this;
    withNoteHashes(noteHashes: Fr[]): this;
    pushNullifier(newNullifier: Fr): this;
    withNullifiers(nullifiers: Fr[]): this;
    pushL2ToL1Msg(newL2ToL1Msg: ScopedL2ToL1Message): this;
    withL2ToL1Msgs(l2ToL1Msgs: ScopedL2ToL1Message[]): this;
    pushPrivateLog(privateLog: PrivateLog): this;
    withPrivateLogs(privateLogs: PrivateLog[]): this;
    pushContractClassLogsHash(contractClassLogsHash: ScopedLogHash): this;
    withContractClassLogsHashes(contractClassLogsHashes: ScopedLogHash[]): this;
    pushPublicCall(publicCall: PublicCallRequest): this;
    withPublicCallRequests(publicCallRequests: PublicCallRequest[]): this;
    build(): PrivateToPublicAccumulatedData;
}
//# sourceMappingURL=private_to_public_accumulated_data_builder.d.ts.map