import { Fr } from '@aztec/foundation/fields';
import { BufferReader, FieldReader, serializeToBuffer } from '@aztec/foundation/serialize';
import { AztecAddress } from '../aztec-address/index.js';
export class NoteHash {
    value;
    counter;
    constructor(value, counter){
        this.value = value;
        this.counter = counter;
    }
    toFields() {
        return [
            this.value,
            new Fr(this.counter)
        ];
    }
    static fromFields(fields) {
        const reader = FieldReader.asReader(fields);
        return new NoteHash(reader.readField(), reader.readU32());
    }
    isEmpty() {
        return this.value.isZero() && !this.counter;
    }
    static empty() {
        return new NoteHash(Fr.zero(), 0);
    }
    toBuffer() {
        return serializeToBuffer(this.value, this.counter);
    }
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new NoteHash(Fr.fromBuffer(reader), reader.readNumber());
    }
    toString() {
        return `value=${this.value} counter=${this.counter}`;
    }
    scope(contractAddress) {
        return new ScopedNoteHash(this, contractAddress);
    }
}
export class ScopedNoteHash {
    noteHash;
    contractAddress;
    constructor(noteHash, contractAddress){
        this.noteHash = noteHash;
        this.contractAddress = contractAddress;
    }
    get counter() {
        return this.noteHash.counter;
    }
    get value() {
        return this.noteHash.value;
    }
    toFields() {
        return [
            ...this.noteHash.toFields(),
            this.contractAddress.toField()
        ];
    }
    static fromFields(fields) {
        const reader = FieldReader.asReader(fields);
        return new ScopedNoteHash(reader.readObject(NoteHash), AztecAddress.fromField(reader.readField()));
    }
    isEmpty() {
        return this.noteHash.isEmpty() && this.contractAddress.isZero();
    }
    static empty() {
        return new ScopedNoteHash(NoteHash.empty(), AztecAddress.ZERO);
    }
    toBuffer() {
        return serializeToBuffer(this.noteHash, this.contractAddress);
    }
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new ScopedNoteHash(NoteHash.fromBuffer(reader), AztecAddress.fromBuffer(reader));
    }
    toString() {
        return `noteHash=${this.noteHash} contractAddress=${this.contractAddress}`;
    }
}
