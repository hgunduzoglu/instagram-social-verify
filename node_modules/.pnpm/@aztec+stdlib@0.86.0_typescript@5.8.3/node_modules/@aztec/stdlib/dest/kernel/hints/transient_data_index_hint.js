import { Fr } from '@aztec/foundation/fields';
import { BufferReader, FieldReader, serializeToBuffer } from '@aztec/foundation/serialize';
import { inspect } from 'util';
export class TransientDataIndexHint {
    nullifierIndex;
    noteHashIndex;
    constructor(nullifierIndex, noteHashIndex){
        this.nullifierIndex = nullifierIndex;
        this.noteHashIndex = noteHashIndex;
    }
    toFields() {
        return [
            new Fr(this.nullifierIndex),
            new Fr(this.noteHashIndex)
        ];
    }
    static fromFields(fields) {
        const reader = FieldReader.asReader(fields);
        return new TransientDataIndexHint(reader.readU32(), reader.readU32());
    }
    isEmpty() {
        return !this.nullifierIndex && !this.noteHashIndex;
    }
    static empty() {
        return new TransientDataIndexHint(0, 0);
    }
    toBuffer() {
        return serializeToBuffer(this.nullifierIndex, this.noteHashIndex);
    }
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new TransientDataIndexHint(reader.readNumber(), reader.readNumber());
    }
    toString() {
        return `nullifierIndex=${this.nullifierIndex} noteHashIndex=${this.noteHashIndex}`;
    }
    [inspect.custom]() {
        return `TransientDataIndexHint { ${this.toString()} }`;
    }
}
