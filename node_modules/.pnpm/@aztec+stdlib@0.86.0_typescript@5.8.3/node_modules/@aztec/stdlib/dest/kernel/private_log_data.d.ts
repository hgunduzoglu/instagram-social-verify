/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import type { Fr } from '@aztec/foundation/fields';
import { BufferReader, FieldReader } from '@aztec/foundation/serialize';
import type { FieldsOf } from '@aztec/foundation/types';
import { inspect } from 'util';
import { AztecAddress } from '../aztec-address/index.js';
import { PrivateLog } from '../logs/private_log.js';
import type { UInt32 } from '../types/shared.js';
export declare class PrivateLogData {
    log: PrivateLog;
    noteHashCounter: UInt32;
    counter: UInt32;
    constructor(log: PrivateLog, noteHashCounter: UInt32, counter: UInt32);
    static from(fields: FieldsOf<PrivateLogData>): PrivateLogData;
    static getFields(fields: FieldsOf<PrivateLogData>): readonly [PrivateLog, number, number];
    static fromFields(fields: Fr[] | FieldReader): PrivateLogData;
    toFields(): Fr[];
    static fromBuffer(buffer: Buffer | BufferReader): PrivateLogData;
    toBuffer(): Buffer;
    static empty(): PrivateLogData;
    isEmpty(): boolean;
    [inspect.custom](): string;
}
export declare class ScopedPrivateLogData {
    inner: PrivateLogData;
    contractAddress: AztecAddress;
    constructor(inner: PrivateLogData, contractAddress: AztecAddress);
    static from(fields: FieldsOf<ScopedPrivateLogData>): ScopedPrivateLogData;
    static getFields(fields: FieldsOf<ScopedPrivateLogData>): readonly [PrivateLogData, AztecAddress];
    toFields(): Fr[];
    static fromFields(fields: Fr[] | FieldReader): ScopedPrivateLogData;
    isEmpty(): boolean;
    static empty(): ScopedPrivateLogData;
    toBuffer(): Buffer;
    static fromBuffer(buffer: Buffer | BufferReader): ScopedPrivateLogData;
    [inspect.custom](): string;
}
//# sourceMappingURL=private_log_data.d.ts.map