import { Fr } from '@aztec/foundation/fields';
import { hexSchemaFor, schemas } from '@aztec/foundation/schemas';
import { BufferReader, FieldReader, serializeToBuffer } from '@aztec/foundation/serialize';
import { z } from 'zod';
import { BlockHeader } from '../tx/block_header.js';
import { GlobalVariables } from '../tx/global_variables.js';
import { TxContext } from '../tx/tx_context.js';
/**
 * Data that is constant/not modified by neither of the kernels.
 */ export class CombinedConstantData {
    historicalHeader;
    txContext;
    vkTreeRoot;
    protocolContractTreeRoot;
    globalVariables;
    constructor(/** Header of a block whose state is used during execution (not the block the transaction is included in). */ historicalHeader, /**
     * Context of the transaction.
     *
     * Note: `chainId` and `version` in txContext are not redundant to the values in
     * self.historical_header.global_variables because they can be different in case of a protocol upgrade. In such
     * a situation we could be using header from a block before the upgrade took place but be using the updated
     * protocol to execute and prove the transaction.
     */ txContext, /**
     * Root of the vk tree for the protocol circuits.
     */ vkTreeRoot, /**
     * Root of the tree for the protocol contracts.
     */ protocolContractTreeRoot, /** Present when output by a public kernel, empty otherwise. */ globalVariables){
        this.historicalHeader = historicalHeader;
        this.txContext = txContext;
        this.vkTreeRoot = vkTreeRoot;
        this.protocolContractTreeRoot = protocolContractTreeRoot;
        this.globalVariables = globalVariables;
    }
    static combine(TxConstantData, globalVariables) {
        return new CombinedConstantData(TxConstantData.historicalHeader, TxConstantData.txContext, TxConstantData.vkTreeRoot, TxConstantData.protocolContractTreeRoot, globalVariables);
    }
    static get schema() {
        return z.object({
            historicalHeader: BlockHeader.schema,
            txContext: TxContext.schema,
            vkTreeRoot: schemas.Fr,
            protocolContractTreeRoot: schemas.Fr,
            globalVariables: GlobalVariables.schema
        }).transform(CombinedConstantData.from).or(hexSchemaFor(CombinedConstantData));
    }
    toBuffer() {
        return serializeToBuffer(this.historicalHeader, this.txContext, this.vkTreeRoot, this.protocolContractTreeRoot, this.globalVariables);
    }
    clone() {
        return CombinedConstantData.fromBuffer(this.toBuffer());
    }
    getSize() {
        return this.historicalHeader.getSize() + this.txContext.getSize() + this.vkTreeRoot.size + this.protocolContractTreeRoot.size + this.globalVariables.getSize();
    }
    static from({ historicalHeader, txContext, vkTreeRoot, protocolContractTreeRoot, globalVariables }) {
        return new CombinedConstantData(historicalHeader, txContext, vkTreeRoot, protocolContractTreeRoot, globalVariables);
    }
    /**
   * Deserializes from a buffer or reader, corresponding to a write in cpp.
   * @param buffer - Buffer or buffer reader to read from.
   * @returns A new instance of CombinedConstantData.
   */ static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new CombinedConstantData(reader.readObject(BlockHeader), reader.readObject(TxContext), Fr.fromBuffer(reader), Fr.fromBuffer(reader), reader.readObject(GlobalVariables));
    }
    static fromFields(fields) {
        const reader = FieldReader.asReader(fields);
        return new CombinedConstantData(reader.readObject(BlockHeader), reader.readObject(TxContext), reader.readField(), reader.readField(), reader.readObject(GlobalVariables));
    }
    static empty() {
        return new CombinedConstantData(BlockHeader.empty(), TxContext.empty(), Fr.ZERO, Fr.ZERO, GlobalVariables.empty());
    }
}
