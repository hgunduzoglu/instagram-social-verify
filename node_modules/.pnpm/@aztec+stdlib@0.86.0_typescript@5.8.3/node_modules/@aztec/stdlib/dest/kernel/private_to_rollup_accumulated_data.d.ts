/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import { MAX_CONTRACT_CLASS_LOGS_PER_TX, MAX_L2_TO_L1_MSGS_PER_TX, MAX_NOTE_HASHES_PER_TX, MAX_NULLIFIERS_PER_TX, MAX_PRIVATE_LOGS_PER_TX } from '@aztec/constants';
import { type FieldsOf } from '@aztec/foundation/array';
import { Fr } from '@aztec/foundation/fields';
import { BufferReader, type Tuple } from '@aztec/foundation/serialize';
import { inspect } from 'util';
import { PrivateLog } from '../logs/private_log.js';
import { ScopedL2ToL1Message } from '../messaging/l2_to_l1_message.js';
import { ScopedLogHash } from './log_hash.js';
/**
 * Data that is accumulated during the execution of the transaction.
 */
export declare class PrivateToRollupAccumulatedData {
    /**
     * The new note hashes made in this transaction.
     */
    noteHashes: Tuple<Fr, typeof MAX_NOTE_HASHES_PER_TX>;
    /**
     * The new nullifiers made in this transaction.
     */
    nullifiers: Tuple<Fr, typeof MAX_NULLIFIERS_PER_TX>;
    /**
     * All the new L2 to L1 messages created in this transaction.
     */
    l2ToL1Msgs: Tuple<ScopedL2ToL1Message, typeof MAX_L2_TO_L1_MSGS_PER_TX>;
    /**
     * All the logs created emitted from the private functions in this transaction.
     */
    privateLogs: Tuple<PrivateLog, typeof MAX_PRIVATE_LOGS_PER_TX>;
    /**
     * Accumulated contract class logs hash from all the previous kernel iterations.
     * Note: Truncated to 31 bytes to fit in Fr.
     */
    contractClassLogsHashes: Tuple<ScopedLogHash, typeof MAX_CONTRACT_CLASS_LOGS_PER_TX>;
    constructor(
    /**
     * The new note hashes made in this transaction.
     */
    noteHashes: Tuple<Fr, typeof MAX_NOTE_HASHES_PER_TX>, 
    /**
     * The new nullifiers made in this transaction.
     */
    nullifiers: Tuple<Fr, typeof MAX_NULLIFIERS_PER_TX>, 
    /**
     * All the new L2 to L1 messages created in this transaction.
     */
    l2ToL1Msgs: Tuple<ScopedL2ToL1Message, typeof MAX_L2_TO_L1_MSGS_PER_TX>, 
    /**
     * All the logs created emitted from the private functions in this transaction.
     */
    privateLogs: Tuple<PrivateLog, typeof MAX_PRIVATE_LOGS_PER_TX>, 
    /**
     * Accumulated contract class logs hash from all the previous kernel iterations.
     * Note: Truncated to 31 bytes to fit in Fr.
     */
    contractClassLogsHashes: Tuple<ScopedLogHash, typeof MAX_CONTRACT_CLASS_LOGS_PER_TX>);
    getSize(): number;
    static getFields(fields: FieldsOf<PrivateToRollupAccumulatedData>): readonly [[Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr], [Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr], [ScopedL2ToL1Message, ScopedL2ToL1Message, ScopedL2ToL1Message, ScopedL2ToL1Message, ScopedL2ToL1Message, ScopedL2ToL1Message, ScopedL2ToL1Message, ScopedL2ToL1Message], [PrivateLog, PrivateLog, PrivateLog, PrivateLog, PrivateLog, PrivateLog, PrivateLog, PrivateLog, PrivateLog, PrivateLog, PrivateLog, PrivateLog, PrivateLog, PrivateLog, PrivateLog, PrivateLog, PrivateLog, PrivateLog, PrivateLog, PrivateLog, PrivateLog, PrivateLog, PrivateLog, PrivateLog, PrivateLog, PrivateLog, PrivateLog, PrivateLog, PrivateLog, PrivateLog, PrivateLog, PrivateLog], [ScopedLogHash]];
    static from(fields: FieldsOf<PrivateToRollupAccumulatedData>): PrivateToRollupAccumulatedData;
    static get schema(): import("zod").ZodType<PrivateToRollupAccumulatedData, any, string>;
    toJSON(): Buffer;
    toBuffer(): Buffer;
    toString(): `0x${string}`;
    /**
     * Deserializes from a buffer or reader, corresponding to a write in cpp.
     * @param buffer - Buffer or reader to read from.
     * @returns Deserialized object.
     */
    static fromBuffer(buffer: Buffer | BufferReader): PrivateToRollupAccumulatedData;
    /**
     * Deserializes from a string, corresponding to a write in cpp.
     * @param str - String to read from.
     * @returns Deserialized object.
     */
    static fromString(str: string): PrivateToRollupAccumulatedData;
    static empty(): PrivateToRollupAccumulatedData;
    toFields(): Fr[];
    [inspect.custom](): string;
}
//# sourceMappingURL=private_to_rollup_accumulated_data.d.ts.map