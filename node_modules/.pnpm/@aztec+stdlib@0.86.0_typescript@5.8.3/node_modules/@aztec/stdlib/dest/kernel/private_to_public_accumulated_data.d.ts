/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import { MAX_CONTRACT_CLASS_LOGS_PER_TX, MAX_ENQUEUED_CALLS_PER_TX, MAX_L2_TO_L1_MSGS_PER_TX, MAX_NOTE_HASHES_PER_TX, MAX_NULLIFIERS_PER_TX, MAX_PRIVATE_LOGS_PER_TX } from '@aztec/constants';
import { type FieldsOf } from '@aztec/foundation/array';
import { Fr } from '@aztec/foundation/fields';
import { BufferReader, FieldReader, type Tuple } from '@aztec/foundation/serialize';
import { inspect } from 'util';
import { PrivateLog } from '../logs/private_log.js';
import { ScopedL2ToL1Message } from '../messaging/l2_to_l1_message.js';
import { ScopedLogHash } from './log_hash.js';
import { PublicCallRequest } from './public_call_request.js';
export declare class PrivateToPublicAccumulatedData {
    readonly noteHashes: Tuple<Fr, typeof MAX_NOTE_HASHES_PER_TX>;
    readonly nullifiers: Tuple<Fr, typeof MAX_NULLIFIERS_PER_TX>;
    readonly l2ToL1Msgs: Tuple<ScopedL2ToL1Message, typeof MAX_L2_TO_L1_MSGS_PER_TX>;
    readonly privateLogs: Tuple<PrivateLog, typeof MAX_PRIVATE_LOGS_PER_TX>;
    readonly contractClassLogsHashes: Tuple<ScopedLogHash, typeof MAX_CONTRACT_CLASS_LOGS_PER_TX>;
    readonly publicCallRequests: Tuple<PublicCallRequest, typeof MAX_ENQUEUED_CALLS_PER_TX>;
    constructor(noteHashes: Tuple<Fr, typeof MAX_NOTE_HASHES_PER_TX>, nullifiers: Tuple<Fr, typeof MAX_NULLIFIERS_PER_TX>, l2ToL1Msgs: Tuple<ScopedL2ToL1Message, typeof MAX_L2_TO_L1_MSGS_PER_TX>, privateLogs: Tuple<PrivateLog, typeof MAX_PRIVATE_LOGS_PER_TX>, contractClassLogsHashes: Tuple<ScopedLogHash, typeof MAX_CONTRACT_CLASS_LOGS_PER_TX>, publicCallRequests: Tuple<PublicCallRequest, typeof MAX_ENQUEUED_CALLS_PER_TX>);
    getSize(): number;
    static getFields(fields: FieldsOf<PrivateToPublicAccumulatedData>): readonly [[Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr], [Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr], [ScopedL2ToL1Message, ScopedL2ToL1Message, ScopedL2ToL1Message, ScopedL2ToL1Message, ScopedL2ToL1Message, ScopedL2ToL1Message, ScopedL2ToL1Message, ScopedL2ToL1Message], [PrivateLog, PrivateLog, PrivateLog, PrivateLog, PrivateLog, PrivateLog, PrivateLog, PrivateLog, PrivateLog, PrivateLog, PrivateLog, PrivateLog, PrivateLog, PrivateLog, PrivateLog, PrivateLog, PrivateLog, PrivateLog, PrivateLog, PrivateLog, PrivateLog, PrivateLog, PrivateLog, PrivateLog, PrivateLog, PrivateLog, PrivateLog, PrivateLog, PrivateLog, PrivateLog, PrivateLog, PrivateLog], [ScopedLogHash], [PublicCallRequest, PublicCallRequest, PublicCallRequest, PublicCallRequest, PublicCallRequest, PublicCallRequest, PublicCallRequest, PublicCallRequest, PublicCallRequest, PublicCallRequest, PublicCallRequest, PublicCallRequest, PublicCallRequest, PublicCallRequest, PublicCallRequest, PublicCallRequest, PublicCallRequest, PublicCallRequest, PublicCallRequest, PublicCallRequest, PublicCallRequest, PublicCallRequest, PublicCallRequest, PublicCallRequest, PublicCallRequest, PublicCallRequest, PublicCallRequest, PublicCallRequest, PublicCallRequest, PublicCallRequest, PublicCallRequest, PublicCallRequest]];
    static fromFields(fields: Fr[] | FieldReader): PrivateToPublicAccumulatedData;
    static from(fields: FieldsOf<PrivateToPublicAccumulatedData>): PrivateToPublicAccumulatedData;
    static fromBuffer(buffer: Buffer | BufferReader): PrivateToPublicAccumulatedData;
    toBuffer(): Buffer;
    toFields(): Fr[];
    static empty(): PrivateToPublicAccumulatedData;
    [inspect.custom](): string;
}
//# sourceMappingURL=private_to_public_accumulated_data.d.ts.map