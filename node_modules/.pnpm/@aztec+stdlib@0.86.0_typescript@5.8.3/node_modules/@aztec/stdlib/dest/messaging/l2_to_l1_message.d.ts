/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import { EthAddress } from '@aztec/foundation/eth-address';
import { Fr } from '@aztec/foundation/fields';
import { BufferReader, FieldReader } from '@aztec/foundation/serialize';
import type { FieldsOf } from '@aztec/foundation/types';
import { z } from 'zod';
import { AztecAddress } from '../aztec-address/index.js';
export declare class L2ToL1Message {
    recipient: EthAddress;
    content: Fr;
    counter: number;
    constructor(recipient: EthAddress, content: Fr, counter: number);
    static get schema(): z.ZodEffects<z.ZodObject<{
        recipient: z.ZodType<EthAddress, any, string>;
        content: z.ZodType<Fr, any, string>;
        counter: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        counter: number;
        recipient: EthAddress;
        content: Fr;
    }, {
        counter: number;
        recipient: string;
        content: string;
    }>, L2ToL1Message, {
        counter: number;
        recipient: string;
        content: string;
    }>;
    /**
     * Creates an empty L2ToL1Message with default values.
     * @returns An instance of L2ToL1Message with empty fields.
     */
    static empty(): L2ToL1Message;
    /**
     * Checks if another L2ToL1Message is equal to this instance.
     * @param other Another L2ToL1Message instance to compare with.
     * @returns True if both recipient and content are equal.
     */
    equals(other: L2ToL1Message): boolean;
    /**
     * Serialize this as a buffer.
     * @returns The buffer.
     */
    toBuffer(): Buffer;
    /**
     * Serializes the L2ToL1Message into an array of fields.
     * @returns An array of fields representing the serialized message.
     */
    toFields(): Fr[];
    /**
     * Deserializes an array of fields into an L2ToL1Message instance.
     * @param fields An array of fields to deserialize from.
     * @returns An instance of L2ToL1Message.
     */
    static fromFields(fields: Fr[] | FieldReader): L2ToL1Message;
    /**
     * Deserializes from a buffer or reader.
     * @param buffer - Buffer or reader to read from.
     * @returns A new instance of L2ToL1Message.
     */
    static fromBuffer(buffer: Buffer | BufferReader): L2ToL1Message;
    /**
     * Convenience method to check if the message is empty.
     * @returns True if both recipient and content are zero.
     */
    isEmpty(): boolean;
    scope(contractAddress: AztecAddress): ScopedL2ToL1Message;
}
export declare class ScopedL2ToL1Message {
    message: L2ToL1Message;
    contractAddress: AztecAddress;
    constructor(message: L2ToL1Message, contractAddress: AztecAddress);
    static get schema(): z.ZodEffects<z.ZodObject<{
        message: z.ZodEffects<z.ZodObject<{
            recipient: z.ZodType<EthAddress, any, string>;
            content: z.ZodType<Fr, any, string>;
            counter: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            counter: number;
            recipient: EthAddress;
            content: Fr;
        }, {
            counter: number;
            recipient: string;
            content: string;
        }>, L2ToL1Message, {
            counter: number;
            recipient: string;
            content: string;
        }>;
        contractAddress: import("@aztec/foundation/schemas").ZodFor<AztecAddress>;
    }, "strip", z.ZodTypeAny, {
        message: L2ToL1Message;
        contractAddress: AztecAddress;
    }, {
        message: {
            counter: number;
            recipient: string;
            content: string;
        };
        contractAddress?: any;
    }>, ScopedL2ToL1Message, {
        message: {
            counter: number;
            recipient: string;
            content: string;
        };
        contractAddress?: any;
    }>;
    static getFields(fields: FieldsOf<ScopedL2ToL1Message>): readonly [L2ToL1Message, AztecAddress];
    static empty(): ScopedL2ToL1Message;
    equals(other: ScopedL2ToL1Message): boolean;
    toBuffer(): Buffer;
    static fromBuffer(buffer: Buffer | BufferReader): ScopedL2ToL1Message;
    static fromFields(fields: Fr[] | FieldReader): ScopedL2ToL1Message;
    toFields(): Fr[];
    isEmpty(): boolean;
}
//# sourceMappingURL=l2_to_l1_message.d.ts.map