import { INITIAL_L2_BLOCK_NUM, NUMBER_OF_L1_L2_MESSAGES_PER_ROLLUP } from '@aztec/constants';
import { toBigIntBE } from '@aztec/foundation/bigint-buffer';
import { Fr } from '@aztec/foundation/fields';
import { BufferReader, serializeToBuffer } from '@aztec/foundation/serialize';
export class InboxLeaf {
    index;
    leaf;
    constructor(/** Index of the leaf in the whole tree. */ index, /** Leaf in the subtree/message hash. */ leaf){
        this.index = index;
        this.leaf = leaf;
    }
    toBuffer() {
        return serializeToBuffer([
            this.index,
            this.leaf
        ]);
    }
    fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        const index = toBigIntBE(reader.readBytes(32));
        const leaf = reader.readObject(Fr);
        return new InboxLeaf(index, leaf);
    }
    static smallestIndexFromL2Block(l2block) {
        return (l2block - BigInt(INITIAL_L2_BLOCK_NUM)) * BigInt(NUMBER_OF_L1_L2_MESSAGES_PER_ROLLUP);
    }
}
