/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import { BufferReader } from '@aztec/foundation/serialize';
import type { FieldsOf } from '@aztec/foundation/types';
import { ClientIvcProof } from '../proofs/client_ivc_proof.js';
/**
 * Inputs for the tube circuit, which turns a client IVC proof folding stack into an ultrahonk proof.
 * 'usePublicTailVk' signifies if we should prove this with the public or private kernel tail client IVC VKs.
 */
export declare class TubeInputs {
    usePublicTailVk: boolean;
    clientIVCData: ClientIvcProof;
    constructor(usePublicTailVk: boolean, clientIVCData: ClientIvcProof);
    static from(fields: FieldsOf<TubeInputs>): TubeInputs;
    static getFields(fields: FieldsOf<TubeInputs>): readonly [boolean, ClientIvcProof];
    /**
     * Serializes the inputs to a buffer.
     * @returns The inputs serialized to a buffer.
     */
    toBuffer(): Buffer;
    /**
     * Serializes the inputs to a hex string.
     * @returns The instance serialized to a hex string.
     */
    toString(): `0x${string}`;
    /**
     * Deserializes the inputs from a buffer.
     * @param buffer - The buffer to deserialize from.
     * @returns A new TubeInputs instance.
     */
    static fromBuffer(buffer: Buffer | BufferReader): TubeInputs;
    isEmpty(): boolean;
    /**
     * Deserializes the inputs from a hex string.
     * @param str - A hex string to deserialize from.
     * @returns A new TubeInputs instance.
     */
    static fromString(str: string): TubeInputs;
    static empty(): TubeInputs;
    /** Returns a hex representation for JSON serialization. */
    toJSON(): Buffer;
    /** Creates an instance from a hex string. */
    static get schema(): import("zod").ZodType<TubeInputs, any, string>;
}
//# sourceMappingURL=tube_inputs.d.ts.map