import { ARCHIVE_HEIGHT, BLOBS_PER_BLOCK, FIELDS_PER_BLOB, L1_TO_L2_MSG_SUBTREE_SIBLING_PATH_LENGTH, NESTED_RECURSIVE_PROOF_LENGTH } from '@aztec/constants';
import { Fr } from '@aztec/foundation/fields';
import { bufferSchemaFor } from '@aztec/foundation/schemas';
import { BufferReader, serializeToBuffer } from '@aztec/foundation/serialize';
import { bufferToHex, hexToBuffer } from '@aztec/foundation/string';
import { RootParityInput } from '../parity/root_parity_input.js';
import { BlockHeader } from '../tx/block_header.js';
import { PreviousRollupData } from './previous_rollup_data.js';
export class BlockRootRollupData {
    l1ToL2Roots;
    l1ToL2MessageSubtreeSiblingPath;
    previousArchiveSiblingPath;
    newArchiveSiblingPath;
    previousBlockHeader;
    proverId;
    constructor(/**
     * The original and converted roots of the L1 to L2 messages subtrees.
     */ l1ToL2Roots, /**
     * Hint for inserting the new l1 to l2 message subtree.
     */ l1ToL2MessageSubtreeSiblingPath, /**
     * Hint for checking the hash of previous_block_header is the last leaf of the previous archive.
     */ previousArchiveSiblingPath, /**
     * Hint for inserting the new block hash to the last archive.
     */ newArchiveSiblingPath, /**
     * The header of the previous block.
     */ previousBlockHeader, /**
     * TODO(#7346): Temporarily added prover_id while we verify block-root proofs on L1
     */ proverId){
        this.l1ToL2Roots = l1ToL2Roots;
        this.l1ToL2MessageSubtreeSiblingPath = l1ToL2MessageSubtreeSiblingPath;
        this.previousArchiveSiblingPath = previousArchiveSiblingPath;
        this.newArchiveSiblingPath = newArchiveSiblingPath;
        this.previousBlockHeader = previousBlockHeader;
        this.proverId = proverId;
    }
    /**
   * Serializes the inputs to a buffer.
   * @returns - The inputs serialized to a buffer.
   */ toBuffer() {
        return serializeToBuffer(...BlockRootRollupData.getFields(this));
    }
    /**
   * Serializes the inputs to a hex string.
   * @returns The instance serialized to a hex string.
   */ toString() {
        return bufferToHex(this.toBuffer());
    }
    /**
   * Creates a new instance from fields.
   * @param fields - Fields to create the instance from.
   * @returns A new RootRollupInputs instance.
   */ static from(fields) {
        return new BlockRootRollupData(...BlockRootRollupData.getFields(fields));
    }
    /**
   * Extracts fields from an instance.
   * @param fields - Fields to create the instance from.
   * @returns An array of fields.
   */ static getFields(fields) {
        return [
            fields.l1ToL2Roots,
            fields.l1ToL2MessageSubtreeSiblingPath,
            fields.previousArchiveSiblingPath,
            fields.newArchiveSiblingPath,
            fields.previousBlockHeader,
            fields.proverId
        ];
    }
    /**
   * Deserializes the inputs from a buffer.
   * @param buffer - A buffer to deserialize from.
   * @returns A new RootRollupInputs instance.
   */ static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new BlockRootRollupData(RootParityInput.fromBuffer(reader, NESTED_RECURSIVE_PROOF_LENGTH), reader.readArray(L1_TO_L2_MSG_SUBTREE_SIBLING_PATH_LENGTH, Fr), reader.readArray(ARCHIVE_HEIGHT, Fr), reader.readArray(ARCHIVE_HEIGHT, Fr), BlockHeader.fromBuffer(reader), Fr.fromBuffer(reader));
    }
    /**
   * Deserializes the inputs from a hex string.
   * @param str - A hex string to deserialize from.
   * @returns A new RootRollupInputs instance.
   */ static fromString(str) {
        return BlockRootRollupData.fromBuffer(hexToBuffer(str));
    }
    /** Returns a buffer representation for JSON serialization. */ toJSON() {
        return this.toBuffer();
    }
    /** Creates an instance from a hex string. */ static get schema() {
        return bufferSchemaFor(BlockRootRollupData);
    }
}
export class BlockRootRollupBlobData {
    blobFields;
    blobCommitments;
    blobsHash;
    constructor(/**
     * Flat list of all tx effects which will be added to the blob.
     * Below line gives error 'Type instantiation is excessively deep and possibly infinite. ts(2589)'
     * Tuple<Fr, FIELDS_PER_BLOB * BLOBS_PER_BLOCK>
     */ blobFields, /**
     * KZG commitments representing the blob (precomputed in ts, injected to use inside circuit).
     * TODO(Miranda): Rename to kzg_commitment to match BlobPublicInputs?
     */ blobCommitments, /**
     * The hash of eth blob hashes for this block
     * See yarn-project/foundation/src/blob/index.ts or body.ts for calculation
     */ blobsHash){
        this.blobFields = blobFields;
        this.blobCommitments = blobCommitments;
        this.blobsHash = blobsHash;
    }
    /**
   * Serializes the inputs to a buffer.
   * @returns - The inputs serialized to a buffer.
   */ toBuffer() {
        return serializeToBuffer(...BlockRootRollupBlobData.getFields(this));
    }
    /**
   * Serializes the inputs to a hex string.
   * @returns The instance serialized to a hex string.
   */ toString() {
        return bufferToHex(this.toBuffer());
    }
    /**
   * Creates a new instance from fields.
   * @param fields - Fields to create the instance from.
   * @returns A new RootRollupInputs instance.
   */ static from(fields) {
        return new BlockRootRollupBlobData(...BlockRootRollupBlobData.getFields(fields));
    }
    /**
   * Extracts fields from an instance.
   * @param fields - Fields to create the instance from.
   * @returns An array of fields.
   */ static getFields(fields) {
        return [
            fields.blobFields,
            fields.blobCommitments,
            fields.blobsHash
        ];
    }
    /**
   * Deserializes the inputs from a buffer.
   * @param buffer - A buffer to deserialize from.
   * @returns A new RootRollupInputs instance.
   */ static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new BlockRootRollupBlobData(// Below line gives error 'Type instantiation is excessively deep and possibly infinite. ts(2589)'
        // reader.readArray(FIELDS_PER_BLOB, Fr),
        Array.from({
            length: FIELDS_PER_BLOB * BLOBS_PER_BLOCK
        }, ()=>Fr.fromBuffer(reader)), reader.readArray(BLOBS_PER_BLOCK, {
            fromBuffer: ()=>reader.readArray(2, Fr)
        }), Fr.fromBuffer(reader));
    }
    /**
   * Deserializes the inputs from a hex string.
   * @param str - A hex string to deserialize from.
   * @returns A new RootRollupInputs instance.
   */ static fromString(str) {
        return BlockRootRollupBlobData.fromBuffer(hexToBuffer(str));
    }
    /** Returns a buffer representation for JSON serialization. */ toJSON() {
        return this.toBuffer();
    }
    /** Creates an instance from a hex string. */ static get schema() {
        return bufferSchemaFor(BlockRootRollupBlobData);
    }
}
/**
 * Represents inputs of the block root rollup circuit.
 */ export class BlockRootRollupInputs {
    previousRollupData;
    data;
    blobData;
    constructor(/**
     * The previous rollup data from 2 merge or base rollup circuits.
     */ previousRollupData, data, blobData){
        this.previousRollupData = previousRollupData;
        this.data = data;
        this.blobData = blobData;
    }
    /**
   * Serializes the inputs to a buffer.
   * @returns - The inputs serialized to a buffer.
   */ toBuffer() {
        return serializeToBuffer(...BlockRootRollupInputs.getFields(this));
    }
    /**
   * Serializes the inputs to a hex string.
   * @returns The instance serialized to a hex string.
   */ toString() {
        return bufferToHex(this.toBuffer());
    }
    /**
   * Creates a new instance from fields.
   * @param fields - Fields to create the instance from.
   * @returns A new RootRollupInputs instance.
   */ static from(fields) {
        return new BlockRootRollupInputs(...BlockRootRollupInputs.getFields(fields));
    }
    /**
   * Extracts fields from an instance.
   * @param fields - Fields to create the instance from.
   * @returns An array of fields.
   */ static getFields(fields) {
        return [
            fields.previousRollupData,
            fields.data,
            fields.blobData
        ];
    }
    /**
   * Deserializes the inputs from a buffer.
   * @param buffer - A buffer to deserialize from.
   * @returns A new RootRollupInputs instance.
   */ static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new BlockRootRollupInputs([
            reader.readObject(PreviousRollupData),
            reader.readObject(PreviousRollupData)
        ], reader.readObject(BlockRootRollupData), reader.readObject(BlockRootRollupBlobData));
    }
    /**
   * Deserializes the inputs from a hex string.
   * @param str - A hex string to deserialize from.
   * @returns A new RootRollupInputs instance.
   */ static fromString(str) {
        return BlockRootRollupInputs.fromBuffer(hexToBuffer(str));
    }
    /** Returns a buffer representation for JSON serialization. */ toJSON() {
        return this.toBuffer();
    }
    /** Creates an instance from a hex string. */ static get schema() {
        return bufferSchemaFor(BlockRootRollupInputs);
    }
}
export class SingleTxBlockRootRollupInputs {
    previousRollupData;
    data;
    blobData;
    constructor(previousRollupData, data, blobData){
        this.previousRollupData = previousRollupData;
        this.data = data;
        this.blobData = blobData;
    }
    /**
   * Serializes the inputs to a buffer.
   * @returns - The inputs serialized to a buffer.
   */ toBuffer() {
        return serializeToBuffer(...SingleTxBlockRootRollupInputs.getFields(this));
    }
    /**
   * Serializes the inputs to a hex string.
   * @returns The instance serialized to a hex string.
   */ toString() {
        return bufferToHex(this.toBuffer());
    }
    /**
   * Creates a new instance from fields.
   * @param fields - Fields to create the instance from.
   * @returns A new RootRollupInputs instance.
   */ static from(fields) {
        return new SingleTxBlockRootRollupInputs(...SingleTxBlockRootRollupInputs.getFields(fields));
    }
    /**
   * Extracts fields from an instance.
   * @param fields - Fields to create the instance from.
   * @returns An array of fields.
   */ static getFields(fields) {
        return [
            fields.previousRollupData,
            fields.data,
            fields.blobData
        ];
    }
    /**
   * Deserializes the inputs from a buffer.
   * @param buffer - A buffer to deserialize from.
   * @returns A new RootRollupInputs instance.
   */ static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new SingleTxBlockRootRollupInputs([
            reader.readObject(PreviousRollupData)
        ], reader.readObject(BlockRootRollupData), reader.readObject(BlockRootRollupBlobData));
    }
    /**
   * Deserializes the inputs from a hex string.
   * @param str - A hex string to deserialize from.
   * @returns A new RootRollupInputs instance.
   */ static fromString(str) {
        return SingleTxBlockRootRollupInputs.fromBuffer(hexToBuffer(str));
    }
    /** Returns a buffer representation for JSON serialization. */ toJSON() {
        return this.toBuffer();
    }
    /** Creates an instance from a hex string. */ static get schema() {
        return bufferSchemaFor(SingleTxBlockRootRollupInputs);
    }
}
