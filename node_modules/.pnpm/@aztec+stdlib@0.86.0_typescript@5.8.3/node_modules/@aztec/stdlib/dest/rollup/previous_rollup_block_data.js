import { NESTED_RECURSIVE_ROLLUP_HONK_PROOF_LENGTH, VK_TREE_HEIGHT } from '@aztec/constants';
import { BufferReader, serializeToBuffer } from '@aztec/foundation/serialize';
import { MembershipWitness } from '@aztec/foundation/trees';
import { RecursiveProof } from '../proofs/recursive_proof.js';
import { VerificationKeyAsFields } from '../vks/verification_key.js';
import { BlockRootOrBlockMergePublicInputs } from './block_root_or_block_merge_public_inputs.js';
/**
 * Represents the data of a previous block merge or block root rollup circuit.
 */ export class PreviousRollupBlockData {
    blockRootOrBlockMergePublicInputs;
    proof;
    vk;
    vkWitness;
    constructor(/**
     * Public inputs to the block merge or block root rollup circuit.
     */ blockRootOrBlockMergePublicInputs, /**
     * The proof of the block merge or block root rollup circuit.
     */ proof, /**
     * The verification key of the block merge or block root rollup circuit.
     */ vk, /**
     * Sibling path of the rollup circuit's vk in a big tree of rollup circuit vks.
     */ vkWitness){
        this.blockRootOrBlockMergePublicInputs = blockRootOrBlockMergePublicInputs;
        this.proof = proof;
        this.vk = vk;
        this.vkWitness = vkWitness;
    }
    /**
   * Serializes previous rollup data to a buffer.
   * @returns The buffer of the serialized previous rollup data.
   */ toBuffer() {
        return serializeToBuffer(this.blockRootOrBlockMergePublicInputs, this.proof, this.vk, this.vkWitness);
    }
    /**
   * Deserializes previous rollup data from a buffer.
   * @param buffer - A buffer to deserialize from.
   * @returns A new PreviousRollupData instance.
   */ static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new PreviousRollupBlockData(reader.readObject(BlockRootOrBlockMergePublicInputs), RecursiveProof.fromBuffer(reader, NESTED_RECURSIVE_ROLLUP_HONK_PROOF_LENGTH), reader.readObject(VerificationKeyAsFields), MembershipWitness.fromBuffer(reader, VK_TREE_HEIGHT));
    }
}
