import { SpongeBlob } from '@aztec/blob-lib';
import { ARCHIVE_HEIGHT, MAX_CONTRACT_CLASS_LOGS_PER_TX } from '@aztec/constants';
import { makeTuple } from '@aztec/foundation/array';
import { BufferReader, serializeToBuffer } from '@aztec/foundation/serialize';
import { bufferToHex, hexToBuffer } from '@aztec/foundation/string';
import { MembershipWitness } from '@aztec/foundation/trees';
import { PublicDataHint } from '../avm/public_data_hint.js';
import { ContractClassLog } from '../logs/contract_class_log.js';
import { PartialStateReference } from '../tx/partial_state_reference.js';
import { ConstantRollupData } from './constant_rollup_data.js';
import { PrivateBaseStateDiffHints } from './state_diff_hints.js';
export class PrivateBaseRollupHints {
    start;
    startSpongeBlob;
    stateDiffHints;
    feePayerFeeJuiceBalanceReadHint;
    archiveRootMembershipWitness;
    contractClassLogsPreimages;
    constants;
    constructor(/**
     * Partial state reference at the start of the rollup.
     */ start, /**
     * Sponge state to absorb blob inputs at the start of the rollup.
     */ startSpongeBlob, /**
     * Hints used while proving state diff validity.
     */ stateDiffHints, /**
     * Public data read hint for accessing the balance of the fee payer.
     */ feePayerFeeJuiceBalanceReadHint, /**
     * Membership witnesses of blocks referred by each of the 2 kernels.
     */ archiveRootMembershipWitness, /**
     * Preimages to the kernel's contractClassLogsHashes.
     */ contractClassLogsPreimages, /**
     * Data which is not modified by the base rollup circuit.
     */ constants){
        this.start = start;
        this.startSpongeBlob = startSpongeBlob;
        this.stateDiffHints = stateDiffHints;
        this.feePayerFeeJuiceBalanceReadHint = feePayerFeeJuiceBalanceReadHint;
        this.archiveRootMembershipWitness = archiveRootMembershipWitness;
        this.contractClassLogsPreimages = contractClassLogsPreimages;
        this.constants = constants;
    }
    static from(fields) {
        return new PrivateBaseRollupHints(...PrivateBaseRollupHints.getFields(fields));
    }
    static getFields(fields) {
        return [
            fields.start,
            fields.startSpongeBlob,
            fields.stateDiffHints,
            fields.feePayerFeeJuiceBalanceReadHint,
            fields.archiveRootMembershipWitness,
            fields.contractClassLogsPreimages,
            fields.constants
        ];
    }
    /**
   * Serializes the inputs to a buffer.
   * @returns The inputs serialized to a buffer.
   */ toBuffer() {
        return serializeToBuffer(...PrivateBaseRollupHints.getFields(this));
    }
    /**
   * Serializes the inputs to a hex string.
   * @returns The instance serialized to a hex string.
   */ toString() {
        return bufferToHex(this.toBuffer());
    }
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new PrivateBaseRollupHints(reader.readObject(PartialStateReference), reader.readObject(SpongeBlob), reader.readObject(PrivateBaseStateDiffHints), reader.readObject(PublicDataHint), MembershipWitness.fromBuffer(reader, ARCHIVE_HEIGHT), reader.readArray(MAX_CONTRACT_CLASS_LOGS_PER_TX, ContractClassLog), reader.readObject(ConstantRollupData));
    }
    static fromString(str) {
        return PrivateBaseRollupHints.fromBuffer(hexToBuffer(str));
    }
    static empty() {
        return new PrivateBaseRollupHints(PartialStateReference.empty(), SpongeBlob.empty(), PrivateBaseStateDiffHints.empty(), PublicDataHint.empty(), MembershipWitness.empty(ARCHIVE_HEIGHT), makeTuple(MAX_CONTRACT_CLASS_LOGS_PER_TX, ContractClassLog.empty), ConstantRollupData.empty());
    }
}
export class PublicBaseRollupHints {
    startSpongeBlob;
    archiveRootMembershipWitness;
    contractClassLogsPreimages;
    constants;
    constructor(/**
     * Sponge state to absorb blob inputs at the start of the rollup.
     */ startSpongeBlob, /**
     * Membership witnesses of blocks referred by each of the 2 kernels.
     */ archiveRootMembershipWitness, /**
     * Preimages to the kernel's contractClassLogsHashes.
     */ contractClassLogsPreimages, /**
     * Data which is not modified by the base rollup circuit.
     */ constants){
        this.startSpongeBlob = startSpongeBlob;
        this.archiveRootMembershipWitness = archiveRootMembershipWitness;
        this.contractClassLogsPreimages = contractClassLogsPreimages;
        this.constants = constants;
    }
    static from(fields) {
        return new PublicBaseRollupHints(...PublicBaseRollupHints.getFields(fields));
    }
    static getFields(fields) {
        return [
            fields.startSpongeBlob,
            fields.archiveRootMembershipWitness,
            fields.contractClassLogsPreimages,
            fields.constants
        ];
    }
    /**
   * Serializes the inputs to a buffer.
   * @returns The inputs serialized to a buffer.
   */ toBuffer() {
        return serializeToBuffer(...PublicBaseRollupHints.getFields(this));
    }
    /**
   * Serializes the inputs to a hex string.
   * @returns The instance serialized to a hex string.
   */ toString() {
        return bufferToHex(this.toBuffer());
    }
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new PublicBaseRollupHints(reader.readObject(SpongeBlob), MembershipWitness.fromBuffer(reader, ARCHIVE_HEIGHT), reader.readArray(MAX_CONTRACT_CLASS_LOGS_PER_TX, ContractClassLog), reader.readObject(ConstantRollupData));
    }
    static fromString(str) {
        return PublicBaseRollupHints.fromBuffer(hexToBuffer(str));
    }
    static empty() {
        return new PublicBaseRollupHints(SpongeBlob.empty(), MembershipWitness.empty(ARCHIVE_HEIGHT), makeTuple(MAX_CONTRACT_CLASS_LOGS_PER_TX, ContractClassLog.empty), ConstantRollupData.empty());
    }
}
