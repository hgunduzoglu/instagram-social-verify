import { MAX_NULLIFIERS_PER_TX, NOTE_HASH_SUBTREE_SIBLING_PATH_LENGTH, NULLIFIER_SUBTREE_SIBLING_PATH_LENGTH, NULLIFIER_TREE_HEIGHT, PUBLIC_DATA_TREE_HEIGHT } from '@aztec/constants';
import { makeTuple } from '@aztec/foundation/array';
import { Fr } from '@aztec/foundation/fields';
import { BufferReader, serializeToBuffer } from '@aztec/foundation/serialize';
import { MembershipWitness } from '@aztec/foundation/trees';
import { NullifierLeafPreimage, PublicDataTreeLeafPreimage } from '../trees/index.js';
/**
 * Hints used while proving state diff validity for the private base rollup.
 */ export class PrivateBaseStateDiffHints {
    nullifierPredecessorPreimages;
    nullifierPredecessorMembershipWitnesses;
    sortedNullifiers;
    sortedNullifierIndexes;
    noteHashSubtreeSiblingPath;
    nullifierSubtreeSiblingPath;
    feeWriteLowLeafPreimage;
    feeWriteLowLeafMembershipWitness;
    feeWriteSiblingPath;
    constructor(/**
     * The nullifiers which need to be updated to perform the batch insertion of the new nullifiers.
     * See `StandardIndexedTree.batchInsert` function for more details.
     */ nullifierPredecessorPreimages, /**
     * Membership witnesses for the nullifiers which need to be updated to perform the batch insertion of the new
     * nullifiers.
     */ nullifierPredecessorMembershipWitnesses, /**
     * The nullifiers to be inserted in the tree, sorted high to low.
     */ sortedNullifiers, /**
     * The indexes of the sorted nullifiers to the original ones.
     */ sortedNullifierIndexes, /**
     * Sibling path "pointing to" where the new note hash subtree should be inserted into the note hash tree.
     */ noteHashSubtreeSiblingPath, /**
     * Sibling path "pointing to" where the new nullifiers subtree should be inserted into the nullifier tree.
     */ nullifierSubtreeSiblingPath, /**
     * Low leaf for the fee write in the public data tree.
     */ feeWriteLowLeafPreimage, /**
     * Membership witness for the low leaf for the fee write in the public data tree.
     */ feeWriteLowLeafMembershipWitness, /**
     * Sibling path "pointing to" where the fee write should be inserted into the public data tree.
     */ feeWriteSiblingPath){
        this.nullifierPredecessorPreimages = nullifierPredecessorPreimages;
        this.nullifierPredecessorMembershipWitnesses = nullifierPredecessorMembershipWitnesses;
        this.sortedNullifiers = sortedNullifiers;
        this.sortedNullifierIndexes = sortedNullifierIndexes;
        this.noteHashSubtreeSiblingPath = noteHashSubtreeSiblingPath;
        this.nullifierSubtreeSiblingPath = nullifierSubtreeSiblingPath;
        this.feeWriteLowLeafPreimage = feeWriteLowLeafPreimage;
        this.feeWriteLowLeafMembershipWitness = feeWriteLowLeafMembershipWitness;
        this.feeWriteSiblingPath = feeWriteSiblingPath;
    }
    static from(fields) {
        return new PrivateBaseStateDiffHints(...PrivateBaseStateDiffHints.getFields(fields));
    }
    static getFields(fields) {
        return [
            fields.nullifierPredecessorPreimages,
            fields.nullifierPredecessorMembershipWitnesses,
            fields.sortedNullifiers,
            fields.sortedNullifierIndexes,
            fields.noteHashSubtreeSiblingPath,
            fields.nullifierSubtreeSiblingPath,
            fields.feeWriteLowLeafPreimage,
            fields.feeWriteLowLeafMembershipWitness,
            fields.feeWriteSiblingPath
        ];
    }
    /**
   * Serializes the state diff hints to a buffer.
   * @returns A buffer of the serialized state diff hints.
   */ toBuffer() {
        return serializeToBuffer(...PrivateBaseStateDiffHints.getFields(this));
    }
    /**
   * Deserializes the state diff hints from a buffer.
   * @param buffer - A buffer to deserialize from.
   * @returns A new PrivateBaseStateDiffHints instance.
   */ static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new PrivateBaseStateDiffHints(reader.readArray(MAX_NULLIFIERS_PER_TX, NullifierLeafPreimage), reader.readArray(MAX_NULLIFIERS_PER_TX, {
            fromBuffer: (buffer)=>MembershipWitness.fromBuffer(buffer, NULLIFIER_TREE_HEIGHT)
        }), reader.readArray(MAX_NULLIFIERS_PER_TX, Fr), reader.readNumbers(MAX_NULLIFIERS_PER_TX), reader.readArray(NOTE_HASH_SUBTREE_SIBLING_PATH_LENGTH, Fr), reader.readArray(NULLIFIER_SUBTREE_SIBLING_PATH_LENGTH, Fr), reader.readObject(PublicDataTreeLeafPreimage), MembershipWitness.fromBuffer(reader, PUBLIC_DATA_TREE_HEIGHT), reader.readArray(PUBLIC_DATA_TREE_HEIGHT, Fr));
    }
    static empty() {
        return new PrivateBaseStateDiffHints(makeTuple(MAX_NULLIFIERS_PER_TX, NullifierLeafPreimage.empty), makeTuple(MAX_NULLIFIERS_PER_TX, ()=>MembershipWitness.empty(NULLIFIER_TREE_HEIGHT)), makeTuple(MAX_NULLIFIERS_PER_TX, Fr.zero), makeTuple(MAX_NULLIFIERS_PER_TX, ()=>0), makeTuple(NOTE_HASH_SUBTREE_SIBLING_PATH_LENGTH, Fr.zero), makeTuple(NULLIFIER_SUBTREE_SIBLING_PATH_LENGTH, Fr.zero), PublicDataTreeLeafPreimage.empty(), MembershipWitness.empty(PUBLIC_DATA_TREE_HEIGHT), makeTuple(PUBLIC_DATA_TREE_HEIGHT, Fr.zero));
    }
}
