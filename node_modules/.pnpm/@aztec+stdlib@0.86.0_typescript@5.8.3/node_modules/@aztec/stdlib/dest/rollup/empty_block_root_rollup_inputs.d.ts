/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import { BufferReader } from '@aztec/foundation/serialize';
import type { FieldsOf } from '@aztec/foundation/types';
import { BlockRootRollupData } from './block_root_rollup.js';
import { ConstantRollupData } from './constant_rollup_data.js';
/**
 * Represents inputs of the empty block root rollup circuit.
 */
export declare class EmptyBlockRootRollupInputs {
    readonly data: BlockRootRollupData;
    readonly constants: ConstantRollupData;
    readonly isPadding: boolean;
    constructor(data: BlockRootRollupData, constants: ConstantRollupData, isPadding: boolean);
    /**
     * Serializes the inputs to a buffer.
     * @returns - The inputs serialized to a buffer.
     */
    toBuffer(): Buffer;
    /**
     * Serializes the inputs to a hex string.
     * @returns The instance serialized to a hex string.
     */
    toString(): `0x${string}`;
    /**
     * Creates a new instance from fields.
     * @param fields - Fields to create the instance from.
     * @returns A new instance.
     */
    static from(fields: FieldsOf<EmptyBlockRootRollupInputs>): EmptyBlockRootRollupInputs;
    /**
     * Extracts fields from an instance.
     * @param fields - Fields to create the instance from.
     * @returns An array of fields.
     */
    static getFields(fields: FieldsOf<EmptyBlockRootRollupInputs>): readonly [BlockRootRollupData, ConstantRollupData, boolean];
    /**
     * Deserializes the inputs from a buffer.
     * @param buffer - A buffer to deserialize from.
     * @returns A new RootRollupInputs instance.
     */
    static fromBuffer(buffer: Buffer | BufferReader): EmptyBlockRootRollupInputs;
    /**
     * Deserializes the inputs from a hex string.
     * @param str - A hex string to deserialize from.
     * @returns A new RootRollupInputs instance.
     */
    static fromString(str: string): EmptyBlockRootRollupInputs;
    /** Returns a buffer representation for JSON serialization. */
    toJSON(): Buffer;
    /** Creates an instance from a buffer string. */
    static get schema(): import("zod").ZodType<EmptyBlockRootRollupInputs, any, string>;
}
//# sourceMappingURL=empty_block_root_rollup_inputs.d.ts.map