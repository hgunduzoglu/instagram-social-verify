/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import { BlockBlobPublicInputs } from '@aztec/blob-lib';
import { AZTEC_MAX_EPOCH_DURATION } from '@aztec/constants';
import { Fr } from '@aztec/foundation/fields';
import { BufferReader, type Tuple } from '@aztec/foundation/serialize';
import type { FieldsOf } from '@aztec/foundation/types';
import { AppendOnlyTreeSnapshot } from '../trees/append_only_tree_snapshot.js';
import { FeeRecipient } from './block_root_or_block_merge_public_inputs.js';
import { PreviousRollupBlockData } from './previous_rollup_block_data.js';
/**
 * Represents inputs of the root rollup circuit.
 */
export declare class RootRollupInputs {
    /**
     * The previous rollup data.
     * Note: Root rollup circuit is the latest circuit the chain of circuits and the previous rollup data is the data
     * from 2 block merge circuits.
     */
    previousRollupData: [PreviousRollupBlockData, PreviousRollupBlockData];
    /** Identifier of the prover for this root rollup. */
    proverId: Fr;
    constructor(
    /**
     * The previous rollup data.
     * Note: Root rollup circuit is the latest circuit the chain of circuits and the previous rollup data is the data
     * from 2 block merge circuits.
     */
    previousRollupData: [PreviousRollupBlockData, PreviousRollupBlockData], 
    /** Identifier of the prover for this root rollup. */
    proverId: Fr);
    /**
     * Serializes the inputs to a buffer.
     * @returns - The inputs serialized to a buffer.
     */
    toBuffer(): Buffer;
    /**
     * Serializes the inputs to a hex string.
     * @returns The instance serialized to a hex string.
     */
    toString(): `0x${string}`;
    /**
     * Creates a new instance from fields.
     * @param fields - Fields to create the instance from.
     * @returns A new RootRollupInputs instance.
     */
    static from(fields: FieldsOf<RootRollupInputs>): RootRollupInputs;
    /**
     * Extracts fields from an instance.
     * @param fields - Fields to create the instance from.
     * @returns An array of fields.
     */
    static getFields(fields: FieldsOf<RootRollupInputs>): readonly [[PreviousRollupBlockData, PreviousRollupBlockData], Fr];
    /**
     * Deserializes the inputs from a buffer.
     * @param buffer - A buffer to deserialize from.
     * @returns A new RootRollupInputs instance.
     */
    static fromBuffer(buffer: Buffer | BufferReader): RootRollupInputs;
    /**
     * Deserializes the inputs from a hex string.
     * @param str - A hex string to deserialize from.
     * @returns A new RootRollupInputs instance.
     */
    static fromString(str: string): RootRollupInputs;
    /** Returns a representation for JSON serialization. */
    toJSON(): Buffer;
    /** Creates an instance from a string. */
    static get schema(): import("zod").ZodType<RootRollupInputs, any, string>;
}
/**
 * Represents public inputs of the root rollup circuit.
 *
 * NOTE: in practice, we'll hash all of this up into a single public input, for cheap on-chain verification.
 */
export declare class RootRollupPublicInputs {
    /** Snapshot of archive tree before/after this rollup been processed */
    previousArchive: AppendOnlyTreeSnapshot;
    endArchive: AppendOnlyTreeSnapshot;
    endTimestamp: Fr;
    endBlockNumber: Fr;
    outHash: Fr;
    fees: Tuple<FeeRecipient, typeof AZTEC_MAX_EPOCH_DURATION>;
    vkTreeRoot: Fr;
    protocolContractTreeRoot: Fr;
    proverId: Fr;
    blobPublicInputs: Tuple<BlockBlobPublicInputs, typeof AZTEC_MAX_EPOCH_DURATION>;
    constructor(
    /** Snapshot of archive tree before/after this rollup been processed */
    previousArchive: AppendOnlyTreeSnapshot, endArchive: AppendOnlyTreeSnapshot, endTimestamp: Fr, endBlockNumber: Fr, outHash: Fr, fees: Tuple<FeeRecipient, typeof AZTEC_MAX_EPOCH_DURATION>, vkTreeRoot: Fr, protocolContractTreeRoot: Fr, proverId: Fr, blobPublicInputs: Tuple<BlockBlobPublicInputs, typeof AZTEC_MAX_EPOCH_DURATION>);
    static getFields(fields: FieldsOf<RootRollupPublicInputs>): readonly [AppendOnlyTreeSnapshot, AppendOnlyTreeSnapshot, Fr, Fr, Fr, [FeeRecipient, FeeRecipient, FeeRecipient, FeeRecipient, FeeRecipient, FeeRecipient, FeeRecipient, FeeRecipient, FeeRecipient, FeeRecipient, FeeRecipient, FeeRecipient, FeeRecipient, FeeRecipient, FeeRecipient, FeeRecipient, FeeRecipient, FeeRecipient, FeeRecipient, FeeRecipient, FeeRecipient, FeeRecipient, FeeRecipient, FeeRecipient, FeeRecipient, FeeRecipient, FeeRecipient, FeeRecipient, FeeRecipient, FeeRecipient, FeeRecipient, FeeRecipient, FeeRecipient, FeeRecipient, FeeRecipient, FeeRecipient, FeeRecipient, FeeRecipient, FeeRecipient, FeeRecipient, FeeRecipient, FeeRecipient, FeeRecipient, FeeRecipient, FeeRecipient, FeeRecipient, FeeRecipient, FeeRecipient], Fr, Fr, Fr, [BlockBlobPublicInputs, BlockBlobPublicInputs, BlockBlobPublicInputs, BlockBlobPublicInputs, BlockBlobPublicInputs, BlockBlobPublicInputs, BlockBlobPublicInputs, BlockBlobPublicInputs, BlockBlobPublicInputs, BlockBlobPublicInputs, BlockBlobPublicInputs, BlockBlobPublicInputs, BlockBlobPublicInputs, BlockBlobPublicInputs, BlockBlobPublicInputs, BlockBlobPublicInputs, BlockBlobPublicInputs, BlockBlobPublicInputs, BlockBlobPublicInputs, BlockBlobPublicInputs, BlockBlobPublicInputs, BlockBlobPublicInputs, BlockBlobPublicInputs, BlockBlobPublicInputs, BlockBlobPublicInputs, BlockBlobPublicInputs, BlockBlobPublicInputs, BlockBlobPublicInputs, BlockBlobPublicInputs, BlockBlobPublicInputs, BlockBlobPublicInputs, BlockBlobPublicInputs, BlockBlobPublicInputs, BlockBlobPublicInputs, BlockBlobPublicInputs, BlockBlobPublicInputs, BlockBlobPublicInputs, BlockBlobPublicInputs, BlockBlobPublicInputs, BlockBlobPublicInputs, BlockBlobPublicInputs, BlockBlobPublicInputs, BlockBlobPublicInputs, BlockBlobPublicInputs, BlockBlobPublicInputs, BlockBlobPublicInputs, BlockBlobPublicInputs, BlockBlobPublicInputs]];
    toBuffer(): Buffer;
    toFields(): Fr[];
    static from(fields: FieldsOf<RootRollupPublicInputs>): RootRollupPublicInputs;
    /**
     * Deserializes a buffer into a `RootRollupPublicInputs` object.
     * @param buffer - The buffer to deserialize.
     * @returns The deserialized `RootRollupPublicInputs` object.
     */
    static fromBuffer(buffer: Buffer | BufferReader): RootRollupPublicInputs;
    toString(): `0x${string}`;
    static fromString(str: string): RootRollupPublicInputs;
    /** Returns a representation for JSON serialization. */
    toJSON(): Buffer;
    /** Creates an instance from a string. */
    static get schema(): import("zod").ZodType<RootRollupPublicInputs, any, string>;
    /** Creates a random instance. */
    static random(): RootRollupPublicInputs;
}
//# sourceMappingURL=root_rollup.d.ts.map