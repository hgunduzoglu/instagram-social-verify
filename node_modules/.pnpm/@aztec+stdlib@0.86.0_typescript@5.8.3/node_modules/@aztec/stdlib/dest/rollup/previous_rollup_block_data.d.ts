/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import { NESTED_RECURSIVE_ROLLUP_HONK_PROOF_LENGTH, VK_TREE_HEIGHT } from '@aztec/constants';
import { BufferReader } from '@aztec/foundation/serialize';
import { MembershipWitness } from '@aztec/foundation/trees';
import { RecursiveProof } from '../proofs/recursive_proof.js';
import { VerificationKeyAsFields } from '../vks/verification_key.js';
import { BlockRootOrBlockMergePublicInputs } from './block_root_or_block_merge_public_inputs.js';
/**
 * Represents the data of a previous block merge or block root rollup circuit.
 */
export declare class PreviousRollupBlockData {
    /**
     * Public inputs to the block merge or block root rollup circuit.
     */
    blockRootOrBlockMergePublicInputs: BlockRootOrBlockMergePublicInputs;
    /**
     * The proof of the block merge or block root rollup circuit.
     */
    proof: RecursiveProof<typeof NESTED_RECURSIVE_ROLLUP_HONK_PROOF_LENGTH>;
    /**
     * The verification key of the block merge or block root rollup circuit.
     */
    vk: VerificationKeyAsFields;
    /**
     * Sibling path of the rollup circuit's vk in a big tree of rollup circuit vks.
     */
    vkWitness: MembershipWitness<typeof VK_TREE_HEIGHT>;
    constructor(
    /**
     * Public inputs to the block merge or block root rollup circuit.
     */
    blockRootOrBlockMergePublicInputs: BlockRootOrBlockMergePublicInputs, 
    /**
     * The proof of the block merge or block root rollup circuit.
     */
    proof: RecursiveProof<typeof NESTED_RECURSIVE_ROLLUP_HONK_PROOF_LENGTH>, 
    /**
     * The verification key of the block merge or block root rollup circuit.
     */
    vk: VerificationKeyAsFields, 
    /**
     * Sibling path of the rollup circuit's vk in a big tree of rollup circuit vks.
     */
    vkWitness: MembershipWitness<typeof VK_TREE_HEIGHT>);
    /**
     * Serializes previous rollup data to a buffer.
     * @returns The buffer of the serialized previous rollup data.
     */
    toBuffer(): Buffer;
    /**
     * Deserializes previous rollup data from a buffer.
     * @param buffer - A buffer to deserialize from.
     * @returns A new PreviousRollupData instance.
     */
    static fromBuffer(buffer: Buffer | BufferReader): PreviousRollupBlockData;
}
//# sourceMappingURL=previous_rollup_block_data.d.ts.map