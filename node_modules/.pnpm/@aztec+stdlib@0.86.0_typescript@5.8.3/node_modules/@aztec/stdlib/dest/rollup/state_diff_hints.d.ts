/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import { MAX_NULLIFIERS_PER_TX, NOTE_HASH_SUBTREE_SIBLING_PATH_LENGTH, NULLIFIER_SUBTREE_SIBLING_PATH_LENGTH, NULLIFIER_TREE_HEIGHT, PUBLIC_DATA_TREE_HEIGHT } from '@aztec/constants';
import { Fr } from '@aztec/foundation/fields';
import { BufferReader, type Tuple } from '@aztec/foundation/serialize';
import { MembershipWitness } from '@aztec/foundation/trees';
import type { FieldsOf } from '@aztec/foundation/types';
import { NullifierLeafPreimage, PublicDataTreeLeafPreimage } from '../trees/index.js';
/**
 * Hints used while proving state diff validity for the private base rollup.
 */
export declare class PrivateBaseStateDiffHints {
    /**
     * The nullifiers which need to be updated to perform the batch insertion of the new nullifiers.
     * See `StandardIndexedTree.batchInsert` function for more details.
     */
    nullifierPredecessorPreimages: Tuple<NullifierLeafPreimage, typeof MAX_NULLIFIERS_PER_TX>;
    /**
     * Membership witnesses for the nullifiers which need to be updated to perform the batch insertion of the new
     * nullifiers.
     */
    nullifierPredecessorMembershipWitnesses: Tuple<MembershipWitness<typeof NULLIFIER_TREE_HEIGHT>, typeof MAX_NULLIFIERS_PER_TX>;
    /**
     * The nullifiers to be inserted in the tree, sorted high to low.
     */
    sortedNullifiers: Tuple<Fr, typeof MAX_NULLIFIERS_PER_TX>;
    /**
     * The indexes of the sorted nullifiers to the original ones.
     */
    sortedNullifierIndexes: Tuple<number, typeof MAX_NULLIFIERS_PER_TX>;
    /**
     * Sibling path "pointing to" where the new note hash subtree should be inserted into the note hash tree.
     */
    noteHashSubtreeSiblingPath: Tuple<Fr, typeof NOTE_HASH_SUBTREE_SIBLING_PATH_LENGTH>;
    /**
     * Sibling path "pointing to" where the new nullifiers subtree should be inserted into the nullifier tree.
     */
    nullifierSubtreeSiblingPath: Tuple<Fr, typeof NULLIFIER_SUBTREE_SIBLING_PATH_LENGTH>;
    /**
     * Low leaf for the fee write in the public data tree.
     */
    feeWriteLowLeafPreimage: PublicDataTreeLeafPreimage;
    /**
     * Membership witness for the low leaf for the fee write in the public data tree.
     */
    feeWriteLowLeafMembershipWitness: MembershipWitness<typeof PUBLIC_DATA_TREE_HEIGHT>;
    /**
     * Sibling path "pointing to" where the fee write should be inserted into the public data tree.
     */
    feeWriteSiblingPath: Tuple<Fr, typeof PUBLIC_DATA_TREE_HEIGHT>;
    constructor(
    /**
     * The nullifiers which need to be updated to perform the batch insertion of the new nullifiers.
     * See `StandardIndexedTree.batchInsert` function for more details.
     */
    nullifierPredecessorPreimages: Tuple<NullifierLeafPreimage, typeof MAX_NULLIFIERS_PER_TX>, 
    /**
     * Membership witnesses for the nullifiers which need to be updated to perform the batch insertion of the new
     * nullifiers.
     */
    nullifierPredecessorMembershipWitnesses: Tuple<MembershipWitness<typeof NULLIFIER_TREE_HEIGHT>, typeof MAX_NULLIFIERS_PER_TX>, 
    /**
     * The nullifiers to be inserted in the tree, sorted high to low.
     */
    sortedNullifiers: Tuple<Fr, typeof MAX_NULLIFIERS_PER_TX>, 
    /**
     * The indexes of the sorted nullifiers to the original ones.
     */
    sortedNullifierIndexes: Tuple<number, typeof MAX_NULLIFIERS_PER_TX>, 
    /**
     * Sibling path "pointing to" where the new note hash subtree should be inserted into the note hash tree.
     */
    noteHashSubtreeSiblingPath: Tuple<Fr, typeof NOTE_HASH_SUBTREE_SIBLING_PATH_LENGTH>, 
    /**
     * Sibling path "pointing to" where the new nullifiers subtree should be inserted into the nullifier tree.
     */
    nullifierSubtreeSiblingPath: Tuple<Fr, typeof NULLIFIER_SUBTREE_SIBLING_PATH_LENGTH>, 
    /**
     * Low leaf for the fee write in the public data tree.
     */
    feeWriteLowLeafPreimage: PublicDataTreeLeafPreimage, 
    /**
     * Membership witness for the low leaf for the fee write in the public data tree.
     */
    feeWriteLowLeafMembershipWitness: MembershipWitness<typeof PUBLIC_DATA_TREE_HEIGHT>, 
    /**
     * Sibling path "pointing to" where the fee write should be inserted into the public data tree.
     */
    feeWriteSiblingPath: Tuple<Fr, typeof PUBLIC_DATA_TREE_HEIGHT>);
    static from(fields: FieldsOf<PrivateBaseStateDiffHints>): PrivateBaseStateDiffHints;
    static getFields(fields: FieldsOf<PrivateBaseStateDiffHints>): readonly [[NullifierLeafPreimage, NullifierLeafPreimage, NullifierLeafPreimage, NullifierLeafPreimage, NullifierLeafPreimage, NullifierLeafPreimage, NullifierLeafPreimage, NullifierLeafPreimage, NullifierLeafPreimage, NullifierLeafPreimage, NullifierLeafPreimage, NullifierLeafPreimage, NullifierLeafPreimage, NullifierLeafPreimage, NullifierLeafPreimage, NullifierLeafPreimage, NullifierLeafPreimage, NullifierLeafPreimage, NullifierLeafPreimage, NullifierLeafPreimage, NullifierLeafPreimage, NullifierLeafPreimage, NullifierLeafPreimage, NullifierLeafPreimage, NullifierLeafPreimage, NullifierLeafPreimage, NullifierLeafPreimage, NullifierLeafPreimage, NullifierLeafPreimage, NullifierLeafPreimage, NullifierLeafPreimage, NullifierLeafPreimage, NullifierLeafPreimage, NullifierLeafPreimage, NullifierLeafPreimage, NullifierLeafPreimage, NullifierLeafPreimage, NullifierLeafPreimage, NullifierLeafPreimage, NullifierLeafPreimage, NullifierLeafPreimage, NullifierLeafPreimage, NullifierLeafPreimage, NullifierLeafPreimage, NullifierLeafPreimage, NullifierLeafPreimage, NullifierLeafPreimage, NullifierLeafPreimage, NullifierLeafPreimage, NullifierLeafPreimage, NullifierLeafPreimage, NullifierLeafPreimage, NullifierLeafPreimage, NullifierLeafPreimage, NullifierLeafPreimage, NullifierLeafPreimage, NullifierLeafPreimage, NullifierLeafPreimage, NullifierLeafPreimage, NullifierLeafPreimage, NullifierLeafPreimage, NullifierLeafPreimage, NullifierLeafPreimage, NullifierLeafPreimage], [MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>], [Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr], [number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number], [Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr], [Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr], PublicDataTreeLeafPreimage, MembershipWitness<40>, [Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr]];
    /**
     * Serializes the state diff hints to a buffer.
     * @returns A buffer of the serialized state diff hints.
     */
    toBuffer(): Buffer;
    /**
     * Deserializes the state diff hints from a buffer.
     * @param buffer - A buffer to deserialize from.
     * @returns A new PrivateBaseStateDiffHints instance.
     */
    static fromBuffer(buffer: Buffer | BufferReader): PrivateBaseStateDiffHints;
    static empty(): PrivateBaseStateDiffHints;
}
//# sourceMappingURL=state_diff_hints.d.ts.map