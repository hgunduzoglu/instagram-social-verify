/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import { SpongeBlob } from '@aztec/blob-lib';
import { ARCHIVE_HEIGHT, MAX_CONTRACT_CLASS_LOGS_PER_TX } from '@aztec/constants';
import { BufferReader, type Tuple } from '@aztec/foundation/serialize';
import { MembershipWitness } from '@aztec/foundation/trees';
import type { FieldsOf } from '@aztec/foundation/types';
import { PublicDataHint } from '../avm/public_data_hint.js';
import { ContractClassLog } from '../logs/contract_class_log.js';
import { PartialStateReference } from '../tx/partial_state_reference.js';
import { ConstantRollupData } from './constant_rollup_data.js';
import { PrivateBaseStateDiffHints } from './state_diff_hints.js';
export type BaseRollupHints = PrivateBaseRollupHints | PublicBaseRollupHints;
export declare class PrivateBaseRollupHints {
    /**
     * Partial state reference at the start of the rollup.
     */
    start: PartialStateReference;
    /**
     * Sponge state to absorb blob inputs at the start of the rollup.
     */
    startSpongeBlob: SpongeBlob;
    /**
     * Hints used while proving state diff validity.
     */
    stateDiffHints: PrivateBaseStateDiffHints;
    /**
     * Public data read hint for accessing the balance of the fee payer.
     */
    feePayerFeeJuiceBalanceReadHint: PublicDataHint;
    /**
     * Membership witnesses of blocks referred by each of the 2 kernels.
     */
    archiveRootMembershipWitness: MembershipWitness<typeof ARCHIVE_HEIGHT>;
    /**
     * Preimages to the kernel's contractClassLogsHashes.
     */
    contractClassLogsPreimages: Tuple<ContractClassLog, typeof MAX_CONTRACT_CLASS_LOGS_PER_TX>;
    /**
     * Data which is not modified by the base rollup circuit.
     */
    constants: ConstantRollupData;
    constructor(
    /**
     * Partial state reference at the start of the rollup.
     */
    start: PartialStateReference, 
    /**
     * Sponge state to absorb blob inputs at the start of the rollup.
     */
    startSpongeBlob: SpongeBlob, 
    /**
     * Hints used while proving state diff validity.
     */
    stateDiffHints: PrivateBaseStateDiffHints, 
    /**
     * Public data read hint for accessing the balance of the fee payer.
     */
    feePayerFeeJuiceBalanceReadHint: PublicDataHint, 
    /**
     * Membership witnesses of blocks referred by each of the 2 kernels.
     */
    archiveRootMembershipWitness: MembershipWitness<typeof ARCHIVE_HEIGHT>, 
    /**
     * Preimages to the kernel's contractClassLogsHashes.
     */
    contractClassLogsPreimages: Tuple<ContractClassLog, typeof MAX_CONTRACT_CLASS_LOGS_PER_TX>, 
    /**
     * Data which is not modified by the base rollup circuit.
     */
    constants: ConstantRollupData);
    static from(fields: FieldsOf<PrivateBaseRollupHints>): PrivateBaseRollupHints;
    static getFields(fields: FieldsOf<PrivateBaseRollupHints>): readonly [PartialStateReference, SpongeBlob, PrivateBaseStateDiffHints, PublicDataHint, MembershipWitness<29>, [ContractClassLog], ConstantRollupData];
    /**
     * Serializes the inputs to a buffer.
     * @returns The inputs serialized to a buffer.
     */
    toBuffer(): Buffer;
    /**
     * Serializes the inputs to a hex string.
     * @returns The instance serialized to a hex string.
     */
    toString(): `0x${string}`;
    static fromBuffer(buffer: Buffer | BufferReader): PrivateBaseRollupHints;
    static fromString(str: string): PrivateBaseRollupHints;
    static empty(): PrivateBaseRollupHints;
}
export declare class PublicBaseRollupHints {
    /**
     * Sponge state to absorb blob inputs at the start of the rollup.
     */
    startSpongeBlob: SpongeBlob;
    /**
     * Membership witnesses of blocks referred by each of the 2 kernels.
     */
    archiveRootMembershipWitness: MembershipWitness<typeof ARCHIVE_HEIGHT>;
    /**
     * Preimages to the kernel's contractClassLogsHashes.
     */
    contractClassLogsPreimages: Tuple<ContractClassLog, typeof MAX_CONTRACT_CLASS_LOGS_PER_TX>;
    /**
     * Data which is not modified by the base rollup circuit.
     */
    constants: ConstantRollupData;
    constructor(
    /**
     * Sponge state to absorb blob inputs at the start of the rollup.
     */
    startSpongeBlob: SpongeBlob, 
    /**
     * Membership witnesses of blocks referred by each of the 2 kernels.
     */
    archiveRootMembershipWitness: MembershipWitness<typeof ARCHIVE_HEIGHT>, 
    /**
     * Preimages to the kernel's contractClassLogsHashes.
     */
    contractClassLogsPreimages: Tuple<ContractClassLog, typeof MAX_CONTRACT_CLASS_LOGS_PER_TX>, 
    /**
     * Data which is not modified by the base rollup circuit.
     */
    constants: ConstantRollupData);
    static from(fields: FieldsOf<PublicBaseRollupHints>): PublicBaseRollupHints;
    static getFields(fields: FieldsOf<PublicBaseRollupHints>): readonly [SpongeBlob, MembershipWitness<29>, [ContractClassLog], ConstantRollupData];
    /**
     * Serializes the inputs to a buffer.
     * @returns The inputs serialized to a buffer.
     */
    toBuffer(): Buffer;
    /**
     * Serializes the inputs to a hex string.
     * @returns The instance serialized to a hex string.
     */
    toString(): `0x${string}`;
    static fromBuffer(buffer: Buffer | BufferReader): PublicBaseRollupHints;
    static fromString(str: string): PublicBaseRollupHints;
    static empty(): PublicBaseRollupHints;
}
//# sourceMappingURL=base_rollup_hints.d.ts.map