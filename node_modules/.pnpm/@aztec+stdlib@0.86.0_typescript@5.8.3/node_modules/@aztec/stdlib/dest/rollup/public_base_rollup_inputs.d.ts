/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import { BufferReader } from '@aztec/foundation/serialize';
import type { FieldsOf } from '@aztec/foundation/types';
import { AvmProofData } from './avm_proof_data.js';
import { PublicBaseRollupHints } from './base_rollup_hints.js';
import { PublicTubeData } from './public_tube_data.js';
export declare class PublicBaseRollupInputs {
    tubeData: PublicTubeData;
    avmProofData: AvmProofData;
    hints: PublicBaseRollupHints;
    constructor(tubeData: PublicTubeData, avmProofData: AvmProofData, hints: PublicBaseRollupHints);
    static from(fields: FieldsOf<PublicBaseRollupInputs>): PublicBaseRollupInputs;
    static getFields(fields: FieldsOf<PublicBaseRollupInputs>): readonly [PublicTubeData, AvmProofData, PublicBaseRollupHints];
    static fromBuffer(buffer: Buffer | BufferReader): PublicBaseRollupInputs;
    toBuffer(): Buffer;
    static fromString(str: string): PublicBaseRollupInputs;
    toString(): `0x${string}`;
    static empty(): PublicBaseRollupInputs;
    /** Returns a representation for JSON serialization. */
    toJSON(): Buffer;
    /** Creates an instance from a string. */
    static get schema(): import("zod").ZodType<PublicBaseRollupInputs, any, string>;
}
//# sourceMappingURL=public_base_rollup_inputs.d.ts.map