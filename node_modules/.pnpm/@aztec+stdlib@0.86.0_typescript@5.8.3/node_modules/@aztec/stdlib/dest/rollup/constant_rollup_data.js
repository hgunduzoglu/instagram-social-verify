import { Fr } from '@aztec/foundation/fields';
import { BufferReader, serializeToBuffer } from '@aztec/foundation/serialize';
import { AppendOnlyTreeSnapshot } from '../trees/append_only_tree_snapshot.js';
import { GlobalVariables } from '../tx/global_variables.js';
/**
 * Data which is forwarded through the base rollup circuits unchanged.
 */ export class ConstantRollupData {
    lastArchive;
    vkTreeRoot;
    protocolContractTreeRoot;
    globalVariables;
    constructor(/** Archive tree snapshot at the very beginning of the entire rollup. */ lastArchive, /**
     * Root of the verification key tree.
     */ vkTreeRoot, /**
     * Root of the protocol contract tree.
     */ protocolContractTreeRoot, /**
     * Global variables for the block
     */ globalVariables){
        this.lastArchive = lastArchive;
        this.vkTreeRoot = vkTreeRoot;
        this.protocolContractTreeRoot = protocolContractTreeRoot;
        this.globalVariables = globalVariables;
    }
    static from(fields) {
        return new ConstantRollupData(...ConstantRollupData.getFields(fields));
    }
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new ConstantRollupData(reader.readObject(AppendOnlyTreeSnapshot), Fr.fromBuffer(reader), Fr.fromBuffer(reader), reader.readObject(GlobalVariables));
    }
    static getFields(fields) {
        return [
            fields.lastArchive,
            fields.vkTreeRoot,
            fields.protocolContractTreeRoot,
            fields.globalVariables
        ];
    }
    static empty() {
        return new ConstantRollupData(AppendOnlyTreeSnapshot.zero(), Fr.ZERO, Fr.ZERO, GlobalVariables.empty());
    }
    toBuffer() {
        return serializeToBuffer(...ConstantRollupData.getFields(this));
    }
}
