import { access, mkdir, readFile, writeFile } from 'fs/promises';
import { dirname, resolve } from 'path';
export class LocalFileStore {
    basePath;
    constructor(basePath){
        this.basePath = basePath;
    }
    async save(path, data) {
        const fullPath = this.getFullPath(path);
        await mkdir(dirname(fullPath), {
            recursive: true
        });
        await writeFile(fullPath, data);
        return `file://${fullPath}`;
    }
    async upload(destPath, srcPath, _opts) {
        const data = await readFile(srcPath);
        return this.save(destPath, data);
    }
    read(pathOrUrlStr) {
        const fullPath = this.getFullPath(pathOrUrlStr);
        return readFile(fullPath);
    }
    async download(pathOrUrlStr, destPath) {
        const data = await this.read(pathOrUrlStr);
        const fullPath = this.getFullPath(destPath);
        await writeFile(fullPath, data);
    }
    exists(pathOrUrlStr) {
        const fullPath = this.getFullPath(pathOrUrlStr);
        return access(fullPath).then(()=>true).catch(()=>false);
    }
    getFullPath(pathOrUrl) {
        if (URL.canParse(pathOrUrl)) {
            return new URL(pathOrUrl).pathname;
        } else {
            return resolve(this.basePath, pathOrUrl);
        }
    }
}
