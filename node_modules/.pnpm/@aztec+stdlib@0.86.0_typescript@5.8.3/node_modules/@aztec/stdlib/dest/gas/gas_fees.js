import { Fr } from '@aztec/foundation/fields';
import { schemas } from '@aztec/foundation/schemas';
import { BufferReader, FieldReader, serializeToBuffer, serializeToFields } from '@aztec/foundation/serialize';
import { inspect } from 'util';
import { z } from 'zod';
/** Gas prices for each dimension. */ export class GasFees {
    feePerDaGas;
    feePerL2Gas;
    constructor(feePerDaGas, feePerL2Gas){
        this.feePerDaGas = new Fr(feePerDaGas);
        this.feePerL2Gas = new Fr(feePerL2Gas);
    }
    static get schema() {
        return z.object({
            feePerDaGas: schemas.Fr,
            feePerL2Gas: schemas.Fr
        }).transform(GasFees.from);
    }
    clone() {
        return new GasFees(this.feePerDaGas, this.feePerL2Gas);
    }
    equals(other) {
        return this.feePerDaGas.equals(other.feePerDaGas) && this.feePerL2Gas.equals(other.feePerL2Gas);
    }
    get(dimension) {
        switch(dimension){
            case 'da':
                return this.feePerDaGas;
            case 'l2':
                return this.feePerL2Gas;
        }
    }
    mul(scalar) {
        if (scalar === 1 || scalar === 1n) {
            return this.clone();
        } else if (typeof scalar === 'bigint') {
            return new GasFees(new Fr(this.feePerDaGas.toBigInt() * scalar), new Fr(this.feePerL2Gas.toBigInt() * scalar));
        } else {
            return new GasFees(new Fr(this.feePerDaGas.toNumberUnsafe() * scalar), new Fr(this.feePerL2Gas.toNumberUnsafe() * scalar));
        }
    }
    static from(fields) {
        return new GasFees(fields.feePerDaGas, fields.feePerL2Gas);
    }
    static random() {
        return new GasFees(Fr.random(), Fr.random());
    }
    static empty() {
        return new GasFees(Fr.ZERO, Fr.ZERO);
    }
    isEmpty() {
        return this.feePerDaGas.isZero() && this.feePerL2Gas.isZero();
    }
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new GasFees(reader.readObject(Fr), reader.readObject(Fr));
    }
    toBuffer() {
        return serializeToBuffer(this.feePerDaGas, this.feePerL2Gas);
    }
    static fromFields(fields) {
        const reader = FieldReader.asReader(fields);
        return new GasFees(reader.readField(), reader.readField());
    }
    toFields() {
        return serializeToFields(this.feePerDaGas, this.feePerL2Gas);
    }
    toInspect() {
        return {
            feePerDaGas: this.feePerDaGas.toNumberUnsafe(),
            feePerL2Gas: this.feePerL2Gas.toNumberUnsafe()
        };
    }
    [inspect.custom]() {
        return `GasFees { feePerDaGas=${this.feePerDaGas.toBigInt()} feePerL2Gas=${this.feePerL2Gas.toBigInt()} }`;
    }
}
