/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import { Fr } from '@aztec/foundation/fields';
import { BufferReader, FieldReader } from '@aztec/foundation/serialize';
import type { FieldsOf } from '@aztec/foundation/types';
import { inspect } from 'util';
import { z } from 'zod';
import type { UInt32 } from '../types/shared.js';
import type { GasFees } from './gas_fees.js';
export declare const GasDimensions: readonly ["da", "l2"];
export type GasDimensions = (typeof GasDimensions)[number];
/** Gas amounts in each dimension. */
export declare class Gas {
    readonly daGas: UInt32;
    readonly l2Gas: UInt32;
    constructor(daGas: UInt32, l2Gas: UInt32);
    static get schema(): z.ZodEffects<z.ZodObject<{
        daGas: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
        l2Gas: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        daGas: number;
        l2Gas: number;
    }, {
        daGas: string | number | bigint;
        l2Gas: string | number | bigint;
    }>, Gas, {
        daGas: string | number | bigint;
        l2Gas: string | number | bigint;
    }>;
    clone(): Gas;
    get(dimension: GasDimensions): number;
    equals(other: Gas): boolean;
    static from(fields: Partial<FieldsOf<Gas>>): Gas;
    static empty(): Gas;
    static random(): Gas;
    isEmpty(): boolean;
    static fromBuffer(buffer: Buffer | BufferReader): Gas;
    toBuffer(): Buffer;
    [inspect.custom](): string;
    add(other: Gas): Gas;
    sub(other: Gas): Gas;
    mul(scalar: number): Gas;
    /** Returns true if any of this instance's dimensions is greater than the corresponding on the other. */
    gtAny(other: Gas): boolean;
    computeFee(gasFees: GasFees): Fr;
    toFields(): Fr[];
    static fromFields(fields: Fr[] | FieldReader): Gas;
}
//# sourceMappingURL=gas.d.ts.map