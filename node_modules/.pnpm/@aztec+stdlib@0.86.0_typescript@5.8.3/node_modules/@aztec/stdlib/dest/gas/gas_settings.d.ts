/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import { Fr } from '@aztec/foundation/fields';
import { BufferReader, FieldReader } from '@aztec/foundation/serialize';
import type { FieldsOf } from '@aztec/foundation/types';
import { z } from 'zod';
import { Gas } from './gas.js';
import { GasFees } from './gas_fees.js';
/** Gas usage and fees limits set by the transaction sender for different dimensions and phases. */
export declare class GasSettings {
    readonly gasLimits: Gas;
    readonly teardownGasLimits: Gas;
    readonly maxFeesPerGas: GasFees;
    readonly maxPriorityFeesPerGas: GasFees;
    constructor(gasLimits: Gas, teardownGasLimits: Gas, maxFeesPerGas: GasFees, maxPriorityFeesPerGas: GasFees);
    static get schema(): z.ZodEffects<z.ZodObject<{
        gasLimits: z.ZodEffects<z.ZodObject<{
            daGas: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
            l2Gas: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            daGas: number;
            l2Gas: number;
        }, {
            daGas: string | number | bigint;
            l2Gas: string | number | bigint;
        }>, Gas, {
            daGas: string | number | bigint;
            l2Gas: string | number | bigint;
        }>;
        teardownGasLimits: z.ZodEffects<z.ZodObject<{
            daGas: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
            l2Gas: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            daGas: number;
            l2Gas: number;
        }, {
            daGas: string | number | bigint;
            l2Gas: string | number | bigint;
        }>, Gas, {
            daGas: string | number | bigint;
            l2Gas: string | number | bigint;
        }>;
        maxFeesPerGas: z.ZodEffects<z.ZodObject<{
            feePerDaGas: z.ZodType<Fr, any, string>;
            feePerL2Gas: z.ZodType<Fr, any, string>;
        }, "strip", z.ZodTypeAny, {
            feePerDaGas: Fr;
            feePerL2Gas: Fr;
        }, {
            feePerDaGas: string;
            feePerL2Gas: string;
        }>, GasFees, {
            feePerDaGas: string;
            feePerL2Gas: string;
        }>;
        maxPriorityFeesPerGas: z.ZodEffects<z.ZodObject<{
            feePerDaGas: z.ZodType<Fr, any, string>;
            feePerL2Gas: z.ZodType<Fr, any, string>;
        }, "strip", z.ZodTypeAny, {
            feePerDaGas: Fr;
            feePerL2Gas: Fr;
        }, {
            feePerDaGas: string;
            feePerL2Gas: string;
        }>, GasFees, {
            feePerDaGas: string;
            feePerL2Gas: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        gasLimits: Gas;
        teardownGasLimits: Gas;
        maxFeesPerGas: GasFees;
        maxPriorityFeesPerGas: GasFees;
    }, {
        gasLimits: {
            daGas: string | number | bigint;
            l2Gas: string | number | bigint;
        };
        teardownGasLimits: {
            daGas: string | number | bigint;
            l2Gas: string | number | bigint;
        };
        maxFeesPerGas: {
            feePerDaGas: string;
            feePerL2Gas: string;
        };
        maxPriorityFeesPerGas: {
            feePerDaGas: string;
            feePerL2Gas: string;
        };
    }>, GasSettings, {
        gasLimits: {
            daGas: string | number | bigint;
            l2Gas: string | number | bigint;
        };
        teardownGasLimits: {
            daGas: string | number | bigint;
            l2Gas: string | number | bigint;
        };
        maxFeesPerGas: {
            feePerDaGas: string;
            feePerL2Gas: string;
        };
        maxPriorityFeesPerGas: {
            feePerDaGas: string;
            feePerL2Gas: string;
        };
    }>;
    getSize(): number;
    static from(args: {
        gasLimits: FieldsOf<Gas>;
        teardownGasLimits: FieldsOf<Gas>;
        maxFeesPerGas: FieldsOf<GasFees>;
        maxPriorityFeesPerGas: FieldsOf<GasFees>;
    }): GasSettings;
    clone(): GasSettings;
    /** Returns the maximum fee to be paid according to gas limits and max fees set. */
    getFeeLimit(): Fr;
    /** Zero-value gas settings. */
    static empty(): GasSettings;
    /** Default gas settings to use when user has not provided them. Requires explicit max fees per gas. */
    static default(overrides: {
        gasLimits?: Gas;
        teardownGasLimits?: Gas;
        maxFeesPerGas: GasFees;
        maxPriorityFeesPerGas?: GasFees;
    }): GasSettings;
    isEmpty(): boolean;
    equals(other: GasSettings): boolean;
    static fromBuffer(buffer: Buffer | BufferReader): GasSettings;
    toBuffer(): Buffer;
    static fromFields(fields: Fr[] | FieldReader): GasSettings;
    toFields(): Fr[];
    static getFields(fields: FieldsOf<GasSettings>): readonly [Gas, Gas, GasFees, GasFees];
}
//# sourceMappingURL=gas_settings.d.ts.map