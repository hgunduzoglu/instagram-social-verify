import { toBufferBE } from '@aztec/foundation/bigint-buffer';
import { Fr } from '@aztec/foundation/fields';
import { bufferToHex } from '@aztec/foundation/string';
import { inspect } from 'util';
/** A selector is the first 4 bytes of the hash of a signature. */ export class Selector {
    value;
    /** The size of the selector in bytes. */ static SIZE = 4;
    constructor(/** Value of the selector */ value){
        this.value = value;
        if (value > 2 ** (Selector.SIZE * 8) - 1) {
            throw new Error(`Selector must fit in ${Selector.SIZE} bytes (got value ${value}).`);
        }
    }
    /**
   * Checks if the selector is empty (all bytes are 0).
   * @returns True if the selector is empty (all bytes are 0).
   */ isEmpty() {
        return this.value === 0;
    }
    /**
   * Serialize as a buffer.
   * @param bufferSize - The buffer size.
   * @returns The buffer.
   */ toBuffer(bufferSize = Selector.SIZE) {
        return toBufferBE(BigInt(this.value), bufferSize);
    }
    /**
   * Serialize as a hex string.
   * @returns The string.
   */ toString() {
        return bufferToHex(this.toBuffer());
    }
    [inspect.custom]() {
        return `Selector<${this.toString()}>`;
    }
    /**
   * Checks if this selector is equal to another.
   * @param other - The other selector.
   * @returns True if the selectors are equal.
   */ equals(other) {
        return this.value === other.value;
    }
    /**
   * Returns a new field with the same contents as this EthAddress.
   *
   * @returns An Fr instance.
   */ toField() {
        return new Fr(BigInt(this.value));
    }
}
