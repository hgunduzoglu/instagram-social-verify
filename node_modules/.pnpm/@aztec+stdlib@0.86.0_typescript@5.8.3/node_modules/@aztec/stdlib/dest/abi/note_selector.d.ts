/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import { Fr } from '@aztec/foundation/fields';
import { BufferReader } from '@aztec/foundation/serialize';
import { Selector } from './selector.js';
/** Note selector branding */
export interface NoteSelector {
    /** Brand. */
    _branding: 'NoteSelector';
}
/**
 * A note selector is a 7 bit long value that identifies a note type within a contract.
 * TODO(#10952): Encoding of note type id can be reduced to 7 bits.
 */
export declare class NoteSelector extends Selector {
    /**
     * Deserializes from a buffer or reader, corresponding to a write in cpp.
     * @param buffer - Buffer  or BufferReader to read from.
     * @returns The Selector.
     */
    static fromBuffer(buffer: Buffer | BufferReader): NoteSelector;
    static fromString(buf: string): NoteSelector;
    /**
     * Converts a field to selector.
     * @param fr - The field to convert.
     * @returns The selector.
     */
    static fromField(fr: Fr): NoteSelector;
    /**
     * Creates an empty selector.
     * @returns An empty selector.
     */
    static empty(): NoteSelector;
    /**
     * Creates a random selector.
     * @returns A random selector.
     */
    static random(): NoteSelector;
    toJSON(): string;
    static get schema(): import("zod").ZodType<NoteSelector, any, string>;
}
//# sourceMappingURL=note_selector.d.ts.map