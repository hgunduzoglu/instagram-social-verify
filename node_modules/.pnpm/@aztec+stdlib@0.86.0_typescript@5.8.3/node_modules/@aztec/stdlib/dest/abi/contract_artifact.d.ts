/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import { type ContractArtifact, type FunctionArtifact } from '../abi/index.js';
import { type NoirCompiledContract } from '../noir/index.js';
/**
 * Serializes a contract artifact to a buffer for storage.
 * @param artifact - Artifact to serialize.
 * @returns A buffer.
 */
export declare function contractArtifactToBuffer(artifact: ContractArtifact): Buffer;
/**
 * Deserializes a contract artifact from storage.
 * @param buffer - Buffer to deserialize.
 * @returns Deserialized artifact.
 */
export declare function contractArtifactFromBuffer(buffer: Buffer): Promise<ContractArtifact>;
/**
 * Gets nargo build output and returns a valid contract artifact instance.
 * Does not include public bytecode, apart from the public_dispatch function.
 * @param input - Input object as generated by nargo compile.
 * @returns A valid contract artifact instance.
 */
export declare function loadContractArtifact(input: NoirCompiledContract): ContractArtifact;
/**
 * Gets nargo build output and returns a valid contract artifact instance.
 * Differs from loadContractArtifact() by retaining all bytecode.
 * @param input - Input object as generated by nargo compile.
 * @returns A valid contract artifact instance.
 */
export declare function loadContractArtifactForPublic(input: NoirCompiledContract): ContractArtifact;
/** Function from a noir contract compilation artifact */
type NoirCompiledContractFunction = NoirCompiledContract['functions'][number];
/**
 * Returns true if we should retain bytecode
 */
export declare function retainBytecode(input: NoirCompiledContractFunction | FunctionArtifact): boolean;
export {};
//# sourceMappingURL=contract_artifact.d.ts.map