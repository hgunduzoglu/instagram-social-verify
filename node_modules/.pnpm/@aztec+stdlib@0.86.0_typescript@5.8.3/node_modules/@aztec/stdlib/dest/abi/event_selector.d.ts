/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import type { Fr } from '@aztec/foundation/fields';
import { BufferReader } from '@aztec/foundation/serialize';
import { Selector } from './selector.js';
/** Event selector branding */
export interface EventSelector {
    /** Brand. */
    _branding: 'EventSelector';
}
/** An event selector is the first 4 bytes of the hash of an event signature. */
export declare class EventSelector extends Selector {
    /**
     * Deserializes from a buffer or reader, corresponding to a write in cpp.
     * @param buffer - Buffer  or BufferReader to read from.
     * @returns The Selector.
     */
    static fromBuffer(buffer: Buffer | BufferReader): EventSelector;
    /**
     * Converts a field to selector.
     * @param fr - The field to convert.
     * @returns The selector.
     */
    static fromField(fr: Fr): EventSelector;
    /**
     * Creates a selector from a signature.
     * @param signature - Signature to generate the selector for (e.g. "transfer(field,field)").
     * @returns selector.
     */
    static fromSignature(signature: string): Promise<EventSelector>;
    /**
     * Create a Selector instance from a hex-encoded string.
     *
     * @param selector - The hex-encoded string representing the Selector.
     * @returns An Selector instance.
     * @throws If the selector length is invalid.
     */
    static fromString(selector: string): EventSelector;
    /**
     * Creates an empty selector.
     * @returns An empty selector.
     */
    static empty(): EventSelector;
    /**
     * Creates a random selector.
     * @returns A random selector.
     */
    static random(): EventSelector;
    toJSON(): string;
    static get schema(): import("zod").ZodType<EventSelector, any, string>;
}
//# sourceMappingURL=event_selector.d.ts.map