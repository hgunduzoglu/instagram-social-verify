import { VK_TREE_HEIGHT } from '@aztec/constants';
import { Fr } from '@aztec/foundation/fields';
import { schemas } from '@aztec/foundation/schemas';
import { BufferReader, serializeToBuffer } from '@aztec/foundation/serialize';
import { bufferToHex, hexToBuffer } from '@aztec/foundation/string';
import { RecursiveProof } from '../proofs/recursive_proof.js';
import { VerificationKeyAsFields } from '../vks/verification_key.js';
import { ParityPublicInputs } from './parity_public_inputs.js';
export class RootParityInput {
    proof;
    verificationKey;
    vkPath;
    publicInputs;
    constructor(/** The proof of the execution of the parity circuit. */ proof, /** The circuit's verification key */ verificationKey, /** The vk path in the vk tree*/ vkPath, /** The public inputs of the parity circuit. */ publicInputs){
        this.proof = proof;
        this.verificationKey = verificationKey;
        this.vkPath = vkPath;
        this.publicInputs = publicInputs;
    }
    toBuffer() {
        return serializeToBuffer(...RootParityInput.getFields(this));
    }
    toString() {
        return bufferToHex(this.toBuffer());
    }
    static from(fields) {
        return new RootParityInput(...RootParityInput.getFields(fields));
    }
    static getFields(fields) {
        return [
            fields.proof,
            fields.verificationKey,
            fields.vkPath,
            fields.publicInputs
        ];
    }
    static fromBuffer(buffer, expectedSize) {
        const reader = BufferReader.asReader(buffer);
        return new RootParityInput(RecursiveProof.fromBuffer(reader, expectedSize), reader.readObject(VerificationKeyAsFields), reader.readArray(VK_TREE_HEIGHT, Fr), reader.readObject(ParityPublicInputs));
    }
    static fromString(str, expectedSize) {
        return RootParityInput.fromBuffer(hexToBuffer(str), expectedSize);
    }
    /** Returns a hex representation for JSON serialization. */ toJSON() {
        return this.toBuffer();
    }
    /** Creates an instance from a hex string with expected size. */ static schemaFor(expectedSize) {
        return schemas.Buffer.transform((buf)=>RootParityInput.fromBuffer(buf, expectedSize));
    }
}
