import { serializeToBuffer } from '@aztec/foundation/serialize';
/**
 * Implementation of a vector. Matches how we are serializing and deserializing vectors in cpp (length in the first position, followed by the items).
 */ export class Vector {
    items;
    constructor(/**
     * Items in the vector.
     */ items){
        this.items = items;
    }
    toBuffer() {
        return serializeToBuffer(this.items.length, this.items);
    }
    toFriendlyJSON() {
        return this.items;
    }
}
/**
 * CircuitType replaces ComposerType for now. When using Plonk, CircuitType is equivalent to the information of the proving system that will be used
 * to construct a proof. In the future Aztec zk stack, more information must be specified (e.g., the curve over which circuits are  constructed;
 * Plonk vs Honk; zk-SNARK or just SNARK; etc).
 */ export var CircuitType = /*#__PURE__*/ function(CircuitType) {
    CircuitType[CircuitType["STANDARD"] = 0] = "STANDARD";
    CircuitType[CircuitType["ULTRA"] = 1] = "ULTRA";
    return CircuitType;
}({});
/**
 * Rollup types.
 */ export var RollupTypes = /*#__PURE__*/ function(RollupTypes) {
    RollupTypes[RollupTypes["Base"] = 0] = "Base";
    RollupTypes[RollupTypes["Merge"] = 1] = "Merge";
    RollupTypes[RollupTypes["Root"] = 2] = "Root";
    return RollupTypes;
}({});
