/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import type { Buffer32 } from '@aztec/foundation/buffer';
import type { EthAddress } from '@aztec/foundation/eth-address';
import type { Fq, Fr, Point } from '@aztec/foundation/fields';
import { type ZodFor } from '@aztec/foundation/schemas';
import { z } from 'zod';
import type { AbiDecoded } from '../abi/decoder.js';
import { EventSelector } from '../abi/event_selector.js';
import { FunctionSelector } from '../abi/function_selector.js';
import { NoteSelector } from '../abi/note_selector.js';
import { AztecAddress } from '../aztec-address/index.js';
/**
 * Validation schemas for common types. Every schema must match its toJSON.
 * Foundation schemas are repeated here to aid type inference
 * */
export declare const schemas: {
    /** Accepts a hex string. */
    EthAddress: ZodFor<EthAddress>;
    /** Accepts a hex string. */
    Fr: ZodFor<Fr>;
    /** Accepts a hex string. */
    Fq: ZodFor<Fq>;
    /** Point. Serialized as a hex string. */
    Point: ZodFor<Point>;
    /** Coerces any input to bigint. */
    BigInt: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodBigInt>;
    /** Coerces any input to integer number. */
    Integer: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
    /** Coerces input to UInt32. */
    UInt32: z.ZodPipeline<z.ZodUnion<[z.ZodBigInt, z.ZodNumber, z.ZodString]>, z.ZodNumber>;
    /** Accepts a hex string as a Buffer32 type. */
    Buffer32: ZodFor<Buffer32>;
    /** Accepts a base64 string or an object `{ type: 'Buffer', data: [byte, byte...] }` as a buffer. */
    Buffer: z.ZodUnion<[z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, Buffer, string>, z.ZodEffects<z.ZodObject<{
        type: z.ZodLiteral<"Buffer">;
        data: z.ZodArray<z.ZodNumber, "many">;
    }, "strip", z.ZodTypeAny, {
        type: "Buffer"; /** Accepts a hex string as a buffer. */
        data: number[];
    }, {
        type: "Buffer";
        data: number[];
    }>, Buffer, {
        type: "Buffer";
        data: number[];
    }>]>;
    /** Accepts a hex string as a buffer. */
    BufferHex: z.ZodEffects<z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>, Buffer, string>;
    /** Hex string with an optional 0x prefix which gets removed as part of the parsing. */
    HexString: z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>;
    /** Accepts a hex string. */
    AztecAddress: ZodFor<AztecAddress>;
    /** Accepts a hex string. */
    NoteSelector: z.ZodType<NoteSelector, any, string>;
    /** Accepts a hex string. */
    FunctionSelector: ZodFor<FunctionSelector>;
    /** Accepts a hex string. */
    EventSelector: z.ZodType<EventSelector, any, string>;
};
export declare const AbiDecodedSchema: ZodFor<AbiDecoded>;
export { type ZodFor, bufferSchema, hexSchema, hexSchemaFor, bufferSchemaFor, type ApiSchemaFor, optional, mapSchema, pickFromSchema, } from '@aztec/foundation/schemas';
//# sourceMappingURL=schemas.d.ts.map