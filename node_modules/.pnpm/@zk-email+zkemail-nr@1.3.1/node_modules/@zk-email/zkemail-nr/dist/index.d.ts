import { DKIMVerificationResult } from "@zk-email/helpers/dist/dkim";
import { Sequence, BoundedVec } from "./utils";
export { verifyDKIMSignature } from "@zk-email/helpers/dist/dkim";
export type CircuitInput = {
    header: BoundedVec;
    pubkey: {
        modulus: string[];
        redc: string[];
    };
    signature: string[];
    dkim_header_sequence: Sequence;
    body?: BoundedVec;
    body_hash_index?: string;
    partial_body_real_length?: string;
    partial_body_hash?: string[];
    header_mask?: string[];
    body_mask?: string[];
    decoded_body?: BoundedVec;
    from_header_sequence?: Sequence;
    from_address_sequence?: Sequence;
    to_header_sequence?: Sequence;
    to_address_sequence?: Sequence;
};
export type InputGenerationArgs = {
    ignoreBodyHashCheck?: boolean;
    shaPrecomputeSelector?: string;
    maxHeadersLength?: number;
    maxBodyLength?: number;
    removeSoftLineBreaks?: boolean;
    headerMask?: number[];
    bodyMask?: number[];
    extractFrom?: boolean;
    extractTo?: boolean;
};
/**
 * @description Generate circuit inputs for the EmailVerifier circuit from raw email content
 * @param rawEmail Full email content as a buffer or string
 * @param params Arguments to control the input generation
 * @returns Circuit inputs for the EmailVerifier circuit
 */
export declare function generateEmailVerifierInputs(rawEmail: Buffer | string, params?: InputGenerationArgs): Promise<CircuitInput>;
/**
 * @description Generate circuit inputs for the EmailVerifier circuit from DKIMVerification result
 * @param dkimResult DKIMVerificationResult containing email data and verification result
 * @param params Arguments to control the input generation
 * @returns Circuit inputs for the EmailVerifier circuit
 */
export declare function generateEmailVerifierInputsFromDKIMResult(dkimResult: DKIMVerificationResult, params?: InputGenerationArgs): CircuitInput;
