import { type Logger } from '@aztec/foundation/log';
import { type Client, type Hex } from 'viem';
import { type ViemClient } from '../types.js';
export declare function waitUntilBlock<T extends Client>(client: T, blockNumber: number | bigint, logger?: Logger): Promise<boolean>;
export declare function waitUntilL1Timestamp<T extends Client>(client: T, timestamp: number | bigint, logger?: Logger): Promise<boolean>;
export interface Delayer {
    /** Returns the list of all txs (not just the delayed ones) sent through the attached client. */
    getTxs(): Hex[];
    /** Delays the next tx to be sent so it lands on the given L1 block number. */
    pauseNextTxUntilBlock(l1BlockNumber: number | bigint | undefined): void;
    /** Delays the next tx to be sent so it lands on the given timestamp. */
    pauseNextTxUntilTimestamp(l1Timestamp: number | bigint | undefined): void;
}
/**
 * Returns a new client (without modifying the one passed in) with an injected tx delayer.
 * The delayer can be used to hold off the next tx to be sent until a given block number.
 * TODO(#10824): This doesn't play along well with blob txs for some reason.
 */
export declare function withDelayer<T extends ViemClient>(client: T, opts: {
    ethereumSlotDuration: bigint | number;
}): {
    client: T;
    delayer: Delayer;
};
//# sourceMappingURL=tx_delayer.d.ts.map