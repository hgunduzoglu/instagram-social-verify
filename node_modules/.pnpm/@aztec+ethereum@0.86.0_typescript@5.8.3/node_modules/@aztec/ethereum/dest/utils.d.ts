import type { Fr } from '@aztec/foundation/fields';
import type { Logger } from '@aztec/foundation/log';
import { type Abi, type ContractEventName, type DecodeEventLogReturnType, type Hex, type Log } from 'viem';
export interface L2Claim {
    claimSecret: Fr;
    claimAmount: Fr;
    messageHash: Hex;
    messageLeafIndex: bigint;
}
export declare class FormattedViemError extends Error {
    metaMessages?: any[];
    constructor(message: string, metaMessages?: any[]);
}
export declare function extractEvent<const TAbi extends Abi | readonly unknown[], TEventName extends ContractEventName<TAbi>, TEventType = DecodeEventLogReturnType<TAbi, TEventName, Hex[], undefined, true>>(logs: Log[], address: Hex, abi: TAbi, eventName: TEventName, filter?: (log: TEventType) => boolean, logger?: Logger): TEventType;
export declare function prettyLogViemErrorMsg(err: any): any;
/**
 * Formats a Viem error into a FormattedViemError instance.
 * @param error - The error to format.
 * @param abi - The ABI to use for decoding.
 * @returns A FormattedViemError instance.
 */
export declare function formatViemError(error: any, abi?: Abi): FormattedViemError;
export declare function tryGetCustomErrorName(err: any): string | undefined;
//# sourceMappingURL=utils.d.ts.map