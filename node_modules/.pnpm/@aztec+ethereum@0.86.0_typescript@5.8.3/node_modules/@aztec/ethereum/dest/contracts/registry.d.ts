import { EthAddress } from '@aztec/foundation/eth-address';
import { type Hex } from 'viem';
import type { L1ContractAddresses } from '../l1_contract_addresses.js';
import type { ViemClient } from '../types.js';
export declare class RegistryContract {
    readonly client: ViemClient;
    address: EthAddress;
    private readonly log;
    private readonly registry;
    constructor(client: ViemClient, address: Hex | EthAddress);
    /**
     * Returns the address of the rollup for a given version.
     * @param version - The version of the rollup. 'canonical' can be used to get the canonical address (i.e. the latest version).
     * @returns The address of the rollup. If the rollup is not set for this version, throws an error.
     */
    getRollupAddress(version: number | bigint | 'canonical'): Promise<EthAddress>;
    /**
     * Returns the canonical address of the rollup.
     * @returns The canonical address of the rollup. If the rollup is not set, throws an error.
     */
    getCanonicalAddress(): Promise<EthAddress>;
    getGovernanceAddresses(): Promise<Pick<L1ContractAddresses, 'governanceProposerAddress' | 'governanceAddress'>>;
    static collectAddresses(client: ViemClient, registryAddress: Hex | EthAddress, rollupVersion: number | bigint | 'canonical'): Promise<L1ContractAddresses>;
    getNumberOfVersions(): Promise<number>;
    getRollupVersions(): Promise<bigint[]>;
    getRewardDistributor(): Promise<EthAddress>;
}
//# sourceMappingURL=registry.d.ts.map