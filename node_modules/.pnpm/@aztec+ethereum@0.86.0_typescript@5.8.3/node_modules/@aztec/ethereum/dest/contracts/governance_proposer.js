function _ts_decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
import { memoize } from '@aztec/foundation/decorators';
import { EthAddress } from '@aztec/foundation/eth-address';
import { GovernanceProposerAbi } from '@aztec/l1-artifacts/GovernanceProposerAbi';
import { encodeFunctionData, getContract } from 'viem';
import { encodeVote } from './empire_base.js';
import { extractProposalIdFromLogs } from './governance.js';
export class GovernanceProposerContract {
    client;
    proposer;
    constructor(client, address){
        this.client = client;
        this.proposer = getContract({
            address,
            abi: GovernanceProposerAbi,
            client
        });
    }
    get address() {
        return EthAddress.fromString(this.proposer.address);
    }
    async getRollupAddress() {
        return EthAddress.fromString(await this.proposer.read.getInstance());
    }
    async getRegistryAddress() {
        return EthAddress.fromString(await this.proposer.read.REGISTRY());
    }
    getQuorumSize() {
        return this.proposer.read.N();
    }
    getRoundSize() {
        return this.proposer.read.M();
    }
    computeRound(slot) {
        return this.proposer.read.computeRound([
            slot
        ]);
    }
    async getRoundInfo(rollupAddress, round) {
        const roundInfo = await this.proposer.read.rounds([
            rollupAddress,
            round
        ]);
        return {
            lastVote: roundInfo[0],
            leader: roundInfo[1],
            executed: roundInfo[2]
        };
    }
    getProposalVotes(rollupAddress, round, proposal) {
        return this.proposer.read.yeaCount([
            rollupAddress,
            round,
            proposal
        ]);
    }
    createVoteRequest(payload) {
        return {
            to: this.address.toString(),
            data: encodeVote(payload)
        };
    }
    async executeProposal(round, l1TxUtils) {
        const { receipt, gasPrice } = await l1TxUtils.sendAndMonitorTransaction({
            to: this.address.toString(),
            data: encodeFunctionData({
                abi: this.proposer.abi,
                functionName: 'executeProposal',
                args: [
                    round
                ]
            })
        });
        const proposalId = extractProposalIdFromLogs(receipt.logs);
        return {
            receipt,
            gasPrice,
            proposalId
        };
    }
}
_ts_decorate([
    memoize
], GovernanceProposerContract.prototype, "getRegistryAddress", null);
