import { RollupAbi } from '@aztec/l1-artifacts/RollupAbi';
import { ReadOnlyGovernanceContract } from './contracts/governance.js';
import { GovernanceProposerContract } from './contracts/governance_proposer.js';
import { RollupContract } from './contracts/rollup.js';
/** Reads the L1ContractsConfig from L1 contracts. */ export async function getL1ContractsConfig(publicClient, addresses) {
    const governance = new ReadOnlyGovernanceContract(addresses.governanceAddress.toString(), publicClient);
    const governanceProposerAddress = await governance.getGovernanceProposerAddress();
    const governanceProposer = new GovernanceProposerContract(publicClient, governanceProposerAddress.toString());
    const rollupAddress = addresses.rollupAddress ?? await governanceProposer.getRollupAddress();
    const rollup = new RollupContract(publicClient, rollupAddress.toString());
    const slasherProposer = await rollup.getSlashingProposer();
    const [l1StartBlock, l1GenesisTime, aztecEpochDuration, aztecProofSubmissionWindow, aztecSlotDuration, aztecTargetCommitteeSize, minimumStake, governanceProposerQuorum, governanceProposerRoundSize, slashingQuorum, slashingRoundSize, manaTarget, provingCostPerMana, rollupVersion, genesisArchiveTreeRoot] = await Promise.all([
        rollup.getL1StartBlock(),
        rollup.getL1GenesisTime(),
        rollup.getEpochDuration(),
        rollup.getProofSubmissionWindow(),
        rollup.getSlotDuration(),
        rollup.getTargetCommitteeSize(),
        rollup.getMinimumStake(),
        governanceProposer.getQuorumSize(),
        governanceProposer.getRoundSize(),
        slasherProposer.getQuorumSize(),
        slasherProposer.getRoundSize(),
        rollup.getManaTarget(),
        rollup.getProvingCostPerMana(),
        rollup.getVersion(),
        rollup.getGenesisArchiveTreeRoot()
    ]);
    return {
        l1StartBlock,
        l1GenesisTime,
        aztecEpochDuration: Number(aztecEpochDuration),
        aztecProofSubmissionWindow: Number(aztecProofSubmissionWindow),
        aztecSlotDuration: Number(aztecSlotDuration),
        aztecTargetCommitteeSize: Number(aztecTargetCommitteeSize),
        governanceProposerQuorum: Number(governanceProposerQuorum),
        governanceProposerRoundSize: Number(governanceProposerRoundSize),
        minimumStake,
        slashingQuorum: Number(slashingQuorum),
        slashingRoundSize: Number(slashingRoundSize),
        manaTarget: manaTarget,
        provingCostPerMana: provingCostPerMana,
        rollupVersion: Number(rollupVersion),
        genesisArchiveTreeRoot
    };
}
export async function getL2BlockProposalEvents(client, blockId, rollupAddress) {
    return (await client.getContractEvents({
        abi: RollupAbi,
        address: rollupAddress?.toString(),
        blockHash: blockId,
        eventName: 'L2BlockProposed',
        strict: true
    })).map((log)=>log.args);
}
