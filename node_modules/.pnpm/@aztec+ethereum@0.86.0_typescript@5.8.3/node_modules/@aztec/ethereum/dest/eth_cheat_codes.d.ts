import type { EthAddress } from '@aztec/foundation/eth-address';
import { type Hex } from 'viem';
/**
 * A class that provides utility functions for interacting with ethereum (L1).
 */
export declare class EthCheatCodes {
    /**
     * The RPC URL to use for interacting with the chain
     */
    rpcUrls: string[];
    /**
     * The logger to use for the eth cheatcodes
     */
    logger: import("@aztec/foundation/log").Logger;
    private publicClient;
    constructor(
    /**
     * The RPC URL to use for interacting with the chain
     */
    rpcUrls: string[], 
    /**
     * The logger to use for the eth cheatcodes
     */
    logger?: import("@aztec/foundation/log").Logger);
    rpcCall(method: string, params: any[]): Promise<any>;
    /**
     * Get the auto mine status of the underlying chain
     * @returns True if automine is on, false otherwise
     */
    isAutoMining(): Promise<boolean>;
    /**
     * Get the current blocknumber
     * @returns The current block number
     */
    blockNumber(): Promise<number>;
    /**
     * Get the current chainId
     * @returns The current chainId
     */
    chainId(): Promise<number>;
    /**
     * Get the current timestamp
     * @returns The current timestamp
     */
    timestamp(): Promise<number>;
    /**
     * Advance the chain by a number of blocks
     * @param numberOfBlocks - The number of blocks to mine
     */
    mine(numberOfBlocks?: number): Promise<void>;
    private doMine;
    /**
     * Mines a single block with evm_mine
     */
    evmMine(): Promise<void>;
    /**
     * Set the balance of an account
     * @param account - The account to set the balance for
     * @param balance - The balance to set
     */
    setBalance(account: EthAddress, balance: bigint): Promise<void>;
    /**
     * Set the interval between blocks (block time)
     * @param interval - The interval to use between blocks
     */
    setBlockInterval(interval: number): Promise<void>;
    /**
     * Set the next block base fee per gas
     * @param baseFee - The base fee to set
     */
    setNextBlockBaseFeePerGas(baseFee: bigint | number): Promise<void>;
    /**
     * Set the interval between blocks (block time)
     * @param seconds - The interval to use between blocks
     */
    setIntervalMining(seconds: number): Promise<void>;
    /**
     * Set the automine status of the underlying anvil chain
     * @param automine - The automine status to set
     */
    setAutomine(automine: boolean): Promise<void>;
    /**
     * Drop a transaction from the mempool
     * @param txHash - The transaction hash
     */
    dropTransaction(txHash: Hex): Promise<void>;
    /**
     * Set the next block timestamp
     * @param timestamp - The timestamp to set the next block to
     */
    setNextBlockTimestamp(timestamp: number): Promise<void>;
    /**
     * Set the next block timestamp and mines the block
     * @param timestamp - The timestamp to set the next block to
     */
    warp(timestamp: number | bigint, silent?: boolean): Promise<void>;
    /**
     * Load the value at a storage slot of a contract address on eth
     * @param contract - The contract address
     * @param slot - The storage slot
     * @returns - The value at the storage slot
     */
    load(contract: EthAddress, slot: bigint): Promise<bigint>;
    /**
     * Set the value at a storage slot of a contract address on eth
     * @param contract - The contract address
     * @param slot - The storage slot
     * @param value - The value to set the storage slot to
     */
    store(contract: EthAddress, slot: bigint, value: bigint): Promise<void>;
    /**
     * Computes the slot value for a given map and key.
     * @param baseSlot - The base slot of the map (specified in Aztec.nr contract)
     * @param key - The key to lookup in the map
     * @returns The storage slot of the value in the map
     */
    keccak256(baseSlot: bigint, key: bigint): bigint;
    /**
     * Send transactions impersonating an externally owned account or contract.
     * @param who - The address to impersonate
     */
    startImpersonating(who: EthAddress | Hex): Promise<void>;
    /**
     * Stop impersonating an account that you are currently impersonating.
     * @param who - The address to stop impersonating
     */
    stopImpersonating(who: EthAddress | Hex): Promise<void>;
    /**
     * Set the bytecode for a contract
     * @param contract - The contract address
     * @param bytecode - The bytecode to set
     */
    etch(contract: EthAddress, bytecode: `0x${string}`): Promise<void>;
    /**
     * Get the bytecode for a contract
     * @param contract - The contract address
     * @returns The bytecode for the contract
     */
    getBytecode(contract: EthAddress): Promise<`0x${string}`>;
    /**
     * Get the raw transaction object for a given transaction hash
     * @param txHash - The transaction hash
     * @returns The raw transaction
     */
    getRawTransaction(txHash: Hex): Promise<`0x${string}`>;
    /**
     * Triggers a reorg of the given depth, removing those blocks from the chain.
     * @param depth - The depth of the reorg
     */
    reorg(depth: number): Promise<void>;
    /**
     * Triggers a reorg of the given depth, optionally replacing it with new blocks.
     * The resulting block height will be the same as the original chain.
     * @param depth - The depth of the reorg
     * @param newBlocks - The blocks to replace the old ones with, each represented as a list of txs.
     */
    reorgWithReplacement(depth: number, newBlocks?: (Hex | {
        to: EthAddress | Hex;
        input?: Hex;
        from?: EthAddress | Hex;
        value?: number | bigint;
    })[][]): Promise<void>;
}
//# sourceMappingURL=eth_cheat_codes.d.ts.map