import { EthAddress } from '@aztec/foundation/eth-address';
import type { Fr } from '@aztec/foundation/fields';
import { type Logger } from '@aztec/foundation/log';
import type { Abi, Narrow } from 'abitype';
import { type Chain, type HDAccount, type Hex, type PrivateKeyAccount } from 'viem';
import type { L1ContractsConfig } from './config.js';
import { RollupContract } from './contracts/rollup.js';
import type { L1ContractAddresses } from './l1_contract_addresses.js';
import { type GasPrice, type L1TxRequest, L1TxUtils, type L1TxUtilsConfig } from './l1_tx_utils.js';
import type { ExtendedViemWalletClient } from './types.js';
export declare const DEPLOYER_ADDRESS: Hex;
/**
 * Return type of the deployL1Contract function.
 */
export type DeployL1ContractsReturnType = {
    /**
     * Extended Wallet Client Type.
     */
    l1Client: ExtendedViemWalletClient;
    /**
     * The currently deployed l1 contract addresses
     */
    l1ContractAddresses: L1ContractAddresses;
};
export interface LinkReferences {
    [fileName: string]: {
        [contractName: string]: ReadonlyArray<{
            start: number;
            length: number;
        }>;
    };
}
export interface Libraries {
    linkReferences: LinkReferences;
    libraryCode: Record<string, ContractArtifacts>;
}
/**
 * Contract artifacts
 */
export interface ContractArtifacts {
    /**
     * The contract abi.
     */
    contractAbi: Narrow<Abi | readonly unknown[]>;
    /**
     * The contract bytecode
     */
    contractBytecode: Hex;
    /**
     * The contract libraries
     */
    libraries?: Libraries;
}
export declare const l1Artifacts: {
    registry: {
        contractAbi: readonly [{
            readonly type: "constructor";
            readonly inputs: readonly [{
                readonly name: "_owner";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "_rewardAsset";
                readonly type: "address";
                readonly internalType: "contract IERC20";
            }];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "error";
            readonly name: "AddressSnapshotLib__IndexOutOfBounds";
            readonly inputs: readonly [{
                readonly name: "index";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "size";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "CoinIssuer__InsufficientMintAvailable";
            readonly inputs: readonly [{
                readonly name: "available";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "needed";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "DevNet__InvalidProposer";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "actual";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "DevNet__NoPruningAllowed";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "FeeJuicePortal__AlreadyInitialized";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "FeeJuicePortal__InvalidInitialization";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "FeeJuicePortal__Unauthorized";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "FeeLib__InvalidFeeAssetPriceModifier";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__CanOnlyExecuteProposalInPast";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__FailedToPropose";
            readonly inputs: readonly [{
                readonly name: "proposal";
                readonly type: "address";
                readonly internalType: "contract IPayload";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__InstanceHaveNoCode";
            readonly inputs: readonly [{
                readonly name: "instance";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__InsufficientVotes";
            readonly inputs: readonly [{
                readonly name: "votesCast";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "votesNeeded";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__InvalidNAndMValues";
            readonly inputs: readonly [{
                readonly name: "n";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "m";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__NCannotBeLargerTHanM";
            readonly inputs: readonly [{
                readonly name: "n";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "m";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__OnlyProposerCanVote";
            readonly inputs: readonly [{
                readonly name: "caller";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "proposer";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__ProposalAlreadyExecuted";
            readonly inputs: readonly [{
                readonly name: "roundNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__ProposalCannotBeAddressZero";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__ProposalHaveNoCode";
            readonly inputs: readonly [{
                readonly name: "proposal";
                readonly type: "address";
                readonly internalType: "contract IPayload";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__ProposalTooOld";
            readonly inputs: readonly [{
                readonly name: "roundNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "currentRoundNumber";
                readonly type: "uint256";
                readonly internalType: "uint256"; /** The initial validators for the rollup contract. */
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__VoteAlreadyCastForSlot";
            readonly inputs: readonly [{
                readonly name: "slot";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }];
        }, {
            readonly type: "event";
            readonly name: "GovernanceUpdated";
            readonly inputs: readonly [{
                readonly name: "governance";
                readonly type: "address";
                readonly indexed: true;
                readonly internalType: "address";
            }];
            readonly anonymous: false;
        }, {
            readonly type: "error";
            readonly name: "Governance__CallFailed";
            readonly inputs: readonly [{
                readonly name: "target";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__CallerNotGovernanceProposer";
            readonly inputs: readonly [{
                readonly name: "caller";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "governanceProposer";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__CallerNotSelf";
            readonly inputs: readonly [{
                readonly name: "caller";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "self";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__CannotCallAsset";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__DifferentialTooBig";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__DifferentialTooSmall";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__InvalidMinimumVotes";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__LockAmountTooSmall";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__QuorumTooBig";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__QuorumTooSmall";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__TimeTooBig";
            readonly inputs: readonly [{
                readonly name: "name";
                readonly type: "string";
                readonly internalType: "string";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__TimeTooSmall";
            readonly inputs: readonly [{
                readonly name: "name";
                readonly type: "string";
                readonly internalType: "string";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__InsufficientPower";
            readonly inputs: readonly [{
                readonly name: "voter";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "have";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "required";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__InvalidConfiguration";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__NoCheckpointsFound";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalAlreadyDropped";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalCannotBeDropped";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalDoesNotExists";
            readonly inputs: readonly [{
                readonly name: "proposalId";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalLib__MoreVoteThanExistNeeded";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalLib__MoreYeaVoteThanExistNeeded";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalLib__ZeroMinimum";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalLib__ZeroVotesNeeded";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalLib__ZeroYeaVotesNeeded";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalNotActive";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalNotExecutable";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__UserLib__NotInPast";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__WithdrawalAlreadyclaimed";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__WithdrawalNotUnlockedYet";
            readonly inputs: readonly [{
                readonly name: "currentTime";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }, {
                readonly name: "unlocksAt";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }];
        }, {
            readonly type: "error";
            readonly name: "HeaderLib__InvalidHeaderSize";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "HeaderLib__InvalidSlotNumber";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }];
        }, {
            readonly type: "error";
            readonly name: "Inbox__ActorTooLarge";
            readonly inputs: readonly [{
                readonly name: "actor";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Inbox__ContentTooLarge";
            readonly inputs: readonly [{
                readonly name: "content";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Inbox__MustBuildBeforeConsume";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Inbox__SecretHashTooLarge";
            readonly inputs: readonly [{
                readonly name: "secretHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Inbox__Unauthorized";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Inbox__VersionMismatch";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "event";
            readonly name: "InstanceAdded";
            readonly inputs: readonly [{
                readonly name: "instance";
                readonly type: "address";
                readonly indexed: true;
                readonly internalType: "address";
            }, {
                readonly name: "version";
                readonly type: "uint256";
                /**
                 * Deploys a new rollup, using the existing canonical version to derive certain values (addresses of assets etc).
                 * @param clients - The L1 clients.
                 * @param args - The deployment arguments.
                 * @param registryAddress - The address of the registry.
                 * @param logger - The logger.
                 * @param txUtilsConfig - The L1 tx utils config.
                 */
                readonly indexed: true;
                readonly internalType: "uint256";
            }];
            readonly anonymous: false;
        }, {
            readonly type: "error";
            readonly name: "MerkleLib__InvalidRoot";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "leaf";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "leafIndex";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__AlreadyNullified";
            readonly inputs: readonly [{
                readonly name: "l2BlockNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "leafIndex";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__BlockNotProven";
            readonly inputs: readonly [{
                readonly name: "l2BlockNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__IncompatibleEntryArguments";
            readonly inputs: readonly [{
                readonly name: "messageHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "storedFee";
                readonly type: "uint64";
                readonly internalType: "uint64";
            }, {
                readonly name: "feePassed";
                readonly type: "uint64";
                readonly internalType: "uint64";
            }, {
                readonly name: "storedVersion";
                readonly type: "uint32";
                readonly internalType: "uint32";
            }, {
                readonly name: "versionPassed";
                readonly type: "uint32";
                readonly internalType: "uint32";
            }, {
                readonly name: "storedDeadline";
                readonly type: "uint32";
                readonly internalType: "uint32";
            }, {
                readonly name: "deadlinePassed";
                readonly type: "uint32";
                readonly internalType: "uint32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__InvalidChainId";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Outbox__InvalidPathLength";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__InvalidRecipient";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "actual";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__NothingToConsume";
            readonly inputs: readonly [{
                readonly name: "messageHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__NothingToConsumeAtBlock";
            readonly inputs: readonly [{
                readonly name: "l2BlockNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__RootAlreadySetAtBlock";
            readonly inputs: readonly [{
                readonly name: "l2BlockNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__Unauthorized";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Outbox__VersionMismatch";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "OwnableInvalidOwner";
            readonly inputs: readonly [{
                readonly name: "owner";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "OwnableUnauthorizedAccount";
            readonly inputs: readonly [{
                readonly name: "account";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "event";
            readonly name: "OwnershipTransferred";
            readonly inputs: readonly [{
                readonly name: "previousOwner";
                readonly type: "address";
                readonly indexed: true;
                readonly internalType: "address";
            }, {
                readonly name: "newOwner";
                readonly type: "address";
                readonly indexed: true;
                readonly internalType: "address";
            }];
            readonly anonymous: false;
        }, {
            readonly type: "error";
            readonly name: "ProofCommitmentEscrow__InsufficientBalance";
            readonly inputs: readonly [{
                readonly name: "balance";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "requested";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "ProofCommitmentEscrow__NotOwner";
            readonly inputs: readonly [{
                readonly name: "caller";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "ProofCommitmentEscrow__WithdrawRequestNotReady";
            readonly inputs: readonly [{
                readonly name: "current";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "readyAt";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }];
        }, {
            readonly type: "error";
            readonly name: "Registry__NoRollupsRegistered";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Registry__RollupAlreadyRegistered";
            readonly inputs: readonly [{
                readonly name: "rollup";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Registry__RollupNotRegistered";
            readonly inputs: readonly [{
                readonly name: "version";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "RewardDistributor__InvalidCaller";
            readonly inputs: readonly [{
                readonly name: "caller";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "canonical";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__AlreadyClaimed";
            readonly inputs: readonly [{
                readonly name: "prover";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "epoch";
                readonly type: "uint256";
                readonly internalType: "Epoch";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InsufficientBondAmount";
            readonly inputs: readonly [{
                readonly name: "minimum";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "provided";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InsufficientFundsInEscrow";
            readonly inputs: readonly [{
                readonly name: "required";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "available";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidArchive";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidBasisPointFee";
            readonly inputs: readonly [{
                readonly name: "basisPointFee";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidBlobHash";
            readonly inputs: readonly [{
                readonly name: "blobHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidBlobProof";
            readonly inputs: readonly [{
                readonly name: "blobHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidBlobPublicInputsHash";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidBlockNumber";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidChainId";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidInHash";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidManaBaseFee";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidPreviousArchive";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidProof";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidProposedArchive";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidTimestamp";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidVersion";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__ManaLimitExceeded";
            readonly inputs: readonly [];
        }, {
            /**
             * Deploys the aztec L1 contracts; Rollup & (optionally) Decoder Helper.
             * @param rpcUrls - List of URLs of the ETH RPC to use for deployment.
             * @param account - Private Key or HD Account that will deploy the contracts.
             * @param chain - The chain instance to deploy to.
             * @param logger - A logger object.
             * @param args - Arguments for initialization of L1 contracts
             * @returns A list of ETH addresses of the deployed contracts.
             */
            readonly type: "error";
            readonly name: "Rollup__NoEpochToProve";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__NonSequentialProving";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__NonZeroDaFee";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__NotPastDeadline";
            readonly inputs: readonly [{
                readonly name: "deadline";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }, {
                readonly name: "currentSlot";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__NothingToPrune";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__PastDeadline";
            readonly inputs: readonly [{
                readonly name: "deadline";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }, {
                readonly name: "currentSlot";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__ProverHaveAlreadySubmitted";
            readonly inputs: readonly [{
                readonly name: "prover";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "epoch";
                readonly type: "uint256";
                readonly internalType: "Epoch";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__SlotAlreadyInChain";
            readonly inputs: readonly [{
                readonly name: "lastSlot";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }, {
                readonly name: "proposedSlot";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__StartAndEndNotSameEpoch";
            readonly inputs: readonly [{
                readonly name: "start";
                readonly type: "uint256";
                readonly internalType: "Epoch";
            }, {
                readonly name: "end";
                readonly type: "uint256";
                readonly internalType: "Epoch";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__StartIsNotBuildingOnProven";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__StartIsNotFirstBlockOfEpoch";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__TimestampInFuture";
            readonly inputs: readonly [{
                readonly name: "max";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__TimestampTooOld";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__TryingToProveNonExistingBlock";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__UnavailableTxs";
            readonly inputs: readonly [{
                readonly name: "txsHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "SampleLib__IndexOutOfBounds";
            readonly inputs: readonly [{
                readonly name: "requested";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "bound";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "SampleLib__SampleLargerThanIndex";
            readonly inputs: readonly [{
                readonly name: "sample";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "index";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "SignatureLib__CannotVerifyEmpty";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "SignatureLib__InvalidSignature";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "recovered";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__AlreadyActive";
            readonly inputs: readonly [{
                readonly name: "attester";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__AlreadyRegistered";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__CannotSlashExitedStake";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__FailedToRemove";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__InsufficientStake";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__InvalidDeposit";
            readonly inputs: readonly [{
                readonly name: "attester";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "proposer";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__NoOneToSlash";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__NotExiting";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__NotSlasher";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__NotWithdrawer";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__NothingToExit";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__WithdrawalNotUnlockedYet";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }, {
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }];
        }, {
            readonly type: "error";
            readonly name: "ValidatorSelection__EpochNotSetup";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "ValidatorSelection__InsufficientAttestations";
            readonly inputs: readonly [{
                readonly name: "minimumNeeded";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "provided";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "ValidatorSelection__InsufficientAttestationsProvided";
            readonly inputs: readonly [{
                readonly name: "minimumNeeded";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "provided";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "ValidatorSelection__InvalidDeposit";
            readonly inputs: readonly [{
                readonly name: "attester";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "proposer";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "ValidatorSelection__InvalidProposer";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "actual";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "function";
            readonly name: "addRollup";
            readonly inputs: readonly [{
                readonly name: "_rollup";
                readonly type: "address";
                readonly internalType: "contract IRollup";
            }];
            readonly outputs: readonly [];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "function";
            readonly name: "getCanonicalRollup";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "contract IRollup";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "getGovernance";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "getRewardDistributor";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "contract IRewardDistributor";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "getRollup";
            readonly inputs: readonly [{
                readonly name: "_version";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "contract IRollup";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "getVersion";
            readonly inputs: readonly [{
                readonly name: "_index";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "numberOfVersions";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "owner";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "renounceOwnership";
            readonly inputs: readonly [];
            readonly outputs: readonly [];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "function";
            readonly name: "transferOwnership";
            readonly inputs: readonly [{
                readonly name: "newOwner";
                readonly type: "address";
                readonly internalType: "address";
            }];
            readonly outputs: readonly [];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "function";
            readonly name: "updateGovernance";
            readonly inputs: readonly [{
                readonly name: "_governance";
                readonly type: "address";
                readonly internalType: "address";
            }];
            readonly outputs: readonly [];
            readonly stateMutability: "nonpayable";
        }];
        contractBytecode: `0x${string}`;
    };
    inbox: {
        contractAbi: readonly [{
            readonly type: "constructor";
            readonly inputs: readonly [{
                readonly name: "_rollup";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "_feeAsset";
                readonly type: "address";
                readonly internalType: "contract IERC20";
            }, {
                readonly name: "_version";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "_height";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "error";
            readonly name: "AddressSnapshotLib__IndexOutOfBounds";
            readonly inputs: readonly [{
                readonly name: "index";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "size";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "CoinIssuer__InsufficientMintAvailable";
            readonly inputs: readonly [{
                readonly name: "available";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "needed";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "DevNet__InvalidProposer";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "actual";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "DevNet__NoPruningAllowed";
            readonly inputs: readonly [];
        }, {
            readonly type: "function";
            readonly name: "FEE_ASSET_PORTAL";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "error";
            readonly name: "FeeJuicePortal__AlreadyInitialized";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "FeeJuicePortal__InvalidInitialization";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "FeeJuicePortal__Unauthorized";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "FeeLib__InvalidFeeAssetPriceModifier";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__CanOnlyExecuteProposalInPast";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__FailedToPropose";
            readonly inputs: readonly [{
                readonly name: "proposal";
                readonly type: "address";
                readonly internalType: "contract IPayload";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__InstanceHaveNoCode";
            readonly inputs: readonly [{
                readonly name: "instance";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__InsufficientVotes";
            readonly inputs: readonly [{
                readonly name: "votesCast";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "votesNeeded";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__InvalidNAndMValues";
            readonly inputs: readonly [{
                readonly name: "n";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "m";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__NCannotBeLargerTHanM";
            readonly inputs: readonly [{
                readonly name: "n";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "m";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__OnlyProposerCanVote";
            readonly inputs: readonly [{
                readonly name: "caller";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "proposer";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__ProposalAlreadyExecuted";
            readonly inputs: readonly [{
                readonly name: "roundNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__ProposalCannotBeAddressZero";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__ProposalHaveNoCode";
            readonly inputs: readonly [{
                readonly name: "proposal";
                readonly type: "address";
                readonly internalType: "contract IPayload";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__ProposalTooOld";
            readonly inputs: readonly [{
                readonly name: "roundNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "currentRoundNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__VoteAlreadyCastForSlot";
            readonly inputs: readonly [{
                readonly name: "slot";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__CallFailed";
            readonly inputs: readonly [{
                readonly name: "target";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__CallerNotGovernanceProposer";
            readonly inputs: readonly [{
                readonly name: "caller";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "governanceProposer";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__CallerNotSelf";
            readonly inputs: readonly [{
                readonly name: "caller";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "self";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__CannotCallAsset";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__DifferentialTooBig";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__DifferentialTooSmall";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__InvalidMinimumVotes";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__LockAmountTooSmall";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__QuorumTooBig";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__QuorumTooSmall";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__TimeTooBig";
            readonly inputs: readonly [{
                readonly name: "name";
                readonly type: "string";
                readonly internalType: "string";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__TimeTooSmall";
            readonly inputs: readonly [{
                readonly name: "name";
                readonly type: "string";
                readonly internalType: "string";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__InsufficientPower";
            readonly inputs: readonly [{
                readonly name: "voter";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "have";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "required";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__InvalidConfiguration";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__NoCheckpointsFound";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalAlreadyDropped";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalCannotBeDropped";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalDoesNotExists";
            readonly inputs: readonly [{
                readonly name: "proposalId";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalLib__MoreVoteThanExistNeeded";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalLib__MoreYeaVoteThanExistNeeded";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalLib__ZeroMinimum";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalLib__ZeroVotesNeeded";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalLib__ZeroYeaVotesNeeded";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalNotActive";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalNotExecutable";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__UserLib__NotInPast";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__WithdrawalAlreadyclaimed";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__WithdrawalNotUnlockedYet";
            readonly inputs: readonly [{
                readonly name: "currentTime";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }, {
                readonly name: "unlocksAt";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }];
        }, {
            readonly type: "error";
            readonly name: "HeaderLib__InvalidHeaderSize";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "HeaderLib__InvalidSlotNumber";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }];
        }, {
            readonly type: "error";
            readonly name: "Inbox__ActorTooLarge";
            readonly inputs: readonly [{
                readonly name: "actor";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Inbox__ContentTooLarge";
            readonly inputs: readonly [{
                readonly name: "content";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Inbox__MustBuildBeforeConsume";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Inbox__SecretHashTooLarge";
            readonly inputs: readonly [{
                readonly name: "secretHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Inbox__Unauthorized";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Inbox__VersionMismatch";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "MerkleLib__InvalidRoot";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "leaf";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "leafIndex";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "event";
            readonly name: "MessageSent";
            readonly inputs: readonly [{
                readonly name: "l2BlockNumber";
                readonly type: "uint256";
                readonly indexed: true;
                readonly internalType: "uint256";
            }, {
                readonly name: "index";
                readonly type: "uint256";
                readonly indexed: false;
                readonly internalType: "uint256";
            }, {
                readonly name: "hash";
                readonly type: "bytes32";
                readonly indexed: true;
                readonly internalType: "bytes32";
            }];
            readonly anonymous: false;
        }, {
            readonly type: "error";
            readonly name: "Outbox__AlreadyNullified";
            readonly inputs: readonly [{
                readonly name: "l2BlockNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "leafIndex";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__BlockNotProven";
            readonly inputs: readonly [{
                readonly name: "l2BlockNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__IncompatibleEntryArguments";
            readonly inputs: readonly [{
                readonly name: "messageHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "storedFee";
                readonly type: "uint64";
                readonly internalType: "uint64";
            }, {
                readonly name: "feePassed";
                readonly type: "uint64";
                readonly internalType: "uint64";
            }, {
                readonly name: "storedVersion";
                readonly type: "uint32";
                readonly internalType: "uint32";
            }, {
                readonly name: "versionPassed";
                readonly type: "uint32";
                readonly internalType: "uint32";
            }, {
                readonly name: "storedDeadline";
                readonly type: "uint32";
                readonly internalType: "uint32";
            }, {
                readonly name: "deadlinePassed";
                readonly type: "uint32";
                readonly internalType: "uint32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__InvalidChainId";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Outbox__InvalidPathLength";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__InvalidRecipient";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "actual";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__NothingToConsume";
            readonly inputs: readonly [{
                readonly name: "messageHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__NothingToConsumeAtBlock";
            readonly inputs: readonly [{
                readonly name: "l2BlockNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__RootAlreadySetAtBlock";
            readonly inputs: readonly [{
                readonly name: "l2BlockNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__Unauthorized";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Outbox__VersionMismatch";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "ProofCommitmentEscrow__InsufficientBalance";
            readonly inputs: readonly [{
                readonly name: "balance";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "requested";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "ProofCommitmentEscrow__NotOwner";
            readonly inputs: readonly [{
                readonly name: "caller";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "ProofCommitmentEscrow__WithdrawRequestNotReady";
            readonly inputs: readonly [{
                readonly name: "current";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "readyAt";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }];
        }, {
            readonly type: "function";
            readonly name: "ROLLUP";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "error";
            readonly name: "Registry__NoRollupsRegistered";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Registry__RollupAlreadyRegistered";
            readonly inputs: readonly [{
                readonly name: "rollup";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Registry__RollupNotRegistered";
            readonly inputs: readonly [{
                readonly name: "version";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "RewardDistributor__InvalidCaller";
            readonly inputs: readonly [{
                readonly name: "caller";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "canonical";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__AlreadyClaimed";
            readonly inputs: readonly [{
                readonly name: "prover";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "epoch";
                readonly type: "uint256";
                readonly internalType: "Epoch";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InsufficientBondAmount";
            readonly inputs: readonly [{
                readonly name: "minimum";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "provided";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InsufficientFundsInEscrow";
            readonly inputs: readonly [{
                readonly name: "required";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "available";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidArchive";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidBasisPointFee";
            readonly inputs: readonly [{
                readonly name: "basisPointFee";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidBlobHash";
            readonly inputs: readonly [{
                readonly name: "blobHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidBlobProof";
            readonly inputs: readonly [{
                readonly name: "blobHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidBlobPublicInputsHash";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidBlockNumber";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidChainId";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidInHash";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidManaBaseFee";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidPreviousArchive";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidProof";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidProposedArchive";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidTimestamp";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidVersion";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__ManaLimitExceeded";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__NoEpochToProve";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__NonSequentialProving";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__NonZeroDaFee";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__NotPastDeadline";
            readonly inputs: readonly [{
                readonly name: "deadline";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }, {
                readonly name: "currentSlot";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__NothingToPrune";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__PastDeadline";
            readonly inputs: readonly [{
                readonly name: "deadline";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }, {
                readonly name: "currentSlot";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__ProverHaveAlreadySubmitted";
            readonly inputs: readonly [{
                readonly name: "prover";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "epoch";
                readonly type: "uint256";
                readonly internalType: "Epoch";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__SlotAlreadyInChain";
            readonly inputs: readonly [{
                readonly name: "lastSlot";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }, {
                readonly name: "proposedSlot";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__StartAndEndNotSameEpoch";
            readonly inputs: readonly [{
                readonly name: "start";
                readonly type: "uint256";
                readonly internalType: "Epoch";
            }, {
                readonly name: "end";
                readonly type: "uint256";
                readonly internalType: "Epoch";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__StartIsNotBuildingOnProven";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__StartIsNotFirstBlockOfEpoch";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__TimestampInFuture";
            readonly inputs: readonly [{
                readonly name: "max";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__TimestampTooOld";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__TryingToProveNonExistingBlock";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__UnavailableTxs";
            readonly inputs: readonly [{
                readonly name: "txsHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "SampleLib__IndexOutOfBounds";
            readonly inputs: readonly [{
                readonly name: "requested";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "bound";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "SampleLib__SampleLargerThanIndex";
            readonly inputs: readonly [{
                readonly name: "sample";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "index";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "SignatureLib__CannotVerifyEmpty";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "SignatureLib__InvalidSignature";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "recovered";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__AlreadyActive";
            readonly inputs: readonly [{
                readonly name: "attester";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__AlreadyRegistered";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__CannotSlashExitedStake";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__FailedToRemove";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__InsufficientStake";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                /**
                 * Helper function to deploy ETH contracts.
                 * @param walletClient - A viem WalletClient.
                 * @param publicClient - A viem PublicClient.
                 * @param abi - The ETH contract's ABI (as abitype's Abi).
                 * @param bytecode  - The ETH contract's bytecode.
                 * @param args - Constructor arguments for the contract.
                 * @param maybeSalt - Optional salt for CREATE2 deployment (does not wait for deployment tx to be mined if set, does not send tx if contract already exists).
                 * @returns The ETH address the contract was deployed to.
                 */
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__InvalidDeposit";
            readonly inputs: readonly [{
                readonly name: "attester";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "proposer";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__NoOneToSlash";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__NotExiting";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__NotSlasher";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__NotWithdrawer";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__NothingToExit";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__WithdrawalNotUnlockedYet";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }, {
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }];
        }, {
            readonly type: "function";
            readonly name: "VERSION";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "error";
            readonly name: "ValidatorSelection__EpochNotSetup";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "ValidatorSelection__InsufficientAttestations";
            readonly inputs: readonly [{
                readonly name: "minimumNeeded";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "provided";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "ValidatorSelection__InsufficientAttestationsProvided";
            readonly inputs: readonly [{
                readonly name: "minimumNeeded";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "provided";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "ValidatorSelection__InvalidDeposit";
            readonly inputs: readonly [{
                readonly name: "attester";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "proposer";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "ValidatorSelection__InvalidProposer";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "actual";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "function";
            readonly name: "consume";
            readonly inputs: readonly [{
                readonly name: "_toConsume";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "function";
            readonly name: "getFeeAssetPortal";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "getRoot";
            readonly inputs: readonly [{
                readonly name: "_blockNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "inProgress";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "sendL2Message";
            readonly inputs: readonly [{
                readonly name: "_recipient";
                readonly type: "tuple";
                readonly internalType: "struct DataStructures.L2Actor";
                readonly components: readonly [{
                    readonly name: "actor";
                    readonly type: "bytes32";
                    readonly internalType: "bytes32";
                }, {
                    readonly name: "version";
                    readonly type: "uint256";
                    readonly internalType: "uint256";
                }];
            }, {
                readonly name: "_content";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "_secretHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "function";
            readonly name: "totalMessagesInserted";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "trees";
            readonly inputs: readonly [{
                readonly name: "blockNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly outputs: readonly [{
                readonly name: "nextIndex";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly stateMutability: "view";
        }];
        contractBytecode: `0x${string}`;
    };
    outbox: {
        contractAbi: readonly [{
            readonly type: "constructor";
            readonly inputs: readonly [{
                readonly name: "_rollup";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "_version";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "error";
            readonly name: "AddressSnapshotLib__IndexOutOfBounds";
            readonly inputs: readonly [{
                readonly name: "index";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "size";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "CoinIssuer__InsufficientMintAvailable";
            readonly inputs: readonly [{
                readonly name: "available";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "needed";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "DevNet__InvalidProposer";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "actual";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "DevNet__NoPruningAllowed";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "FeeJuicePortal__AlreadyInitialized";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "FeeJuicePortal__InvalidInitialization";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "FeeJuicePortal__Unauthorized";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "FeeLib__InvalidFeeAssetPriceModifier";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__CanOnlyExecuteProposalInPast";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__FailedToPropose";
            readonly inputs: readonly [{
                readonly name: "proposal";
                readonly type: "address";
                readonly internalType: "contract IPayload";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__InstanceHaveNoCode";
            readonly inputs: readonly [{
                readonly name: "instance";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__InsufficientVotes";
            readonly inputs: readonly [{
                readonly name: "votesCast";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "votesNeeded";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__InvalidNAndMValues";
            readonly inputs: readonly [{
                readonly name: "n";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "m";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__NCannotBeLargerTHanM";
            readonly inputs: readonly [{
                readonly name: "n";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "m";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__OnlyProposerCanVote";
            readonly inputs: readonly [{
                readonly name: "caller";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "proposer";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__ProposalAlreadyExecuted";
            readonly inputs: readonly [{
                readonly name: "roundNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__ProposalCannotBeAddressZero";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__ProposalHaveNoCode";
            readonly inputs: readonly [{
                readonly name: "proposal";
                readonly type: "address";
                readonly internalType: "contract IPayload";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__ProposalTooOld";
            readonly inputs: readonly [{
                readonly name: "roundNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "currentRoundNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__VoteAlreadyCastForSlot";
            readonly inputs: readonly [{
                readonly name: "slot";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__CallFailed";
            readonly inputs: readonly [{
                readonly name: "target";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__CallerNotGovernanceProposer";
            readonly inputs: readonly [{
                readonly name: "caller";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "governanceProposer";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__CallerNotSelf";
            readonly inputs: readonly [{
                readonly name: "caller";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "self";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__CannotCallAsset";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__DifferentialTooBig";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__DifferentialTooSmall";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__InvalidMinimumVotes";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__LockAmountTooSmall";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__QuorumTooBig";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__QuorumTooSmall";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__TimeTooBig";
            readonly inputs: readonly [{
                readonly name: "name";
                readonly type: "string";
                readonly internalType: "string";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__TimeTooSmall";
            readonly inputs: readonly [{
                readonly name: "name";
                readonly type: "string";
                readonly internalType: "string";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__InsufficientPower";
            readonly inputs: readonly [{
                readonly name: "voter";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "have";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "required";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__InvalidConfiguration";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__NoCheckpointsFound";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalAlreadyDropped";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalCannotBeDropped";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalDoesNotExists";
            readonly inputs: readonly [{
                readonly name: "proposalId";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalLib__MoreVoteThanExistNeeded";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalLib__MoreYeaVoteThanExistNeeded";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalLib__ZeroMinimum";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalLib__ZeroVotesNeeded";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalLib__ZeroYeaVotesNeeded";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalNotActive";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalNotExecutable";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__UserLib__NotInPast";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__WithdrawalAlreadyclaimed";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__WithdrawalNotUnlockedYet";
            readonly inputs: readonly [{
                readonly name: "currentTime";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }, {
                readonly name: "unlocksAt";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }];
        }, {
            readonly type: "error";
            readonly name: "HeaderLib__InvalidHeaderSize";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "HeaderLib__InvalidSlotNumber";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }];
        }, {
            readonly type: "error";
            readonly name: "Inbox__ActorTooLarge";
            readonly inputs: readonly [{
                readonly name: "actor";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Inbox__ContentTooLarge";
            readonly inputs: readonly [{
                readonly name: "content";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Inbox__MustBuildBeforeConsume";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Inbox__SecretHashTooLarge";
            readonly inputs: readonly [{
                readonly name: "secretHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Inbox__Unauthorized";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Inbox__VersionMismatch";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "MerkleLib__InvalidRoot";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "leaf";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "leafIndex";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "event";
            readonly name: "MessageConsumed";
            readonly inputs: readonly [{
                readonly name: "l2BlockNumber";
                readonly type: "uint256";
                readonly indexed: true;
                readonly internalType: "uint256";
            }, {
                readonly name: "root";
                readonly type: "bytes32";
                readonly indexed: true;
                readonly internalType: "bytes32";
            }, {
                readonly name: "messageHash";
                readonly type: "bytes32";
                readonly indexed: true;
                readonly internalType: "bytes32";
            }, {
                readonly name: "leafIndex";
                readonly type: "uint256";
                readonly indexed: false;
                readonly internalType: "uint256";
            }];
            readonly anonymous: false;
        }, {
            readonly type: "error";
            readonly name: "Outbox__AlreadyNullified";
            readonly inputs: readonly [{
                readonly name: "l2BlockNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "leafIndex";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__BlockNotProven";
            readonly inputs: readonly [{
                readonly name: "l2BlockNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__IncompatibleEntryArguments";
            readonly inputs: readonly [{
                readonly name: "messageHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "storedFee";
                readonly type: "uint64";
                readonly internalType: "uint64";
            }, {
                readonly name: "feePassed";
                readonly type: "uint64";
                readonly internalType: "uint64";
            }, {
                readonly name: "storedVersion";
                readonly type: "uint32";
                readonly internalType: "uint32";
            }, {
                readonly name: "versionPassed";
                readonly type: "uint32";
                readonly internalType: "uint32";
            }, {
                readonly name: "storedDeadline";
                readonly type: "uint32";
                readonly internalType: "uint32";
            }, {
                readonly name: "deadlinePassed";
                readonly type: "uint32";
                readonly internalType: "uint32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__InvalidChainId";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Outbox__InvalidPathLength";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__InvalidRecipient";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "actual";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__NothingToConsume";
            readonly inputs: readonly [{
                readonly name: "messageHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__NothingToConsumeAtBlock";
            readonly inputs: readonly [{
                readonly name: "l2BlockNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__RootAlreadySetAtBlock";
            readonly inputs: readonly [{
                readonly name: "l2BlockNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__Unauthorized";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Outbox__VersionMismatch";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "ProofCommitmentEscrow__InsufficientBalance";
            readonly inputs: readonly [{
                readonly name: "balance";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "requested";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "ProofCommitmentEscrow__NotOwner";
            readonly inputs: readonly [{
                readonly name: "caller";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "ProofCommitmentEscrow__WithdrawRequestNotReady";
            readonly inputs: readonly [{
                readonly name: "current";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "readyAt";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }];
        }, {
            readonly type: "function";
            readonly name: "ROLLUP";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "contract IRollup";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "error";
            readonly name: "Registry__NoRollupsRegistered";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Registry__RollupAlreadyRegistered";
            readonly inputs: readonly [{
                readonly name: "rollup";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Registry__RollupNotRegistered";
            readonly inputs: readonly [{
                readonly name: "version";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "RewardDistributor__InvalidCaller";
            readonly inputs: readonly [{
                readonly name: "caller";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "canonical";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__AlreadyClaimed";
            readonly inputs: readonly [{
                readonly name: "prover";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "epoch";
                readonly type: "uint256";
                readonly internalType: "Epoch";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InsufficientBondAmount";
            readonly inputs: readonly [{
                readonly name: "minimum";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "provided";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InsufficientFundsInEscrow";
            readonly inputs: readonly [{
                readonly name: "required";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "available";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidArchive";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidBasisPointFee";
            readonly inputs: readonly [{
                readonly name: "basisPointFee";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidBlobHash";
            readonly inputs: readonly [{
                readonly name: "blobHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidBlobProof";
            readonly inputs: readonly [{
                readonly name: "blobHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidBlobPublicInputsHash";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidBlockNumber";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidChainId";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidInHash";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidManaBaseFee";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidPreviousArchive";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidProof";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidProposedArchive";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidTimestamp";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidVersion";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__ManaLimitExceeded";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__NoEpochToProve";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__NonSequentialProving";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__NonZeroDaFee";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__NotPastDeadline";
            readonly inputs: readonly [{
                readonly name: "deadline";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }, {
                readonly name: "currentSlot";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__NothingToPrune";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__PastDeadline";
            readonly inputs: readonly [{
                readonly name: "deadline";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }, {
                readonly name: "currentSlot";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__ProverHaveAlreadySubmitted";
            readonly inputs: readonly [{
                readonly name: "prover";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "epoch";
                readonly type: "uint256";
                readonly internalType: "Epoch";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__SlotAlreadyInChain";
            readonly inputs: readonly [{
                readonly name: "lastSlot";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }, {
                readonly name: "proposedSlot";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__StartAndEndNotSameEpoch";
            readonly inputs: readonly [{
                readonly name: "start";
                readonly type: "uint256";
                readonly internalType: "Epoch";
            }, {
                readonly name: "end";
                readonly type: "uint256";
                readonly internalType: "Epoch";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__StartIsNotBuildingOnProven";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__StartIsNotFirstBlockOfEpoch";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__TimestampInFuture";
            readonly inputs: readonly [{
                readonly name: "max";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__TimestampTooOld";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__TryingToProveNonExistingBlock";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__UnavailableTxs";
            readonly inputs: readonly [{
                readonly name: "txsHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "event";
            readonly name: "RootAdded";
            readonly inputs: readonly [{
                readonly name: "l2BlockNumber";
                readonly type: "uint256";
                readonly indexed: true;
                readonly internalType: "uint256";
            }, {
                readonly name: "root";
                readonly type: "bytes32";
                readonly indexed: true;
                readonly internalType: "bytes32";
            }, {
                readonly name: "minHeight";
                readonly type: "uint256";
                readonly indexed: false;
                readonly internalType: "uint256";
            }];
            readonly anonymous: false;
        }, {
            readonly type: "error";
            readonly name: "SampleLib__IndexOutOfBounds";
            readonly inputs: readonly [{
                readonly name: "requested";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "bound";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "SampleLib__SampleLargerThanIndex";
            readonly inputs: readonly [{
                readonly name: "sample";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "index";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "SignatureLib__CannotVerifyEmpty";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "SignatureLib__InvalidSignature";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "recovered";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__AlreadyActive";
            readonly inputs: readonly [{
                readonly name: "attester";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__AlreadyRegistered";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__CannotSlashExitedStake";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__FailedToRemove";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            /**
             * Helper function to deploy ETH contracts.
             * @param walletClient - A viem WalletClient.
             * @param publicClient - A viem PublicClient.
             * @param abi - The ETH contract's ABI (as abitype's Abi).
             * @param bytecode  - The ETH contract's bytecode.
             * @param args - Constructor arguments for the contract.
             * @param maybeSalt - Optional salt for CREATE2 deployment (does not wait for deployment tx to be mined if set, does not send tx if contract already exists).
             * @returns The ETH address the contract was deployed to.
             */
            readonly type: "error";
            readonly name: "Staking__InsufficientStake";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__InvalidDeposit";
            readonly inputs: readonly [{
                readonly name: "attester";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "proposer";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__NoOneToSlash";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__NotExiting";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__NotSlasher";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__NotWithdrawer";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__NothingToExit";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__WithdrawalNotUnlockedYet";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }, {
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }];
        }, {
            readonly type: "function";
            readonly name: "VERSION";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "error";
            readonly name: "ValidatorSelection__EpochNotSetup";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "ValidatorSelection__InsufficientAttestations";
            readonly inputs: readonly [{
                readonly name: "minimumNeeded";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "provided";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "ValidatorSelection__InsufficientAttestationsProvided";
            readonly inputs: readonly [{
                readonly name: "minimumNeeded";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "provided";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "ValidatorSelection__InvalidDeposit";
            readonly inputs: readonly [{
                readonly name: "attester";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "proposer";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "ValidatorSelection__InvalidProposer";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "actual";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "function";
            readonly name: "consume";
            readonly inputs: readonly [{
                readonly name: "_message";
                readonly type: "tuple";
                readonly internalType: "struct DataStructures.L2ToL1Msg";
                readonly components: readonly [{
                    readonly name: "sender";
                    readonly type: "tuple";
                    readonly internalType: "struct DataStructures.L2Actor";
                    readonly components: readonly [{
                        readonly name: "actor";
                        readonly type: "bytes32";
                        readonly internalType: "bytes32";
                    }, {
                        readonly name: "version";
                        readonly type: "uint256";
                        readonly internalType: "uint256";
                    }];
                }, {
                    readonly name: "recipient";
                    readonly type: "tuple";
                    readonly internalType: "struct DataStructures.L1Actor";
                    readonly components: readonly [{
                        readonly name: "actor";
                        readonly type: "address";
                        readonly internalType: "address";
                    }, {
                        readonly name: "chainId";
                        readonly type: "uint256";
                        readonly internalType: "uint256";
                    }];
                }, {
                    readonly name: "content";
                    readonly type: "bytes32";
                    readonly internalType: "bytes32";
                }];
            }, {
                readonly name: "_l2BlockNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "_leafIndex";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "_path";
                readonly type: "bytes32[]";
                readonly internalType: "bytes32[]";
            }];
            readonly outputs: readonly [];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "function";
            readonly name: "getRootData";
            readonly inputs: readonly [{
                readonly name: "_l2BlockNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly outputs: readonly [{
                readonly name: "root";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "minHeight";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "hasMessageBeenConsumedAtBlockAndIndex";
            readonly inputs: readonly [{
                readonly name: "_l2BlockNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "_leafIndex";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "bool";
                readonly internalType: "bool";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "insert";
            readonly inputs: readonly [{
                readonly name: "_l2BlockNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "_root";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "_minHeight";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly outputs: readonly [];
            readonly stateMutability: "nonpayable";
        }];
        contractBytecode: `0x${string}`;
    };
    rollup: {
        contractAbi: readonly [{
            readonly type: "constructor";
            readonly inputs: readonly [{
                readonly name: "_feeAsset";
                readonly type: "address";
                readonly internalType: "contract IERC20";
            }, {
                readonly name: "_rewardDistributor";
                readonly type: "address";
                readonly internalType: "contract IRewardDistributor";
            }, {
                readonly name: "_stakingAsset";
                readonly type: "address";
                readonly internalType: "contract IERC20";
            }, {
                readonly name: "_governance";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "_genesisState";
                readonly type: "tuple";
                readonly internalType: "struct GenesisState";
                readonly components: readonly [{
                    readonly name: "vkTreeRoot";
                    readonly type: "bytes32";
                    readonly internalType: "bytes32";
                }, {
                    readonly name: "protocolContractTreeRoot";
                    readonly type: "bytes32";
                    readonly internalType: "bytes32";
                }, {
                    readonly name: "genesisArchiveRoot";
                    readonly type: "bytes32";
                    readonly internalType: "bytes32";
                }];
            }, {
                readonly name: "_config";
                readonly type: "tuple";
                readonly internalType: "struct RollupConfigInput";
                readonly components: readonly [{
                    readonly name: "aztecSlotDuration";
                    readonly type: "uint256";
                    readonly internalType: "uint256";
                }, {
                    readonly name: "aztecEpochDuration";
                    readonly type: "uint256";
                    readonly internalType: "uint256";
                }, {
                    readonly name: "targetCommitteeSize";
                    readonly type: "uint256";
                    readonly internalType: "uint256";
                }, {
                    readonly name: "aztecProofSubmissionWindow";
                    readonly type: "uint256";
                    readonly internalType: "uint256";
                }, {
                    readonly name: "minimumStake";
                    readonly type: "uint256";
                    readonly internalType: "uint256";
                }, {
                    readonly name: "slashingQuorum";
                    readonly type: "uint256";
                    readonly internalType: "uint256";
                }, {
                    readonly name: "slashingRoundSize";
                    readonly type: "uint256";
                    readonly internalType: "uint256";
                }, {
                    readonly name: "manaTarget";
                    readonly type: "uint256";
                    readonly internalType: "uint256";
                }, {
                    readonly name: "provingCostPerMana";
                    readonly type: "uint256";
                    readonly internalType: "EthValue";
                }];
            }];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "error";
            readonly name: "AddressSnapshotLib__IndexOutOfBounds";
            readonly inputs: readonly [{
                readonly name: "index";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "size";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "CheckpointUnorderedInsertion";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "CoinIssuer__InsufficientMintAvailable";
            readonly inputs: readonly [{
                readonly name: "available";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "needed";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "event";
            readonly name: "Deposit";
            readonly inputs: readonly [{
                readonly name: "attester";
                readonly type: "address";
                readonly indexed: true;
                readonly internalType: "address";
            }, {
                readonly name: "proposer";
                readonly type: "address";
                readonly indexed: true;
                readonly internalType: "address";
            }, {
                readonly name: "withdrawer";
                readonly type: "address";
                readonly indexed: true;
                readonly internalType: "address";
            }, {
                readonly name: "amount";
                readonly type: "uint256";
                readonly indexed: false;
                readonly internalType: "uint256";
            }];
            readonly anonymous: false;
        }, {
            readonly type: "error";
            readonly name: "DevNet__InvalidProposer";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "actual";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "DevNet__NoPruningAllowed";
            readonly inputs: readonly [];
        }, {
            readonly type: "event";
            readonly name: "EIP712DomainChanged";
            readonly inputs: readonly [];
            readonly anonymous: false;
        }, {
            /** The protocol contract tree root. */
            readonly type: "error";
            readonly name: "FeeJuicePortal__AlreadyInitialized";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "FeeJuicePortal__InvalidInitialization";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "FeeJuicePortal__Unauthorized";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "FeeLib__InvalidFeeAssetPriceModifier";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__CanOnlyExecuteProposalInPast";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__FailedToPropose";
            readonly inputs: readonly [{
                readonly name: "proposal";
                readonly type: "address";
                readonly internalType: "contract IPayload";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__InstanceHaveNoCode";
            readonly inputs: readonly [{
                readonly name: "instance";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__InsufficientVotes";
            readonly inputs: readonly [{
                readonly name: "votesCast";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "votesNeeded";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__InvalidNAndMValues";
            readonly inputs: readonly [{
                readonly name: "n";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "m";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__NCannotBeLargerTHanM";
            readonly inputs: readonly [{
                readonly name: "n";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "m";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__OnlyProposerCanVote";
            readonly inputs: readonly [{
                readonly name: "caller";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "proposer";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__ProposalAlreadyExecuted";
            readonly inputs: readonly [{
                readonly name: "roundNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__ProposalCannotBeAddressZero";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__ProposalHaveNoCode";
            readonly inputs: readonly [{
                readonly name: "proposal";
                readonly type: "address";
                readonly internalType: "contract IPayload";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__ProposalTooOld";
            readonly inputs: readonly [{
                readonly name: "roundNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "currentRoundNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__VoteAlreadyCastForSlot";
            readonly inputs: readonly [{
                readonly name: "slot";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__CallFailed";
            readonly inputs: readonly [{
                readonly name: "target";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__CallerNotGovernanceProposer";
            readonly inputs: readonly [{
                readonly name: "caller";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "governanceProposer";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__CallerNotSelf";
            readonly inputs: readonly [{
                readonly name: "caller";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "self";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__CannotCallAsset";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__DifferentialTooBig";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__DifferentialTooSmall";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__InvalidMinimumVotes";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__LockAmountTooSmall";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__QuorumTooBig";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__QuorumTooSmall";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__TimeTooBig";
            readonly inputs: readonly [{
                readonly name: "name";
                readonly type: "string";
                readonly internalType: "string";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__TimeTooSmall";
            readonly inputs: readonly [{
                readonly name: "name";
                readonly type: "string";
                readonly internalType: "string";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__InsufficientPower";
            readonly inputs: readonly [{
                readonly name: "voter";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "have";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "required";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__InvalidConfiguration";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__NoCheckpointsFound";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalAlreadyDropped";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalCannotBeDropped";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalDoesNotExists";
            readonly inputs: readonly [{
                readonly name: "proposalId";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalLib__MoreVoteThanExistNeeded";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalLib__MoreYeaVoteThanExistNeeded";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalLib__ZeroMinimum";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalLib__ZeroVotesNeeded";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalLib__ZeroYeaVotesNeeded";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalNotActive";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalNotExecutable";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__UserLib__NotInPast";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__WithdrawalAlreadyclaimed";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__WithdrawalNotUnlockedYet";
            readonly inputs: readonly [{
                readonly name: "currentTime";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }, {
                readonly name: "unlocksAt";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }];
        }, {
            readonly type: "error";
            readonly name: "HeaderLib__InvalidHeaderSize";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "HeaderLib__InvalidSlotNumber";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }];
        }, {
            readonly type: "error";
            readonly name: "Inbox__ActorTooLarge";
            readonly inputs: readonly [{
                readonly name: "actor";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }]; /**
             * Deploys a new rollup contract, funds and initializes the fee juice portal, and initializes the validator set.
             */
        }, {
            readonly type: "error";
            readonly name: "Inbox__ContentTooLarge";
            readonly inputs: readonly [{
                readonly name: "content";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Inbox__MustBuildBeforeConsume";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Inbox__SecretHashTooLarge";
            readonly inputs: readonly [{
                readonly name: "secretHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Inbox__Unauthorized";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Inbox__VersionMismatch";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "InvalidShortString";
            readonly inputs: readonly [];
        }, {
            readonly type: "function";
            readonly name: "L1_BLOCK_AT_GENESIS";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "event";
            readonly name: "L2BlockProposed";
            readonly inputs: readonly [{
                readonly name: "blockNumber";
                readonly type: "uint256";
                readonly indexed: true;
                readonly internalType: "uint256";
            }, {
                readonly name: "archive";
                readonly type: "bytes32";
                readonly indexed: true;
                readonly internalType: "bytes32";
            }, {
                readonly name: "versionedBlobHashes";
                readonly type: "bytes32[]";
                readonly indexed: false;
                readonly internalType: "bytes32[]";
            }];
            readonly anonymous: false;
        }, {
            readonly type: "event";
            readonly name: "L2ProofVerified";
            readonly inputs: readonly [{
                readonly name: "blockNumber";
                readonly type: "uint256";
                readonly indexed: true;
                readonly internalType: "uint256";
            }, {
                readonly name: "proverId";
                readonly type: "address";
                readonly indexed: true;
                readonly internalType: "address";
            }];
            readonly anonymous: false;
        }, {
            readonly type: "event";
            readonly name: "ManaTargetUpdated";
            readonly inputs: readonly [{
                readonly name: "manaTarget";
                readonly type: "uint256";
                readonly indexed: true;
                readonly internalType: "uint256";
            }];
            readonly anonymous: false;
        }, {
            readonly type: "error";
            readonly name: "MerkleLib__InvalidRoot";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "leaf";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "leafIndex";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__AlreadyNullified";
            readonly inputs: readonly [{
                readonly name: "l2BlockNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "leafIndex";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__BlockNotProven";
            readonly inputs: readonly [{
                readonly name: "l2BlockNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__IncompatibleEntryArguments";
            readonly inputs: readonly [{
                readonly name: "messageHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "storedFee";
                readonly type: "uint64";
                readonly internalType: "uint64";
            }, {
                readonly name: "feePassed";
                readonly type: "uint64";
                readonly internalType: "uint64";
            }, {
                readonly name: "storedVersion";
                readonly type: "uint32";
                readonly internalType: "uint32";
            }, {
                readonly name: "versionPassed";
                readonly type: "uint32";
                readonly internalType: "uint32";
            }, {
                readonly name: "storedDeadline";
                readonly type: "uint32";
                readonly internalType: "uint32";
            }, {
                readonly name: "deadlinePassed";
                readonly type: "uint32";
                readonly internalType: "uint32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__InvalidChainId";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Outbox__InvalidPathLength";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__InvalidRecipient";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "actual";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__NothingToConsume";
            readonly inputs: readonly [{
                readonly name: "messageHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__NothingToConsumeAtBlock";
            readonly inputs: readonly [{
                readonly name: "l2BlockNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__RootAlreadySetAtBlock";
            readonly inputs: readonly [{
                readonly name: "l2BlockNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__Unauthorized";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Outbox__VersionMismatch";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "OwnableInvalidOwner";
            readonly inputs: readonly [{
                readonly name: "owner";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "OwnableUnauthorizedAccount";
            readonly inputs: readonly [{
                readonly name: "account";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "event";
            readonly name: "OwnershipTransferred";
            readonly inputs: readonly [{
                readonly name: "previousOwner";
                readonly type: "address";
                readonly indexed: true;
                readonly internalType: "address";
            }, {
                readonly name: "newOwner";
                readonly type: "address";
                readonly indexed: true;
                readonly internalType: "address";
            }];
            readonly anonymous: false;
        }, {
            readonly type: "error";
            readonly name: "ProofCommitmentEscrow__InsufficientBalance";
            readonly inputs: readonly [{
                readonly name: "balance";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "requested";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "ProofCommitmentEscrow__NotOwner";
            readonly inputs: readonly [{
                readonly name: "caller";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "ProofCommitmentEscrow__WithdrawRequestNotReady";
            readonly inputs: readonly [{
                readonly name: "current";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "readyAt";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }];
        }, {
            readonly type: "event";
            readonly name: "PrunedPending";
            readonly inputs: readonly [{
                readonly name: "provenBlockNumber";
                readonly type: "uint256";
                readonly indexed: false;
                readonly internalType: "uint256";
            }, {
                readonly name: "pendingBlockNumber";
                readonly type: "uint256";
                readonly indexed: false;
                readonly internalType: "uint256";
            }];
            readonly anonymous: false;
        }, {
            readonly type: "error";
            readonly name: "Registry__NoRollupsRegistered";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Registry__RollupAlreadyRegistered";
            readonly inputs: readonly [{
                readonly name: "rollup";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Registry__RollupNotRegistered";
            readonly inputs: readonly [{
                readonly name: "version";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "RewardDistributor__InvalidCaller";
            readonly inputs: readonly [{
                readonly name: "caller";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "canonical";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__AlreadyClaimed";
            readonly inputs: readonly [{
                readonly name: "prover";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "epoch";
                readonly type: "uint256";
                readonly internalType: "Epoch";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InsufficientBondAmount";
            readonly inputs: readonly [{
                readonly name: "minimum";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "provided";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InsufficientFundsInEscrow";
            readonly inputs: readonly [{
                readonly name: "required";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "available";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidArchive";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidBasisPointFee";
            readonly inputs: readonly [{
                readonly name: "basisPointFee";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidBlobHash";
            readonly inputs: readonly [{
                readonly name: "blobHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidBlobProof";
            readonly inputs: readonly [{
                readonly name: "blobHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidBlobPublicInputsHash";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidBlockNumber";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidChainId";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidInHash";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidManaBaseFee";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidPreviousArchive";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidProof";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidProposedArchive";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidTimestamp";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidVersion";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__ManaLimitExceeded";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__NoEpochToProve";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__NonSequentialProving";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__NonZeroDaFee";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__NotPastDeadline";
            readonly inputs: readonly [{
                readonly name: "deadline";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }, {
                readonly name: "currentSlot";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__NothingToPrune";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__PastDeadline";
            readonly inputs: readonly [{
                readonly name: "deadline";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }, {
                readonly name: "currentSlot";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__ProverHaveAlreadySubmitted";
            readonly inputs: readonly [{
                readonly name: "prover";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "epoch";
                readonly type: "uint256";
                readonly internalType: "Epoch";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__SlotAlreadyInChain";
            readonly inputs: readonly [{
                readonly name: "lastSlot";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }, {
                readonly name: "proposedSlot";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__StartAndEndNotSameEpoch";
            readonly inputs: readonly [{
                readonly name: "start";
                readonly type: "uint256";
                readonly internalType: "Epoch";
            }, {
                readonly name: "end";
                readonly type: "uint256";
                readonly internalType: "Epoch";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__StartIsNotBuildingOnProven";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__StartIsNotFirstBlockOfEpoch";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__TimestampInFuture";
            readonly inputs: readonly [{
                readonly name: "max";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__TimestampTooOld";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__TryingToProveNonExistingBlock";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__UnavailableTxs";
            readonly inputs: readonly [{
                readonly name: "txsHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "SafeCastOverflowedIntToUint";
            readonly inputs: readonly [{
                readonly name: "value";
                readonly type: "int256";
                readonly internalType: "int256";
            }];
        }, {
            readonly type: "error";
            readonly name: "SafeCastOverflowedUintDowncast";
            readonly inputs: readonly [{
                readonly name: "bits";
                readonly type: "uint8";
                readonly internalType: "uint8";
            }, {
                readonly name: "value";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "SampleLib__IndexOutOfBounds";
            readonly inputs: readonly [{
                readonly name: "requested";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "bound";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "SampleLib__SampleLargerThanIndex";
            readonly inputs: readonly [{
                readonly name: "sample";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "index";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "SignatureLib__CannotVerifyEmpty";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "SignatureLib__InvalidSignature";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "recovered";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "event";
            readonly name: "Slashed";
            readonly inputs: readonly [{
                readonly name: "attester";
                readonly type: "address";
                readonly indexed: true;
                readonly internalType: "address";
            }, {
                readonly name: "amount";
                readonly type: "uint256";
                readonly indexed: false;
                readonly internalType: "uint256";
            }];
            readonly anonymous: false;
        }, {
            readonly type: "error";
            readonly name: "Staking__AlreadyActive";
            readonly inputs: readonly [{
                readonly name: "attester";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__AlreadyRegistered";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__CannotSlashExitedStake";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__FailedToRemove";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__InsufficientStake";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__InvalidDeposit";
            readonly inputs: readonly [{
                readonly name: "attester";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "proposer";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__NoOneToSlash";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__NotExiting";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__NotSlasher";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__NotWithdrawer";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__NothingToExit";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__WithdrawalNotUnlockedYet";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }, {
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }];
        }, {
            readonly type: "error";
            readonly name: "StringTooLong";
            readonly inputs: readonly [{
                readonly name: "str";
                readonly type: "string";
                readonly internalType: "string";
            }];
        }, {
            readonly type: "error";
            readonly name: "ValidatorSelection__EpochNotSetup";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "ValidatorSelection__InsufficientAttestations";
            readonly inputs: readonly [{
                readonly name: "minimumNeeded";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "provided";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "ValidatorSelection__InsufficientAttestationsProvided";
            readonly inputs: readonly [{
                readonly name: "minimumNeeded";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "provided";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "ValidatorSelection__InvalidDeposit";
            readonly inputs: readonly [{
                readonly name: "attester";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "proposer";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "ValidatorSelection__InvalidProposer";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "actual";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "event";
            readonly name: "WithdrawFinalised";
            readonly inputs: readonly [{
                readonly name: "attester";
                readonly type: "address";
                readonly indexed: true;
                readonly internalType: "address";
            }, {
                readonly name: "recipient";
                readonly type: "address";
                readonly indexed: true;
                readonly internalType: "address";
            }, {
                readonly name: "amount";
                readonly type: "uint256";
                readonly indexed: false;
                readonly internalType: "uint256";
            }];
            readonly anonymous: false;
        }, {
            readonly type: "event";
            readonly name: "WithdrawInitiated";
            readonly inputs: readonly [{
                readonly name: "attester";
                readonly type: "address";
                readonly indexed: true;
                readonly internalType: "address";
            }, {
                readonly name: "recipient";
                readonly type: "address";
                readonly indexed: true;
                readonly internalType: "address";
            }, {
                readonly name: "amount";
                readonly type: "uint256";
                readonly indexed: false;
                readonly internalType: "uint256";
            }];
            readonly anonymous: false;
        }, {
            readonly type: "function";
            readonly name: "archive";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "archiveAt";
            readonly inputs: readonly [{
                readonly name: "_blockNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "canProposeAtTime";
            readonly inputs: readonly [{
                readonly name: "_ts";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }, {
                readonly name: "_archive";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }, {
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "function";
            readonly name: "canPruneAtTime";
            readonly inputs: readonly [{
                readonly name: "_ts";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "bool";
                readonly internalType: "bool";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "cheat__InitialiseValidatorSet";
            readonly inputs: readonly [{
                readonly name: "_args";
                readonly type: "tuple[]";
                readonly internalType: "struct CheatDepositArgs[]";
                readonly components: readonly [{
                    readonly name: "attester";
                    readonly type: "address";
                    readonly internalType: "address";
                }, {
                    readonly name: "proposer";
                    readonly type: "address";
                    readonly internalType: "address";
                }, {
                    readonly name: "withdrawer";
                    readonly type: "address";
                    readonly internalType: "address";
                }, {
                    readonly name: "amount";
                    readonly type: "uint256";
                    readonly internalType: "uint256";
                }];
            }];
            readonly outputs: readonly [];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "function";
            readonly name: "checkBlob";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "bool";
                readonly internalType: "bool";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "claimProverRewards";
            readonly inputs: readonly [{
                readonly name: "_recipient";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "_epochs";
                readonly type: "uint256[]";
                readonly internalType: "Epoch[]";
            }];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "function";
            readonly name: "claimSequencerRewards";
            readonly inputs: readonly [{
                readonly name: "_recipient";
                readonly type: "address";
                readonly internalType: "address";
            }];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "function";
            readonly name: "deposit";
            readonly inputs: readonly [{
                readonly name: "_attester";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "_proposer";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "_withdrawer";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "_amount";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly outputs: readonly [];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "function";
            readonly name: "eip712Domain";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "fields";
                readonly type: "bytes1";
                readonly internalType: "bytes1";
            }, {
                readonly name: "name";
                readonly type: "string";
                readonly internalType: "string";
            }, {
                readonly name: "version";
                readonly type: "string";
                readonly internalType: "string";
            }, {
                readonly name: "chainId";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "verifyingContract";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "salt";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "extensions";
                readonly type: "uint256[]";
                readonly internalType: "uint256[]";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "finaliseWithdraw";
            readonly inputs: readonly [{
                readonly name: "_attester";
                readonly type: "address";
                readonly internalType: "address";
            }];
            readonly outputs: readonly [];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "function";
            readonly name: "getActiveAttesterCount";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "getAttesterAtIndex";
            readonly inputs: readonly [{
                readonly name: "_index";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "getAttesters";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "address[]";
                readonly internalType: "address[]";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "getBlobPublicInputsHash";
            readonly inputs: readonly [{
                readonly name: "_blockNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "getBlock";
            readonly inputs: readonly [{
                readonly name: "_blockNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "tuple";
                readonly internalType: "struct BlockLog";
                readonly components: readonly [{
                    readonly name: "archive";
                    readonly type: "bytes32";
                    readonly internalType: "bytes32";
                }, {
                    readonly name: "slotNumber";
                    readonly type: "uint256";
                    readonly internalType: "Slot";
                }];
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "getBurnAddress";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
            readonly stateMutability: "pure";
        }, {
            readonly type: "function";
            readonly name: "getCollectiveProverRewardsForEpoch";
            readonly inputs: readonly [{
                readonly name: "_epoch";
                readonly type: "uint256";
                readonly internalType: "Epoch";
            }];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "getCommitteeAt";
            readonly inputs: readonly [{
                readonly name: "_ts";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "address[]";
                readonly internalType: "address[]";
            }];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "function";
            readonly name: "getCurrentEpoch";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "Epoch";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "getCurrentEpochCommittee";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "address[]";
                readonly internalType: "address[]";
            }];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "function";
            readonly name: "getCurrentProposer";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "function";
            readonly name: "getCurrentSampleSeed";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "getCurrentSlot";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "getEpochAt";
            readonly inputs: readonly [{
                readonly name: "_ts";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "Epoch";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "getEpochAtSlot";
            readonly inputs: readonly [{
                readonly name: "_slotNumber";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "Epoch";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "getEpochCommittee";
            readonly inputs: readonly [{
                readonly name: "_epoch";
                readonly type: "uint256";
                readonly internalType: "Epoch";
            }];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "address[]";
                readonly internalType: "address[]";
            }];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "function";
            readonly name: "getEpochDuration";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "getEpochForBlock";
            readonly inputs: readonly [{
                readonly name: "_blockNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "Epoch";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "getEpochProofPublicInputs";
            readonly inputs: readonly [{
                readonly name: "_start";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "_end";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "_args";
                readonly type: "tuple";
                readonly internalType: "struct PublicInputArgs";
                readonly components: readonly [{
                    readonly name: "previousArchive";
                    readonly type: "bytes32";
                    readonly internalType: "bytes32";
                }, {
                    readonly name: "endArchive";
                    readonly type: "bytes32";
                    readonly internalType: "bytes32";
                }, {
                    readonly name: "endTimestamp";
                    readonly type: "uint256";
                    readonly internalType: "Timestamp";
                }, {
                    readonly name: "outHash";
                    readonly type: "bytes32";
                    readonly internalType: "bytes32";
                }, {
                    readonly name: "proverId";
                    readonly type: "address";
                    readonly internalType: "address";
                }];
            }, {
                readonly name: "_fees";
                readonly type: "bytes32[]";
                readonly internalType: "bytes32[]";
            }, {
                readonly name: "_blobPublicInputs";
                readonly type: "bytes";
                readonly internalType: "bytes";
            }];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "bytes32[]";
                readonly internalType: "bytes32[]";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "getExit";
            readonly inputs: readonly [{
                readonly name: "_attester";
                readonly type: "address";
                readonly internalType: "address";
            }];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "tuple";
                readonly internalType: "struct Exit";
                readonly components: readonly [{
                    readonly name: "exitableAt";
                    readonly type: "uint256";
                    readonly internalType: "Timestamp";
                }, {
                    readonly name: "recipient";
                    readonly type: "address";
                    readonly internalType: "address";
                }];
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "getExitDelay";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "getFeeAsset";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "contract IERC20";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "getFeeAssetPerEth";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "FeeAssetPerEthE9";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "getFeeAssetPortal";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "contract IFeeJuicePortal";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "getFeeHeader";
            readonly inputs: readonly [{
                readonly name: "_blockNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "tuple";
                readonly internalType: "struct FeeHeader";
                readonly components: readonly [{
                    readonly name: "excessMana";
                    readonly type: "uint256";
                    readonly internalType: "uint256";
                }, {
                    readonly name: "manaUsed";
                    readonly type: "uint256";
                    readonly internalType: "uint256";
                }, {
                    readonly name: "feeAssetPriceNumerator";
                    readonly type: "uint256";
                    readonly internalType: "uint256";
                }, {
                    readonly name: "congestionCost";
                    readonly type: "uint256";
                    readonly internalType: "uint256";
                }, {
                    readonly name: "provingCost";
                    readonly type: "uint256";
                    readonly internalType: "uint256";
                }];
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "getGenesisTime";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "getHasSubmitted";
            readonly inputs: readonly [{
                readonly name: "_epoch";
                readonly type: "uint256";
                readonly internalType: "Epoch";
            }, {
                readonly name: "_length";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "_prover";
                readonly type: "address";
                readonly internalType: "address";
            }];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "bool";
                readonly internalType: "bool";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "getInbox";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "contract IInbox";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "getInfo";
            readonly inputs: readonly [{
                readonly name: "_attester";
                readonly type: "address";
                readonly internalType: "address";
            }];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "tuple";
                readonly internalType: "struct ValidatorInfo";
                readonly components: readonly [{
                    readonly name: "stake";
                    readonly type: "uint256";
                    readonly internalType: "uint256";
                }, {
                    readonly name: "withdrawer";
                    readonly type: "address";
                    readonly internalType: "address";
                }, {
                    readonly name: "proposer";
                    readonly type: "address";
                    readonly internalType: "address";
                }, {
                    readonly name: "status";
                    readonly type: "uint8";
                    readonly internalType: "enum Status";
                }];
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "getL1FeesAt";
            readonly inputs: readonly [{
                readonly name: "_timestamp";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "tuple";
                readonly internalType: "struct L1FeeData";
                readonly components: readonly [{
                    readonly name: "baseFee";
                    readonly type: "uint256";
                    readonly internalType: "uint256";
                }, {
                    readonly name: "blobFee";
                    readonly type: "uint256";
                    readonly internalType: "uint256";
                }];
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "getManaBaseFeeAt";
            readonly inputs: readonly [{
                readonly name: "_timestamp";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }, {
                readonly name: "_inFeeAsset";
                readonly type: "bool";
                readonly internalType: "bool";
            }];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "getManaBaseFeeComponentsAt";
            readonly inputs: readonly [{
                readonly name: "_timestamp";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }, {
                readonly name: "_inFeeAsset";
                readonly type: "bool";
                readonly internalType: "bool";
            }];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "tuple";
                readonly internalType: "struct ManaBaseFeeComponents";
                readonly components: readonly [{
                    readonly name: "congestionCost";
                    readonly type: "uint256";
                    readonly internalType: "uint256";
                }, {
                    readonly name: "congestionMultiplier";
                    readonly type: "uint256";
                    readonly internalType: "uint256";
                }, {
                    readonly name: "dataCost";
                    readonly type: "uint256";
                    readonly internalType: "uint256";
                }, {
                    readonly name: "gasCost";
                    readonly type: "uint256";
                    readonly internalType: "uint256";
                }, {
                    readonly name: "provingCost";
                    readonly type: "uint256";
                    readonly internalType: "uint256";
                }];
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "getManaLimit";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "getManaTarget";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "getMinimumStake";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "getOperatorAtIndex";
            readonly inputs: readonly [{
                readonly name: "_index";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "tuple";
                readonly internalType: "struct OperatorInfo";
                readonly components: readonly [{
                    readonly name: "proposer";
                    readonly type: "address";
                    readonly internalType: "address";
                }, {
                    readonly name: "attester";
                    readonly type: "address";
                    readonly internalType: "address";
                }];
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "getOutbox";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "contract IOutbox";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "getPendingBlockNumber";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "getProofSubmissionWindow";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "getProposerAt";
            readonly inputs: readonly [{
                readonly name: "_ts";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "function";
            readonly name: "getProposerAtIndex";
            readonly inputs: readonly [{
                readonly name: "_index";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "getProposerForAttester";
            readonly inputs: readonly [{
                readonly name: "_attester";
                readonly type: "address";
                readonly internalType: "address";
            }];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "getProvenBlockNumber";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "getProvingCostPerManaInEth";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "EthValue";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "getProvingCostPerManaInFeeAsset";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "FeeAssetValue";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "getRewardDistributor";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "contract IRewardDistributor";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "getSampleSeedAt";
            readonly inputs: readonly [{
                readonly name: "_ts";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "getSequencerRewards";
            readonly inputs: readonly [{
                readonly name: "_sequencer";
                readonly type: "address";
                readonly internalType: "address";
            }];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "getSlasher";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "getSlotAt";
            readonly inputs: readonly [{
                readonly name: "_ts";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "getSlotDuration";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "getSpecificProverRewardsForEpoch";
            readonly inputs: readonly [{
                readonly name: "_epoch";
                readonly type: "uint256";
                readonly internalType: "Epoch";
            }, {
                readonly name: "_prover";
                readonly type: "address";
                readonly internalType: "address";
            }];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "getStakingAsset";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "contract IERC20";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "getTargetCommitteeSize";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "getTimestampForSlot";
            readonly inputs: readonly [{
                readonly name: "_slotNumber";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "getTips";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "tuple";
                readonly internalType: "struct ChainTips";
                readonly components: readonly [{
                    readonly name: "pendingBlockNumber";
                    readonly type: "uint256";
                    readonly internalType: "uint256";
                }, {
                    readonly name: "provenBlockNumber";
                    readonly type: "uint256";
                    readonly internalType: "uint256";
                }];
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "getVersion";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "initiateWithdraw";
            readonly inputs: readonly [{
                readonly name: "_attester";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "_recipient";
                readonly type: "address";
                readonly internalType: "address";
            }];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "bool";
                readonly internalType: "bool";
            }];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "function";
            readonly name: "owner";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "propose";
            readonly inputs: readonly [{
                readonly name: "_args";
                readonly type: "tuple";
                readonly internalType: "struct ProposeArgs";
                readonly components: readonly [{
                    readonly name: "archive";
                    readonly type: "bytes32";
                    readonly internalType: "bytes32";
                }, {
                    readonly name: "oracleInput";
                    readonly type: "tuple";
                    readonly internalType: "struct OracleInput";
                    readonly components: readonly [{
                        readonly name: "feeAssetPriceModifier";
                        readonly type: "int256";
                        readonly internalType: "int256";
                    }];
                }, {
                    readonly name: "header";
                    readonly type: "bytes";
                    readonly internalType: "bytes";
                }, {
                    readonly name: "txHashes";
                    readonly type: "bytes32[]";
                    readonly internalType: "bytes32[]";
                }];
            }, {
                readonly name: "_signatures";
                readonly type: "tuple[]";
                readonly internalType: "struct Signature[]";
                readonly components: readonly [{
                    readonly name: "isEmpty";
                    readonly type: "bool";
                    readonly internalType: "bool";
                }, {
                    readonly name: "v";
                    readonly type: "uint8";
                    readonly internalType: "uint8";
                }, {
                    readonly name: "r";
                    readonly type: "bytes32";
                    readonly internalType: "bytes32";
                }, {
                    readonly name: "s";
                    readonly type: "bytes32";
                    readonly internalType: "bytes32";
                }];
            }, {
                readonly name: "_blobInput";
                readonly type: "bytes";
                readonly internalType: "bytes";
            }];
            readonly outputs: readonly [];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "function";
            readonly name: "prune";
            readonly inputs: readonly [];
            readonly outputs: readonly [];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "function";
            readonly name: "renounceOwnership";
            readonly inputs: readonly [];
            readonly outputs: readonly [];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "function";
            readonly name: "setEpochVerifier";
            readonly inputs: readonly [{
                readonly name: "_verifier";
                readonly type: "address";
                readonly internalType: "address";
            }];
            readonly outputs: readonly [];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "function";
            readonly name: "setProtocolContractTreeRoot";
            readonly inputs: readonly [{
                readonly name: "_protocolContractTreeRoot";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
            readonly outputs: readonly [];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "function";
            readonly name: "setProvingCostPerMana";
            readonly inputs: readonly [{
                readonly name: "_provingCostPerMana";
                readonly type: "uint256";
                readonly internalType: "EthValue";
            }];
            readonly outputs: readonly [];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "function";
            readonly name: "setVkTreeRoot";
            readonly inputs: readonly [{
                readonly name: "_vkTreeRoot";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
            readonly outputs: readonly [];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "function";
            readonly name: "setupEpoch";
            readonly inputs: readonly [];
            readonly outputs: readonly [];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "function";
            readonly name: "slash";
            readonly inputs: readonly [{
                readonly name: "_attester";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "_amount";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly outputs: readonly [];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "function";
            readonly name: "status";
            readonly inputs: readonly [{
                readonly name: "_myHeaderBlockNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly outputs: readonly [{
                readonly name: "provenBlockNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "provenArchive";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "pendingBlockNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "pendingArchive";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "archiveOfMyBlock";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "provenEpochNumber";
                readonly type: "uint256";
                readonly internalType: "Epoch";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "submitEpochRootProof";
            readonly inputs: readonly [{
                readonly name: "_args";
                readonly type: "tuple";
                readonly internalType: "struct SubmitEpochRootProofArgs";
                readonly components: readonly [{
                    readonly name: "start";
                    readonly type: "uint256";
                    readonly internalType: "uint256";
                }, {
                    readonly name: "end";
                    readonly type: "uint256";
                    readonly internalType: "uint256";
                }, {
                    readonly name: "args";
                    readonly type: "tuple";
                    readonly internalType: "struct PublicInputArgs";
                    readonly components: readonly [{
                        readonly name: "previousArchive";
                        readonly type: "bytes32";
                        readonly internalType: "bytes32";
                    }, {
                        readonly name: "endArchive";
                        readonly type: "bytes32";
                        readonly internalType: "bytes32";
                    }, {
                        readonly name: "endTimestamp";
                        readonly type: "uint256";
                        readonly internalType: "Timestamp";
                    }, {
                        readonly name: "outHash";
                        readonly type: "bytes32";
                        readonly internalType: "bytes32";
                    }, {
                        readonly name: "proverId";
                        readonly type: "address";
                        readonly internalType: "address";
                    }];
                }, {
                    readonly name: "fees";
                    readonly type: "bytes32[]";
                    readonly internalType: "bytes32[]";
                }, {
                    readonly name: "blobPublicInputs";
                    readonly type: "bytes";
                    readonly internalType: "bytes";
                }, {
                    readonly name: "proof";
                    readonly type: "bytes";
                    readonly internalType: "bytes";
                }];
            }];
            readonly outputs: readonly [];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "function";
            readonly name: "transferOwnership";
            readonly inputs: readonly [{
                readonly name: "newOwner";
                readonly type: "address";
                readonly internalType: "address";
            }];
            readonly outputs: readonly [];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "function";
            readonly name: "updateL1GasFeeOracle";
            readonly inputs: readonly [];
            readonly outputs: readonly [];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "function";
            readonly name: "updateManaTarget";
            readonly inputs: readonly [{
                readonly name: "_manaTarget";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly outputs: readonly [];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "function";
            readonly name: "validateBlobs";
            readonly inputs: readonly [{
                readonly name: "_blobsInput";
                readonly type: "bytes";
                readonly internalType: "bytes";
            }];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "bytes32[]";
                readonly internalType: "bytes32[]";
            }, {
                readonly name: "";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "validateHeader";
            readonly inputs: readonly [{
                readonly name: "_header";
                readonly type: "bytes";
                readonly internalType: "bytes";
            }, {
                readonly name: "_signatures";
                readonly type: "tuple[]";
                readonly internalType: "struct Signature[]";
                readonly components: readonly [{
                    readonly name: "isEmpty";
                    readonly type: "bool";
                    readonly internalType: "bool";
                }, {
                    readonly name: "v";
                    readonly type: "uint8";
                    readonly internalType: "uint8";
                }, {
                    readonly name: "r";
                    readonly type: "bytes32";
                    readonly internalType: "bytes32";
                }, {
                    readonly name: "s";
                    readonly type: "bytes32";
                    readonly internalType: "bytes32";
                }];
            }, {
                readonly name: "_digest";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "_currentTime";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }, {
                readonly name: "_blobsHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "_flags";
                readonly type: "tuple";
                readonly internalType: "struct BlockHeaderValidationFlags";
                readonly components: readonly [{
                    readonly name: "ignoreDA";
                    readonly type: "bool";
                    readonly internalType: "bool";
                }, {
                    readonly name: "ignoreSignatures";
                    readonly type: "bool";
                    readonly internalType: "bool";
                }];
            }];
            readonly outputs: readonly [];
            readonly stateMutability: "nonpayable";
        }];
        contractBytecode: `0x${string}`;
        libraries: {
            linkReferences: {
                readonly "src/core/libraries/rollup/ExtRollupLib.sol": {
                    readonly ExtRollupLib: readonly [{
                        readonly start: 510;
                        readonly length: 20;
                    }, {
                        readonly start: 8459;
                        readonly length: 20;
                    }, {
                        readonly start: 9557;
                        readonly length: 20;
                    }, {
                        readonly start: 9852;
                        readonly length: 20;
                    }, {
                        readonly start: 10289;
                        readonly length: 20;
                    }, {
                        readonly start: 10554;
                        readonly length: 20;
                    }];
                };
            };
            libraryCode: {
                ValidatorSelectionLib: {
                    contractAbi: readonly [{
                        readonly type: "error";
                        readonly name: "AddressSnapshotLib__IndexOutOfBounds";
                        readonly inputs: readonly [{
                            readonly name: "index";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }, {
                            readonly name: "size";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "CoinIssuer__InsufficientMintAvailable";
                        readonly inputs: readonly [{
                            readonly name: "available";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }, {
                            readonly name: "needed";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "DevNet__InvalidProposer";
                        readonly inputs: readonly [{
                            readonly name: "expected";
                            readonly type: "address";
                            readonly internalType: "address";
                        }, {
                            readonly name: "actual";
                            readonly type: "address";
                            readonly internalType: "address";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "DevNet__NoPruningAllowed";
                        readonly inputs: readonly [];
                    }, {
                        readonly type: "error";
                        readonly name: "FeeJuicePortal__AlreadyInitialized";
                        readonly inputs: readonly [];
                    }, {
                        readonly type: "error";
                        readonly name: "FeeJuicePortal__InvalidInitialization";
                        readonly inputs: readonly [];
                    }, {
                        readonly type: "error";
                        readonly name: "FeeJuicePortal__Unauthorized";
                        readonly inputs: readonly [];
                    }, {
                        readonly type: "error";
                        readonly name: "FeeLib__InvalidFeeAssetPriceModifier";
                        readonly inputs: readonly [];
                    }, {
                        readonly type: "error";
                        readonly name: "GovernanceProposer__CanOnlyExecuteProposalInPast";
                        readonly inputs: readonly [];
                    }, {
                        readonly type: "error";
                        readonly name: "GovernanceProposer__FailedToPropose";
                        readonly inputs: readonly [{
                            readonly name: "proposal";
                            readonly type: "address";
                            readonly internalType: "contract IPayload";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "GovernanceProposer__InstanceHaveNoCode";
                        readonly inputs: readonly [{
                            readonly name: "instance";
                            readonly type: "address";
                            readonly internalType: "address";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "GovernanceProposer__InsufficientVotes";
                        readonly inputs: readonly [{
                            readonly name: "votesCast";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }, {
                            readonly name: "votesNeeded";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "GovernanceProposer__InvalidNAndMValues";
                        readonly inputs: readonly [{
                            readonly name: "n";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }, {
                            readonly name: "m";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "GovernanceProposer__NCannotBeLargerTHanM";
                        readonly inputs: readonly [{
                            readonly name: "n";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }, {
                            readonly name: "m";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "GovernanceProposer__OnlyProposerCanVote";
                        readonly inputs: readonly [{
                            readonly name: "caller";
                            readonly type: "address";
                            readonly internalType: "address";
                        }, {
                            readonly name: "proposer";
                            readonly type: "address";
                            readonly internalType: "address";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "GovernanceProposer__ProposalAlreadyExecuted";
                        readonly inputs: readonly [{
                            readonly name: "roundNumber";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "GovernanceProposer__ProposalCannotBeAddressZero";
                        readonly inputs: readonly [];
                    }, {
                        readonly type: "error";
                        readonly name: "GovernanceProposer__ProposalHaveNoCode";
                        readonly inputs: readonly [{
                            readonly name: "proposal";
                            readonly type: "address";
                            readonly internalType: "contract IPayload";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "GovernanceProposer__ProposalTooOld";
                        readonly inputs: readonly [{
                            readonly name: "roundNumber";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }, {
                            readonly name: "currentRoundNumber";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "GovernanceProposer__VoteAlreadyCastForSlot";
                        readonly inputs: readonly [{
                            readonly name: "slot";
                            readonly type: "uint256";
                            readonly internalType: "Slot";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Governance__CallFailed";
                        readonly inputs: readonly [{
                            readonly name: "target";
                            readonly type: "address";
                            readonly internalType: "address";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Governance__CallerNotGovernanceProposer";
                        readonly inputs: readonly [{
                            readonly name: "caller";
                            readonly type: "address";
                            readonly internalType: "address";
                        }, {
                            readonly name: "governanceProposer";
                            readonly type: "address";
                            readonly internalType: "address";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Governance__CallerNotSelf";
                        readonly inputs: readonly [{
                            readonly name: "caller";
                            readonly type: "address";
                            readonly internalType: "address";
                        }, {
                            readonly name: "self";
                            readonly type: "address";
                            readonly internalType: "address";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Governance__CannotCallAsset";
                        readonly inputs: readonly [];
                    }, {
                        readonly type: "error";
                        readonly name: "Governance__ConfigurationLib__DifferentialTooBig";
                        readonly inputs: readonly [];
                    }, {
                        readonly type: "error";
                        readonly name: "Governance__ConfigurationLib__DifferentialTooSmall";
                        readonly inputs: readonly [];
                    }, {
                        readonly type: "error";
                        readonly name: "Governance__ConfigurationLib__InvalidMinimumVotes";
                        readonly inputs: readonly [];
                    }, {
                        readonly type: "error";
                        readonly name: "Governance__ConfigurationLib__LockAmountTooSmall";
                        readonly inputs: readonly [];
                    }, {
                        readonly type: "error";
                        readonly name: "Governance__ConfigurationLib__QuorumTooBig";
                        readonly inputs: readonly [];
                    }, {
                        readonly type: "error";
                        readonly name: "Governance__ConfigurationLib__QuorumTooSmall";
                        readonly inputs: readonly [];
                    }, {
                        readonly type: "error";
                        readonly name: "Governance__ConfigurationLib__TimeTooBig";
                        readonly inputs: readonly [{
                            readonly name: "name";
                            readonly type: "string";
                            readonly internalType: "string";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Governance__ConfigurationLib__TimeTooSmall";
                        readonly inputs: readonly [{
                            readonly name: "name";
                            readonly type: "string";
                            readonly internalType: "string";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Governance__InsufficientPower";
                        readonly inputs: readonly [{
                            readonly name: "voter";
                            readonly type: "address";
                            readonly internalType: "address";
                        }, {
                            readonly name: "have";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }, {
                            readonly name: "required";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Governance__InvalidConfiguration";
                        readonly inputs: readonly [];
                    }, {
                        readonly type: "error";
                        readonly name: "Governance__NoCheckpointsFound";
                        readonly inputs: readonly [];
                    }, {
                        readonly type: "error";
                        readonly name: "Governance__ProposalAlreadyDropped";
                        readonly inputs: readonly [];
                    }, {
                        readonly type: "error";
                        readonly name: "Governance__ProposalCannotBeDropped";
                        readonly inputs: readonly [];
                    }, {
                        readonly type: "error";
                        readonly name: "Governance__ProposalDoesNotExists";
                        readonly inputs: readonly [{
                            readonly name: "proposalId";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Governance__ProposalLib__MoreVoteThanExistNeeded";
                        readonly inputs: readonly [];
                    }, {
                        readonly type: "error";
                        readonly name: "Governance__ProposalLib__MoreYeaVoteThanExistNeeded";
                        readonly inputs: readonly [];
                    }, {
                        readonly type: "error";
                        readonly name: "Governance__ProposalLib__ZeroMinimum";
                        readonly inputs: readonly [];
                    }, {
                        readonly type: "error";
                        readonly name: "Governance__ProposalLib__ZeroVotesNeeded";
                        readonly inputs: readonly [];
                    }, {
                        readonly type: "error";
                        readonly name: "Governance__ProposalLib__ZeroYeaVotesNeeded";
                        readonly inputs: readonly [];
                    }, {
                        readonly type: "error";
                        readonly name: "Governance__ProposalNotActive";
                        readonly inputs: readonly [];
                    }, {
                        readonly type: "error";
                        readonly name: "Governance__ProposalNotExecutable";
                        readonly inputs: readonly [];
                    }, {
                        readonly type: "error";
                        readonly name: "Governance__UserLib__NotInPast";
                        readonly inputs: readonly [];
                    }, {
                        readonly type: "error";
                        readonly name: "Governance__WithdrawalAlreadyclaimed";
                        readonly inputs: readonly [];
                    }, {
                        readonly type: "error";
                        readonly name: "Governance__WithdrawalNotUnlockedYet";
                        readonly inputs: readonly [{
                            readonly name: "currentTime";
                            readonly type: "uint256";
                            readonly internalType: "Timestamp";
                        }, {
                            readonly name: "unlocksAt";
                            readonly type: "uint256";
                            readonly internalType: "Timestamp";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "HeaderLib__InvalidHeaderSize";
                        readonly inputs: readonly [{
                            readonly name: "expected";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }, {
                            readonly name: "actual";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "HeaderLib__InvalidSlotNumber";
                        readonly inputs: readonly [{
                            readonly name: "expected";
                            readonly type: "uint256";
                            readonly internalType: "Slot";
                        }, {
                            readonly name: "actual";
                            readonly type: "uint256";
                            readonly internalType: "Slot";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Inbox__ActorTooLarge";
                        readonly inputs: readonly [{
                            readonly name: "actor";
                            readonly type: "bytes32";
                            readonly internalType: "bytes32";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Inbox__ContentTooLarge";
                        readonly inputs: readonly [{
                            readonly name: "content";
                            readonly type: "bytes32";
                            readonly internalType: "bytes32";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Inbox__MustBuildBeforeConsume";
                        readonly inputs: readonly [];
                    }, {
                        readonly type: "error";
                        readonly name: "Inbox__SecretHashTooLarge";
                        readonly inputs: readonly [{
                            readonly name: "secretHash";
                            readonly type: "bytes32";
                            readonly internalType: "bytes32";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Inbox__Unauthorized";
                        readonly inputs: readonly [];
                    }, {
                        readonly type: "error";
                        readonly name: "Inbox__VersionMismatch";
                        readonly inputs: readonly [{
                            readonly name: "expected";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }, {
                            readonly name: "actual";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "MerkleLib__InvalidRoot";
                        readonly inputs: readonly [{
                            readonly name: "expected";
                            readonly type: "bytes32";
                            readonly internalType: "bytes32";
                        }, {
                            readonly name: "actual";
                            readonly type: "bytes32";
                            readonly internalType: "bytes32";
                        }, {
                            readonly name: "leaf";
                            readonly type: "bytes32";
                            readonly internalType: "bytes32";
                        }, {
                            readonly name: "leafIndex";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Outbox__AlreadyNullified";
                        readonly inputs: readonly [{
                            readonly name: "l2BlockNumber";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }, {
                            readonly name: "leafIndex";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Outbox__BlockNotProven";
                        readonly inputs: readonly [{
                            readonly name: "l2BlockNumber";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Outbox__IncompatibleEntryArguments";
                        readonly inputs: readonly [{
                            readonly name: "messageHash";
                            readonly type: "bytes32";
                            readonly internalType: "bytes32";
                        }, {
                            readonly name: "storedFee";
                            readonly type: "uint64";
                            readonly internalType: "uint64";
                        }, {
                            readonly name: "feePassed";
                            readonly type: "uint64";
                            readonly internalType: "uint64";
                        }, {
                            readonly name: "storedVersion";
                            readonly type: "uint32";
                            readonly internalType: "uint32";
                        }, {
                            readonly name: "versionPassed";
                            readonly type: "uint32";
                            readonly internalType: "uint32";
                        }, {
                            readonly name: "storedDeadline";
                            readonly type: "uint32";
                            readonly internalType: "uint32";
                        }, {
                            readonly name: "deadlinePassed";
                            readonly type: "uint32";
                            readonly internalType: "uint32";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Outbox__InvalidChainId";
                        readonly inputs: readonly [];
                    }, {
                        readonly type: "error";
                        readonly name: "Outbox__InvalidPathLength";
                        readonly inputs: readonly [{
                            readonly name: "expected";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }, {
                            readonly name: "actual";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Outbox__InvalidRecipient";
                        readonly inputs: readonly [{
                            readonly name: "expected";
                            readonly type: "address";
                            readonly internalType: "address";
                        }, {
                            readonly name: "actual";
                            readonly type: "address";
                            readonly internalType: "address";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Outbox__NothingToConsume";
                        readonly inputs: readonly [{
                            readonly name: "messageHash";
                            readonly type: "bytes32";
                            readonly internalType: "bytes32";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Outbox__NothingToConsumeAtBlock";
                        readonly inputs: readonly [{
                            readonly name: "l2BlockNumber";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Outbox__RootAlreadySetAtBlock";
                        readonly inputs: readonly [{
                            readonly name: "l2BlockNumber";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Outbox__Unauthorized";
                        readonly inputs: readonly [];
                    }, {
                        readonly type: "error";
                        readonly name: "Outbox__VersionMismatch";
                        readonly inputs: readonly [{
                            readonly name: "expected";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }, {
                            readonly name: "actual";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "ProofCommitmentEscrow__InsufficientBalance";
                        readonly inputs: readonly [{
                            readonly name: "balance";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }, {
                            readonly name: "requested";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "ProofCommitmentEscrow__NotOwner";
                        readonly inputs: readonly [{
                            readonly name: "caller";
                            readonly type: "address";
                            readonly internalType: "address";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "ProofCommitmentEscrow__WithdrawRequestNotReady";
                        readonly inputs: readonly [{
                            readonly name: "current";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }, {
                            readonly name: "readyAt";
                            readonly type: "uint256";
                            readonly internalType: "Timestamp";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Registry__NoRollupsRegistered";
                        readonly inputs: readonly [];
                    }, {
                        readonly type: "error";
                        readonly name: "Registry__RollupAlreadyRegistered";
                        readonly inputs: readonly [{
                            readonly name: "rollup";
                            readonly type: "address";
                            readonly internalType: "address";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Registry__RollupNotRegistered";
                        readonly inputs: readonly [{
                            readonly name: "version";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "RewardDistributor__InvalidCaller";
                        readonly inputs: readonly [{
                            readonly name: "caller";
                            readonly type: "address";
                            readonly internalType: "address";
                        }, {
                            readonly name: "canonical";
                            readonly type: "address";
                            readonly internalType: "address";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Rollup__AlreadyClaimed";
                        readonly inputs: readonly [{
                            readonly name: "prover";
                            readonly type: "address";
                            readonly internalType: "address";
                        }, {
                            readonly name: "epoch";
                            readonly type: "uint256";
                            readonly internalType: "Epoch";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Rollup__InsufficientBondAmount";
                        readonly inputs: readonly [{
                            readonly name: "minimum";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }, {
                            readonly name: "provided";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Rollup__InsufficientFundsInEscrow";
                        readonly inputs: readonly [{
                            readonly name: "required";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }, {
                            readonly name: "available";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Rollup__InvalidArchive";
                        readonly inputs: readonly [{
                            readonly name: "expected";
                            readonly type: "bytes32";
                            readonly internalType: "bytes32";
                        }, {
                            readonly name: "actual";
                            readonly type: "bytes32";
                            readonly internalType: "bytes32";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Rollup__InvalidBasisPointFee";
                        readonly inputs: readonly [{
                            readonly name: "basisPointFee";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Rollup__InvalidBlobHash";
                        readonly inputs: readonly [{
                            readonly name: "blobHash";
                            readonly type: "bytes32";
                            readonly internalType: "bytes32";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Rollup__InvalidBlobProof";
                        readonly inputs: readonly [{
                            readonly name: "blobHash";
                            readonly type: "bytes32";
                            readonly internalType: "bytes32";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Rollup__InvalidBlobPublicInputsHash";
                        readonly inputs: readonly [{
                            readonly name: "expected";
                            readonly type: "bytes32";
                            readonly internalType: "bytes32";
                        }, {
                            readonly name: "actual";
                            readonly type: "bytes32";
                            readonly internalType: "bytes32";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Rollup__InvalidBlockNumber";
                        readonly inputs: readonly [{
                            readonly name: "expected";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }, {
                            readonly name: "actual";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Rollup__InvalidChainId";
                        readonly inputs: readonly [{
                            readonly name: "expected";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }, {
                            readonly name: "actual";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Rollup__InvalidInHash";
                        readonly inputs: readonly [{
                            readonly name: "expected";
                            readonly type: "bytes32";
                            readonly internalType: "bytes32";
                        }, {
                            readonly name: "actual";
                            readonly type: "bytes32";
                            readonly internalType: "bytes32";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Rollup__InvalidManaBaseFee";
                        readonly inputs: readonly [{
                            readonly name: "expected";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }, {
                            readonly name: "actual";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Rollup__InvalidPreviousArchive";
                        readonly inputs: readonly [{
                            readonly name: "expected";
                            readonly type: "bytes32";
                            readonly internalType: "bytes32";
                        }, {
                            readonly name: "actual";
                            readonly type: "bytes32";
                            readonly internalType: "bytes32";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Rollup__InvalidProof";
                        readonly inputs: readonly [];
                    }, {
                        readonly type: "error";
                        readonly name: "Rollup__InvalidProposedArchive";
                        readonly inputs: readonly [{
                            readonly name: "expected";
                            readonly type: "bytes32";
                            readonly internalType: "bytes32";
                        }, {
                            readonly name: "actual";
                            readonly type: "bytes32";
                            readonly internalType: "bytes32";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Rollup__InvalidTimestamp";
                        readonly inputs: readonly [{
                            readonly name: "expected";
                            readonly type: "uint256";
                            readonly internalType: "Timestamp";
                        }, {
                            readonly name: "actual";
                            readonly type: "uint256";
                            readonly internalType: "Timestamp";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Rollup__InvalidVersion";
                        readonly inputs: readonly [{
                            readonly name: "expected";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }, {
                            readonly name: "actual";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Rollup__ManaLimitExceeded";
                        readonly inputs: readonly [];
                    }, {
                        readonly type: "error";
                        readonly name: "Rollup__NoEpochToProve";
                        readonly inputs: readonly [];
                    }, {
                        readonly type: "error";
                        readonly name: "Rollup__NonSequentialProving";
                        readonly inputs: readonly [];
                    }, {
                        readonly type: "error";
                        readonly name: "Rollup__NonZeroDaFee";
                        readonly inputs: readonly [];
                    }, {
                        readonly type: "error";
                        readonly name: "Rollup__NotPastDeadline";
                        readonly inputs: readonly [{
                            readonly name: "deadline";
                            readonly type: "uint256";
                            readonly internalType: "Slot";
                        }, {
                            readonly name: "currentSlot";
                            readonly type: "uint256";
                            readonly internalType: "Slot";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Rollup__NothingToPrune";
                        readonly inputs: readonly [];
                    }, {
                        readonly type: "error";
                        readonly name: "Rollup__PastDeadline";
                        readonly inputs: readonly [{
                            readonly name: "deadline";
                            readonly type: "uint256";
                            readonly internalType: "Slot";
                        }, {
                            readonly name: "currentSlot";
                            readonly type: "uint256";
                            readonly internalType: "Slot";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Rollup__ProverHaveAlreadySubmitted";
                        readonly inputs: readonly [{
                            readonly name: "prover";
                            readonly type: "address";
                            readonly internalType: "address";
                        }, {
                            readonly name: "epoch";
                            readonly type: "uint256";
                            readonly internalType: "Epoch";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Rollup__SlotAlreadyInChain";
                        readonly inputs: readonly [{
                            readonly name: "lastSlot";
                            readonly type: "uint256";
                            readonly internalType: "Slot";
                        }, {
                            readonly name: "proposedSlot";
                            readonly type: "uint256";
                            readonly internalType: "Slot";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Rollup__StartAndEndNotSameEpoch";
                        readonly inputs: readonly [{
                            readonly name: "start";
                            readonly type: "uint256";
                            readonly internalType: "Epoch";
                        }, {
                            readonly name: "end";
                            readonly type: "uint256";
                            readonly internalType: "Epoch";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Rollup__StartIsNotBuildingOnProven";
                        readonly inputs: readonly [];
                    }, {
                        readonly type: "error";
                        readonly name: "Rollup__StartIsNotFirstBlockOfEpoch";
                        readonly inputs: readonly [];
                    }, {
                        readonly type: "error";
                        readonly name: "Rollup__TimestampInFuture";
                        readonly inputs: readonly [{
                            readonly name: "max";
                            readonly type: "uint256";
                            readonly internalType: "Timestamp";
                        }, {
                            readonly name: "actual";
                            readonly type: "uint256";
                            readonly internalType: "Timestamp";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Rollup__TimestampTooOld";
                        readonly inputs: readonly [];
                    }, {
                        readonly type: "error";
                        readonly name: "Rollup__TryingToProveNonExistingBlock";
                        readonly inputs: readonly [];
                    }, {
                        readonly type: "error";
                        readonly name: "Rollup__UnavailableTxs";
                        readonly inputs: readonly [{
                            readonly name: "txsHash";
                            readonly type: "bytes32";
                            readonly internalType: "bytes32";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "SampleLib__IndexOutOfBounds";
                        readonly inputs: readonly [{
                            readonly name: "requested";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }, {
                            readonly name: "bound";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "SampleLib__SampleLargerThanIndex";
                        readonly inputs: readonly [{
                            readonly name: "sample";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }, {
                            readonly name: "index";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "SignatureLib__CannotVerifyEmpty";
                        readonly inputs: readonly [];
                    }, {
                        readonly type: "error";
                        readonly name: "SignatureLib__InvalidSignature";
                        readonly inputs: readonly [{
                            readonly name: "expected";
                            readonly type: "address";
                            readonly internalType: "address";
                        }, {
                            readonly name: "recovered";
                            readonly type: "address";
                            readonly internalType: "address";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Staking__AlreadyActive";
                        readonly inputs: readonly [{
                            readonly name: "attester";
                            readonly type: "address";
                            readonly internalType: "address";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Staking__AlreadyRegistered";
                        readonly inputs: readonly [{
                            readonly name: "";
                            readonly type: "address";
                            readonly internalType: "address";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Staking__CannotSlashExitedStake";
                        readonly inputs: readonly [{
                            readonly name: "";
                            readonly type: "address";
                            readonly internalType: "address";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Staking__FailedToRemove";
                        readonly inputs: readonly [{
                            readonly name: "";
                            readonly type: "address";
                            readonly internalType: "address";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Staking__InsufficientStake";
                        readonly inputs: readonly [{
                            readonly name: "";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }, {
                            readonly name: "";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Staking__InvalidDeposit";
                        readonly inputs: readonly [{
                            readonly name: "attester";
                            readonly type: "address";
                            readonly internalType: "address";
                        }, {
                            readonly name: "proposer";
                            readonly type: "address";
                            readonly internalType: "address";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Staking__NoOneToSlash";
                        readonly inputs: readonly [{
                            readonly name: "";
                            readonly type: "address";
                            readonly internalType: "address";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Staking__NotExiting";
                        readonly inputs: readonly [{
                            readonly name: "";
                            readonly type: "address";
                            readonly internalType: "address";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Staking__NotSlasher";
                        readonly inputs: readonly [{
                            readonly name: "";
                            readonly type: "address";
                            readonly internalType: "address";
                        }, {
                            readonly name: "";
                            readonly type: "address";
                            readonly internalType: "address";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Staking__NotWithdrawer";
                        readonly inputs: readonly [{
                            readonly name: "";
                            readonly type: "address";
                            readonly internalType: "address";
                        }, {
                            readonly name: "";
                            readonly type: "address";
                            readonly internalType: "address";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Staking__NothingToExit";
                        readonly inputs: readonly [{
                            readonly name: "";
                            readonly type: "address";
                            readonly internalType: "address";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Staking__WithdrawalNotUnlockedYet";
                        readonly inputs: readonly [{
                            readonly name: "";
                            readonly type: "uint256";
                            readonly internalType: "Timestamp";
                        }, {
                            readonly name: "";
                            readonly type: "uint256";
                            readonly internalType: "Timestamp";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "ValidatorSelection__EpochNotSetup";
                        readonly inputs: readonly [];
                    }, {
                        readonly type: "error";
                        readonly name: "ValidatorSelection__InsufficientAttestations";
                        readonly inputs: readonly [{
                            readonly name: "minimumNeeded";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }, {
                            readonly name: "provided";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "ValidatorSelection__InsufficientAttestationsProvided";
                        readonly inputs: readonly [{
                            readonly name: "minimumNeeded";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }, {
                            readonly name: "provided";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "ValidatorSelection__InvalidDeposit";
                        readonly inputs: readonly [{
                            readonly name: "attester";
                            readonly type: "address";
                            readonly internalType: "address";
                        }, {
                            readonly name: "proposer";
                            readonly type: "address";
                            readonly internalType: "address";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "ValidatorSelection__InvalidProposer";
                        readonly inputs: readonly [{
                            readonly name: "expected";
                            readonly type: "address";
                            readonly internalType: "address";
                        }, {
                            readonly name: "actual";
                            readonly type: "address";
                            readonly internalType: "address";
                        }];
                    }];
                    contractBytecode: `0x${string}`;
                };
                ExtRollupLib: {
                    contractAbi: readonly [{
                        readonly type: "error";
                        readonly name: "AddressSnapshotLib__IndexOutOfBounds";
                        readonly inputs: readonly [{
                            readonly name: "index";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }, {
                            readonly name: "size";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "CoinIssuer__InsufficientMintAvailable";
                        readonly inputs: readonly [{
                            readonly name: "available";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }, {
                            readonly name: "needed";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "DevNet__InvalidProposer";
                        readonly inputs: readonly [{
                            readonly name: "expected";
                            readonly type: "address";
                            readonly internalType: "address";
                        }, {
                            readonly name: "actual";
                            readonly type: "address";
                            readonly internalType: "address";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "DevNet__NoPruningAllowed";
                        readonly inputs: readonly [];
                    }, {
                        readonly type: "error";
                        readonly name: "FeeJuicePortal__AlreadyInitialized";
                        readonly inputs: readonly [];
                    }, {
                        readonly type: "error";
                        readonly name: "FeeJuicePortal__InvalidInitialization";
                        readonly inputs: readonly [];
                    }, {
                        readonly type: "error";
                        readonly name: "FeeJuicePortal__Unauthorized";
                        readonly inputs: readonly [];
                    }, {
                        readonly type: "error";
                        readonly name: "FeeLib__InvalidFeeAssetPriceModifier";
                        readonly inputs: readonly [];
                    }, {
                        readonly type: "error";
                        readonly name: "GovernanceProposer__CanOnlyExecuteProposalInPast";
                        readonly inputs: readonly [];
                    }, {
                        readonly type: "error";
                        readonly name: "GovernanceProposer__FailedToPropose";
                        readonly inputs: readonly [{
                            readonly name: "proposal";
                            readonly type: "address";
                            readonly internalType: "contract IPayload";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "GovernanceProposer__InstanceHaveNoCode";
                        readonly inputs: readonly [{
                            readonly name: "instance";
                            readonly type: "address";
                            readonly internalType: "address";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "GovernanceProposer__InsufficientVotes";
                        readonly inputs: readonly [{
                            /**
                             * Contract artifacts
                             */
                            readonly name: "votesCast";
                            readonly type: "uint256"; /**
                             * The contract abi.
                             */
                            readonly internalType: "uint256";
                        }, {
                            readonly name: "votesNeeded";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "GovernanceProposer__InvalidNAndMValues";
                        readonly inputs: readonly [{
                            readonly name: "n";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }, {
                            readonly name: "m";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "GovernanceProposer__NCannotBeLargerTHanM";
                        readonly inputs: readonly [{
                            readonly name: "n";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }, {
                            readonly name: "m";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "GovernanceProposer__OnlyProposerCanVote";
                        readonly inputs: readonly [{
                            readonly name: "caller";
                            readonly type: "address";
                            readonly internalType: "address";
                        }, {
                            readonly name: "proposer";
                            readonly type: "address";
                            readonly internalType: "address";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "GovernanceProposer__ProposalAlreadyExecuted";
                        readonly inputs: readonly [{
                            readonly name: "roundNumber";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "GovernanceProposer__ProposalCannotBeAddressZero";
                        readonly inputs: readonly [];
                    }, {
                        readonly type: "error";
                        readonly name: "GovernanceProposer__ProposalHaveNoCode";
                        readonly inputs: readonly [{
                            readonly name: "proposal";
                            readonly type: "address";
                            readonly internalType: "contract IPayload";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "GovernanceProposer__ProposalTooOld";
                        readonly inputs: readonly [{
                            readonly name: "roundNumber";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }, {
                            readonly name: "currentRoundNumber";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "GovernanceProposer__VoteAlreadyCastForSlot";
                        readonly inputs: readonly [{
                            /** The protocol contract tree root. */
                            readonly name: "slot";
                            readonly type: "uint256";
                            readonly internalType: "Slot";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Governance__CallFailed";
                        readonly inputs: readonly [{
                            readonly name: "target";
                            readonly type: "address";
                            readonly internalType: "address";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Governance__CallerNotGovernanceProposer";
                        readonly inputs: readonly [{
                            readonly name: "caller";
                            readonly type: "address";
                            readonly internalType: "address";
                        }, {
                            readonly name: "governanceProposer";
                            readonly type: "address";
                            readonly internalType: "address";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Governance__CallerNotSelf";
                        readonly inputs: readonly [{
                            readonly name: "caller";
                            readonly type: "address";
                            readonly internalType: "address";
                        }, {
                            readonly name: "self";
                            readonly type: "address";
                            readonly internalType: "address";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Governance__CannotCallAsset";
                        readonly inputs: readonly [];
                    }, {
                        readonly type: "error";
                        readonly name: "Governance__ConfigurationLib__DifferentialTooBig";
                        readonly inputs: readonly [];
                    }, {
                        readonly type: "error";
                        readonly name: "Governance__ConfigurationLib__DifferentialTooSmall";
                        readonly inputs: readonly [];
                    }, {
                        readonly type: "error";
                        readonly name: "Governance__ConfigurationLib__InvalidMinimumVotes";
                        readonly inputs: readonly [];
                    }, {
                        readonly type: "error";
                        readonly name: "Governance__ConfigurationLib__LockAmountTooSmall";
                        readonly inputs: readonly [];
                    }, {
                        readonly type: "error";
                        readonly name: "Governance__ConfigurationLib__QuorumTooBig";
                        readonly inputs: readonly [];
                    }, {
                        readonly type: "error";
                        readonly name: "Governance__ConfigurationLib__QuorumTooSmall";
                        readonly inputs: readonly [];
                    }, {
                        readonly type: "error";
                        readonly name: "Governance__ConfigurationLib__TimeTooBig";
                        readonly inputs: readonly [{
                            readonly name: "name";
                            readonly type: "string";
                            readonly internalType: "string";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Governance__ConfigurationLib__TimeTooSmall";
                        readonly inputs: readonly [{
                            readonly name: "name";
                            readonly type: "string";
                            readonly internalType: "string";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Governance__InsufficientPower";
                        readonly inputs: readonly [{
                            readonly name: "voter";
                            readonly type: "address";
                            readonly internalType: "address";
                        }, {
                            readonly name: "have";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }, {
                            readonly name: "required";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Governance__InvalidConfiguration";
                        readonly inputs: readonly [];
                    }, {
                        readonly type: "error";
                        readonly name: "Governance__NoCheckpointsFound";
                        readonly inputs: readonly [];
                    }, {
                        readonly type: "error";
                        readonly name: "Governance__ProposalAlreadyDropped";
                        readonly inputs: readonly [];
                    }, {
                        readonly type: "error";
                        readonly name: "Governance__ProposalCannotBeDropped";
                        readonly inputs: readonly [];
                    }, {
                        readonly type: "error";
                        readonly name: "Governance__ProposalDoesNotExists";
                        readonly inputs: readonly [{
                            readonly name: "proposalId";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Governance__ProposalLib__MoreVoteThanExistNeeded";
                        readonly inputs: readonly [];
                    }, {
                        readonly type: "error";
                        readonly name: "Governance__ProposalLib__MoreYeaVoteThanExistNeeded";
                        readonly inputs: readonly [];
                    }, {
                        readonly type: "error";
                        readonly name: "Governance__ProposalLib__ZeroMinimum";
                        readonly inputs: readonly [];
                    }, {
                        readonly type: "error";
                        readonly name: "Governance__ProposalLib__ZeroVotesNeeded";
                        readonly inputs: readonly [];
                    }, {
                        readonly type: "error";
                        readonly name: "Governance__ProposalLib__ZeroYeaVotesNeeded";
                        readonly inputs: readonly [];
                    }, {
                        readonly type: "error";
                        readonly name: "Governance__ProposalNotActive";
                        readonly inputs: readonly [];
                    }, {
                        readonly type: "error";
                        readonly name: "Governance__ProposalNotExecutable";
                        readonly inputs: readonly [];
                    }, {
                        readonly type: "error";
                        readonly name: "Governance__UserLib__NotInPast";
                        readonly inputs: readonly [];
                    }, {
                        readonly type: "error";
                        readonly name: "Governance__WithdrawalAlreadyclaimed";
                        readonly inputs: readonly [];
                    }, {
                        readonly type: "error";
                        readonly name: "Governance__WithdrawalNotUnlockedYet";
                        readonly inputs: readonly [{
                            readonly name: "currentTime";
                            readonly type: "uint256";
                            readonly internalType: "Timestamp";
                        }, {
                            readonly name: "unlocksAt";
                            readonly type: "uint256";
                            readonly internalType: "Timestamp";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "HeaderLib__InvalidHeaderSize";
                        readonly inputs: readonly [{
                            readonly name: "expected";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }, {
                            readonly name: "actual";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "HeaderLib__InvalidSlotNumber";
                        readonly inputs: readonly [{
                            readonly name: "expected";
                            readonly type: "uint256";
                            readonly internalType: "Slot";
                        }, {
                            readonly name: "actual";
                            readonly type: "uint256";
                            readonly internalType: "Slot";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Inbox__ActorTooLarge";
                        readonly inputs: readonly [{
                            readonly name: "actor";
                            readonly type: "bytes32";
                            readonly internalType: "bytes32";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Inbox__ContentTooLarge";
                        readonly inputs: readonly [{
                            readonly name: "content";
                            readonly type: "bytes32";
                            readonly internalType: "bytes32";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Inbox__MustBuildBeforeConsume";
                        readonly inputs: readonly [];
                    }, {
                        readonly type: "error";
                        readonly name: "Inbox__SecretHashTooLarge";
                        readonly inputs: readonly [{
                            readonly name: "secretHash";
                            readonly type: "bytes32";
                            readonly internalType: "bytes32";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Inbox__Unauthorized";
                        readonly inputs: readonly [];
                    }, {
                        readonly type: "error";
                        readonly name: "Inbox__VersionMismatch";
                        readonly inputs: readonly [{
                            readonly name: "expected";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }, {
                            readonly name: "actual";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }];
                    }, {
                        readonly type: "event";
                        readonly name: "L2BlockProposed";
                        readonly inputs: readonly [{
                            readonly name: "blockNumber";
                            readonly type: "uint256";
                            readonly indexed: true;
                            readonly internalType: "uint256";
                        }, {
                            readonly name: "archive";
                            readonly type: "bytes32";
                            readonly indexed: true;
                            readonly internalType: "bytes32";
                        }, {
                            readonly name: "versionedBlobHashes";
                            readonly type: "bytes32[]";
                            readonly indexed: false;
                            readonly internalType: "bytes32[]";
                        }];
                        readonly anonymous: false;
                    }, {
                        readonly type: "event";
                        readonly name: "L2ProofVerified";
                        readonly inputs: readonly [{
                            readonly name: "blockNumber";
                            readonly type: "uint256";
                            readonly indexed: true;
                            readonly internalType: "uint256";
                        }, {
                            readonly name: "proverId";
                            readonly type: "address";
                            readonly indexed: true;
                            /**
                             * Deploys a new rollup, using the existing canonical version to derive certain values (addresses of assets etc).
                             * @param clients - The L1 clients.
                             * @param args - The deployment arguments.
                             * @param registryAddress - The address of the registry.
                             * @param logger - The logger.
                             * @param txUtilsConfig - The L1 tx utils config.
                             */
                            readonly internalType: "address";
                        }];
                        readonly anonymous: false;
                    }, {
                        readonly type: "error";
                        readonly name: "MerkleLib__InvalidRoot";
                        readonly inputs: readonly [{
                            readonly name: "expected";
                            readonly type: "bytes32";
                            readonly internalType: "bytes32";
                        }, {
                            readonly name: "actual";
                            readonly type: "bytes32";
                            readonly internalType: "bytes32";
                        }, {
                            readonly name: "leaf";
                            readonly type: "bytes32";
                            readonly internalType: "bytes32";
                        }, {
                            readonly name: "leafIndex";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Outbox__AlreadyNullified";
                        readonly inputs: readonly [{
                            readonly name: "l2BlockNumber";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }, {
                            readonly name: "leafIndex";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Outbox__BlockNotProven";
                        readonly inputs: readonly [{
                            readonly name: "l2BlockNumber";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Outbox__IncompatibleEntryArguments";
                        readonly inputs: readonly [{
                            readonly name: "messageHash";
                            readonly type: "bytes32";
                            readonly internalType: "bytes32";
                        }, {
                            readonly name: "storedFee";
                            readonly type: "uint64";
                            readonly internalType: "uint64";
                        }, {
                            readonly name: "feePassed";
                            readonly type: "uint64";
                            readonly internalType: "uint64";
                        }, {
                            readonly name: "storedVersion";
                            readonly type: "uint32";
                            readonly internalType: "uint32";
                        }, {
                            readonly name: "versionPassed";
                            readonly type: "uint32";
                            readonly internalType: "uint32";
                        }, {
                            readonly name: "storedDeadline";
                            readonly type: "uint32";
                            readonly internalType: "uint32";
                        }, {
                            readonly name: "deadlinePassed";
                            readonly type: "uint32";
                            readonly internalType: "uint32";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Outbox__InvalidChainId";
                        readonly inputs: readonly [];
                    }, {
                        readonly type: "error";
                        readonly name: "Outbox__InvalidPathLength";
                        readonly inputs: readonly [{
                            readonly name: "expected";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }, {
                            readonly name: "actual";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Outbox__InvalidRecipient";
                        readonly inputs: readonly [{
                            readonly name: "expected";
                            readonly type: "address";
                            readonly internalType: "address";
                        }, {
                            readonly name: "actual";
                            readonly type: "address";
                            readonly internalType: "address";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Outbox__NothingToConsume";
                        readonly inputs: readonly [{
                            readonly name: "messageHash";
                            readonly type: "bytes32";
                            readonly internalType: "bytes32";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Outbox__NothingToConsumeAtBlock";
                        readonly inputs: readonly [{
                            readonly name: "l2BlockNumber";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Outbox__RootAlreadySetAtBlock";
                        readonly inputs: readonly [{
                            readonly name: "l2BlockNumber";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Outbox__Unauthorized";
                        readonly inputs: readonly [];
                    }, {
                        readonly type: "error";
                        readonly name: "Outbox__VersionMismatch";
                        readonly inputs: readonly [{
                            readonly name: "expected";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }, {
                            readonly name: "actual";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "ProofCommitmentEscrow__InsufficientBalance";
                        readonly inputs: readonly [{
                            readonly name: "balance";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }, {
                            readonly name: "requested";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "ProofCommitmentEscrow__NotOwner";
                        readonly inputs: readonly [{
                            readonly name: "caller";
                            readonly type: "address";
                            readonly internalType: "address";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "ProofCommitmentEscrow__WithdrawRequestNotReady";
                        readonly inputs: readonly [{
                            readonly name: "current";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }, {
                            readonly name: "readyAt";
                            readonly type: "uint256";
                            readonly internalType: "Timestamp";
                        }];
                    }, {
                        readonly type: "event";
                        readonly name: "PrunedPending";
                        readonly inputs: readonly [{
                            readonly name: "provenBlockNumber";
                            readonly type: "uint256";
                            readonly indexed: false;
                            readonly internalType: "uint256";
                        }, {
                            readonly name: "pendingBlockNumber";
                            readonly type: "uint256";
                            readonly indexed: false;
                            readonly internalType: "uint256";
                        }];
                        readonly anonymous: false;
                    }, {
                        readonly type: "error";
                        readonly name: "Registry__NoRollupsRegistered";
                        readonly inputs: readonly [];
                    }, {
                        readonly type: "error";
                        readonly name: "Registry__RollupAlreadyRegistered";
                        readonly inputs: readonly [{
                            readonly name: "rollup";
                            readonly type: "address";
                            readonly internalType: "address";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Registry__RollupNotRegistered";
                        readonly inputs: readonly [{
                            readonly name: "version";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "RewardDistributor__InvalidCaller";
                        readonly inputs: readonly [{
                            readonly name: "caller";
                            readonly type: "address";
                            readonly internalType: "address";
                        }, {
                            readonly name: "canonical";
                            readonly type: "address";
                            readonly internalType: "address";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Rollup__AlreadyClaimed";
                        readonly inputs: readonly [{
                            readonly name: "prover";
                            readonly type: "address";
                            readonly internalType: "address";
                        }, {
                            readonly name: "epoch";
                            readonly type: "uint256";
                            readonly internalType: "Epoch";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Rollup__InsufficientBondAmount";
                        readonly inputs: readonly [{
                            readonly name: "minimum";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }, {
                            readonly name: "provided";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Rollup__InsufficientFundsInEscrow";
                        readonly inputs: readonly [{
                            readonly name: "required";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }, {
                            readonly name: "available";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Rollup__InvalidArchive";
                        readonly inputs: readonly [{
                            readonly name: "expected";
                            readonly type: "bytes32";
                            readonly internalType: "bytes32";
                        }, {
                            readonly name: "actual";
                            readonly type: "bytes32";
                            readonly internalType: "bytes32";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Rollup__InvalidBasisPointFee";
                        readonly inputs: readonly [{
                            readonly name: "basisPointFee";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Rollup__InvalidBlobHash";
                        readonly inputs: readonly [{
                            readonly name: "blobHash";
                            readonly type: "bytes32";
                            readonly internalType: "bytes32";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Rollup__InvalidBlobProof";
                        readonly inputs: readonly [{
                            readonly name: "blobHash";
                            readonly type: "bytes32";
                            readonly internalType: "bytes32";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Rollup__InvalidBlobPublicInputsHash";
                        readonly inputs: readonly [{
                            readonly name: "expected";
                            readonly type: "bytes32";
                            readonly internalType: "bytes32";
                        }, {
                            readonly name: "actual";
                            readonly type: "bytes32";
                            readonly internalType: "bytes32";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Rollup__InvalidBlockNumber";
                        readonly inputs: readonly [{
                            readonly name: "expected";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }, {
                            readonly name: "actual";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Rollup__InvalidChainId";
                        readonly inputs: readonly [{
                            readonly name: "expected";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }, {
                            readonly name: "actual";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Rollup__InvalidInHash";
                        readonly inputs: readonly [{
                            readonly name: "expected";
                            readonly type: "bytes32";
                            readonly internalType: "bytes32";
                        }, {
                            readonly name: "actual";
                            readonly type: "bytes32";
                            readonly internalType: "bytes32";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Rollup__InvalidManaBaseFee";
                        readonly inputs: readonly [{
                            readonly name: "expected";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }, {
                            readonly name: "actual";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Rollup__InvalidPreviousArchive";
                        readonly inputs: readonly [{
                            readonly name: "expected";
                            readonly type: "bytes32";
                            readonly internalType: "bytes32";
                        }, {
                            readonly name: "actual";
                            readonly type: "bytes32";
                            readonly internalType: "bytes32";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Rollup__InvalidProof";
                        readonly inputs: readonly [];
                    }, {
                        readonly type: "error";
                        readonly name: "Rollup__InvalidProposedArchive";
                        readonly inputs: readonly [{
                            readonly name: "expected";
                            readonly type: "bytes32";
                            readonly internalType: "bytes32";
                        }, {
                            readonly name: "actual";
                            readonly type: "bytes32";
                            readonly internalType: "bytes32";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Rollup__InvalidTimestamp";
                        readonly inputs: readonly [{
                            readonly name: "expected";
                            readonly type: "uint256";
                            readonly internalType: "Timestamp";
                        }, {
                            readonly name: "actual";
                            readonly type: "uint256";
                            readonly internalType: "Timestamp";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Rollup__InvalidVersion";
                        readonly inputs: readonly [{
                            readonly name: "expected";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }, {
                            readonly name: "actual";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Rollup__ManaLimitExceeded";
                        readonly inputs: readonly [];
                    }, {
                        readonly type: "error";
                        readonly name: "Rollup__NoEpochToProve";
                        readonly inputs: readonly [];
                    }, {
                        readonly type: "error";
                        readonly name: "Rollup__NonSequentialProving";
                        readonly inputs: readonly [];
                    }, {
                        readonly type: "error";
                        readonly name: "Rollup__NonZeroDaFee";
                        readonly inputs: readonly [];
                    }, {
                        readonly type: "error";
                        readonly name: "Rollup__NotPastDeadline";
                        readonly inputs: readonly [{
                            readonly name: "deadline"; /**
                             * Deploys the aztec L1 contracts; Rollup & (optionally) Decoder Helper.
                             * @param rpcUrls - List of URLs of the ETH RPC to use for deployment.
                             * @param account - Private Key or HD Account that will deploy the contracts.
                             * @param chain - The chain instance to deploy to.
                             * @param logger - A logger object.
                             * @param args - Arguments for initialization of L1 contracts
                             * @returns A list of ETH addresses of the deployed contracts.
                             */
                            readonly type: "uint256";
                            readonly internalType: "Slot";
                        }, {
                            readonly name: "currentSlot";
                            readonly type: "uint256";
                            readonly internalType: "Slot";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Rollup__NothingToPrune";
                        readonly inputs: readonly [];
                    }, {
                        readonly type: "error";
                        readonly name: "Rollup__PastDeadline";
                        readonly inputs: readonly [{
                            readonly name: "deadline";
                            readonly type: "uint256";
                            readonly internalType: "Slot";
                        }, {
                            readonly name: "currentSlot";
                            readonly type: "uint256";
                            readonly internalType: "Slot";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Rollup__ProverHaveAlreadySubmitted";
                        readonly inputs: readonly [{
                            readonly name: "prover";
                            readonly type: "address";
                            readonly internalType: "address";
                        }, {
                            readonly name: "epoch";
                            readonly type: "uint256";
                            readonly internalType: "Epoch";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Rollup__SlotAlreadyInChain";
                        readonly inputs: readonly [{
                            readonly name: "lastSlot";
                            readonly type: "uint256";
                            readonly internalType: "Slot";
                        }, {
                            readonly name: "proposedSlot";
                            readonly type: "uint256";
                            readonly internalType: "Slot";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Rollup__StartAndEndNotSameEpoch";
                        readonly inputs: readonly [{
                            readonly name: "start";
                            readonly type: "uint256";
                            readonly internalType: "Epoch";
                        }, {
                            readonly name: "end";
                            readonly type: "uint256";
                            readonly internalType: "Epoch";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Rollup__StartIsNotBuildingOnProven";
                        readonly inputs: readonly [];
                    }, {
                        readonly type: "error";
                        readonly name: "Rollup__StartIsNotFirstBlockOfEpoch";
                        readonly inputs: readonly [];
                    }, {
                        readonly type: "error";
                        readonly name: "Rollup__TimestampInFuture";
                        readonly inputs: readonly [{
                            readonly name: "max";
                            readonly type: "uint256";
                            readonly internalType: "Timestamp";
                        }, {
                            readonly name: "actual";
                            readonly type: "uint256";
                            readonly internalType: "Timestamp";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Rollup__TimestampTooOld";
                        readonly inputs: readonly [];
                    }, {
                        readonly type: "error";
                        readonly name: "Rollup__TryingToProveNonExistingBlock";
                        readonly inputs: readonly [];
                    }, {
                        readonly type: "error";
                        readonly name: "Rollup__UnavailableTxs";
                        readonly inputs: readonly [{
                            readonly name: "txsHash";
                            readonly type: "bytes32";
                            readonly internalType: "bytes32";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "SafeCastOverflowedIntToUint";
                        readonly inputs: readonly [{
                            readonly name: "value";
                            readonly type: "int256";
                            readonly internalType: "int256";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "SafeCastOverflowedUintDowncast";
                        readonly inputs: readonly [{
                            readonly name: "bits";
                            readonly type: "uint8";
                            readonly internalType: "uint8";
                        }, {
                            readonly name: "value";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "SampleLib__IndexOutOfBounds";
                        readonly inputs: readonly [{
                            readonly name: "requested";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }, {
                            readonly name: "bound";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "SampleLib__SampleLargerThanIndex";
                        readonly inputs: readonly [{
                            readonly name: "sample";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }, {
                            readonly name: "index";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "SignatureLib__CannotVerifyEmpty";
                        readonly inputs: readonly [];
                    }, {
                        readonly type: "error";
                        readonly name: "SignatureLib__InvalidSignature";
                        readonly inputs: readonly [{
                            readonly name: "expected";
                            readonly type: "address";
                            readonly internalType: "address";
                        }, {
                            readonly name: "recovered";
                            readonly type: "address";
                            readonly internalType: "address";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Staking__AlreadyActive";
                        readonly inputs: readonly [{
                            readonly name: "attester";
                            readonly type: "address";
                            readonly internalType: "address";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Staking__AlreadyRegistered";
                        readonly inputs: readonly [{
                            readonly name: "";
                            readonly type: "address";
                            readonly internalType: "address";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Staking__CannotSlashExitedStake";
                        readonly inputs: readonly [{
                            readonly name: "";
                            readonly type: "address";
                            readonly internalType: "address";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Staking__FailedToRemove";
                        readonly inputs: readonly [{
                            readonly name: "";
                            readonly type: "address";
                            readonly internalType: "address";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Staking__InsufficientStake";
                        readonly inputs: readonly [{
                            readonly name: "";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }, {
                            readonly name: "";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Staking__InvalidDeposit";
                        readonly inputs: readonly [{
                            readonly name: "attester";
                            readonly type: "address";
                            readonly internalType: "address";
                        }, {
                            readonly name: "proposer";
                            readonly type: "address";
                            readonly internalType: "address";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Staking__NoOneToSlash";
                        readonly inputs: readonly [{
                            readonly name: "";
                            readonly type: "address";
                            readonly internalType: "address";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Staking__NotExiting";
                        readonly inputs: readonly [{
                            readonly name: "";
                            readonly type: "address";
                            readonly internalType: "address";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Staking__NotSlasher";
                        readonly inputs: readonly [{
                            readonly name: "";
                            readonly type: "address";
                            readonly internalType: "address";
                        }, {
                            readonly name: "";
                            readonly type: "address";
                            readonly internalType: "address";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Staking__NotWithdrawer";
                        readonly inputs: readonly [{
                            readonly name: "";
                            readonly type: "address";
                            readonly internalType: "address";
                        }, {
                            readonly name: "";
                            readonly type: "address";
                            readonly internalType: "address";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Staking__NothingToExit";
                        readonly inputs: readonly [{
                            readonly name: "";
                            readonly type: "address";
                            readonly internalType: "address";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "Staking__WithdrawalNotUnlockedYet";
                        readonly inputs: readonly [{
                            readonly name: "";
                            readonly type: "uint256";
                            readonly internalType: "Timestamp";
                        }, {
                            readonly name: "";
                            readonly type: "uint256";
                            readonly internalType: "Timestamp";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "ValidatorSelection__EpochNotSetup";
                        readonly inputs: readonly [];
                    }, {
                        readonly type: "error";
                        readonly name: "ValidatorSelection__InsufficientAttestations";
                        readonly inputs: readonly [{
                            readonly name: "minimumNeeded";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }, {
                            readonly name: "provided";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "ValidatorSelection__InsufficientAttestationsProvided";
                        readonly inputs: readonly [{
                            readonly name: "minimumNeeded";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }, {
                            readonly name: "provided";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "ValidatorSelection__InvalidDeposit";
                        readonly inputs: readonly [{
                            readonly name: "attester";
                            readonly type: "address";
                            readonly internalType: "address";
                        }, {
                            readonly name: "proposer";
                            readonly type: "address";
                            readonly internalType: "address";
                        }];
                    }, {
                        readonly type: "error";
                        readonly name: "ValidatorSelection__InvalidProposer";
                        readonly inputs: readonly [{
                            readonly name: "expected";
                            readonly type: "address";
                            readonly internalType: "address";
                        }, {
                            readonly name: "actual";
                            readonly type: "address";
                            readonly internalType: "address";
                        }];
                    }, {
                        readonly type: "function";
                        readonly name: "getBlobBaseFee";
                        readonly inputs: readonly [];
                        readonly outputs: readonly [{
                            readonly name: "";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }];
                        readonly stateMutability: "view";
                    }, {
                        readonly type: "function";
                        readonly name: "getEpochProofPublicInputs";
                        readonly inputs: readonly [{
                            readonly name: "_start";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }, {
                            readonly name: "_end";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }, {
                            readonly name: "_args";
                            readonly type: "tuple";
                            readonly internalType: "struct PublicInputArgs";
                            readonly components: readonly [{
                                readonly name: "previousArchive";
                                readonly type: "bytes32";
                                readonly internalType: "bytes32";
                            }, {
                                readonly name: "endArchive";
                                readonly type: "bytes32";
                                readonly internalType: "bytes32";
                            }, {
                                readonly name: "endTimestamp";
                                readonly type: "uint256";
                                readonly internalType: "Timestamp";
                            }, {
                                readonly name: "outHash";
                                readonly type: "bytes32";
                                readonly internalType: "bytes32";
                            }, {
                                readonly name: "proverId";
                                readonly type: "address";
                                readonly internalType: "address";
                            }];
                        }, {
                            readonly name: "_fees";
                            readonly type: "bytes32[]";
                            readonly internalType: "bytes32[]";
                        }, {
                            readonly name: "_blobPublicInputs";
                            readonly type: "bytes";
                            readonly internalType: "bytes";
                        }];
                        readonly outputs: readonly [{
                            readonly name: "";
                            readonly type: "bytes32[]";
                            readonly internalType: "bytes32[]";
                        }];
                        readonly stateMutability: "view";
                    }, {
                        readonly type: "function";
                        readonly name: "validateBlobs";
                        readonly inputs: readonly [{
                            readonly name: "_blobsInput";
                            readonly type: "bytes";
                            readonly internalType: "bytes";
                        }, {
                            readonly name: "_checkBlob";
                            readonly type: "bool";
                            readonly internalType: "bool";
                        }];
                        readonly outputs: readonly [{
                            readonly name: "blobHashes";
                            readonly type: "bytes32[]";
                            readonly internalType: "bytes32[]";
                        }, {
                            readonly name: "blobsHashesCommitment";
                            readonly type: "bytes32";
                            readonly internalType: "bytes32";
                        }, {
                            readonly name: "blobPublicInputsHash";
                            readonly type: "bytes32";
                            readonly internalType: "bytes32";
                        }];
                        readonly stateMutability: "view";
                    }];
                    contractBytecode: `0x${string}`;
                };
            };
        };
    };
    stakingAsset: {
        contractAbi: readonly [{
            readonly type: "constructor";
            readonly inputs: readonly [{
                readonly name: "_name";
                readonly type: "string";
                readonly internalType: "string";
            }, {
                readonly name: "_symbol";
                readonly type: "string";
                readonly internalType: "string";
            }, {
                readonly name: "_owner";
                readonly type: "address";
                readonly internalType: "address";
            }];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "error";
            readonly name: "AddressSnapshotLib__IndexOutOfBounds";
            readonly inputs: readonly [{
                readonly name: "index";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "size";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "event";
            readonly name: "Approval";
            readonly inputs: readonly [{
                readonly name: "owner";
                readonly type: "address";
                readonly indexed: true;
                readonly internalType: "address";
            }, {
                readonly name: "spender";
                readonly type: "address";
                readonly indexed: true;
                readonly internalType: "address";
            }, {
                readonly name: "value";
                readonly type: "uint256";
                readonly indexed: false;
                readonly internalType: "uint256";
            }];
            readonly anonymous: false;
        }, {
            readonly type: "error";
            readonly name: "CoinIssuer__InsufficientMintAvailable";
            readonly inputs: readonly [{
                readonly name: "available";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "needed";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "DevNet__InvalidProposer";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "actual";
                readonly type: "address";
                /**
                 * The currently deployed l1 contract addresses
                 */
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "DevNet__NoPruningAllowed";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "ERC20InsufficientAllowance";
            readonly inputs: readonly [{
                readonly name: "spender";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "allowance";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "needed";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "ERC20InsufficientBalance";
            readonly inputs: readonly [{
                readonly name: "sender";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "balance";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "needed";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "ERC20InvalidApprover";
            readonly inputs: readonly [{
                readonly name: "approver";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "ERC20InvalidReceiver";
            readonly inputs: readonly [{
                readonly name: "receiver";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "ERC20InvalidSender";
            readonly inputs: readonly [{
                readonly name: "sender";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "ERC20InvalidSpender";
            readonly inputs: readonly [{
                readonly name: "spender";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "FeeJuicePortal__AlreadyInitialized";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "FeeJuicePortal__InvalidInitialization";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "FeeJuicePortal__Unauthorized";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "FeeLib__InvalidFeeAssetPriceModifier";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__CanOnlyExecuteProposalInPast";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__FailedToPropose";
            readonly inputs: readonly [{
                readonly name: "proposal";
                readonly type: "address";
                readonly internalType: "contract IPayload";
            }];
        }, {
            readonly type: "error"; /** The genesis root of the archive tree. */
            readonly name: "GovernanceProposer__InstanceHaveNoCode";
            readonly inputs: readonly [{
                readonly name: "instance";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__InsufficientVotes";
            readonly inputs: readonly [{
                readonly name: "votesCast";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "votesNeeded";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__InvalidNAndMValues";
            readonly inputs: readonly [{
                readonly name: "n";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "m";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__NCannotBeLargerTHanM";
            readonly inputs: readonly [{
                readonly name: "n";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "m";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__OnlyProposerCanVote";
            readonly inputs: readonly [{
                readonly name: "caller";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "proposer";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__ProposalAlreadyExecuted";
            readonly inputs: readonly [{
                readonly name: "roundNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__ProposalCannotBeAddressZero";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__ProposalHaveNoCode";
            readonly inputs: readonly [{
                readonly name: "proposal";
                readonly type: "address";
                readonly internalType: "contract IPayload";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__ProposalTooOld";
            readonly inputs: readonly [{
                readonly name: "roundNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "currentRoundNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__VoteAlreadyCastForSlot";
            readonly inputs: readonly [{
                readonly name: "slot";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__CallFailed";
            readonly inputs: readonly [{
                readonly name: "target";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__CallerNotGovernanceProposer";
            readonly inputs: readonly [{
                readonly name: "caller";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "governanceProposer";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__CallerNotSelf";
            readonly inputs: readonly [{
                readonly name: "caller";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "self";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__CannotCallAsset";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__DifferentialTooBig";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__DifferentialTooSmall";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__InvalidMinimumVotes";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__LockAmountTooSmall";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__QuorumTooBig";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__QuorumTooSmall";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__TimeTooBig";
            readonly inputs: readonly [{
                readonly name: "name";
                readonly type: "string";
                readonly internalType: "string";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__TimeTooSmall";
            readonly inputs: readonly [{
                readonly name: "name";
                readonly type: "string";
                readonly internalType: "string";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__InsufficientPower";
            readonly inputs: readonly [{
                readonly name: "voter";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "have";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "required";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__InvalidConfiguration";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__NoCheckpointsFound";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalAlreadyDropped";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalCannotBeDropped";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalDoesNotExists";
            readonly inputs: readonly [{
                readonly name: "proposalId";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalLib__MoreVoteThanExistNeeded";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalLib__MoreYeaVoteThanExistNeeded";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalLib__ZeroMinimum";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalLib__ZeroVotesNeeded";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalLib__ZeroYeaVotesNeeded";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalNotActive";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalNotExecutable";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__UserLib__NotInPast";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__WithdrawalAlreadyclaimed";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__WithdrawalNotUnlockedYet";
            readonly inputs: readonly [{
                readonly name: "currentTime";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }, {
                readonly name: "unlocksAt";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }];
        }, {
            readonly type: "error";
            readonly name: "HeaderLib__InvalidHeaderSize";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "HeaderLib__InvalidSlotNumber";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }];
        }, {
            readonly type: "error";
            readonly name: "Inbox__ActorTooLarge";
            readonly inputs: readonly [{
                readonly name: "actor";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Inbox__ContentTooLarge";
            readonly inputs: readonly [{
                readonly name: "content";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Inbox__MustBuildBeforeConsume";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Inbox__SecretHashTooLarge";
            readonly inputs: readonly [{
                readonly name: "secretHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Inbox__Unauthorized";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Inbox__VersionMismatch";
            readonly inputs: readonly [{
                readonly name: "expected";
                /**
                 * Deploys a new rollup contract, funds and initializes the fee juice portal, and initializes the validator set.
                 */
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "MerkleLib__InvalidRoot";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "leaf";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "leafIndex";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "event";
            readonly name: "MinterAdded";
            readonly inputs: readonly [{
                readonly name: "minter";
                readonly type: "address";
                readonly indexed: true;
                readonly internalType: "address";
            }];
            readonly anonymous: false;
        }, {
            readonly type: "event";
            readonly name: "MinterRemoved";
            readonly inputs: readonly [{
                readonly name: "minter";
                readonly type: "address";
                readonly indexed: true;
                readonly internalType: "address";
            }];
            readonly anonymous: false;
        }, {
            readonly type: "error";
            readonly name: "NotMinter";
            readonly inputs: readonly [{
                readonly name: "caller";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__AlreadyNullified";
            readonly inputs: readonly [{
                readonly name: "l2BlockNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "leafIndex";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__BlockNotProven";
            readonly inputs: readonly [{
                readonly name: "l2BlockNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__IncompatibleEntryArguments";
            readonly inputs: readonly [{
                readonly name: "messageHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "storedFee";
                readonly type: "uint64";
                readonly internalType: "uint64";
            }, {
                readonly name: "feePassed";
                readonly type: "uint64";
                readonly internalType: "uint64";
            }, {
                readonly name: "storedVersion";
                readonly type: "uint32";
                readonly internalType: "uint32";
            }, {
                readonly name: "versionPassed";
                readonly type: "uint32";
                readonly internalType: "uint32";
            }, {
                readonly name: "storedDeadline";
                readonly type: "uint32";
                readonly internalType: "uint32";
            }, {
                readonly name: "deadlinePassed";
                readonly type: "uint32";
                readonly internalType: "uint32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__InvalidChainId";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Outbox__InvalidPathLength";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__InvalidRecipient";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "actual";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__NothingToConsume";
            readonly inputs: readonly [{
                readonly name: "messageHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__NothingToConsumeAtBlock";
            readonly inputs: readonly [{
                readonly name: "l2BlockNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__RootAlreadySetAtBlock";
            readonly inputs: readonly [{
                readonly name: "l2BlockNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__Unauthorized";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Outbox__VersionMismatch";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "OwnableInvalidOwner";
            readonly inputs: readonly [{
                readonly name: "owner";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "OwnableUnauthorizedAccount";
            readonly inputs: readonly [{
                readonly name: "account";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "event";
            readonly name: "OwnershipTransferred";
            readonly inputs: readonly [{
                readonly name: "previousOwner";
                readonly type: "address";
                readonly indexed: true;
                readonly internalType: "address";
            }, {
                readonly name: "newOwner";
                readonly type: "address";
                readonly indexed: true;
                readonly internalType: "address";
            }];
            readonly anonymous: false;
        }, {
            readonly type: "error";
            readonly name: "ProofCommitmentEscrow__InsufficientBalance";
            readonly inputs: readonly [{
                readonly name: "balance";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "requested";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "ProofCommitmentEscrow__NotOwner";
            readonly inputs: readonly [{
                readonly name: "caller";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "ProofCommitmentEscrow__WithdrawRequestNotReady";
            readonly inputs: readonly [{
                readonly name: "current";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "readyAt";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }];
        }, {
            readonly type: "error";
            readonly name: "Registry__NoRollupsRegistered";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Registry__RollupAlreadyRegistered";
            readonly inputs: readonly [{
                readonly name: "rollup";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Registry__RollupNotRegistered";
            readonly inputs: readonly [{
                readonly name: "version";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "RewardDistributor__InvalidCaller";
            readonly inputs: readonly [{
                readonly name: "caller";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "canonical";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__AlreadyClaimed";
            readonly inputs: readonly [{
                readonly name: "prover";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "epoch";
                readonly type: "uint256";
                readonly internalType: "Epoch";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InsufficientBondAmount";
            readonly inputs: readonly [{
                readonly name: "minimum";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "provided";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InsufficientFundsInEscrow";
            readonly inputs: readonly [{
                readonly name: "required";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "available";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidArchive";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidBasisPointFee";
            readonly inputs: readonly [{
                readonly name: "basisPointFee";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidBlobHash";
            readonly inputs: readonly [{
                readonly name: "blobHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidBlobProof";
            readonly inputs: readonly [{
                readonly name: "blobHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidBlobPublicInputsHash";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidBlockNumber";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidChainId";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidInHash";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidManaBaseFee";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidPreviousArchive";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidProof";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidProposedArchive";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidTimestamp";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidVersion";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__ManaLimitExceeded";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__NoEpochToProve";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__NonSequentialProving";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__NonZeroDaFee";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__NotPastDeadline";
            readonly inputs: readonly [{
                readonly name: "deadline";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }, {
                readonly name: "currentSlot";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__NothingToPrune";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__PastDeadline";
            readonly inputs: readonly [{
                readonly name: "deadline";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }, {
                readonly name: "currentSlot";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__ProverHaveAlreadySubmitted";
            readonly inputs: readonly [{
                readonly name: "prover";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "epoch";
                readonly type: "uint256";
                readonly internalType: "Epoch";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__SlotAlreadyInChain";
            readonly inputs: readonly [{
                readonly name: "lastSlot";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }, {
                readonly name: "proposedSlot";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__StartAndEndNotSameEpoch";
            readonly inputs: readonly [{
                readonly name: "start";
                readonly type: "uint256";
                readonly internalType: "Epoch";
            }, {
                readonly name: "end";
                readonly type: "uint256";
                readonly internalType: "Epoch";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__StartIsNotBuildingOnProven";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__StartIsNotFirstBlockOfEpoch";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__TimestampInFuture";
            readonly inputs: readonly [{
                readonly name: "max";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__TimestampTooOld";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__TryingToProveNonExistingBlock";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__UnavailableTxs";
            readonly inputs: readonly [{
                readonly name: "txsHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "SampleLib__IndexOutOfBounds";
            readonly inputs: readonly [{
                readonly name: "requested";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "bound";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "SampleLib__SampleLargerThanIndex";
            readonly inputs: readonly [{
                readonly name: "sample";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "index";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "SignatureLib__CannotVerifyEmpty";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "SignatureLib__InvalidSignature";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "recovered";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__AlreadyActive";
            readonly inputs: readonly [{
                readonly name: "attester";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__AlreadyRegistered";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__CannotSlashExitedStake";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__FailedToRemove";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__InsufficientStake";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__InvalidDeposit";
            readonly inputs: readonly [{
                readonly name: "attester";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "proposer";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__NoOneToSlash";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__NotExiting";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__NotSlasher";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__NotWithdrawer";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__NothingToExit";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__WithdrawalNotUnlockedYet";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }, {
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }];
        }, {
            readonly type: "event";
            readonly name: "Transfer";
            readonly inputs: readonly [{
                readonly name: "from";
                readonly type: "address";
                readonly indexed: true;
                readonly internalType: "address";
            }, {
                readonly name: "to";
                readonly type: "address";
                readonly indexed: true;
                readonly internalType: "address";
            }, {
                readonly name: "value";
                readonly type: "uint256";
                readonly indexed: false;
                readonly internalType: "uint256";
            }];
            readonly anonymous: false;
        }, {
            readonly type: "error";
            readonly name: "ValidatorSelection__EpochNotSetup";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "ValidatorSelection__InsufficientAttestations";
            readonly inputs: readonly [{
                readonly name: "minimumNeeded";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "provided";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "ValidatorSelection__InsufficientAttestationsProvided";
            readonly inputs: readonly [{
                readonly name: "minimumNeeded";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "provided";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "ValidatorSelection__InvalidDeposit";
            readonly inputs: readonly [{
                readonly name: "attester";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "proposer";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "ValidatorSelection__InvalidProposer";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "actual";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "function";
            readonly name: "addMinter";
            readonly inputs: readonly [{
                readonly name: "_minter";
                readonly type: "address";
                readonly internalType: "address";
            }];
            readonly outputs: readonly [];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "function";
            readonly name: "allowance";
            readonly inputs: readonly [{
                readonly name: "owner";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "spender";
                readonly type: "address";
                readonly internalType: "address";
            }];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "approve";
            readonly inputs: readonly [{
                readonly name: "spender";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "value";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "bool";
                readonly internalType: "bool";
            }];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "function";
            readonly name: "balanceOf";
            readonly inputs: readonly [{
                readonly name: "account";
                readonly type: "address";
                readonly internalType: "address";
            }];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "decimals";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "uint8";
                readonly internalType: "uint8";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "mint";
            readonly inputs: readonly [{
                readonly name: "_to";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "_amount";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly outputs: readonly [];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "function";
            readonly name: "minters";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "bool";
                readonly internalType: "bool";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "name";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "string";
                readonly internalType: "string";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "owner";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "removeMinter";
            readonly inputs: readonly [{
                readonly name: "_minter";
                readonly type: "address";
                readonly internalType: "address";
            }];
            readonly outputs: readonly [];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "function";
            readonly name: "renounceOwnership";
            readonly inputs: readonly [];
            readonly outputs: readonly [];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "function";
            readonly name: "symbol";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "string";
                readonly internalType: "string";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "totalSupply";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "transfer";
            readonly inputs: readonly [{
                readonly name: "to";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "value";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "bool";
                readonly internalType: "bool";
            }];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "function";
            readonly name: "transferFrom";
            readonly inputs: readonly [{
                readonly name: "from";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "to";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "value";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "bool";
                readonly internalType: "bool";
            }];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "function";
            readonly name: "transferOwnership";
            readonly inputs: readonly [{
                readonly name: "_newOwner";
                readonly type: "address";
                readonly internalType: "address";
            }];
            readonly outputs: readonly [];
            readonly stateMutability: "nonpayable";
        }];
        contractBytecode: `0x${string}`;
    };
    feeAsset: {
        contractAbi: readonly [{
            readonly type: "constructor";
            readonly inputs: readonly [{
                readonly name: "_name";
                readonly type: "string";
                readonly internalType: "string";
            }, {
                readonly name: "_symbol";
                readonly type: "string";
                readonly internalType: "string";
            }, {
                readonly name: "_owner";
                readonly type: "address";
                readonly internalType: "address";
            }];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "error";
            readonly name: "AddressSnapshotLib__IndexOutOfBounds";
            readonly inputs: readonly [{
                readonly name: "index";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "size";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "event";
            readonly name: "Approval";
            readonly inputs: readonly [{
                readonly name: "owner";
                readonly type: "address";
                readonly indexed: true;
                readonly internalType: "address";
            }, {
                readonly name: "spender";
                readonly type: "address";
                readonly indexed: true;
                readonly internalType: "address";
            }, {
                readonly name: "value";
                readonly type: "uint256";
                readonly indexed: false;
                readonly internalType: "uint256";
            }];
            readonly anonymous: false;
        }, {
            readonly type: "error";
            readonly name: "CoinIssuer__InsufficientMintAvailable";
            readonly inputs: readonly [{
                readonly name: "available";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "needed";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "DevNet__InvalidProposer";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "actual";
                readonly type: "address";
                /**
                 * The currently deployed l1 contract addresses
                 */
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "DevNet__NoPruningAllowed";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "ERC20InsufficientAllowance";
            readonly inputs: readonly [{
                readonly name: "spender";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "allowance";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "needed";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "ERC20InsufficientBalance";
            readonly inputs: readonly [{
                readonly name: "sender";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "balance";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "needed";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "ERC20InvalidApprover";
            readonly inputs: readonly [{
                readonly name: "approver";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "ERC20InvalidReceiver";
            readonly inputs: readonly [{
                readonly name: "receiver";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "ERC20InvalidSender";
            readonly inputs: readonly [{
                readonly name: "sender";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "ERC20InvalidSpender";
            readonly inputs: readonly [{
                readonly name: "spender";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "FeeJuicePortal__AlreadyInitialized";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "FeeJuicePortal__InvalidInitialization";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "FeeJuicePortal__Unauthorized";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "FeeLib__InvalidFeeAssetPriceModifier";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__CanOnlyExecuteProposalInPast";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__FailedToPropose";
            readonly inputs: readonly [{
                readonly name: "proposal";
                readonly type: "address";
                readonly internalType: "contract IPayload";
            }];
        }, {
            readonly type: "error"; /** The genesis root of the archive tree. */
            readonly name: "GovernanceProposer__InstanceHaveNoCode";
            readonly inputs: readonly [{
                readonly name: "instance";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__InsufficientVotes";
            readonly inputs: readonly [{
                readonly name: "votesCast";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "votesNeeded";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__InvalidNAndMValues";
            readonly inputs: readonly [{
                readonly name: "n";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "m";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__NCannotBeLargerTHanM";
            readonly inputs: readonly [{
                readonly name: "n";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "m";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__OnlyProposerCanVote";
            readonly inputs: readonly [{
                readonly name: "caller";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "proposer";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__ProposalAlreadyExecuted";
            readonly inputs: readonly [{
                readonly name: "roundNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__ProposalCannotBeAddressZero";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__ProposalHaveNoCode";
            readonly inputs: readonly [{
                readonly name: "proposal";
                readonly type: "address";
                readonly internalType: "contract IPayload";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__ProposalTooOld";
            readonly inputs: readonly [{
                readonly name: "roundNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "currentRoundNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__VoteAlreadyCastForSlot";
            readonly inputs: readonly [{
                readonly name: "slot";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__CallFailed";
            readonly inputs: readonly [{
                readonly name: "target";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__CallerNotGovernanceProposer";
            readonly inputs: readonly [{
                readonly name: "caller";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "governanceProposer";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__CallerNotSelf";
            readonly inputs: readonly [{
                readonly name: "caller";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "self";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__CannotCallAsset";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__DifferentialTooBig";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__DifferentialTooSmall";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__InvalidMinimumVotes";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__LockAmountTooSmall";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__QuorumTooBig";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__QuorumTooSmall";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__TimeTooBig";
            readonly inputs: readonly [{
                readonly name: "name";
                readonly type: "string";
                readonly internalType: "string";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__TimeTooSmall";
            readonly inputs: readonly [{
                readonly name: "name";
                readonly type: "string";
                readonly internalType: "string";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__InsufficientPower";
            readonly inputs: readonly [{
                readonly name: "voter";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "have";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "required";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__InvalidConfiguration";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__NoCheckpointsFound";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalAlreadyDropped";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalCannotBeDropped";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalDoesNotExists";
            readonly inputs: readonly [{
                readonly name: "proposalId";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalLib__MoreVoteThanExistNeeded";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalLib__MoreYeaVoteThanExistNeeded";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalLib__ZeroMinimum";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalLib__ZeroVotesNeeded";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalLib__ZeroYeaVotesNeeded";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalNotActive";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalNotExecutable";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__UserLib__NotInPast";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__WithdrawalAlreadyclaimed";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__WithdrawalNotUnlockedYet";
            readonly inputs: readonly [{
                readonly name: "currentTime";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }, {
                readonly name: "unlocksAt";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }];
        }, {
            readonly type: "error";
            readonly name: "HeaderLib__InvalidHeaderSize";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "HeaderLib__InvalidSlotNumber";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }];
        }, {
            readonly type: "error";
            readonly name: "Inbox__ActorTooLarge";
            readonly inputs: readonly [{
                readonly name: "actor";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Inbox__ContentTooLarge";
            readonly inputs: readonly [{
                readonly name: "content";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Inbox__MustBuildBeforeConsume";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Inbox__SecretHashTooLarge";
            readonly inputs: readonly [{
                readonly name: "secretHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Inbox__Unauthorized";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Inbox__VersionMismatch";
            readonly inputs: readonly [{
                readonly name: "expected";
                /**
                 * Deploys a new rollup contract, funds and initializes the fee juice portal, and initializes the validator set.
                 */
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "MerkleLib__InvalidRoot";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "leaf";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "leafIndex";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "event";
            readonly name: "MinterAdded";
            readonly inputs: readonly [{
                readonly name: "minter";
                readonly type: "address";
                readonly indexed: true;
                readonly internalType: "address";
            }];
            readonly anonymous: false;
        }, {
            readonly type: "event";
            readonly name: "MinterRemoved";
            readonly inputs: readonly [{
                readonly name: "minter";
                readonly type: "address";
                readonly indexed: true;
                readonly internalType: "address";
            }];
            readonly anonymous: false;
        }, {
            readonly type: "error";
            readonly name: "NotMinter";
            readonly inputs: readonly [{
                readonly name: "caller";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__AlreadyNullified";
            readonly inputs: readonly [{
                readonly name: "l2BlockNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "leafIndex";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__BlockNotProven";
            readonly inputs: readonly [{
                readonly name: "l2BlockNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__IncompatibleEntryArguments";
            readonly inputs: readonly [{
                readonly name: "messageHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "storedFee";
                readonly type: "uint64";
                readonly internalType: "uint64";
            }, {
                readonly name: "feePassed";
                readonly type: "uint64";
                readonly internalType: "uint64";
            }, {
                readonly name: "storedVersion";
                readonly type: "uint32";
                readonly internalType: "uint32";
            }, {
                readonly name: "versionPassed";
                readonly type: "uint32";
                readonly internalType: "uint32";
            }, {
                readonly name: "storedDeadline";
                readonly type: "uint32";
                readonly internalType: "uint32";
            }, {
                readonly name: "deadlinePassed";
                readonly type: "uint32";
                readonly internalType: "uint32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__InvalidChainId";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Outbox__InvalidPathLength";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__InvalidRecipient";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "actual";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__NothingToConsume";
            readonly inputs: readonly [{
                readonly name: "messageHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__NothingToConsumeAtBlock";
            readonly inputs: readonly [{
                readonly name: "l2BlockNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__RootAlreadySetAtBlock";
            readonly inputs: readonly [{
                readonly name: "l2BlockNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__Unauthorized";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Outbox__VersionMismatch";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "OwnableInvalidOwner";
            readonly inputs: readonly [{
                readonly name: "owner";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "OwnableUnauthorizedAccount";
            readonly inputs: readonly [{
                readonly name: "account";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "event";
            readonly name: "OwnershipTransferred";
            readonly inputs: readonly [{
                readonly name: "previousOwner";
                readonly type: "address";
                readonly indexed: true;
                readonly internalType: "address";
            }, {
                readonly name: "newOwner";
                readonly type: "address";
                readonly indexed: true;
                readonly internalType: "address";
            }];
            readonly anonymous: false;
        }, {
            readonly type: "error";
            readonly name: "ProofCommitmentEscrow__InsufficientBalance";
            readonly inputs: readonly [{
                readonly name: "balance";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "requested";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "ProofCommitmentEscrow__NotOwner";
            readonly inputs: readonly [{
                readonly name: "caller";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "ProofCommitmentEscrow__WithdrawRequestNotReady";
            readonly inputs: readonly [{
                readonly name: "current";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "readyAt";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }];
        }, {
            readonly type: "error";
            readonly name: "Registry__NoRollupsRegistered";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Registry__RollupAlreadyRegistered";
            readonly inputs: readonly [{
                readonly name: "rollup";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Registry__RollupNotRegistered";
            readonly inputs: readonly [{
                readonly name: "version";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "RewardDistributor__InvalidCaller";
            readonly inputs: readonly [{
                readonly name: "caller";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "canonical";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__AlreadyClaimed";
            readonly inputs: readonly [{
                readonly name: "prover";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "epoch";
                readonly type: "uint256";
                readonly internalType: "Epoch";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InsufficientBondAmount";
            readonly inputs: readonly [{
                readonly name: "minimum";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "provided";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InsufficientFundsInEscrow";
            readonly inputs: readonly [{
                readonly name: "required";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "available";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidArchive";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidBasisPointFee";
            readonly inputs: readonly [{
                readonly name: "basisPointFee";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidBlobHash";
            readonly inputs: readonly [{
                readonly name: "blobHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidBlobProof";
            readonly inputs: readonly [{
                readonly name: "blobHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidBlobPublicInputsHash";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidBlockNumber";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidChainId";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidInHash";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidManaBaseFee";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidPreviousArchive";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidProof";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidProposedArchive";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidTimestamp";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidVersion";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__ManaLimitExceeded";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__NoEpochToProve";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__NonSequentialProving";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__NonZeroDaFee";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__NotPastDeadline";
            readonly inputs: readonly [{
                readonly name: "deadline";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }, {
                readonly name: "currentSlot";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__NothingToPrune";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__PastDeadline";
            readonly inputs: readonly [{
                readonly name: "deadline";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }, {
                readonly name: "currentSlot";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__ProverHaveAlreadySubmitted";
            readonly inputs: readonly [{
                readonly name: "prover";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "epoch";
                readonly type: "uint256";
                readonly internalType: "Epoch";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__SlotAlreadyInChain";
            readonly inputs: readonly [{
                readonly name: "lastSlot";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }, {
                readonly name: "proposedSlot";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__StartAndEndNotSameEpoch";
            readonly inputs: readonly [{
                readonly name: "start";
                readonly type: "uint256";
                readonly internalType: "Epoch";
            }, {
                readonly name: "end";
                readonly type: "uint256";
                readonly internalType: "Epoch";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__StartIsNotBuildingOnProven";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__StartIsNotFirstBlockOfEpoch";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__TimestampInFuture";
            readonly inputs: readonly [{
                readonly name: "max";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__TimestampTooOld";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__TryingToProveNonExistingBlock";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__UnavailableTxs";
            readonly inputs: readonly [{
                readonly name: "txsHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "SampleLib__IndexOutOfBounds";
            readonly inputs: readonly [{
                readonly name: "requested";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "bound";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "SampleLib__SampleLargerThanIndex";
            readonly inputs: readonly [{
                readonly name: "sample";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "index";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "SignatureLib__CannotVerifyEmpty";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "SignatureLib__InvalidSignature";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "recovered";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__AlreadyActive";
            readonly inputs: readonly [{
                readonly name: "attester";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__AlreadyRegistered";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__CannotSlashExitedStake";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__FailedToRemove";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__InsufficientStake";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__InvalidDeposit";
            readonly inputs: readonly [{
                readonly name: "attester";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "proposer";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__NoOneToSlash";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__NotExiting";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__NotSlasher";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__NotWithdrawer";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__NothingToExit";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__WithdrawalNotUnlockedYet";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }, {
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }];
        }, {
            readonly type: "event";
            readonly name: "Transfer";
            readonly inputs: readonly [{
                readonly name: "from";
                readonly type: "address";
                readonly indexed: true;
                readonly internalType: "address";
            }, {
                readonly name: "to";
                readonly type: "address";
                readonly indexed: true;
                readonly internalType: "address";
            }, {
                readonly name: "value";
                readonly type: "uint256";
                readonly indexed: false;
                readonly internalType: "uint256";
            }];
            readonly anonymous: false;
        }, {
            readonly type: "error";
            readonly name: "ValidatorSelection__EpochNotSetup";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "ValidatorSelection__InsufficientAttestations";
            readonly inputs: readonly [{
                readonly name: "minimumNeeded";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "provided";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "ValidatorSelection__InsufficientAttestationsProvided";
            readonly inputs: readonly [{
                readonly name: "minimumNeeded";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "provided";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "ValidatorSelection__InvalidDeposit";
            readonly inputs: readonly [{
                readonly name: "attester";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "proposer";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "ValidatorSelection__InvalidProposer";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "actual";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "function";
            readonly name: "addMinter";
            readonly inputs: readonly [{
                readonly name: "_minter";
                readonly type: "address";
                readonly internalType: "address";
            }];
            readonly outputs: readonly [];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "function";
            readonly name: "allowance";
            readonly inputs: readonly [{
                readonly name: "owner";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "spender";
                readonly type: "address";
                readonly internalType: "address";
            }];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "approve";
            readonly inputs: readonly [{
                readonly name: "spender";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "value";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "bool";
                readonly internalType: "bool";
            }];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "function";
            readonly name: "balanceOf";
            readonly inputs: readonly [{
                readonly name: "account";
                readonly type: "address";
                readonly internalType: "address";
            }];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "decimals";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "uint8";
                readonly internalType: "uint8";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "mint";
            readonly inputs: readonly [{
                readonly name: "_to";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "_amount";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly outputs: readonly [];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "function";
            readonly name: "minters";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "bool";
                readonly internalType: "bool";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "name";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "string";
                readonly internalType: "string";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "owner";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "removeMinter";
            readonly inputs: readonly [{
                readonly name: "_minter";
                readonly type: "address";
                readonly internalType: "address";
            }];
            readonly outputs: readonly [];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "function";
            readonly name: "renounceOwnership";
            readonly inputs: readonly [];
            readonly outputs: readonly [];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "function";
            readonly name: "symbol";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "string";
                readonly internalType: "string";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "totalSupply";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "transfer";
            readonly inputs: readonly [{
                readonly name: "to";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "value";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "bool";
                readonly internalType: "bool";
            }];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "function";
            readonly name: "transferFrom";
            readonly inputs: readonly [{
                readonly name: "from";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "to";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "value";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "bool";
                readonly internalType: "bool";
            }];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "function";
            readonly name: "transferOwnership";
            readonly inputs: readonly [{
                readonly name: "_newOwner";
                readonly type: "address";
                readonly internalType: "address";
            }];
            readonly outputs: readonly [];
            readonly stateMutability: "nonpayable";
        }];
        contractBytecode: `0x${string}`;
    };
    feeJuicePortal: {
        contractAbi: readonly [{
            readonly type: "constructor";
            readonly inputs: readonly [{
                readonly name: "_rollup";
                readonly type: "address";
                readonly internalType: "contract IRollup";
            }, {
                readonly name: "_underlying";
                readonly type: "address";
                readonly internalType: "contract IERC20";
            }, {
                readonly name: "_inbox";
                readonly type: "address";
                readonly internalType: "contract IInbox";
            }, {
                readonly name: "_version";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "error";
            readonly name: "AddressSnapshotLib__IndexOutOfBounds";
            readonly inputs: readonly [{
                readonly name: "index";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "size";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "CoinIssuer__InsufficientMintAvailable";
            readonly inputs: readonly [{
                readonly name: "available";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "needed";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "event";
            readonly name: "DepositToAztecPublic";
            readonly inputs: readonly [{
                readonly name: "to";
                readonly type: "bytes32";
                readonly indexed: true;
                readonly internalType: "bytes32";
            }, {
                readonly name: "amount";
                readonly type: "uint256";
                readonly indexed: false;
                readonly internalType: "uint256";
            }, {
                readonly name: "secretHash";
                readonly type: "bytes32";
                readonly indexed: false;
                readonly internalType: "bytes32";
            }, {
                readonly name: "key";
                readonly type: "bytes32";
                readonly indexed: false;
                readonly internalType: "bytes32";
            }, {
                readonly name: "index";
                readonly type: "uint256";
                readonly indexed: false;
                readonly internalType: "uint256";
            }];
            readonly anonymous: false;
        }, {
            readonly type: "error";
            readonly name: "DevNet__InvalidProposer";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "actual";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "DevNet__NoPruningAllowed";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "FeeJuicePortal__AlreadyInitialized";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "FeeJuicePortal__InvalidInitialization";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "FeeJuicePortal__Unauthorized";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "FeeLib__InvalidFeeAssetPriceModifier";
            readonly inputs: readonly [];
        }, {
            readonly type: "event";
            readonly name: "FeesDistributed";
            readonly inputs: readonly [{
                readonly name: "to";
                readonly type: "address";
                readonly indexed: true;
                readonly internalType: "address";
            }, {
                readonly name: "amount";
                readonly type: "uint256";
                readonly indexed: false;
                readonly internalType: "uint256";
            }];
            readonly anonymous: false;
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__CanOnlyExecuteProposalInPast";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__FailedToPropose";
            readonly inputs: readonly [{
                readonly name: "proposal";
                readonly type: "address";
                readonly internalType: "contract IPayload";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__InstanceHaveNoCode";
            readonly inputs: readonly [{
                readonly name: "instance";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__InsufficientVotes";
            readonly inputs: readonly [{
                readonly name: "votesCast";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "votesNeeded";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__InvalidNAndMValues";
            readonly inputs: readonly [{
                readonly name: "n";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "m";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__NCannotBeLargerTHanM";
            readonly inputs: readonly [{
                readonly name: "n";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "m";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__OnlyProposerCanVote";
            readonly inputs: readonly [{
                readonly name: "caller";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "proposer";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__ProposalAlreadyExecuted";
            readonly inputs: readonly [{
                readonly name: "roundNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__ProposalCannotBeAddressZero";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__ProposalHaveNoCode";
            readonly inputs: readonly [{
                readonly name: "proposal";
                readonly type: "address";
                readonly internalType: "contract IPayload";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__ProposalTooOld";
            readonly inputs: readonly [{
                readonly name: "roundNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "currentRoundNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__VoteAlreadyCastForSlot";
            readonly inputs: readonly [{
                readonly name: "slot";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__CallFailed";
            readonly inputs: readonly [{
                readonly name: "target";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__CallerNotGovernanceProposer";
            readonly inputs: readonly [{
                readonly name: "caller";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "governanceProposer";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__CallerNotSelf";
            readonly inputs: readonly [{
                readonly name: "caller";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "self";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__CannotCallAsset";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__DifferentialTooBig";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__DifferentialTooSmall";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__InvalidMinimumVotes";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__LockAmountTooSmall";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__QuorumTooBig";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__QuorumTooSmall";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__TimeTooBig";
            readonly inputs: readonly [{
                readonly name: "name";
                readonly type: "string";
                readonly internalType: "string";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__TimeTooSmall";
            readonly inputs: readonly [{
                readonly name: "name";
                readonly type: "string";
                readonly internalType: "string";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__InsufficientPower";
            readonly inputs: readonly [{
                readonly name: "voter";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "have";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "required";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__InvalidConfiguration";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__NoCheckpointsFound";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalAlreadyDropped";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalCannotBeDropped";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalDoesNotExists";
            readonly inputs: readonly [{
                readonly name: "proposalId";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalLib__MoreVoteThanExistNeeded";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalLib__MoreYeaVoteThanExistNeeded";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalLib__ZeroMinimum";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalLib__ZeroVotesNeeded";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalLib__ZeroYeaVotesNeeded";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalNotActive";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalNotExecutable";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__UserLib__NotInPast";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__WithdrawalAlreadyclaimed";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__WithdrawalNotUnlockedYet";
            readonly inputs: readonly [{
                readonly name: "currentTime";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }, {
                readonly name: "unlocksAt";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }];
        }, {
            readonly type: "error";
            readonly name: "HeaderLib__InvalidHeaderSize";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "HeaderLib__InvalidSlotNumber";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }];
        }, {
            readonly type: "function";
            readonly name: "INBOX";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "contract IInbox";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "error";
            readonly name: "Inbox__ActorTooLarge";
            readonly inputs: readonly [{
                readonly name: "actor";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Inbox__ContentTooLarge";
            readonly inputs: readonly [{
                readonly name: "content";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Inbox__MustBuildBeforeConsume";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Inbox__SecretHashTooLarge";
            readonly inputs: readonly [{
                readonly name: "secretHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Inbox__Unauthorized";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Inbox__VersionMismatch";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "function";
            readonly name: "L2_TOKEN_ADDRESS";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "error";
            readonly name: "MerkleLib__InvalidRoot";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "leaf";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "leafIndex";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__AlreadyNullified";
            readonly inputs: readonly [{
                readonly name: "l2BlockNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "leafIndex";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__BlockNotProven";
            readonly inputs: readonly [{
                readonly name: "l2BlockNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__IncompatibleEntryArguments";
            readonly inputs: readonly [{
                readonly name: "messageHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "storedFee";
                readonly type: "uint64";
                readonly internalType: "uint64";
            }, {
                readonly name: "feePassed";
                readonly type: "uint64";
                readonly internalType: "uint64";
            }, {
                readonly name: "storedVersion";
                readonly type: "uint32";
                readonly internalType: "uint32";
            }, {
                readonly name: "versionPassed";
                readonly type: "uint32";
                readonly internalType: "uint32";
            }, {
                readonly name: "storedDeadline";
                readonly type: "uint32";
                readonly internalType: "uint32";
            }, {
                readonly name: "deadlinePassed";
                readonly type: "uint32";
                readonly internalType: "uint32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__InvalidChainId";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Outbox__InvalidPathLength";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__InvalidRecipient";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "actual";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__NothingToConsume";
            readonly inputs: readonly [{
                readonly name: "messageHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__NothingToConsumeAtBlock";
            readonly inputs: readonly [{
                readonly name: "l2BlockNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__RootAlreadySetAtBlock";
            readonly inputs: readonly [{
                readonly name: "l2BlockNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__Unauthorized";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Outbox__VersionMismatch";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "ProofCommitmentEscrow__InsufficientBalance";
            readonly inputs: readonly [{
                readonly name: "balance";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "requested";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "ProofCommitmentEscrow__NotOwner";
            readonly inputs: readonly [{
                readonly name: "caller";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "ProofCommitmentEscrow__WithdrawRequestNotReady";
            readonly inputs: readonly [{
                readonly name: "current";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "readyAt";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }];
        }, {
            readonly type: "function";
            readonly name: "ROLLUP";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "contract IRollup";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "error";
            readonly name: "Registry__NoRollupsRegistered";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Registry__RollupAlreadyRegistered";
            readonly inputs: readonly [{
                readonly name: "rollup";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Registry__RollupNotRegistered";
            readonly inputs: readonly [{
                readonly name: "version";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "RewardDistributor__InvalidCaller";
            readonly inputs: readonly [{
                readonly name: "caller";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "canonical";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__AlreadyClaimed";
            readonly inputs: readonly [{
                readonly name: "prover";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "epoch";
                readonly type: "uint256";
                readonly internalType: "Epoch";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InsufficientBondAmount";
            readonly inputs: readonly [{
                readonly name: "minimum";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "provided";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InsufficientFundsInEscrow";
            readonly inputs: readonly [{
                readonly name: "required";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "available";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidArchive";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidBasisPointFee";
            readonly inputs: readonly [{
                readonly name: "basisPointFee";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidBlobHash";
            readonly inputs: readonly [{
                readonly name: "blobHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidBlobProof";
            readonly inputs: readonly [{
                readonly name: "blobHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidBlobPublicInputsHash";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidBlockNumber";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidChainId";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidInHash";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidManaBaseFee";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidPreviousArchive";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidProof";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidProposedArchive";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidTimestamp";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidVersion";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__ManaLimitExceeded";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__NoEpochToProve";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__NonSequentialProving";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__NonZeroDaFee";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__NotPastDeadline";
            readonly inputs: readonly [{
                readonly name: "deadline";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }, {
                readonly name: "currentSlot";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__NothingToPrune";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__PastDeadline";
            readonly inputs: readonly [{
                readonly name: "deadline";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }, {
                readonly name: "currentSlot";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__ProverHaveAlreadySubmitted";
            readonly inputs: readonly [{
                readonly name: "prover";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "epoch";
                readonly type: "uint256";
                readonly internalType: "Epoch";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__SlotAlreadyInChain";
            readonly inputs: readonly [{
                readonly name: "lastSlot";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }, {
                readonly name: "proposedSlot";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__StartAndEndNotSameEpoch";
            readonly inputs: readonly [{
                readonly name: "start";
                readonly type: "uint256";
                readonly internalType: "Epoch";
            }, {
                readonly name: "end";
                readonly type: "uint256";
                readonly internalType: "Epoch";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__StartIsNotBuildingOnProven";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__StartIsNotFirstBlockOfEpoch";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__TimestampInFuture";
            readonly inputs: readonly [{
                readonly name: "max";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__TimestampTooOld";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__TryingToProveNonExistingBlock";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__UnavailableTxs";
            readonly inputs: readonly [{
                readonly name: "txsHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "SafeERC20FailedOperation";
            readonly inputs: readonly [{
                readonly name: "token";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "SampleLib__IndexOutOfBounds";
            readonly inputs: readonly [{
                readonly name: "requested";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "bound";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "SampleLib__SampleLargerThanIndex";
            readonly inputs: readonly [{
                readonly name: "sample";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "index";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "SignatureLib__CannotVerifyEmpty";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "SignatureLib__InvalidSignature";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "address";
                readonly internalType: "address"; /**
                 * Helper function to deploy ETH contracts.
                 * @param walletClient - A viem WalletClient.
                 * @param publicClient - A viem PublicClient.
                 * @param abi - The ETH contract's ABI (as abitype's Abi).
                 * @param bytecode  - The ETH contract's bytecode.
                 * @param args - Constructor arguments for the contract.
                 * @param maybeSalt - Optional salt for CREATE2 deployment (does not wait for deployment tx to be mined if set, does not send tx if contract already exists).
                 * @returns The ETH address the contract was deployed to.
                 */
            }, {
                readonly name: "recovered";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__AlreadyActive";
            readonly inputs: readonly [{
                readonly name: "attester";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__AlreadyRegistered";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__CannotSlashExitedStake";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__FailedToRemove";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__InsufficientStake";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__InvalidDeposit";
            readonly inputs: readonly [{
                readonly name: "attester";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "proposer";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__NoOneToSlash";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__NotExiting";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__NotSlasher";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__NotWithdrawer";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__NothingToExit";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__WithdrawalNotUnlockedYet";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }, {
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }];
        }, {
            readonly type: "function";
            readonly name: "UNDERLYING";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "contract IERC20";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "VERSION";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "error";
            readonly name: "ValidatorSelection__EpochNotSetup";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "ValidatorSelection__InsufficientAttestations";
            readonly inputs: readonly [{
                readonly name: "minimumNeeded";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "provided";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "ValidatorSelection__InsufficientAttestationsProvided";
            readonly inputs: readonly [{
                readonly name: "minimumNeeded";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "provided";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "ValidatorSelection__InvalidDeposit";
            readonly inputs: readonly [{
                readonly name: "attester";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "proposer";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "ValidatorSelection__InvalidProposer";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "actual";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "function";
            readonly name: "depositToAztecPublic";
            readonly inputs: readonly [{
                readonly name: "_to";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "_amount";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "_secretHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "function";
            readonly name: "distributeFees";
            readonly inputs: readonly [{
                readonly name: "_to";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "_amount";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly outputs: readonly [];
            readonly stateMutability: "nonpayable";
        }];
        contractBytecode: `0x${string}`;
    };
    rewardDistributor: {
        contractAbi: readonly [{
            readonly type: "constructor";
            readonly inputs: readonly [{
                readonly name: "_asset";
                readonly type: "address";
                readonly internalType: "contract IERC20";
            }, {
                readonly name: "_registry";
                readonly type: "address";
                readonly internalType: "contract IRegistry";
            }, {
                readonly name: "_owner";
                readonly type: "address";
                readonly internalType: "address";
            }];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "function";
            readonly name: "ASSET";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "contract IERC20";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "error";
            readonly name: "AddressSnapshotLib__IndexOutOfBounds";
            readonly inputs: readonly [{
                readonly name: "index";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "size";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "function";
            readonly name: "BLOCK_REWARD";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "error";
            readonly name: "CoinIssuer__InsufficientMintAvailable";
            readonly inputs: readonly [{
                readonly name: "available";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "needed";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "DevNet__InvalidProposer";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "actual";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "DevNet__NoPruningAllowed";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "FeeJuicePortal__AlreadyInitialized";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "FeeJuicePortal__InvalidInitialization";
            readonly inputs: readonly []; /**
             * The contract abi.
             */
        }, {
            readonly type: "error";
            readonly name: "FeeJuicePortal__Unauthorized"; /**
             * The contract bytecode
             */
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "FeeLib__InvalidFeeAssetPriceModifier";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__CanOnlyExecuteProposalInPast";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__FailedToPropose";
            readonly inputs: readonly [{
                readonly name: "proposal";
                readonly type: "address";
                readonly internalType: "contract IPayload";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__InstanceHaveNoCode";
            readonly inputs: readonly [{
                readonly name: "instance";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__InsufficientVotes";
            readonly inputs: readonly [{
                readonly name: "votesCast";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "votesNeeded";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__InvalidNAndMValues";
            readonly inputs: readonly [{
                readonly name: "n";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "m";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__NCannotBeLargerTHanM";
            readonly inputs: readonly [{
                readonly name: "n";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "m";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__OnlyProposerCanVote";
            readonly inputs: readonly [{
                readonly name: "caller";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "proposer";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error"; /** The vk tree root. */
            readonly name: "GovernanceProposer__ProposalAlreadyExecuted";
            readonly inputs: readonly [{
                readonly name: "roundNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__ProposalCannotBeAddressZero";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__ProposalHaveNoCode";
            readonly inputs: readonly [{
                readonly name: "proposal";
                readonly type: "address";
                readonly internalType: "contract IPayload";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__ProposalTooOld";
            readonly inputs: readonly [{
                readonly name: "roundNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "currentRoundNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__VoteAlreadyCastForSlot";
            readonly inputs: readonly [{
                readonly name: "slot";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__CallFailed";
            readonly inputs: readonly [{
                readonly name: "target";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__CallerNotGovernanceProposer";
            readonly inputs: readonly [{
                readonly name: "caller";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "governanceProposer";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__CallerNotSelf";
            readonly inputs: readonly [{
                readonly name: "caller";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "self";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__CannotCallAsset";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__DifferentialTooBig";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__DifferentialTooSmall";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__InvalidMinimumVotes";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__LockAmountTooSmall";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__QuorumTooBig";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__QuorumTooSmall";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__TimeTooBig";
            readonly inputs: readonly [{
                readonly name: "name";
                readonly type: "string";
                readonly internalType: "string";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__TimeTooSmall";
            readonly inputs: readonly [{
                readonly name: "name";
                readonly type: "string";
                readonly internalType: "string";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__InsufficientPower";
            readonly inputs: readonly [{
                readonly name: "voter";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "have";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "required";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__InvalidConfiguration";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__NoCheckpointsFound";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalAlreadyDropped";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalCannotBeDropped";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalDoesNotExists";
            readonly inputs: readonly [{
                readonly name: "proposalId";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalLib__MoreVoteThanExistNeeded";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalLib__MoreYeaVoteThanExistNeeded";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalLib__ZeroMinimum";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalLib__ZeroVotesNeeded";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalLib__ZeroYeaVotesNeeded";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalNotActive";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalNotExecutable";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__UserLib__NotInPast";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__WithdrawalAlreadyclaimed";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__WithdrawalNotUnlockedYet";
            readonly inputs: readonly [{
                readonly name: "currentTime";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }, {
                readonly name: "unlocksAt";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }];
        }, {
            readonly type: "error";
            readonly name: "HeaderLib__InvalidHeaderSize";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "HeaderLib__InvalidSlotNumber";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }];
        }, {
            readonly type: "error";
            readonly name: "Inbox__ActorTooLarge";
            readonly inputs: readonly [{
                readonly name: "actor";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Inbox__ContentTooLarge";
            readonly inputs: readonly [{
                readonly name: "content";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Inbox__MustBuildBeforeConsume";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Inbox__SecretHashTooLarge";
            readonly inputs: readonly [{
                readonly name: "secretHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Inbox__Unauthorized";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Inbox__VersionMismatch";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "MerkleLib__InvalidRoot";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "leaf";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "leafIndex";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__AlreadyNullified";
            readonly inputs: readonly [{
                readonly name: "l2BlockNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "leafIndex";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__BlockNotProven";
            readonly inputs: readonly [{
                readonly name: "l2BlockNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__IncompatibleEntryArguments";
            readonly inputs: readonly [{
                readonly name: "messageHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "storedFee";
                readonly type: "uint64";
                readonly internalType: "uint64";
            }, {
                readonly name: "feePassed";
                readonly type: "uint64";
                readonly internalType: "uint64";
            }, {
                readonly name: "storedVersion";
                readonly type: "uint32";
                readonly internalType: "uint32";
            }, {
                readonly name: "versionPassed";
                readonly type: "uint32";
                readonly internalType: "uint32";
            }, {
                readonly name: "storedDeadline";
                readonly type: "uint32";
                readonly internalType: "uint32";
            }, {
                readonly name: "deadlinePassed";
                readonly type: "uint32";
                readonly internalType: "uint32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__InvalidChainId";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Outbox__InvalidPathLength";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__InvalidRecipient";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "actual";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__NothingToConsume";
            readonly inputs: readonly [{
                readonly name: "messageHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__NothingToConsumeAtBlock";
            readonly inputs: readonly [{
                readonly name: "l2BlockNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__RootAlreadySetAtBlock";
            readonly inputs: readonly [{
                readonly name: "l2BlockNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__Unauthorized";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Outbox__VersionMismatch";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "OwnableInvalidOwner";
            readonly inputs: readonly [{
                readonly name: "owner";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "OwnableUnauthorizedAccount";
            readonly inputs: readonly [{
                readonly name: "account";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "event";
            readonly name: "OwnershipTransferred";
            readonly inputs: readonly [{
                readonly name: "previousOwner";
                readonly type: "address";
                readonly indexed: true;
                readonly internalType: "address";
            }, {
                readonly name: "newOwner";
                readonly type: "address";
                readonly indexed: true;
                readonly internalType: "address";
            }];
            readonly anonymous: false;
        }, {
            readonly type: "error";
            readonly name: "ProofCommitmentEscrow__InsufficientBalance";
            readonly inputs: readonly [{
                readonly name: "balance";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "requested";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "ProofCommitmentEscrow__NotOwner";
            readonly inputs: readonly [{
                readonly name: "caller";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "ProofCommitmentEscrow__WithdrawRequestNotReady";
            readonly inputs: readonly [{
                readonly name: "current";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "readyAt";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }];
        }, {
            readonly type: "function";
            readonly name: "REGISTRY";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "contract IRegistry";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "error";
            readonly name: "Registry__NoRollupsRegistered";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Registry__RollupAlreadyRegistered";
            readonly inputs: readonly [{
                readonly name: "rollup";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Registry__RollupNotRegistered";
            readonly inputs: readonly [{
                readonly name: "version";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "RewardDistributor__InvalidCaller";
            readonly inputs: readonly [{
                readonly name: "caller";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "canonical";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__AlreadyClaimed";
            readonly inputs: readonly [{
                readonly name: "prover";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "epoch";
                readonly type: "uint256";
                readonly internalType: "Epoch";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InsufficientBondAmount";
            readonly inputs: readonly [{
                readonly name: "minimum";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "provided";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InsufficientFundsInEscrow";
            readonly inputs: readonly [{
                readonly name: "required";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "available";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidArchive";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidBasisPointFee";
            readonly inputs: readonly [{
                readonly name: "basisPointFee";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidBlobHash";
            readonly inputs: readonly [{
                readonly name: "blobHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidBlobProof";
            readonly inputs: readonly [{
                readonly name: "blobHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidBlobPublicInputsHash";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidBlockNumber";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidChainId";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidInHash";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidManaBaseFee";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidPreviousArchive";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidProof";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidProposedArchive";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidTimestamp";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidVersion";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__ManaLimitExceeded";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__NoEpochToProve";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__NonSequentialProving";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__NonZeroDaFee";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__NotPastDeadline";
            readonly inputs: readonly [{
                readonly name: "deadline";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }, {
                readonly name: "currentSlot";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__NothingToPrune";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__PastDeadline";
            readonly inputs: readonly [{
                readonly name: "deadline";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }, {
                readonly name: "currentSlot";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__ProverHaveAlreadySubmitted";
            readonly inputs: readonly [{
                readonly name: "prover";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "epoch";
                readonly type: "uint256";
                readonly internalType: "Epoch";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__SlotAlreadyInChain";
            readonly inputs: readonly [{
                readonly name: "lastSlot";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }, {
                readonly name: "proposedSlot";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__StartAndEndNotSameEpoch";
            readonly inputs: readonly [{
                readonly name: "start";
                readonly type: "uint256";
                readonly internalType: "Epoch";
            }, {
                readonly name: "end";
                readonly type: "uint256";
                readonly internalType: "Epoch";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__StartIsNotBuildingOnProven";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__StartIsNotFirstBlockOfEpoch";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__TimestampInFuture";
            readonly inputs: readonly [{
                readonly name: "max";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__TimestampTooOld";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__TryingToProveNonExistingBlock";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__UnavailableTxs";
            readonly inputs: readonly [{
                readonly name: "txsHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "SafeERC20FailedOperation";
            readonly inputs: readonly [{
                readonly name: "token";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "SampleLib__IndexOutOfBounds";
            readonly inputs: readonly [{
                readonly name: "requested";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "bound";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "SampleLib__SampleLargerThanIndex";
            readonly inputs: readonly [{
                readonly name: "sample";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "index";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "SignatureLib__CannotVerifyEmpty";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "SignatureLib__InvalidSignature";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "recovered";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__AlreadyActive";
            readonly inputs: readonly [{
                readonly name: "attester";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__AlreadyRegistered";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__CannotSlashExitedStake";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__FailedToRemove";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__InsufficientStake";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__InvalidDeposit";
            readonly inputs: readonly [{
                readonly name: "attester";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "proposer";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__NoOneToSlash";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__NotExiting";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__NotSlasher";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__NotWithdrawer";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__NothingToExit";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__WithdrawalNotUnlockedYet";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }, {
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }];
        }, {
            readonly type: "error";
            readonly name: "ValidatorSelection__EpochNotSetup";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "ValidatorSelection__InsufficientAttestations";
            readonly inputs: readonly [{
                readonly name: "minimumNeeded";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "provided";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "ValidatorSelection__InsufficientAttestationsProvided";
            readonly inputs: readonly [{
                readonly name: "minimumNeeded";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "provided";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "ValidatorSelection__InvalidDeposit";
            readonly inputs: readonly [{
                readonly name: "attester";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "proposer";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "ValidatorSelection__InvalidProposer";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "actual";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "function";
            readonly name: "canonicalRollup";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "claim";
            readonly inputs: readonly [{
                readonly name: "_to";
                readonly type: "address";
                readonly internalType: "address";
            }];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "function";
            readonly name: "claimBlockRewards";
            readonly inputs: readonly [{
                readonly name: "_to";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "_blocks";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "function";
            readonly name: "owner";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "renounceOwnership";
            readonly inputs: readonly [];
            readonly outputs: readonly [];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "function";
            readonly name: "transferOwnership";
            readonly inputs: readonly [{
                readonly name: "newOwner";
                readonly type: "address";
                readonly internalType: "address";
            }];
            readonly outputs: readonly [];
            readonly stateMutability: "nonpayable";
        }];
        contractBytecode: `0x${string}`;
    };
    coinIssuer: {
        contractAbi: readonly [{
            readonly type: "constructor";
            readonly inputs: readonly [{
                readonly name: "_asset";
                readonly type: "address";
                readonly internalType: "contract IMintableERC20";
            }, {
                readonly name: "_rate";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "_owner";
                readonly type: "address";
                readonly internalType: "address";
            }];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "function";
            readonly name: "ASSET";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "contract IMintableERC20";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "error";
            readonly name: "AddressSnapshotLib__IndexOutOfBounds";
            readonly inputs: readonly [{
                readonly name: "index";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "size";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "CoinIssuer__InsufficientMintAvailable";
            readonly inputs: readonly [{
                readonly name: "available";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "needed";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "DevNet__InvalidProposer";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "actual";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "DevNet__NoPruningAllowed";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "FeeJuicePortal__AlreadyInitialized";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "FeeJuicePortal__InvalidInitialization";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "FeeJuicePortal__Unauthorized";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "FeeLib__InvalidFeeAssetPriceModifier";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__CanOnlyExecuteProposalInPast";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__FailedToPropose";
            readonly inputs: readonly [{
                readonly name: "proposal";
                readonly type: "address";
                readonly internalType: "contract IPayload";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__InstanceHaveNoCode";
            readonly inputs: readonly [{
                readonly name: "instance";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__InsufficientVotes";
            readonly inputs: readonly [{
                readonly name: "votesCast";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "votesNeeded";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__InvalidNAndMValues";
            readonly inputs: readonly [{
                readonly name: "n";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "m";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__NCannotBeLargerTHanM";
            readonly inputs: readonly [{
                readonly name: "n";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "m";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__OnlyProposerCanVote";
            readonly inputs: readonly [{
                readonly name: "caller";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "proposer";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__ProposalAlreadyExecuted";
            readonly inputs: readonly [{
                readonly name: "roundNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__ProposalCannotBeAddressZero";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__ProposalHaveNoCode";
            readonly inputs: readonly [{
                readonly name: "proposal";
                readonly type: "address";
                readonly internalType: "contract IPayload";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__ProposalTooOld";
            readonly inputs: readonly [{
                readonly name: "roundNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "currentRoundNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__VoteAlreadyCastForSlot";
            readonly inputs: readonly [{
                readonly name: "slot";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__CallFailed";
            readonly inputs: readonly [{
                readonly name: "target";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__CallerNotGovernanceProposer";
            readonly inputs: readonly [{
                readonly name: "caller";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "governanceProposer";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__CallerNotSelf";
            readonly inputs: readonly [{
                readonly name: "caller";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "self";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__CannotCallAsset";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__DifferentialTooBig";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__DifferentialTooSmall";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__InvalidMinimumVotes";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__LockAmountTooSmall";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__QuorumTooBig";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__QuorumTooSmall";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__TimeTooBig";
            readonly inputs: readonly [{
                readonly name: "name";
                readonly type: "string";
                readonly internalType: "string";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__TimeTooSmall";
            readonly inputs: readonly [{
                readonly name: "name";
                readonly type: "string";
                readonly internalType: "string";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__InsufficientPower";
            readonly inputs: readonly [{
                readonly name: "voter";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "have";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "required";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__InvalidConfiguration";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__NoCheckpointsFound";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalAlreadyDropped";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalCannotBeDropped";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalDoesNotExists";
            readonly inputs: readonly [{
                readonly name: "proposalId";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalLib__MoreVoteThanExistNeeded";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalLib__MoreYeaVoteThanExistNeeded";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalLib__ZeroMinimum";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalLib__ZeroVotesNeeded";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalLib__ZeroYeaVotesNeeded";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalNotActive";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalNotExecutable";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__UserLib__NotInPast";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__WithdrawalAlreadyclaimed";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__WithdrawalNotUnlockedYet";
            readonly inputs: readonly [{
                readonly name: "currentTime";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }, {
                readonly name: "unlocksAt";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }];
        }, {
            readonly type: "error";
            readonly name: "HeaderLib__InvalidHeaderSize";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "HeaderLib__InvalidSlotNumber";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }];
        }, {
            readonly type: "error";
            readonly name: "Inbox__ActorTooLarge";
            readonly inputs: readonly [{
                readonly name: "actor";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Inbox__ContentTooLarge";
            readonly inputs: readonly [{
                readonly name: "content";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Inbox__MustBuildBeforeConsume";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Inbox__SecretHashTooLarge";
            readonly inputs: readonly [{
                readonly name: "secretHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Inbox__Unauthorized";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Inbox__VersionMismatch";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "MerkleLib__InvalidRoot";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "leaf";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "leafIndex";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__AlreadyNullified";
            readonly inputs: readonly [{
                readonly name: "l2BlockNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "leafIndex";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__BlockNotProven";
            readonly inputs: readonly [{
                readonly name: "l2BlockNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__IncompatibleEntryArguments";
            readonly inputs: readonly [{
                readonly name: "messageHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "storedFee";
                readonly type: "uint64";
                readonly internalType: "uint64";
            }, {
                readonly name: "feePassed";
                readonly type: "uint64";
                readonly internalType: "uint64";
            }, {
                readonly name: "storedVersion";
                readonly type: "uint32";
                readonly internalType: "uint32";
            }, {
                readonly name: "versionPassed";
                readonly type: "uint32";
                readonly internalType: "uint32";
            }, {
                readonly name: "storedDeadline";
                readonly type: "uint32";
                readonly internalType: "uint32";
            }, {
                readonly name: "deadlinePassed";
                readonly type: "uint32";
                readonly internalType: "uint32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__InvalidChainId";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Outbox__InvalidPathLength";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__InvalidRecipient";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "actual";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__NothingToConsume";
            readonly inputs: readonly [{
                readonly name: "messageHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__NothingToConsumeAtBlock";
            readonly inputs: readonly [{
                readonly name: "l2BlockNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__RootAlreadySetAtBlock";
            readonly inputs: readonly [{
                readonly name: "l2BlockNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__Unauthorized";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Outbox__VersionMismatch";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "OwnableInvalidOwner";
            readonly inputs: readonly [{
                readonly name: "owner";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "OwnableUnauthorizedAccount";
            readonly inputs: readonly [{
                readonly name: "account";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "event";
            readonly name: "OwnershipTransferred";
            readonly inputs: readonly [{
                readonly name: "previousOwner";
                readonly type: "address";
                readonly indexed: true;
                readonly internalType: "address";
            }, {
                readonly name: "newOwner";
                readonly type: "address";
                readonly indexed: true;
                readonly internalType: "address";
            }];
            readonly anonymous: false;
        }, {
            readonly type: "error";
            readonly name: "ProofCommitmentEscrow__InsufficientBalance";
            readonly inputs: readonly [{
                readonly name: "balance";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "requested";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "ProofCommitmentEscrow__NotOwner";
            readonly inputs: readonly [{
                readonly name: "caller";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "ProofCommitmentEscrow__WithdrawRequestNotReady";
            readonly inputs: readonly [{
                readonly name: "current";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "readyAt";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }];
        }, {
            readonly type: "function";
            readonly name: "RATE";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "error";
            readonly name: "Registry__NoRollupsRegistered";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Registry__RollupAlreadyRegistered";
            readonly inputs: readonly [{
                readonly name: "rollup";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Registry__RollupNotRegistered";
            readonly inputs: readonly [{
                readonly name: "version";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "RewardDistributor__InvalidCaller";
            readonly inputs: readonly [{
                readonly name: "caller";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "canonical";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__AlreadyClaimed";
            readonly inputs: readonly [{
                readonly name: "prover";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "epoch";
                readonly type: "uint256";
                readonly internalType: "Epoch";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InsufficientBondAmount";
            readonly inputs: readonly [{
                readonly name: "minimum";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "provided";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InsufficientFundsInEscrow";
            readonly inputs: readonly [{
                readonly name: "required";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "available";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidArchive";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidBasisPointFee";
            readonly inputs: readonly [{
                readonly name: "basisPointFee";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidBlobHash";
            readonly inputs: readonly [{
                readonly name: "blobHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidBlobProof";
            readonly inputs: readonly [{
                readonly name: "blobHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidBlobPublicInputsHash";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidBlockNumber";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidChainId";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidInHash";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidManaBaseFee";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidPreviousArchive";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidProof";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidProposedArchive";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidTimestamp";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidVersion";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__ManaLimitExceeded";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__NoEpochToProve";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__NonSequentialProving";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__NonZeroDaFee";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__NotPastDeadline";
            readonly inputs: readonly [{
                readonly name: "deadline";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }, {
                readonly name: "currentSlot";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__NothingToPrune";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__PastDeadline";
            readonly inputs: readonly [{
                readonly name: "deadline";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }, {
                readonly name: "currentSlot";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__ProverHaveAlreadySubmitted";
            readonly inputs: readonly [{
                readonly name: "prover";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "epoch";
                readonly type: "uint256";
                readonly internalType: "Epoch";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__SlotAlreadyInChain";
            readonly inputs: readonly [{
                readonly name: "lastSlot";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }, {
                readonly name: "proposedSlot";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__StartAndEndNotSameEpoch";
            readonly inputs: readonly [{
                readonly name: "start";
                readonly type: "uint256";
                readonly internalType: "Epoch";
            }, {
                readonly name: "end";
                readonly type: "uint256";
                readonly internalType: "Epoch";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__StartIsNotBuildingOnProven";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__StartIsNotFirstBlockOfEpoch";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__TimestampInFuture";
            readonly inputs: readonly [{
                readonly name: "max";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__TimestampTooOld";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__TryingToProveNonExistingBlock";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__UnavailableTxs";
            readonly inputs: readonly [{
                readonly name: "txsHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "SampleLib__IndexOutOfBounds";
            readonly inputs: readonly [{
                readonly name: "requested";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "bound";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "SampleLib__SampleLargerThanIndex";
            readonly inputs: readonly [{
                readonly name: "sample";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "index";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "SignatureLib__CannotVerifyEmpty";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "SignatureLib__InvalidSignature";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "recovered";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__AlreadyActive";
            readonly inputs: readonly [{
                readonly name: "attester";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__AlreadyRegistered";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__CannotSlashExitedStake";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__FailedToRemove";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__InsufficientStake";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__InvalidDeposit";
            readonly inputs: readonly [{
                readonly name: "attester";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "proposer";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__NoOneToSlash";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__NotExiting";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__NotSlasher";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__NotWithdrawer";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__NothingToExit";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__WithdrawalNotUnlockedYet";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }, {
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }];
        }, {
            readonly type: "error";
            readonly name: "ValidatorSelection__EpochNotSetup";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "ValidatorSelection__InsufficientAttestations";
            readonly inputs: readonly [{
                readonly name: "minimumNeeded";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "provided";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "ValidatorSelection__InsufficientAttestationsProvided";
            readonly inputs: readonly [{
                readonly name: "minimumNeeded";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "provided";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "ValidatorSelection__InvalidDeposit";
            readonly inputs: readonly [{
                readonly name: "attester";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "proposer";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "ValidatorSelection__InvalidProposer";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "actual";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "function";
            readonly name: "mint";
            readonly inputs: readonly [{
                readonly name: "_to";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "_amount";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly outputs: readonly [];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "function";
            readonly name: "mintAvailable";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "owner";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "renounceOwnership";
            readonly inputs: readonly [];
            readonly outputs: readonly [];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "function";
            readonly name: "timeOfLastMint";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "transferOwnership";
            readonly inputs: readonly [{
                readonly name: "newOwner";
                readonly type: "address";
                readonly internalType: "address";
            }];
            readonly outputs: readonly [];
            readonly stateMutability: "nonpayable";
        }];
        contractBytecode: `0x${string}`;
    };
    governanceProposer: {
        contractAbi: readonly [{
            readonly type: "constructor";
            readonly inputs: readonly [{
                readonly name: "_registry";
                readonly type: "address";
                readonly internalType: "contract IRegistry";
            }, {
                readonly name: "_n";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "_m";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "error";
            readonly name: "AddressSnapshotLib__IndexOutOfBounds";
            readonly inputs: readonly [{
                readonly name: "index";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "size";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "CoinIssuer__InsufficientMintAvailable";
            readonly inputs: readonly [{
                readonly name: "available";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "needed";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "DevNet__InvalidProposer";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "actual";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "DevNet__NoPruningAllowed";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "FeeJuicePortal__AlreadyInitialized";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "FeeJuicePortal__InvalidInitialization";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "FeeJuicePortal__Unauthorized";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "FeeLib__InvalidFeeAssetPriceModifier";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__CanOnlyExecuteProposalInPast";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__FailedToPropose";
            readonly inputs: readonly [{
                readonly name: "proposal";
                readonly type: "address";
                readonly internalType: "contract IPayload";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__InstanceHaveNoCode";
            readonly inputs: readonly [{
                readonly name: "instance";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__InsufficientVotes";
            readonly inputs: readonly [{
                readonly name: "votesCast";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "votesNeeded";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__InvalidNAndMValues";
            readonly inputs: readonly [{
                readonly name: "n";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "m";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__NCannotBeLargerTHanM";
            readonly inputs: readonly [{
                readonly name: "n";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "m";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__OnlyProposerCanVote";
            readonly inputs: readonly [{
                readonly name: "caller";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "proposer";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__ProposalAlreadyExecuted";
            readonly inputs: readonly [{
                readonly name: "roundNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__ProposalCannotBeAddressZero";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__ProposalHaveNoCode";
            readonly inputs: readonly [{
                readonly name: "proposal";
                readonly type: "address";
                readonly internalType: "contract IPayload";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__ProposalTooOld";
            readonly inputs: readonly [{
                readonly name: "roundNumber";
                readonly type: "uint256";
                readonly internalType: "uint256"; /** The initial validators for the rollup contract. */
            }, {
                readonly name: "currentRoundNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__VoteAlreadyCastForSlot";
            readonly inputs: readonly [{
                readonly name: "slot"; /** The initial balance of the fee juice portal. This is the amount of fee juice that is prefunded to accounts */
                readonly type: "uint256";
                readonly internalType: "Slot";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__CallFailed";
            readonly inputs: readonly [{
                readonly name: "target";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__CallerNotGovernanceProposer";
            readonly inputs: readonly [{
                readonly name: "caller";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "governanceProposer";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__CallerNotSelf";
            readonly inputs: readonly [{
                readonly name: "caller";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "self";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__CannotCallAsset";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__DifferentialTooBig";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__DifferentialTooSmall";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__InvalidMinimumVotes";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__LockAmountTooSmall";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__QuorumTooBig";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__QuorumTooSmall";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__TimeTooBig";
            readonly inputs: readonly [{
                readonly name: "name";
                readonly type: "string";
                readonly internalType: "string";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__TimeTooSmall";
            readonly inputs: readonly [{
                readonly name: "name";
                readonly type: "string";
                readonly internalType: "string";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__InsufficientPower";
            readonly inputs: readonly [{
                readonly name: "voter";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "have";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "required";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__InvalidConfiguration";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__NoCheckpointsFound";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalAlreadyDropped";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalCannotBeDropped";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalDoesNotExists";
            readonly inputs: readonly [{
                readonly name: "proposalId";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalLib__MoreVoteThanExistNeeded";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalLib__MoreYeaVoteThanExistNeeded";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalLib__ZeroMinimum";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalLib__ZeroVotesNeeded";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalLib__ZeroYeaVotesNeeded";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalNotActive";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalNotExecutable";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__UserLib__NotInPast";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__WithdrawalAlreadyclaimed";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__WithdrawalNotUnlockedYet";
            readonly inputs: readonly [{
                readonly name: "currentTime";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }, {
                readonly name: "unlocksAt";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }];
        }, {
            readonly type: "error";
            readonly name: "HeaderLib__InvalidHeaderSize";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "HeaderLib__InvalidSlotNumber";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }];
        }, {
            readonly type: "error";
            readonly name: "Inbox__ActorTooLarge";
            readonly inputs: readonly [{
                readonly name: "actor";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Inbox__ContentTooLarge";
            readonly inputs: readonly [{
                readonly name: "content";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Inbox__MustBuildBeforeConsume";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Inbox__SecretHashTooLarge";
            readonly inputs: readonly [{
                readonly name: "secretHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Inbox__Unauthorized";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Inbox__VersionMismatch";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "function";
            readonly name: "LIFETIME_IN_ROUNDS";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "M";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "uint256"; /**
                 * Deploys a new rollup, using the existing canonical version to derive certain values (addresses of assets etc).
                 * @param clients - The L1 clients.
                 * @param args - The deployment arguments.
                 * @param registryAddress - The address of the registry.
                 * @param logger - The logger.
                 * @param txUtilsConfig - The L1 tx utils config.
                 */
                readonly internalType: "uint256";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "error";
            readonly name: "MerkleLib__InvalidRoot";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "leaf";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "leafIndex";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "function";
            readonly name: "N";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "error";
            readonly name: "Outbox__AlreadyNullified";
            readonly inputs: readonly [{
                readonly name: "l2BlockNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "leafIndex";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__BlockNotProven";
            readonly inputs: readonly [{
                readonly name: "l2BlockNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__IncompatibleEntryArguments";
            readonly inputs: readonly [{
                readonly name: "messageHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "storedFee";
                readonly type: "uint64";
                readonly internalType: "uint64";
            }, {
                readonly name: "feePassed";
                readonly type: "uint64";
                readonly internalType: "uint64";
            }, {
                readonly name: "storedVersion";
                readonly type: "uint32";
                readonly internalType: "uint32";
            }, {
                readonly name: "versionPassed";
                readonly type: "uint32";
                readonly internalType: "uint32";
            }, {
                readonly name: "storedDeadline";
                readonly type: "uint32";
                readonly internalType: "uint32";
            }, {
                readonly name: "deadlinePassed";
                readonly type: "uint32";
                readonly internalType: "uint32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__InvalidChainId";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Outbox__InvalidPathLength";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__InvalidRecipient";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "actual";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__NothingToConsume";
            readonly inputs: readonly [{
                readonly name: "messageHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__NothingToConsumeAtBlock";
            readonly inputs: readonly [{
                readonly name: "l2BlockNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__RootAlreadySetAtBlock";
            readonly inputs: readonly [{
                readonly name: "l2BlockNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__Unauthorized";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Outbox__VersionMismatch";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "ProofCommitmentEscrow__InsufficientBalance";
            readonly inputs: readonly [{
                readonly name: "balance";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "requested";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "ProofCommitmentEscrow__NotOwner";
            readonly inputs: readonly [{
                readonly name: "caller";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "ProofCommitmentEscrow__WithdrawRequestNotReady";
            readonly inputs: readonly [{
                readonly name: "current";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "readyAt";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }];
        }, {
            readonly type: "event";
            readonly name: "ProposalExecuted";
            readonly inputs: readonly [{
                readonly name: "proposal";
                readonly type: "address";
                readonly indexed: true;
                readonly internalType: "contract IPayload";
            }, {
                readonly name: "round";
                readonly type: "uint256";
                readonly indexed: true;
                readonly internalType: "uint256";
            }];
            readonly anonymous: false;
        }, {
            readonly type: "function";
            readonly name: "REGISTRY";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "contract IRegistry";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "error";
            readonly name: "Registry__NoRollupsRegistered";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Registry__RollupAlreadyRegistered";
            readonly inputs: readonly [{
                readonly name: "rollup";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Registry__RollupNotRegistered";
            readonly inputs: readonly [{
                readonly name: "version";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "RewardDistributor__InvalidCaller";
            readonly inputs: readonly [{
                readonly name: "caller";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "canonical";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__AlreadyClaimed";
            readonly inputs: readonly [{
                readonly name: "prover";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "epoch";
                readonly type: "uint256";
                readonly internalType: "Epoch";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InsufficientBondAmount";
            readonly inputs: readonly [{
                readonly name: "minimum";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "provided";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InsufficientFundsInEscrow";
            readonly inputs: readonly [{
                readonly name: "required";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "available";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidArchive";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidBasisPointFee";
            readonly inputs: readonly [{
                readonly name: "basisPointFee";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidBlobHash";
            readonly inputs: readonly [{
                readonly name: "blobHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidBlobProof";
            readonly inputs: readonly [{
                readonly name: "blobHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidBlobPublicInputsHash";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidBlockNumber";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidChainId";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidInHash";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidManaBaseFee";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidPreviousArchive";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidProof";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidProposedArchive";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidTimestamp";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidVersion";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__ManaLimitExceeded";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__NoEpochToProve";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__NonSequentialProving";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__NonZeroDaFee";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__NotPastDeadline";
            readonly inputs: readonly [{
                readonly name: "deadline";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }, {
                readonly name: "currentSlot";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__NothingToPrune";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__PastDeadline";
            readonly inputs: readonly [{
                readonly name: "deadline";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }, {
                readonly name: "currentSlot";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__ProverHaveAlreadySubmitted";
            readonly inputs: readonly [{
                readonly name: "prover";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "epoch";
                readonly type: "uint256";
                readonly internalType: "Epoch";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__SlotAlreadyInChain";
            readonly inputs: readonly [{
                readonly name: "lastSlot";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }, {
                readonly name: "proposedSlot";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__StartAndEndNotSameEpoch";
            readonly inputs: readonly [{
                readonly name: "start";
                readonly type: "uint256";
                readonly internalType: "Epoch";
            }, {
                readonly name: "end";
                readonly type: "uint256";
                readonly internalType: "Epoch";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__StartIsNotBuildingOnProven";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__StartIsNotFirstBlockOfEpoch";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__TimestampInFuture";
            readonly inputs: readonly [{
                readonly name: "max";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__TimestampTooOld";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__TryingToProveNonExistingBlock";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__UnavailableTxs";
            readonly inputs: readonly [{
                readonly name: "txsHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "SampleLib__IndexOutOfBounds";
            readonly inputs: readonly [{
                readonly name: "requested";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "bound";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "SampleLib__SampleLargerThanIndex";
            readonly inputs: readonly [{
                readonly name: "sample";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "index";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "SignatureLib__CannotVerifyEmpty";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "SignatureLib__InvalidSignature";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "recovered";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__AlreadyActive";
            readonly inputs: readonly [{
                readonly name: "attester";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__AlreadyRegistered";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__CannotSlashExitedStake";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__FailedToRemove";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__InsufficientStake";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__InvalidDeposit";
            readonly inputs: readonly [{
                readonly name: "attester";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "proposer";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__NoOneToSlash";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__NotExiting";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__NotSlasher";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__NotWithdrawer";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__NothingToExit";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__WithdrawalNotUnlockedYet";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }, {
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }];
        }, {
            readonly type: "error";
            readonly name: "ValidatorSelection__EpochNotSetup";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "ValidatorSelection__InsufficientAttestations";
            readonly inputs: readonly [{
                readonly name: "minimumNeeded";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "provided";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "ValidatorSelection__InsufficientAttestationsProvided";
            readonly inputs: readonly [{
                readonly name: "minimumNeeded";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "provided";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "ValidatorSelection__InvalidDeposit";
            readonly inputs: readonly [{
                readonly name: "attester";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "proposer";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "ValidatorSelection__InvalidProposer";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "actual";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "event";
            readonly name: "VoteCast";
            readonly inputs: readonly [{
                readonly name: "proposal";
                readonly type: "address";
                readonly indexed: true;
                readonly internalType: "contract IPayload";
            }, {
                readonly name: "round";
                readonly type: "uint256";
                readonly indexed: true;
                readonly internalType: "uint256";
            }, {
                readonly name: "voter";
                readonly type: "address";
                readonly indexed: true;
                readonly internalType: "address";
            }];
            readonly anonymous: false;
        }, {
            readonly type: "function";
            readonly name: "computeRound";
            readonly inputs: readonly [{
                readonly name: "_slot";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "executeProposal";
            readonly inputs: readonly [{
                readonly name: "_roundNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "bool";
                readonly internalType: "bool";
            }];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "function";
            readonly name: "getExecutor";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "getInstance";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "rounds";
            readonly inputs: readonly [{
                readonly name: "instance";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "roundNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly outputs: readonly [{
                readonly name: "lastVote";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }, {
                readonly name: "leader";
                readonly type: "address";
                readonly internalType: "contract IPayload";
            }, {
                readonly name: "executed";
                readonly type: "bool";
                readonly internalType: "bool";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "vote";
            readonly inputs: readonly [{
                readonly name: "_proposal";
                readonly type: "address";
                readonly internalType: "contract IPayload";
            }];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "bool";
                readonly internalType: "bool";
            }];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "function";
            readonly name: "yeaCount";
            readonly inputs: readonly [{
                readonly name: "_instance";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "_round";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "_proposal";
                readonly type: "address";
                readonly internalType: "contract IPayload";
            }];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly stateMutability: "view";
        }];
        contractBytecode: `0x${string}`;
    };
    governance: {
        contractAbi: readonly [{
            readonly type: "constructor";
            readonly inputs: readonly [{
                readonly name: "_asset";
                readonly type: "address";
                readonly internalType: "contract IERC20";
            }, {
                readonly name: "_governanceProposer";
                readonly type: "address";
                readonly internalType: "address";
            }];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "function";
            readonly name: "ASSET";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "contract IERC20";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "error";
            readonly name: "AddressSnapshotLib__IndexOutOfBounds";
            readonly inputs: readonly [{
                readonly name: "index";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "size";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "CoinIssuer__InsufficientMintAvailable";
            readonly inputs: readonly [{
                readonly name: "available";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "needed";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "event";
            readonly name: "ConfigurationUpdated";
            readonly inputs: readonly [{
                readonly name: "time";
                readonly type: "uint256";
                readonly indexed: true;
                readonly internalType: "Timestamp";
            }];
            readonly anonymous: false;
        }, {
            readonly type: "event";
            readonly name: "Deposit";
            readonly inputs: readonly [{
                readonly name: "depositor";
                readonly type: "address";
                readonly indexed: true;
                readonly internalType: "address";
            }, {
                readonly name: "onBehalfOf";
                readonly type: "address";
                readonly indexed: true;
                readonly internalType: "address";
            }, {
                readonly name: "amount";
                readonly type: "uint256";
                readonly indexed: false;
                readonly internalType: "uint256";
            }];
            readonly anonymous: false;
        }, {
            readonly type: "error";
            readonly name: "DevNet__InvalidProposer";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "actual";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "DevNet__NoPruningAllowed";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "FeeJuicePortal__AlreadyInitialized";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "FeeJuicePortal__InvalidInitialization";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "FeeJuicePortal__Unauthorized";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "FeeLib__InvalidFeeAssetPriceModifier";
            readonly inputs: readonly [];
        }, {
            readonly type: "event";
            readonly name: "GovernanceProposerUpdated";
            readonly inputs: readonly [{
                readonly name: "governanceProposer";
                readonly type: "address";
                readonly indexed: true;
                readonly internalType: "address";
            }];
            readonly anonymous: false;
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__CanOnlyExecuteProposalInPast";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__FailedToPropose";
            readonly inputs: readonly [{
                readonly name: "proposal";
                readonly type: "address";
                readonly internalType: "contract IPayload";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__InstanceHaveNoCode";
            readonly inputs: readonly [{
                readonly name: "instance";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__InsufficientVotes";
            readonly inputs: readonly [{
                readonly name: "votesCast";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "votesNeeded";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__InvalidNAndMValues";
            readonly inputs: readonly [{
                readonly name: "n";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "m";
                readonly type: "uint256";
                readonly internalType: "uint256"; /** The vk tree root. */
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__NCannotBeLargerTHanM";
            readonly inputs: readonly [{
                readonly name: "n";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "m";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__OnlyProposerCanVote";
            readonly inputs: readonly [{
                readonly name: "caller";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "proposer";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__ProposalAlreadyExecuted";
            readonly inputs: readonly [{
                readonly name: "roundNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__ProposalCannotBeAddressZero";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__ProposalHaveNoCode";
            readonly inputs: readonly [{
                readonly name: "proposal";
                readonly type: "address";
                readonly internalType: "contract IPayload";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__ProposalTooOld";
            readonly inputs: readonly [{
                readonly name: "roundNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "currentRoundNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__VoteAlreadyCastForSlot";
            readonly inputs: readonly [{
                readonly name: "slot";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__CallFailed";
            readonly inputs: readonly [{
                readonly name: "target";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__CallerNotGovernanceProposer";
            readonly inputs: readonly [{
                readonly name: "caller";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "governanceProposer";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__CallerNotSelf";
            readonly inputs: readonly [{
                readonly name: "caller";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "self";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__CannotCallAsset";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__DifferentialTooBig";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__DifferentialTooSmall";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__InvalidMinimumVotes";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__LockAmountTooSmall";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__QuorumTooBig";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__QuorumTooSmall";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__TimeTooBig";
            readonly inputs: readonly [{
                readonly name: "name";
                readonly type: "string";
                readonly internalType: "string";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__TimeTooSmall";
            readonly inputs: readonly [{
                readonly name: "name";
                readonly type: "string";
                readonly internalType: "string";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__InsufficientPower";
            readonly inputs: readonly [{
                readonly name: "voter";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "have";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "required";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__InvalidConfiguration";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__NoCheckpointsFound";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalAlreadyDropped";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalCannotBeDropped";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalDoesNotExists";
            readonly inputs: readonly [{
                readonly name: "proposalId";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalLib__MoreVoteThanExistNeeded";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalLib__MoreYeaVoteThanExistNeeded";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalLib__ZeroMinimum";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalLib__ZeroVotesNeeded";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalLib__ZeroYeaVotesNeeded";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalNotActive";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalNotExecutable";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__UserLib__NotInPast";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__WithdrawalAlreadyclaimed";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__WithdrawalNotUnlockedYet";
            readonly inputs: readonly [{
                readonly name: "currentTime";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }, {
                readonly name: "unlocksAt";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }];
        }, {
            readonly type: "error";
            readonly name: "HeaderLib__InvalidHeaderSize";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "HeaderLib__InvalidSlotNumber";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }];
        }, {
            readonly type: "error";
            readonly name: "Inbox__ActorTooLarge";
            readonly inputs: readonly [{
                readonly name: "actor";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Inbox__ContentTooLarge";
            readonly inputs: readonly [{
                readonly name: "content";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Inbox__MustBuildBeforeConsume";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Inbox__SecretHashTooLarge";
            readonly inputs: readonly [{
                readonly name: "secretHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Inbox__Unauthorized";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Inbox__VersionMismatch";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "MerkleLib__InvalidRoot";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "leaf";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "leafIndex";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__AlreadyNullified";
            readonly inputs: readonly [{
                readonly name: "l2BlockNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "leafIndex";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__BlockNotProven";
            readonly inputs: readonly [{
                readonly name: "l2BlockNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__IncompatibleEntryArguments";
            readonly inputs: readonly [{
                readonly name: "messageHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "storedFee";
                readonly type: "uint64";
                readonly internalType: "uint64";
            }, {
                readonly name: "feePassed";
                readonly type: "uint64";
                readonly internalType: "uint64";
            }, {
                readonly name: "storedVersion";
                readonly type: "uint32";
                readonly internalType: "uint32";
            }, {
                readonly name: "versionPassed";
                readonly type: "uint32";
                readonly internalType: "uint32";
            }, {
                readonly name: "storedDeadline";
                readonly type: "uint32";
                readonly internalType: "uint32";
            }, {
                readonly name: "deadlinePassed";
                readonly type: "uint32";
                readonly internalType: "uint32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__InvalidChainId";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Outbox__InvalidPathLength";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__InvalidRecipient";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "actual";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__NothingToConsume";
            readonly inputs: readonly [{
                readonly name: "messageHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__NothingToConsumeAtBlock";
            readonly inputs: readonly [{
                readonly name: "l2BlockNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__RootAlreadySetAtBlock";
            readonly inputs: readonly [{
                readonly name: "l2BlockNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__Unauthorized";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Outbox__VersionMismatch";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "ProofCommitmentEscrow__InsufficientBalance";
            readonly inputs: readonly [{
                readonly name: "balance";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "requested";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "ProofCommitmentEscrow__NotOwner";
            readonly inputs: readonly [{
                readonly name: "caller";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "ProofCommitmentEscrow__WithdrawRequestNotReady";
            readonly inputs: readonly [{
                readonly name: "current";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "readyAt";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }];
        }, {
            readonly type: "event";
            readonly name: "ProposalExecuted";
            readonly inputs: readonly [{
                readonly name: "proposalId";
                readonly type: "uint256";
                readonly indexed: true;
                readonly internalType: "uint256";
            }];
            readonly anonymous: false;
        }, {
            readonly type: "event";
            readonly name: "Proposed";
            readonly inputs: readonly [{
                readonly name: "proposalId";
                readonly type: "uint256";
                readonly indexed: true;
                readonly internalType: "uint256";
            }, {
                readonly name: "proposal";
                readonly type: "address";
                readonly indexed: true;
                readonly internalType: "address";
            }];
            readonly anonymous: false;
        }, {
            readonly type: "error";
            readonly name: "Registry__NoRollupsRegistered";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Registry__RollupAlreadyRegistered";
            readonly inputs: readonly [{
                readonly name: "rollup";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Registry__RollupNotRegistered";
            readonly inputs: readonly [{
                readonly name: "version";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "RewardDistributor__InvalidCaller";
            readonly inputs: readonly [{
                readonly name: "caller";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "canonical";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__AlreadyClaimed";
            readonly inputs: readonly [{
                readonly name: "prover";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "epoch";
                readonly type: "uint256";
                readonly internalType: "Epoch";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InsufficientBondAmount";
            readonly inputs: readonly [{
                readonly name: "minimum";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "provided";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InsufficientFundsInEscrow";
            readonly inputs: readonly [{
                readonly name: "required";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "available";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidArchive";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidBasisPointFee";
            readonly inputs: readonly [{
                readonly name: "basisPointFee";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidBlobHash";
            readonly inputs: readonly [{
                readonly name: "blobHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidBlobProof";
            readonly inputs: readonly [{
                readonly name: "blobHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidBlobPublicInputsHash";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidBlockNumber";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidChainId";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidInHash";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidManaBaseFee";
            readonly inputs: readonly [{
                readonly name: "expected";
                /**
                 * Initialize the fee asset handler and make it a minter on the fee asset.
                 * @note This function will only be used for testing purposes.
                 *
                 * @param extendedClient - The L1 clients.
                 * @param deployer - The L1 deployer.
                 * @param feeAssetAddress - The address of the fee asset.
                 * @param logger - The logger.
                 */
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidPreviousArchive";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidProof";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidProposedArchive";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidTimestamp";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidVersion";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__ManaLimitExceeded";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__NoEpochToProve";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__NonSequentialProving";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__NonZeroDaFee";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__NotPastDeadline";
            readonly inputs: readonly [{
                readonly name: "deadline";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }, {
                readonly name: "currentSlot";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__NothingToPrune";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__PastDeadline";
            readonly inputs: readonly [{
                readonly name: "deadline";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }, {
                readonly name: "currentSlot";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__ProverHaveAlreadySubmitted";
            readonly inputs: readonly [{
                readonly name: "prover";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "epoch";
                readonly type: "uint256";
                readonly internalType: "Epoch";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__SlotAlreadyInChain";
            readonly inputs: readonly [{
                readonly name: "lastSlot";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }, {
                readonly name: "proposedSlot";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__StartAndEndNotSameEpoch";
            readonly inputs: readonly [{
                readonly name: "start";
                readonly type: "uint256";
                readonly internalType: "Epoch";
            }, {
                readonly name: "end";
                readonly type: "uint256";
                readonly internalType: "Epoch";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__StartIsNotBuildingOnProven";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__StartIsNotFirstBlockOfEpoch";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__TimestampInFuture";
            readonly inputs: readonly [{
                readonly name: "max";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__TimestampTooOld";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__TryingToProveNonExistingBlock";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__UnavailableTxs";
            readonly inputs: readonly [{
                readonly name: "txsHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "SafeERC20FailedOperation";
            readonly inputs: readonly [{
                readonly name: "token";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "SampleLib__IndexOutOfBounds";
            readonly inputs: readonly [{
                readonly name: "requested";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "bound";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "SampleLib__SampleLargerThanIndex";
            readonly inputs: readonly [{
                readonly name: "sample";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "index";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "SignatureLib__CannotVerifyEmpty";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "SignatureLib__InvalidSignature";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "recovered";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__AlreadyActive";
            readonly inputs: readonly [{
                readonly name: "attester";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__AlreadyRegistered";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__CannotSlashExitedStake";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__FailedToRemove";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__InsufficientStake";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__InvalidDeposit";
            readonly inputs: readonly [{
                readonly name: "attester";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "proposer";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__NoOneToSlash";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__NotExiting";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__NotSlasher";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__NotWithdrawer";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__NothingToExit";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__WithdrawalNotUnlockedYet";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }, {
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }];
        }, {
            readonly type: "error";
            readonly name: "ValidatorSelection__EpochNotSetup";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "ValidatorSelection__InsufficientAttestations";
            readonly inputs: readonly [{
                readonly name: "minimumNeeded";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "provided";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "ValidatorSelection__InsufficientAttestationsProvided";
            readonly inputs: readonly [{
                readonly name: "minimumNeeded";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "provided";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "ValidatorSelection__InvalidDeposit";
            readonly inputs: readonly [{
                readonly name: "attester";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "proposer";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "ValidatorSelection__InvalidProposer";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "actual";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "event";
            readonly name: "VoteCast";
            readonly inputs: readonly [{
                readonly name: "proposalId";
                readonly type: "uint256";
                readonly indexed: true;
                readonly internalType: "uint256";
            }, {
                readonly name: "voter";
                readonly type: "address";
                readonly indexed: true;
                readonly internalType: "address";
            }, {
                readonly name: "support";
                readonly type: "bool";
                readonly indexed: false;
                readonly internalType: "bool";
            }, {
                readonly name: "amount";
                readonly type: "uint256";
                readonly indexed: false;
                readonly internalType: "uint256";
            }];
            readonly anonymous: false;
        }, {
            readonly type: "event";
            readonly name: "WithdrawFinalised";
            readonly inputs: readonly [{
                readonly name: "withdrawalId";
                readonly type: "uint256";
                readonly indexed: true;
                readonly internalType: "uint256";
            }];
            readonly anonymous: false;
        }, {
            readonly type: "event";
            readonly name: "WithdrawInitiated";
            readonly inputs: readonly [{
                readonly name: "withdrawalId";
                readonly type: "uint256";
                readonly indexed: true;
                readonly internalType: "uint256";
            }, {
                readonly name: "recipient";
                readonly type: "address";
                readonly indexed: true;
                readonly internalType: "address";
            }, {
                readonly name: "amount";
                readonly type: "uint256";
                readonly indexed: false;
                readonly internalType: "uint256";
            }];
            readonly anonymous: false;
        }, {
            readonly type: "function";
            readonly name: "ballots";
            readonly inputs: readonly [{
                readonly name: "proposalId";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "user";
                readonly type: "address";
                readonly internalType: "address";
            }];
            readonly outputs: readonly [{
                readonly name: "yea";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "nea";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "deposit";
            readonly inputs: readonly [{
                readonly name: "_onBehalfOf";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "_amount";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly outputs: readonly [];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "function";
            readonly name: "dropProposal";
            readonly inputs: readonly [{
                readonly name: "_proposalId";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "bool";
                readonly internalType: "bool";
            }];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "function";
            readonly name: "execute";
            readonly inputs: readonly [{
                readonly name: "_proposalId";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "bool";
                readonly internalType: "bool";
            }];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "function";
            readonly name: "finaliseWithdraw";
            readonly inputs: readonly [{
                readonly name: "_withdrawalId";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly outputs: readonly [];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "function";
            readonly name: "getConfiguration";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "tuple";
                readonly internalType: "struct DataStructures.Configuration";
                readonly components: readonly [{
                    readonly name: "proposeConfig";
                    readonly type: "tuple";
                    readonly internalType: "struct DataStructures.ProposeConfiguration";
                    readonly components: readonly [{
                        readonly name: "lockDelay";
                        readonly type: "uint256";
                        readonly internalType: "Timestamp";
                    }, {
                        readonly name: "lockAmount";
                        readonly type: "uint256";
                        readonly internalType: "uint256";
                    }];
                }, {
                    readonly name: "votingDelay";
                    readonly type: "uint256";
                    readonly internalType: "Timestamp";
                }, {
                    readonly name: "votingDuration";
                    readonly type: "uint256";
                    readonly internalType: "Timestamp";
                }, {
                    readonly name: "executionDelay";
                    readonly type: "uint256";
                    readonly internalType: "Timestamp";
                }, {
                    readonly name: "gracePeriod";
                    readonly type: "uint256";
                    readonly internalType: "Timestamp";
                }, {
                    readonly name: "quorum";
                    readonly type: "uint256";
                    readonly internalType: "uint256";
                }, {
                    readonly name: "voteDifferential";
                    readonly type: "uint256";
                    readonly internalType: "uint256";
                }, {
                    readonly name: "minimumVotes";
                    readonly type: "uint256";
                    readonly internalType: "uint256";
                }];
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "getProposal";
            readonly inputs: readonly [{
                readonly name: "_proposalId";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "tuple";
                readonly internalType: "struct DataStructures.Proposal";
                readonly components: readonly [{
                    readonly name: "config";
                    readonly type: "tuple";
                    readonly internalType: "struct DataStructures.Configuration";
                    readonly components: readonly [{
                        readonly name: "proposeConfig";
                        readonly type: "tuple";
                        readonly internalType: "struct DataStructures.ProposeConfiguration";
                        readonly components: readonly [{
                            readonly name: "lockDelay";
                            readonly type: "uint256";
                            readonly internalType: "Timestamp";
                        }, {
                            readonly name: "lockAmount";
                            readonly type: "uint256";
                            readonly internalType: "uint256";
                        }];
                    }, {
                        readonly name: "votingDelay";
                        readonly type: "uint256";
                        readonly internalType: "Timestamp";
                    }, {
                        readonly name: "votingDuration";
                        readonly type: "uint256";
                        readonly internalType: "Timestamp";
                    }, {
                        readonly name: "executionDelay";
                        readonly type: "uint256";
                        readonly internalType: "Timestamp";
                    }, {
                        readonly name: "gracePeriod";
                        readonly type: "uint256";
                        readonly internalType: "Timestamp";
                    }, {
                        readonly name: "quorum";
                        readonly type: "uint256";
                        readonly internalType: "uint256";
                    }, {
                        readonly name: "voteDifferential";
                        readonly type: "uint256";
                        readonly internalType: "uint256";
                    }, {
                        readonly name: "minimumVotes";
                        readonly type: "uint256";
                        readonly internalType: "uint256";
                    }];
                }, {
                    readonly name: "state";
                    readonly type: "uint8";
                    readonly internalType: "enum DataStructures.ProposalState";
                }, {
                    readonly name: "payload";
                    readonly type: "address";
                    readonly internalType: "contract IPayload";
                }, {
                    readonly name: "governanceProposer";
                    readonly type: "address";
                    readonly internalType: "address";
                }, {
                    readonly name: "creation";
                    readonly type: "uint256";
                    readonly internalType: "Timestamp";
                }, {
                    readonly name: "summedBallot";
                    readonly type: "tuple";
                    readonly internalType: "struct DataStructures.Ballot";
                    readonly components: readonly [{
                        readonly name: "yea";
                        readonly type: "uint256";
                        readonly internalType: "uint256";
                    }, {
                        readonly name: "nea";
                        readonly type: "uint256";
                        readonly internalType: "uint256";
                    }];
                }];
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "getProposalState";
            readonly inputs: readonly [{
                readonly name: "_proposalId";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "uint8";
                readonly internalType: "enum DataStructures.ProposalState";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "getWithdrawal";
            readonly inputs: readonly [{
                readonly name: "_withdrawalId";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "tuple";
                readonly internalType: "struct DataStructures.Withdrawal";
                readonly components: readonly [{
                    readonly name: "amount";
                    readonly type: "uint256";
                    readonly internalType: "uint256";
                }, {
                    readonly name: "unlocksAt";
                    readonly type: "uint256";
                    readonly internalType: "Timestamp";
                }, {
                    readonly name: "recipient";
                    readonly type: "address";
                    readonly internalType: "address";
                }, {
                    readonly name: "claimed";
                    readonly type: "bool";
                    readonly internalType: "bool";
                }];
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "governanceProposer";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "initiateWithdraw";
            readonly inputs: readonly [{
                readonly name: "_to";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "_amount";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "function";
            readonly name: "powerAt";
            readonly inputs: readonly [{
                readonly name: "_owner";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "_ts";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "proposalCount";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "propose";
            readonly inputs: readonly [{
                readonly name: "_proposal";
                readonly type: "address";
                readonly internalType: "contract IPayload";
            }];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "bool";
                readonly internalType: "bool";
            }];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "function";
            readonly name: "proposeWithLock";
            readonly inputs: readonly [{
                readonly name: "_proposal";
                readonly type: "address";
                readonly internalType: "contract IPayload";
            }, {
                readonly name: "_to";
                readonly type: "address";
                readonly internalType: "address";
            }];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "bool";
                readonly internalType: "bool";
            }];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "function";
            readonly name: "totalPowerAt";
            readonly inputs: readonly [{
                readonly name: "_ts";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "updateConfiguration";
            readonly inputs: readonly [{
                readonly name: "_configuration";
                readonly type: "tuple";
                readonly internalType: "struct DataStructures.Configuration";
                readonly components: readonly [{
                    readonly name: "proposeConfig";
                    readonly type: "tuple";
                    readonly internalType: "struct DataStructures.ProposeConfiguration";
                    readonly components: readonly [{
                        readonly name: "lockDelay";
                        readonly type: "uint256";
                        readonly internalType: "Timestamp";
                    }, {
                        readonly name: "lockAmount";
                        readonly type: "uint256";
                        readonly internalType: "uint256";
                    }];
                }, {
                    readonly name: "votingDelay";
                    readonly type: "uint256";
                    readonly internalType: "Timestamp";
                }, {
                    readonly name: "votingDuration";
                    readonly type: "uint256";
                    readonly internalType: "Timestamp";
                }, {
                    readonly name: "executionDelay";
                    readonly type: "uint256";
                    readonly internalType: "Timestamp";
                }, {
                    readonly name: "gracePeriod";
                    readonly type: "uint256";
                    readonly internalType: "Timestamp";
                }, {
                    readonly name: "quorum";
                    readonly type: "uint256";
                    readonly internalType: "uint256";
                }, {
                    readonly name: "voteDifferential";
                    readonly type: "uint256";
                    readonly internalType: "uint256";
                }, {
                    readonly name: "minimumVotes";
                    readonly type: "uint256";
                    readonly internalType: "uint256";
                }];
            }];
            readonly outputs: readonly [];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "function";
            readonly name: "updateGovernanceProposer";
            readonly inputs: readonly [{
                readonly name: "_governanceProposer";
                readonly type: "address";
                readonly internalType: "address";
            }];
            readonly outputs: readonly [];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "function";
            readonly name: "vote";
            readonly inputs: readonly [{
                readonly name: "_proposalId";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "_amount";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "_support";
                readonly type: "bool";
                readonly internalType: "bool";
            }];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "bool";
                readonly internalType: "bool";
            }];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "function";
            readonly name: "withdrawalCount";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly stateMutability: "view";
        }];
        contractBytecode: `0x${string}`;
    };
    slashFactory: {
        contractAbi: readonly [{
            readonly type: "constructor";
            readonly inputs: readonly [{
                readonly name: "_validatorSelection";
                readonly type: "address";
                readonly internalType: "contract IValidatorSelection";
            }];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "error";
            readonly name: "AddressSnapshotLib__IndexOutOfBounds";
            readonly inputs: readonly [{
                readonly name: "index";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "size";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "CoinIssuer__InsufficientMintAvailable";
            readonly inputs: readonly [{
                readonly name: "available";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "needed";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "DevNet__InvalidProposer";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "actual";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "DevNet__NoPruningAllowed";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "FeeJuicePortal__AlreadyInitialized";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "FeeJuicePortal__InvalidInitialization";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "FeeJuicePortal__Unauthorized";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "FeeLib__InvalidFeeAssetPriceModifier";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__CanOnlyExecuteProposalInPast";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__FailedToPropose";
            readonly inputs: readonly [{
                readonly name: "proposal";
                readonly type: "address";
                readonly internalType: "contract IPayload";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__InstanceHaveNoCode";
            readonly inputs: readonly [{
                readonly name: "instance";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__InsufficientVotes";
            readonly inputs: readonly [{
                readonly name: "votesCast";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "votesNeeded";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__InvalidNAndMValues";
            readonly inputs: readonly [{
                readonly name: "n";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "m";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__NCannotBeLargerTHanM";
            readonly inputs: readonly [{
                readonly name: "n";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "m";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__OnlyProposerCanVote";
            readonly inputs: readonly [{
                readonly name: "caller";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "proposer";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__ProposalAlreadyExecuted";
            readonly inputs: readonly [{
                readonly name: "roundNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__ProposalCannotBeAddressZero";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__ProposalHaveNoCode";
            readonly inputs: readonly [{
                readonly name: "proposal";
                readonly type: "address";
                readonly internalType: "contract IPayload";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__ProposalTooOld";
            readonly inputs: readonly [{
                readonly name: "roundNumber";
                readonly type: "uint256"; /** The vk tree root. */
                readonly internalType: "uint256";
            }, {
                readonly name: "currentRoundNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__VoteAlreadyCastForSlot";
            readonly inputs: readonly [{
                readonly name: "slot";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__CallFailed";
            readonly inputs: readonly [{
                readonly name: "target";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__CallerNotGovernanceProposer";
            readonly inputs: readonly [{
                readonly name: "caller";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "governanceProposer";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__CallerNotSelf";
            readonly inputs: readonly [{
                readonly name: "caller";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "self";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__CannotCallAsset";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__DifferentialTooBig";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__DifferentialTooSmall";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__InvalidMinimumVotes";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__LockAmountTooSmall";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__QuorumTooBig";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__QuorumTooSmall";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__TimeTooBig";
            readonly inputs: readonly [{
                readonly name: "name";
                readonly type: "string";
                readonly internalType: "string";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__TimeTooSmall";
            readonly inputs: readonly [{
                readonly name: "name";
                readonly type: "string";
                readonly internalType: "string";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__InsufficientPower";
            readonly inputs: readonly [{
                readonly name: "voter";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "have";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "required";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__InvalidConfiguration";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__NoCheckpointsFound";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalAlreadyDropped";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalCannotBeDropped";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalDoesNotExists";
            readonly inputs: readonly [{
                readonly name: "proposalId";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalLib__MoreVoteThanExistNeeded";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalLib__MoreYeaVoteThanExistNeeded";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalLib__ZeroMinimum";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalLib__ZeroVotesNeeded";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalLib__ZeroYeaVotesNeeded";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalNotActive";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalNotExecutable";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__UserLib__NotInPast";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__WithdrawalAlreadyclaimed";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__WithdrawalNotUnlockedYet";
            readonly inputs: readonly [{
                readonly name: "currentTime";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }, {
                readonly name: "unlocksAt";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }];
        }, {
            readonly type: "error";
            readonly name: "HeaderLib__InvalidHeaderSize";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "HeaderLib__InvalidSlotNumber";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }];
        }, {
            readonly type: "error";
            readonly name: "Inbox__ActorTooLarge";
            readonly inputs: readonly [{
                readonly name: "actor";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Inbox__ContentTooLarge";
            readonly inputs: readonly [{
                readonly name: "content";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Inbox__MustBuildBeforeConsume";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Inbox__SecretHashTooLarge";
            readonly inputs: readonly [{
                readonly name: "secretHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Inbox__Unauthorized";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Inbox__VersionMismatch";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "MerkleLib__InvalidRoot";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "leaf";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "leafIndex";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__AlreadyNullified";
            readonly inputs: readonly [{
                readonly name: "l2BlockNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "leafIndex";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__BlockNotProven";
            readonly inputs: readonly [{
                readonly name: "l2BlockNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__IncompatibleEntryArguments";
            readonly inputs: readonly [{
                readonly name: "messageHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "storedFee";
                readonly type: "uint64";
                readonly internalType: "uint64";
            }, {
                readonly name: "feePassed";
                readonly type: "uint64";
                readonly internalType: "uint64";
            }, {
                readonly name: "storedVersion";
                readonly type: "uint32";
                readonly internalType: "uint32";
            }, {
                readonly name: "versionPassed";
                readonly type: "uint32";
                readonly internalType: "uint32";
            }, {
                readonly name: "storedDeadline";
                readonly type: "uint32";
                readonly internalType: "uint32";
            }, {
                readonly name: "deadlinePassed";
                readonly type: "uint32";
                readonly internalType: "uint32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__InvalidChainId";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Outbox__InvalidPathLength";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__InvalidRecipient";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "actual";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__NothingToConsume";
            readonly inputs: readonly [{
                readonly name: "messageHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__NothingToConsumeAtBlock";
            readonly inputs: readonly [{
                readonly name: "l2BlockNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__RootAlreadySetAtBlock";
            readonly inputs: readonly [{
                readonly name: "l2BlockNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__Unauthorized";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Outbox__VersionMismatch";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "ProofCommitmentEscrow__InsufficientBalance";
            readonly inputs: readonly [{
                readonly name: "balance";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "requested";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "ProofCommitmentEscrow__NotOwner";
            readonly inputs: readonly [{
                readonly name: "caller";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "ProofCommitmentEscrow__WithdrawRequestNotReady";
            readonly inputs: readonly [{
                readonly name: "current";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "readyAt";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }];
        }, {
            readonly type: "error";
            readonly name: "Registry__NoRollupsRegistered";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Registry__RollupAlreadyRegistered";
            readonly inputs: readonly [{
                readonly name: "rollup";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Registry__RollupNotRegistered";
            readonly inputs: readonly [{
                readonly name: "version";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "RewardDistributor__InvalidCaller";
            readonly inputs: readonly [{
                readonly name: "caller";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "canonical";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__AlreadyClaimed";
            readonly inputs: readonly [{
                readonly name: "prover";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "epoch";
                readonly type: "uint256";
                readonly internalType: "Epoch";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InsufficientBondAmount";
            readonly inputs: readonly [{
                readonly name: "minimum";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "provided";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InsufficientFundsInEscrow";
            readonly inputs: readonly [{
                readonly name: "required";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "available";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidArchive";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidBasisPointFee";
            readonly inputs: readonly [{
                readonly name: "basisPointFee";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidBlobHash";
            readonly inputs: readonly [{
                readonly name: "blobHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidBlobProof";
            readonly inputs: readonly [{
                readonly name: "blobHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidBlobPublicInputsHash";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidBlockNumber";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidChainId";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidInHash";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidManaBaseFee";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidPreviousArchive";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidProof";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidProposedArchive";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidTimestamp";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidVersion";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__ManaLimitExceeded";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__NoEpochToProve";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__NonSequentialProving";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__NonZeroDaFee";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__NotPastDeadline";
            readonly inputs: readonly [{
                readonly name: "deadline";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }, {
                readonly name: "currentSlot";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__NothingToPrune";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__PastDeadline";
            readonly inputs: readonly [{
                readonly name: "deadline";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }, {
                readonly name: "currentSlot";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__ProverHaveAlreadySubmitted";
            readonly inputs: readonly [{
                readonly name: "prover";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "epoch";
                readonly type: "uint256";
                readonly internalType: "Epoch";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__SlotAlreadyInChain";
            readonly inputs: readonly [{
                readonly name: "lastSlot";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }, {
                readonly name: "proposedSlot";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__StartAndEndNotSameEpoch";
            readonly inputs: readonly [{
                readonly name: "start";
                readonly type: "uint256";
                readonly internalType: "Epoch";
            }, {
                readonly name: "end";
                readonly type: "uint256";
                readonly internalType: "Epoch";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__StartIsNotBuildingOnProven";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__StartIsNotFirstBlockOfEpoch";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__TimestampInFuture";
            readonly inputs: readonly [{
                readonly name: "max";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__TimestampTooOld";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__TryingToProveNonExistingBlock";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__UnavailableTxs";
            readonly inputs: readonly [{
                readonly name: "txsHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "SampleLib__IndexOutOfBounds";
            readonly inputs: readonly [{
                readonly name: "requested";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "bound";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "SampleLib__SampleLargerThanIndex";
            readonly inputs: readonly [{
                readonly name: "sample";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "index";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "SignatureLib__CannotVerifyEmpty";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "SignatureLib__InvalidSignature";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "recovered";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "event";
            readonly name: "SlashPayloadCreated";
            readonly inputs: readonly [{
                readonly name: "payloadAddress";
                readonly type: "address";
                readonly indexed: true;
                readonly internalType: "address";
            }, {
                readonly name: "epoch";
                readonly type: "uint256";
                readonly indexed: true;
                readonly internalType: "Epoch";
            }, {
                readonly name: "amount";
                readonly type: "uint256";
                readonly indexed: true;
                readonly internalType: "uint256";
            }];
            readonly anonymous: false;
        }, {
            readonly type: "error";
            readonly name: "Staking__AlreadyActive";
            readonly inputs: readonly [{
                readonly name: "attester";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__AlreadyRegistered";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__CannotSlashExitedStake";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__FailedToRemove";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__InsufficientStake";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__InvalidDeposit";
            readonly inputs: readonly [{
                readonly name: "attester";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "proposer";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__NoOneToSlash";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__NotExiting";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__NotSlasher";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__NotWithdrawer";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__NothingToExit";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__WithdrawalNotUnlockedYet";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }, {
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }];
        }, {
            readonly type: "function";
            readonly name: "VALIDATOR_SELECTION";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "contract IValidatorSelection";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "error";
            readonly name: "ValidatorSelection__EpochNotSetup";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "ValidatorSelection__InsufficientAttestations";
            readonly inputs: readonly [{
                readonly name: "minimumNeeded";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "provided";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "ValidatorSelection__InsufficientAttestationsProvided";
            readonly inputs: readonly [{
                readonly name: "minimumNeeded";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "provided";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "ValidatorSelection__InvalidDeposit";
            readonly inputs: readonly [{
                readonly name: "attester";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "proposer";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "ValidatorSelection__InvalidProposer";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "actual";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "function";
            readonly name: "createSlashPayload";
            readonly inputs: readonly [{
                readonly name: "_epoch";
                readonly type: "uint256";
                readonly internalType: "Epoch";
            }, {
                readonly name: "_amount";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "contract IPayload";
            }];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "function";
            readonly name: "getAddressAndIsDeployed";
            readonly inputs: readonly [{
                readonly name: "_epoch";
                readonly type: "uint256";
                readonly internalType: "Epoch";
            }, {
                readonly name: "_amount";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "";
                readonly type: "bool";
                readonly internalType: "bool";
            }];
            readonly stateMutability: "view";
        }];
        contractBytecode: `0x${string}`;
    };
    registerNewRollupVersionPayload: {
        contractAbi: readonly [{
            readonly type: "constructor";
            readonly inputs: readonly [{
                readonly name: "_registry";
                readonly type: "address";
                readonly internalType: "contract IRegistry";
            }, {
                readonly name: "_rollup";
                readonly type: "address";
                readonly internalType: "address";
            }];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "error";
            readonly name: "AddressSnapshotLib__IndexOutOfBounds";
            readonly inputs: readonly [{
                readonly name: "index";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "size";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "CoinIssuer__InsufficientMintAvailable";
            readonly inputs: readonly [{
                readonly name: "available";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "needed";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "DevNet__InvalidProposer";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "actual";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "DevNet__NoPruningAllowed";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "FeeJuicePortal__AlreadyInitialized";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "FeeJuicePortal__InvalidInitialization";
            readonly inputs: readonly [];
        }, {
            readonly type: "error"; /**
             * Return type of the deployL1Contract function.
             */
            readonly name: "FeeJuicePortal__Unauthorized";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "FeeLib__InvalidFeeAssetPriceModifier";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__CanOnlyExecuteProposalInPast";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__FailedToPropose";
            readonly inputs: readonly [{
                readonly name: "proposal";
                readonly type: "address";
                readonly internalType: "contract IPayload";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__InstanceHaveNoCode";
            readonly inputs: readonly [{
                readonly name: "instance";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__InsufficientVotes";
            readonly inputs: readonly [{
                readonly name: "votesCast";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "votesNeeded";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__InvalidNAndMValues";
            readonly inputs: readonly [{
                readonly name: "n";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "m";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__NCannotBeLargerTHanM";
            readonly inputs: readonly [{
                readonly name: "n";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "m";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__OnlyProposerCanVote";
            readonly inputs: readonly [{
                readonly name: "caller";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "proposer";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__ProposalAlreadyExecuted";
            readonly inputs: readonly [{
                readonly name: "roundNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__ProposalCannotBeAddressZero";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__ProposalHaveNoCode";
            readonly inputs: readonly [{
                readonly name: "proposal";
                readonly type: "address";
                readonly internalType: "contract IPayload";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__ProposalTooOld";
            readonly inputs: readonly [{
                readonly name: "roundNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "currentRoundNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__VoteAlreadyCastForSlot";
            readonly inputs: readonly [{
                readonly name: "slot";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }]; /** The initial balance of the fee juice portal. This is the amount of fee juice that is prefunded to accounts */
        }, {
            readonly type: "error";
            readonly name: "Governance__CallFailed";
            readonly inputs: readonly [{
                readonly name: "target";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__CallerNotGovernanceProposer";
            readonly inputs: readonly [{
                readonly name: "caller";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "governanceProposer";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__CallerNotSelf";
            readonly inputs: readonly [{
                readonly name: "caller";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "self";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__CannotCallAsset";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__DifferentialTooBig";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__DifferentialTooSmall";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__InvalidMinimumVotes";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__LockAmountTooSmall";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__QuorumTooBig";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__QuorumTooSmall";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__TimeTooBig";
            readonly inputs: readonly [{
                readonly name: "name";
                readonly type: "string";
                readonly internalType: "string";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__TimeTooSmall";
            readonly inputs: readonly [{
                readonly name: "name";
                readonly type: "string";
                readonly internalType: "string";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__InsufficientPower";
            readonly inputs: readonly [{
                readonly name: "voter";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "have";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "required";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__InvalidConfiguration";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__NoCheckpointsFound";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalAlreadyDropped";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalCannotBeDropped";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalDoesNotExists";
            readonly inputs: readonly [{
                readonly name: "proposalId";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalLib__MoreVoteThanExistNeeded";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalLib__MoreYeaVoteThanExistNeeded";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalLib__ZeroMinimum";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalLib__ZeroVotesNeeded";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalLib__ZeroYeaVotesNeeded";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalNotActive";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalNotExecutable";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__UserLib__NotInPast";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__WithdrawalAlreadyclaimed";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__WithdrawalNotUnlockedYet";
            readonly inputs: readonly [{
                readonly name: "currentTime";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }, {
                readonly name: "unlocksAt";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }];
        }, {
            readonly type: "error";
            readonly name: "HeaderLib__InvalidHeaderSize";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "HeaderLib__InvalidSlotNumber";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }];
        }, {
            readonly type: "error";
            readonly name: "Inbox__ActorTooLarge";
            readonly inputs: readonly [{
                readonly name: "actor";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Inbox__ContentTooLarge";
            readonly inputs: readonly [{
                readonly name: "content";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Inbox__MustBuildBeforeConsume";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Inbox__SecretHashTooLarge";
            readonly inputs: readonly [{
                readonly name: "secretHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Inbox__Unauthorized";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Inbox__VersionMismatch";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "MerkleLib__InvalidRoot";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "leaf";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "leafIndex";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__AlreadyNullified";
            readonly inputs: readonly [{
                readonly name: "l2BlockNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "leafIndex";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__BlockNotProven";
            readonly inputs: readonly [{
                readonly name: "l2BlockNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__IncompatibleEntryArguments";
            readonly inputs: readonly [{
                readonly name: "messageHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "storedFee";
                readonly type: "uint64";
                readonly internalType: "uint64";
            }, {
                readonly name: "feePassed";
                readonly type: "uint64";
                readonly internalType: "uint64";
            }, {
                readonly name: "storedVersion";
                readonly type: "uint32";
                readonly internalType: "uint32";
            }, {
                readonly name: "versionPassed";
                readonly type: "uint32";
                readonly internalType: "uint32";
            }, {
                readonly name: "storedDeadline";
                readonly type: "uint32";
                readonly internalType: "uint32";
            }, {
                readonly name: "deadlinePassed";
                readonly type: "uint32";
                readonly internalType: "uint32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__InvalidChainId";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Outbox__InvalidPathLength";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__InvalidRecipient";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "actual";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__NothingToConsume";
            readonly inputs: readonly [{
                readonly name: "messageHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__NothingToConsumeAtBlock";
            readonly inputs: readonly [{
                readonly name: "l2BlockNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__RootAlreadySetAtBlock";
            readonly inputs: readonly [{
                readonly name: "l2BlockNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__Unauthorized";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Outbox__VersionMismatch";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "ProofCommitmentEscrow__InsufficientBalance";
            readonly inputs: readonly [{
                readonly name: "balance";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "requested";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "ProofCommitmentEscrow__NotOwner";
            readonly inputs: readonly [{
                readonly name: "caller";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "ProofCommitmentEscrow__WithdrawRequestNotReady";
            readonly inputs: readonly [{
                readonly name: "current";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "readyAt";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }];
        }, {
            readonly type: "function";
            readonly name: "REGISTRY";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "contract IRegistry";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "ROLLUP";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "error";
            readonly name: "Registry__NoRollupsRegistered";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Registry__RollupAlreadyRegistered";
            readonly inputs: readonly [{
                readonly name: "rollup";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Registry__RollupNotRegistered";
            readonly inputs: readonly [{
                readonly name: "version";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "RewardDistributor__InvalidCaller";
            readonly inputs: readonly [{
                readonly name: "caller";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "canonical";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__AlreadyClaimed";
            readonly inputs: readonly [{
                readonly name: "prover";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "epoch";
                readonly type: "uint256";
                readonly internalType: "Epoch";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InsufficientBondAmount";
            readonly inputs: readonly [{
                readonly name: "minimum";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "provided";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InsufficientFundsInEscrow";
            readonly inputs: readonly [{
                readonly name: "required";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "available";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidArchive";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidBasisPointFee";
            readonly inputs: readonly [{
                readonly name: "basisPointFee";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidBlobHash";
            readonly inputs: readonly [{
                readonly name: "blobHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidBlobProof";
            readonly inputs: readonly [{
                readonly name: "blobHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidBlobPublicInputsHash";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidBlockNumber";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidChainId";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidInHash";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidManaBaseFee";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidPreviousArchive";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidProof";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidProposedArchive";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidTimestamp";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidVersion";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__ManaLimitExceeded";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__NoEpochToProve";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__NonSequentialProving";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__NonZeroDaFee";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__NotPastDeadline";
            readonly inputs: readonly [{
                readonly name: "deadline";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }, {
                readonly name: "currentSlot";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__NothingToPrune";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__PastDeadline";
            readonly inputs: readonly [{
                readonly name: "deadline";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }, {
                readonly name: "currentSlot";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__ProverHaveAlreadySubmitted";
            readonly inputs: readonly [{
                readonly name: "prover";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "epoch";
                readonly type: "uint256";
                readonly internalType: "Epoch";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__SlotAlreadyInChain";
            readonly inputs: readonly [{
                readonly name: "lastSlot";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }, {
                readonly name: "proposedSlot";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__StartAndEndNotSameEpoch";
            readonly inputs: readonly [{
                readonly name: "start";
                readonly type: "uint256";
                readonly internalType: "Epoch";
            }, {
                readonly name: "end";
                readonly type: "uint256";
                readonly internalType: "Epoch";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__StartIsNotBuildingOnProven";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__StartIsNotFirstBlockOfEpoch";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__TimestampInFuture";
            readonly inputs: readonly [{
                readonly name: "max";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__TimestampTooOld";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__TryingToProveNonExistingBlock";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__UnavailableTxs";
            readonly inputs: readonly [{
                readonly name: "txsHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "SampleLib__IndexOutOfBounds";
            readonly inputs: readonly [{
                readonly name: "requested";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "bound";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "SampleLib__SampleLargerThanIndex";
            readonly inputs: readonly [{
                readonly name: "sample";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "index";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "SignatureLib__CannotVerifyEmpty";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "SignatureLib__InvalidSignature";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "recovered";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__AlreadyActive";
            readonly inputs: readonly [{
                readonly name: "attester";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__AlreadyRegistered";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__CannotSlashExitedStake";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__FailedToRemove";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__InsufficientStake";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__InvalidDeposit";
            readonly inputs: readonly [{
                readonly name: "attester";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "proposer";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__NoOneToSlash";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__NotExiting";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__NotSlasher";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__NotWithdrawer";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__NothingToExit";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__WithdrawalNotUnlockedYet";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }, {
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }];
        }, {
            readonly type: "error";
            readonly name: "ValidatorSelection__EpochNotSetup";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "ValidatorSelection__InsufficientAttestations";
            readonly inputs: readonly [{
                readonly name: "minimumNeeded";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "provided";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "ValidatorSelection__InsufficientAttestationsProvided";
            readonly inputs: readonly [{
                readonly name: "minimumNeeded";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "provided";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "ValidatorSelection__InvalidDeposit";
            readonly inputs: readonly [{
                readonly name: "attester";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "proposer";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "ValidatorSelection__InvalidProposer";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "actual";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "function";
            readonly name: "getActions";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "tuple[]";
                readonly internalType: "struct IPayload.Action[]";
                readonly components: readonly [{
                    readonly name: "target";
                    readonly type: "address";
                    readonly internalType: "address";
                }, {
                    readonly name: "data";
                    readonly type: "bytes";
                    readonly internalType: "bytes";
                }];
            }];
            readonly stateMutability: "view";
        }];
        contractBytecode: `0x${string}`;
    };
    feeAssetHandler: {
        contractAbi: readonly [{
            readonly type: "constructor";
            readonly inputs: readonly [{
                readonly name: "_owner";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "_feeAsset";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "_mintAmount";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "error";
            readonly name: "AddressSnapshotLib__IndexOutOfBounds";
            readonly inputs: readonly [{
                readonly name: "index";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "size";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "CoinIssuer__InsufficientMintAvailable";
            readonly inputs: readonly [{
                readonly name: "available";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "needed";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "DevNet__InvalidProposer";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "actual";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "DevNet__NoPruningAllowed";
            readonly inputs: readonly [];
        }, {
            readonly type: "function";
            readonly name: "FEE_ASSET";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "contract IMintableERC20";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "error";
            readonly name: "FeeJuicePortal__AlreadyInitialized"; /**
             * The currently deployed l1 contract addresses
             */
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "FeeJuicePortal__InvalidInitialization";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "FeeJuicePortal__Unauthorized";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "FeeLib__InvalidFeeAssetPriceModifier";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__CanOnlyExecuteProposalInPast";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__FailedToPropose";
            readonly inputs: readonly [{
                readonly name: "proposal";
                readonly type: "address";
                readonly internalType: "contract IPayload";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__InstanceHaveNoCode";
            readonly inputs: readonly [{
                readonly name: "instance";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__InsufficientVotes";
            readonly inputs: readonly [{
                readonly name: "votesCast";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "votesNeeded";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__InvalidNAndMValues";
            readonly inputs: readonly [{
                readonly name: "n";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "m";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__NCannotBeLargerTHanM";
            readonly inputs: readonly [{
                readonly name: "n";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "m";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__OnlyProposerCanVote";
            readonly inputs: readonly [{
                readonly name: "caller";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "proposer";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__ProposalAlreadyExecuted";
            readonly inputs: readonly [{
                readonly name: "roundNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__ProposalCannotBeAddressZero";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__ProposalHaveNoCode";
            readonly inputs: readonly [{
                readonly name: "proposal";
                readonly type: "address"; /** The initial validators for the rollup contract. */
                readonly internalType: "contract IPayload";
            }];
        }, {
            readonly type: "error"; /** Configuration for the L1 tx utils module. */
            readonly name: "GovernanceProposer__ProposalTooOld";
            readonly inputs: readonly [{
                readonly name: "roundNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "currentRoundNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__VoteAlreadyCastForSlot";
            readonly inputs: readonly [{
                readonly name: "slot";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__CallFailed";
            readonly inputs: readonly [{
                readonly name: "target";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__CallerNotGovernanceProposer";
            readonly inputs: readonly [{
                readonly name: "caller";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "governanceProposer";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__CallerNotSelf";
            readonly inputs: readonly [{
                readonly name: "caller";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "self";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__CannotCallAsset";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__DifferentialTooBig";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__DifferentialTooSmall";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__InvalidMinimumVotes";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__LockAmountTooSmall";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__QuorumTooBig";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__QuorumTooSmall";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__TimeTooBig";
            readonly inputs: readonly [{
                readonly name: "name";
                readonly type: "string";
                readonly internalType: "string";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__TimeTooSmall";
            readonly inputs: readonly [{
                readonly name: "name";
                readonly type: "string";
                readonly internalType: "string";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__InsufficientPower";
            readonly inputs: readonly [{
                readonly name: "voter";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "have";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "required";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__InvalidConfiguration";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__NoCheckpointsFound";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalAlreadyDropped";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalCannotBeDropped";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalDoesNotExists";
            readonly inputs: readonly [{
                readonly name: "proposalId";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalLib__MoreVoteThanExistNeeded";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalLib__MoreYeaVoteThanExistNeeded";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalLib__ZeroMinimum";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalLib__ZeroVotesNeeded";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalLib__ZeroYeaVotesNeeded";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalNotActive";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalNotExecutable";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__UserLib__NotInPast";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__WithdrawalAlreadyclaimed";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__WithdrawalNotUnlockedYet";
            readonly inputs: readonly [{
                readonly name: "currentTime";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }, {
                readonly name: "unlocksAt";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }];
        }, {
            readonly type: "error";
            readonly name: "HeaderLib__InvalidHeaderSize";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "HeaderLib__InvalidSlotNumber";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }];
        }, {
            readonly type: "error";
            readonly name: "Inbox__ActorTooLarge";
            readonly inputs: readonly [{
                readonly name: "actor";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Inbox__ContentTooLarge";
            readonly inputs: readonly [{
                readonly name: "content";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Inbox__MustBuildBeforeConsume";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Inbox__SecretHashTooLarge";
            readonly inputs: readonly [{
                readonly name: "secretHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Inbox__Unauthorized";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Inbox__VersionMismatch";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "MerkleLib__InvalidRoot";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "leaf";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "leafIndex";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "event";
            readonly name: "MintAmountSet";
            readonly inputs: readonly [{
                readonly name: "amount";
                readonly type: "uint256";
                readonly indexed: false;
                readonly internalType: "uint256";
            }];
            readonly anonymous: false;
        }, {
            readonly type: "error";
            readonly name: "Outbox__AlreadyNullified";
            readonly inputs: readonly [{
                readonly name: "l2BlockNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "leafIndex";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__BlockNotProven";
            readonly inputs: readonly [{
                readonly name: "l2BlockNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__IncompatibleEntryArguments";
            readonly inputs: readonly [{
                readonly name: "messageHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "storedFee";
                readonly type: "uint64";
                readonly internalType: "uint64";
            }, {
                readonly name: "feePassed";
                readonly type: "uint64";
                /**
                 * Deploys a new rollup contract, funds and initializes the fee juice portal, and initializes the validator set.
                 */
                readonly internalType: "uint64";
            }, {
                readonly name: "storedVersion";
                readonly type: "uint32";
                readonly internalType: "uint32";
            }, {
                readonly name: "versionPassed";
                readonly type: "uint32";
                readonly internalType: "uint32";
            }, {
                readonly name: "storedDeadline";
                readonly type: "uint32";
                readonly internalType: "uint32";
            }, {
                readonly name: "deadlinePassed";
                readonly type: "uint32";
                readonly internalType: "uint32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__InvalidChainId";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Outbox__InvalidPathLength";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__InvalidRecipient";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "actual";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__NothingToConsume";
            readonly inputs: readonly [{
                readonly name: "messageHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__NothingToConsumeAtBlock";
            readonly inputs: readonly [{
                readonly name: "l2BlockNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__RootAlreadySetAtBlock";
            readonly inputs: readonly [{
                readonly name: "l2BlockNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__Unauthorized";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Outbox__VersionMismatch";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "OwnableInvalidOwner";
            readonly inputs: readonly [{
                readonly name: "owner";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "OwnableUnauthorizedAccount";
            readonly inputs: readonly [{
                readonly name: "account";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "event";
            readonly name: "OwnershipTransferred";
            readonly inputs: readonly [{
                readonly name: "previousOwner";
                readonly type: "address";
                readonly indexed: true;
                readonly internalType: "address";
            }, {
                readonly name: "newOwner";
                readonly type: "address";
                readonly indexed: true;
                readonly internalType: "address";
            }];
            readonly anonymous: false;
        }, {
            readonly type: "error";
            readonly name: "ProofCommitmentEscrow__InsufficientBalance";
            readonly inputs: readonly [{
                readonly name: "balance";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "requested";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "ProofCommitmentEscrow__NotOwner";
            readonly inputs: readonly [{
                readonly name: "caller";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "ProofCommitmentEscrow__WithdrawRequestNotReady";
            readonly inputs: readonly [{
                readonly name: "current";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "readyAt";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }];
        }, {
            readonly type: "error";
            readonly name: "Registry__NoRollupsRegistered";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Registry__RollupAlreadyRegistered";
            readonly inputs: readonly [{
                readonly name: "rollup";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Registry__RollupNotRegistered";
            readonly inputs: readonly [{
                readonly name: "version";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "RewardDistributor__InvalidCaller";
            readonly inputs: readonly [{
                readonly name: "caller";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "canonical";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__AlreadyClaimed";
            readonly inputs: readonly [{
                readonly name: "prover";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "epoch";
                readonly type: "uint256";
                readonly internalType: "Epoch";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InsufficientBondAmount";
            readonly inputs: readonly [{
                readonly name: "minimum";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "provided";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InsufficientFundsInEscrow";
            readonly inputs: readonly [{
                readonly name: "required";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "available";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidArchive";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidBasisPointFee";
            readonly inputs: readonly [{
                readonly name: "basisPointFee";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidBlobHash";
            readonly inputs: readonly [{
                readonly name: "blobHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidBlobProof";
            readonly inputs: readonly [{
                readonly name: "blobHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidBlobPublicInputsHash";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidBlockNumber";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidChainId";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidInHash";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidManaBaseFee";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidPreviousArchive";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidProof";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidProposedArchive";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidTimestamp";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidVersion";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__ManaLimitExceeded";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__NoEpochToProve";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__NonSequentialProving";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__NonZeroDaFee";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__NotPastDeadline";
            readonly inputs: readonly [{
                readonly name: "deadline";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }, {
                readonly name: "currentSlot";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__NothingToPrune";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__PastDeadline";
            readonly inputs: readonly [{
                readonly name: "deadline";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }, {
                readonly name: "currentSlot";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__ProverHaveAlreadySubmitted";
            readonly inputs: readonly [{
                readonly name: "prover";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "epoch";
                readonly type: "uint256";
                readonly internalType: "Epoch";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__SlotAlreadyInChain";
            readonly inputs: readonly [{
                readonly name: "lastSlot";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }, {
                readonly name: "proposedSlot";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__StartAndEndNotSameEpoch";
            readonly inputs: readonly [{
                readonly name: "start";
                readonly type: "uint256";
                readonly internalType: "Epoch";
            }, {
                readonly name: "end";
                readonly type: "uint256";
                readonly internalType: "Epoch";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__StartIsNotBuildingOnProven";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__StartIsNotFirstBlockOfEpoch";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__TimestampInFuture";
            readonly inputs: readonly [{
                readonly name: "max";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__TimestampTooOld";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__TryingToProveNonExistingBlock";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__UnavailableTxs";
            readonly inputs: readonly [{
                readonly name: "txsHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "SampleLib__IndexOutOfBounds";
            readonly inputs: readonly [{
                readonly name: "requested";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "bound";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "SampleLib__SampleLargerThanIndex";
            readonly inputs: readonly [{
                readonly name: "sample";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "index";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "SignatureLib__CannotVerifyEmpty";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "SignatureLib__InvalidSignature";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "recovered";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__AlreadyActive";
            readonly inputs: readonly [{
                readonly name: "attester";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__AlreadyRegistered";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__CannotSlashExitedStake";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__FailedToRemove";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            /**
             * Helper function to deploy ETH contracts.
             * @param walletClient - A viem WalletClient.
             * @param publicClient - A viem PublicClient.
             * @param abi - The ETH contract's ABI (as abitype's Abi).
             * @param bytecode  - The ETH contract's bytecode.
             * @param args - Constructor arguments for the contract.
             * @param maybeSalt - Optional salt for CREATE2 deployment (does not wait for deployment tx to be mined if set, does not send tx if contract already exists).
             * @returns The ETH address the contract was deployed to.
             */
            readonly name: "Staking__InsufficientStake";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__InvalidDeposit";
            readonly inputs: readonly [{
                readonly name: "attester";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "proposer";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__NoOneToSlash";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__NotExiting";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__NotSlasher";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__NotWithdrawer";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__NothingToExit";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__WithdrawalNotUnlockedYet";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }, {
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }];
        }, {
            readonly type: "error";
            readonly name: "ValidatorSelection__EpochNotSetup";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "ValidatorSelection__InsufficientAttestations";
            readonly inputs: readonly [{
                readonly name: "minimumNeeded";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "provided";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "ValidatorSelection__InsufficientAttestationsProvided";
            readonly inputs: readonly [{
                readonly name: "minimumNeeded";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "provided";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "ValidatorSelection__InvalidDeposit";
            readonly inputs: readonly [{
                readonly name: "attester";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "proposer";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "ValidatorSelection__InvalidProposer";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "actual";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "function";
            readonly name: "mint";
            readonly inputs: readonly [{
                readonly name: "_recipient";
                readonly type: "address";
                readonly internalType: "address";
            }];
            readonly outputs: readonly [];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "function";
            readonly name: "mintAmount";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "owner";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "renounceOwnership";
            readonly inputs: readonly [];
            readonly outputs: readonly [];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "function";
            readonly name: "setMintAmount";
            readonly inputs: readonly [{
                readonly name: "_amount";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly outputs: readonly [];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "function";
            readonly name: "transferOwnership";
            readonly inputs: readonly [{
                readonly name: "newOwner";
                readonly type: "address";
                readonly internalType: "address";
            }];
            readonly outputs: readonly [];
            readonly stateMutability: "nonpayable";
        }];
        contractBytecode: `0x${string}`;
    };
    stakingAssetHandler: {
        contractAbi: readonly [{
            readonly type: "constructor";
            readonly inputs: readonly [{
                readonly name: "_owner";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "_stakingAsset";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "_registry";
                readonly type: "address";
                readonly internalType: "contract IRegistry";
            }, {
                readonly name: "_withdrawer";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "_mintInterval";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "_depositsPerMint";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "_unhinged";
                readonly type: "address[]";
                readonly internalType: "address[]";
            }];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "error";
            readonly name: "AddressSnapshotLib__IndexOutOfBounds";
            readonly inputs: readonly [{
                readonly name: "index";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "size";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "CannotMintZeroAmount";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "CoinIssuer__InsufficientMintAvailable";
            readonly inputs: readonly [{
                readonly name: "available";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "needed";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "event";
            readonly name: "DepositsPerMintUpdated";
            readonly inputs: readonly [{
                readonly name: "_depositsPerMint";
                readonly type: "uint256";
                readonly indexed: false; /**
                 * The currently deployed l1 contract addresses
                 */
                readonly internalType: "uint256";
            }];
            readonly anonymous: false;
        }, {
            readonly type: "error";
            readonly name: "DevNet__InvalidProposer";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "actual";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "DevNet__NoPruningAllowed";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "FeeJuicePortal__AlreadyInitialized";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "FeeJuicePortal__InvalidInitialization";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "FeeJuicePortal__Unauthorized";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "FeeLib__InvalidFeeAssetPriceModifier";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__CanOnlyExecuteProposalInPast";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__FailedToPropose";
            readonly inputs: readonly [{
                readonly name: "proposal";
                readonly type: "address";
                readonly internalType: "contract IPayload";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__InstanceHaveNoCode";
            readonly inputs: readonly [{
                readonly name: "instance";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__InsufficientVotes";
            readonly inputs: readonly [{
                readonly name: "votesCast";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "votesNeeded";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__InvalidNAndMValues";
            readonly inputs: readonly [{
                readonly name: "n";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "m";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__NCannotBeLargerTHanM";
            readonly inputs: readonly [{
                readonly name: "n";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "m";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__OnlyProposerCanVote";
            readonly inputs: readonly [{
                readonly name: "caller";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "proposer";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__ProposalAlreadyExecuted";
            readonly inputs: readonly [{
                readonly name: "roundNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }]; /** The initial balance of the fee juice portal. This is the amount of fee juice that is prefunded to accounts */
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__ProposalCannotBeAddressZero";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__ProposalHaveNoCode";
            readonly inputs: readonly [{
                readonly name: "proposal";
                readonly type: "address";
                readonly internalType: "contract IPayload";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__ProposalTooOld";
            readonly inputs: readonly [{
                readonly name: "roundNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "currentRoundNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "GovernanceProposer__VoteAlreadyCastForSlot";
            readonly inputs: readonly [{
                readonly name: "slot";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__CallFailed";
            readonly inputs: readonly [{
                readonly name: "target";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__CallerNotGovernanceProposer";
            readonly inputs: readonly [{
                readonly name: "caller";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "governanceProposer";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__CallerNotSelf";
            readonly inputs: readonly [{
                readonly name: "caller";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "self";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__CannotCallAsset";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__DifferentialTooBig";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__DifferentialTooSmall";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__InvalidMinimumVotes";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__LockAmountTooSmall";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__QuorumTooBig";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__QuorumTooSmall";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__TimeTooBig";
            readonly inputs: readonly [{
                readonly name: "name";
                readonly type: "string";
                readonly internalType: "string";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__ConfigurationLib__TimeTooSmall";
            readonly inputs: readonly [{
                readonly name: "name";
                readonly type: "string";
                readonly internalType: "string";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__InsufficientPower";
            readonly inputs: readonly [{
                readonly name: "voter";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "have";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "required";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__InvalidConfiguration";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__NoCheckpointsFound";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalAlreadyDropped";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalCannotBeDropped";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalDoesNotExists";
            readonly inputs: readonly [{
                readonly name: "proposalId";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalLib__MoreVoteThanExistNeeded";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalLib__MoreYeaVoteThanExistNeeded";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalLib__ZeroMinimum";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalLib__ZeroVotesNeeded";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalLib__ZeroYeaVotesNeeded";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalNotActive";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__ProposalNotExecutable";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__UserLib__NotInPast";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__WithdrawalAlreadyclaimed";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Governance__WithdrawalNotUnlockedYet";
            readonly inputs: readonly [{
                readonly name: "currentTime";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }, {
                readonly name: "unlocksAt";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }];
        }, {
            readonly type: "error";
            readonly name: "HeaderLib__InvalidHeaderSize";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "HeaderLib__InvalidSlotNumber";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }];
        }, {
            readonly type: "error";
            readonly name: "Inbox__ActorTooLarge";
            readonly inputs: readonly [{
                readonly name: "actor";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Inbox__ContentTooLarge";
            readonly inputs: readonly [{
                readonly name: "content";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Inbox__MustBuildBeforeConsume";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Inbox__SecretHashTooLarge";
            readonly inputs: readonly [{
                readonly name: "secretHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Inbox__Unauthorized";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Inbox__VersionMismatch";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "event";
            readonly name: "IntervalUpdated";
            readonly inputs: readonly [{
                readonly name: "_interval";
                readonly type: "uint256";
                readonly indexed: false;
                readonly internalType: "uint256";
            }];
            readonly anonymous: false;
        }, {
            readonly type: "error";
            readonly name: "MerkleLib__InvalidRoot";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "leaf";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "leafIndex";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__AlreadyNullified";
            readonly inputs: readonly [{
                readonly name: "l2BlockNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "leafIndex";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__BlockNotProven";
            readonly inputs: readonly [{
                readonly name: "l2BlockNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__IncompatibleEntryArguments";
            readonly inputs: readonly [{
                readonly name: "messageHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "storedFee";
                readonly type: "uint64";
                readonly internalType: "uint64";
            }, {
                readonly name: "feePassed";
                readonly type: "uint64";
                readonly internalType: "uint64";
            }, {
                readonly name: "storedVersion";
                readonly type: "uint32";
                readonly internalType: "uint32";
            }, {
                readonly name: "versionPassed";
                readonly type: "uint32";
                readonly internalType: "uint32";
            }, {
                readonly name: "storedDeadline";
                readonly type: "uint32";
                readonly internalType: "uint32";
            }, {
                readonly name: "deadlinePassed";
                readonly type: "uint32";
                readonly internalType: "uint32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__InvalidChainId";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Outbox__InvalidPathLength";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__InvalidRecipient";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "actual";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__NothingToConsume";
            readonly inputs: readonly [{
                readonly name: "messageHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__NothingToConsumeAtBlock";
            readonly inputs: readonly [{
                readonly name: "l2BlockNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__RootAlreadySetAtBlock";
            readonly inputs: readonly [{
                readonly name: "l2BlockNumber";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Outbox__Unauthorized";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Outbox__VersionMismatch";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "OwnableInvalidOwner";
            readonly inputs: readonly [{
                readonly name: "owner";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "OwnableUnauthorizedAccount";
            readonly inputs: readonly [{
                readonly name: "account";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "event";
            readonly name: "OwnershipTransferred";
            readonly inputs: readonly [{
                readonly name: "previousOwner";
                readonly type: "address";
                readonly indexed: true;
                readonly internalType: "address";
            }, {
                readonly name: "newOwner";
                readonly type: "address";
                readonly indexed: true;
                readonly internalType: "address";
            }];
            readonly anonymous: false;
        }, {
            readonly type: "error";
            readonly name: "ProofCommitmentEscrow__InsufficientBalance";
            readonly inputs: readonly [{
                readonly name: "balance";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "requested";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "ProofCommitmentEscrow__NotOwner";
            readonly inputs: readonly [{
                readonly name: "caller";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "ProofCommitmentEscrow__WithdrawRequestNotReady";
            readonly inputs: readonly [{
                readonly name: "current";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "readyAt";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }];
        }, {
            readonly type: "function";
            readonly name: "REGISTRY";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "contract IRegistry";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "error";
            readonly name: "Registry__NoRollupsRegistered";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Registry__RollupAlreadyRegistered";
            readonly inputs: readonly [{
                readonly name: "rollup";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Registry__RollupNotRegistered";
            readonly inputs: readonly [{
                readonly name: "version";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "RewardDistributor__InvalidCaller";
            readonly inputs: readonly [{
                readonly name: "caller";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "canonical";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__AlreadyClaimed";
            readonly inputs: readonly [{
                readonly name: "prover";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "epoch";
                readonly type: "uint256";
                readonly internalType: "Epoch";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InsufficientBondAmount";
            readonly inputs: readonly [{
                readonly name: "minimum";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "provided";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InsufficientFundsInEscrow";
            readonly inputs: readonly [{
                readonly name: "required";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "available";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidArchive";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidBasisPointFee";
            readonly inputs: readonly [{
                readonly name: "basisPointFee";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidBlobHash";
            readonly inputs: readonly [{
                readonly name: "blobHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidBlobProof";
            readonly inputs: readonly [{
                readonly name: "blobHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidBlobPublicInputsHash";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidBlockNumber";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidChainId";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidInHash";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidManaBaseFee";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidPreviousArchive";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidProof";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidProposedArchive";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "actual";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidTimestamp";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__InvalidVersion";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__ManaLimitExceeded";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__NoEpochToProve";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__NonSequentialProving";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__NonZeroDaFee";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__NotPastDeadline";
            readonly inputs: readonly [{
                readonly name: "deadline";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }, {
                readonly name: "currentSlot";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__NothingToPrune";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__PastDeadline";
            readonly inputs: readonly [{
                readonly name: "deadline";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }, {
                readonly name: "currentSlot";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__ProverHaveAlreadySubmitted";
            readonly inputs: readonly [{
                readonly name: "prover";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "epoch";
                readonly type: "uint256";
                readonly internalType: "Epoch";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__SlotAlreadyInChain";
            readonly inputs: readonly [{
                readonly name: "lastSlot";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }, {
                readonly name: "proposedSlot";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__StartAndEndNotSameEpoch";
            readonly inputs: readonly [{
                readonly name: "start";
                readonly type: "uint256";
                readonly internalType: "Epoch";
            }, {
                readonly name: "end";
                readonly type: "uint256";
                readonly internalType: "Epoch";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__StartIsNotBuildingOnProven";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__StartIsNotFirstBlockOfEpoch";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__TimestampInFuture";
            readonly inputs: readonly [{
                readonly name: "max";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }, {
                readonly name: "actual";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }];
        }, {
            readonly type: "error";
            readonly name: "Rollup__TimestampTooOld";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__TryingToProveNonExistingBlock";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "Rollup__UnavailableTxs";
            readonly inputs: readonly [{
                readonly name: "txsHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly type: "function";
            readonly name: "STAKING_ASSET";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "contract IMintableERC20";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "error";
            readonly name: "SampleLib__IndexOutOfBounds";
            readonly inputs: readonly [{
                readonly name: "requested";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "bound";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "SampleLib__SampleLargerThanIndex";
            readonly inputs: readonly [{
                readonly name: "sample";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "index";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "SignatureLib__CannotVerifyEmpty";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            /**
             * Helper function to deploy ETH contracts.
             * @param walletClient - A viem WalletClient.
             * @param publicClient - A viem PublicClient.
             * @param abi - The ETH contract's ABI (as abitype's Abi).
             * @param bytecode  - The ETH contract's bytecode.
             * @param args - Constructor arguments for the contract.
             * @param maybeSalt - Optional salt for CREATE2 deployment (does not wait for deployment tx to be mined if set, does not send tx if contract already exists).
             * @returns The ETH address the contract was deployed to.
             */
            readonly name: "SignatureLib__InvalidSignature";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "recovered";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__AlreadyActive";
            readonly inputs: readonly [{
                readonly name: "attester";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__AlreadyRegistered";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__CannotSlashExitedStake";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__FailedToRemove";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__InsufficientStake";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__InvalidDeposit";
            readonly inputs: readonly [{
                readonly name: "attester";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "proposer";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__NoOneToSlash";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__NotExiting";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__NotSlasher";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__NotWithdrawer";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__NothingToExit";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "Staking__WithdrawalNotUnlockedYet";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }, {
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }];
        }, {
            readonly type: "event";
            readonly name: "ToppedUp";
            readonly inputs: readonly [{
                readonly name: "_amount";
                readonly type: "uint256";
                readonly indexed: false;
                readonly internalType: "uint256";
            }];
            readonly anonymous: false;
        }, {
            readonly type: "event";
            readonly name: "UnhingedAdded";
            readonly inputs: readonly [{
                readonly name: "_address";
                readonly type: "address";
                readonly indexed: true;
                readonly internalType: "address";
            }];
            readonly anonymous: false;
        }, {
            readonly type: "event";
            readonly name: "UnhingedRemoved";
            readonly inputs: readonly [{
                readonly name: "_address";
                readonly type: "address";
                readonly indexed: true;
                readonly internalType: "address";
            }];
            readonly anonymous: false;
        }, {
            readonly type: "event";
            readonly name: "ValidatorAdded";
            readonly inputs: readonly [{
                readonly name: "_rollup";
                readonly type: "address";
                readonly indexed: true;
                readonly internalType: "address";
            }, {
                readonly name: "_attester";
                readonly type: "address";
                readonly indexed: true;
                readonly internalType: "address";
            }, {
                readonly name: "_proposer";
                readonly type: "address";
                readonly indexed: false;
                readonly internalType: "address";
            }, {
                readonly name: "_withdrawer";
                readonly type: "address";
                readonly indexed: false;
                readonly internalType: "address";
            }];
            readonly anonymous: false;
        }, {
            readonly type: "error";
            readonly name: "ValidatorQuotaFilledUntil";
            readonly inputs: readonly [{
                readonly name: "_timestamp";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "ValidatorSelection__EpochNotSetup";
            readonly inputs: readonly [];
        }, {
            readonly type: "error";
            readonly name: "ValidatorSelection__InsufficientAttestations";
            readonly inputs: readonly [{
                readonly name: "minimumNeeded";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "provided";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "ValidatorSelection__InsufficientAttestationsProvided";
            readonly inputs: readonly [{
                readonly name: "minimumNeeded";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "provided";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly type: "error";
            readonly name: "ValidatorSelection__InvalidDeposit";
            readonly inputs: readonly [{
                readonly name: "attester";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "proposer";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "error";
            readonly name: "ValidatorSelection__InvalidProposer";
            readonly inputs: readonly [{
                readonly name: "expected";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "actual";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly type: "event";
            readonly name: "WithdrawerUpdated";
            readonly inputs: readonly [{
                readonly name: "_withdrawer";
                readonly type: "address";
                readonly indexed: true;
                readonly internalType: "address";
            }];
            readonly anonymous: false;
        }, {
            readonly type: "function";
            readonly name: "addUnhinged";
            readonly inputs: readonly [{
                readonly name: "_address";
                readonly type: "address";
                readonly internalType: "address";
            }];
            readonly outputs: readonly [];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "function";
            readonly name: "addValidator";
            readonly inputs: readonly [{
                readonly name: "_attester";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "_proposer";
                readonly type: "address";
                readonly internalType: "address";
            }];
            readonly outputs: readonly [];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "function";
            readonly name: "depositsPerMint";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "getRollup";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "isUnhinged";
            readonly inputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "bool";
                readonly internalType: "bool";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "lastMintTimestamp";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "mintInterval";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "owner";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
            readonly stateMutability: "view";
        }, {
            readonly type: "function";
            readonly name: "removeUnhinged";
            readonly inputs: readonly [{
                readonly name: "_address";
                readonly type: "address";
                readonly internalType: "address";
            }];
            readonly outputs: readonly [];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "function";
            readonly name: "renounceOwnership";
            readonly inputs: readonly [];
            readonly outputs: readonly [];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "function";
            readonly name: "setDepositsPerMint";
            readonly inputs: readonly [{
                readonly name: "_depositsPerMint";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly outputs: readonly [];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "function";
            readonly name: "setMintInterval";
            readonly inputs: readonly [{
                readonly name: "_interval";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
            readonly outputs: readonly [];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "function";
            readonly name: "setWithdrawer";
            readonly inputs: readonly [{
                readonly name: "_withdrawer";
                readonly type: "address";
                readonly internalType: "address";
            }];
            readonly outputs: readonly [];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "function";
            readonly name: "transferOwnership";
            readonly inputs: readonly [{
                readonly name: "newOwner";
                readonly type: "address";
                readonly internalType: "address";
            }];
            readonly outputs: readonly [];
            readonly stateMutability: "nonpayable";
        }, {
            readonly type: "function";
            readonly name: "withdrawer";
            readonly inputs: readonly [];
            readonly outputs: readonly [{
                readonly name: "";
                readonly type: "address";
                readonly internalType: "address";
            }];
            readonly stateMutability: "view";
        }];
        contractBytecode: `0x${string}`;
    };
};
export interface DeployL1ContractsArgs extends L1ContractsConfig {
    /** The vk tree root. */
    vkTreeRoot: Fr;
    /** The protocol contract tree root. */
    protocolContractTreeRoot: Fr;
    /** The genesis root of the archive tree. */
    genesisArchiveRoot: Fr;
    /** The salt for CREATE2 deployment. */
    salt: number | undefined;
    /** The initial validators for the rollup contract. */
    initialValidators?: EthAddress[];
    /** Configuration for the L1 tx utils module. */
    l1TxConfig?: Partial<L1TxUtilsConfig>;
    /** Enable fast mode for deployments (fire and forget transactions) */
    acceleratedTestDeployments?: boolean;
    /** The initial balance of the fee juice portal. This is the amount of fee juice that is prefunded to accounts */
    feeJuicePortalInitialBalance?: bigint;
}
export declare const deploySharedContracts: (l1Client: ExtendedViemWalletClient, deployer: L1Deployer, args: DeployL1ContractsArgs, logger: Logger) => Promise<{
    feeAssetAddress: EthAddress;
    feeAssetHandlerAddress: EthAddress | undefined;
    stakingAssetAddress: EthAddress;
    stakingAssetHandlerAddress: EthAddress | undefined;
    registryAddress: EthAddress;
    governanceAddress: EthAddress;
    governanceProposerAddress: EthAddress;
    coinIssuerAddress: EthAddress;
    rewardDistributorAddress: EthAddress;
}>;
/**
 * Deploys a new rollup, using the existing canonical version to derive certain values (addresses of assets etc).
 * @param clients - The L1 clients.
 * @param args - The deployment arguments.
 * @param registryAddress - The address of the registry.
 * @param logger - The logger.
 * @param txUtilsConfig - The L1 tx utils config.
 */
export declare const deployRollupForUpgrade: (extendedClient: ExtendedViemWalletClient, args: Omit<DeployL1ContractsArgs, 'governanceProposerQuorum' | 'governanceProposerRoundSize'>, registryAddress: EthAddress, logger: Logger, txUtilsConfig: L1TxUtilsConfig) => Promise<{
    rollup: RollupContract;
    slashFactoryAddress: EthAddress;
}>;
export declare const deploySlashFactory: (deployer: L1Deployer, rollupAddress: Hex, logger: Logger) => Promise<EthAddress>;
export declare const deployUpgradePayload: (deployer: L1Deployer, addresses: Pick<L1ContractAddresses, 'registryAddress' | 'rollupAddress'>) => Promise<EthAddress>;
/**
 * Deploys a new rollup contract, funds and initializes the fee juice portal, and initializes the validator set.
 */
export declare const deployRollup: (extendedClient: ExtendedViemWalletClient, deployer: L1Deployer, args: Omit<DeployL1ContractsArgs, 'governanceProposerQuorum' | 'governanceProposerRoundSize'>, addresses: Pick<L1ContractAddresses, 'feeJuiceAddress' | 'registryAddress' | 'rewardDistributorAddress' | 'stakingAssetAddress'>, logger: Logger) => Promise<{
    rollup: RollupContract;
    slashFactoryAddress: EthAddress;
}>;
export declare const handoverToGovernance: (extendedClient: ExtendedViemWalletClient, deployer: L1Deployer, registryAddress: EthAddress, governanceAddress: EthAddress, logger: Logger, acceleratedTestDeployments: boolean | undefined) => Promise<void>;
export declare const cheat_initializeValidatorSet: (extendedClient: ExtendedViemWalletClient, deployer: L1Deployer, rollupAddress: Hex, stakingAssetAddress: Hex, validators: Hex[], acceleratedTestDeployments: boolean | undefined, logger: Logger) => Promise<void>;
/**
 * Initialize the fee asset handler and make it a minter on the fee asset.
 * @note This function will only be used for testing purposes.
 *
 * @param extendedClient - The L1 clients.
 * @param deployer - The L1 deployer.
 * @param feeAssetAddress - The address of the fee asset.
 * @param logger - The logger.
 */
export declare const cheat_initializeFeeAssetHandler: (extendedClient: ExtendedViemWalletClient, deployer: L1Deployer, feeAssetAddress: EthAddress, logger: Logger) => Promise<{
    feeAssetHandlerAddress: EthAddress;
    txHash: Hex;
}>;
/**
 * Deploys the aztec L1 contracts; Rollup & (optionally) Decoder Helper.
 * @param rpcUrls - List of URLs of the ETH RPC to use for deployment.
 * @param account - Private Key or HD Account that will deploy the contracts.
 * @param chain - The chain instance to deploy to.
 * @param logger - A logger object.
 * @param args - Arguments for initialization of L1 contracts
 * @returns A list of ETH addresses of the deployed contracts.
 */
export declare const deployL1Contracts: (rpcUrls: string[], account: HDAccount | PrivateKeyAccount, chain: Chain, logger: Logger, args: DeployL1ContractsArgs, txUtilsConfig?: L1TxUtilsConfig) => Promise<DeployL1ContractsReturnType>;
export declare class L1Deployer {
    readonly client: ExtendedViemWalletClient;
    private acceleratedTestDeployments;
    private logger;
    private txUtilsConfig?;
    private salt;
    private txHashes;
    readonly l1TxUtils: L1TxUtils;
    constructor(client: ExtendedViemWalletClient, maybeSalt: number | undefined, acceleratedTestDeployments?: boolean, logger?: Logger, txUtilsConfig?: L1TxUtilsConfig | undefined);
    deploy(params: ContractArtifacts, args?: readonly unknown[]): Promise<EthAddress>;
    waitForDeployments(): Promise<void>;
    sendTransaction(tx: L1TxRequest): Promise<{
        txHash: Hex;
        gasLimit: bigint;
        gasPrice: GasPrice;
    }>;
}
/**
 * Helper function to deploy ETH contracts.
 * @param walletClient - A viem WalletClient.
 * @param publicClient - A viem PublicClient.
 * @param abi - The ETH contract's ABI (as abitype's Abi).
 * @param bytecode  - The ETH contract's bytecode.
 * @param args - Constructor arguments for the contract.
 * @param maybeSalt - Optional salt for CREATE2 deployment (does not wait for deployment tx to be mined if set, does not send tx if contract already exists).
 * @returns The ETH address the contract was deployed to.
 */
export declare function deployL1Contract(extendedClient: ExtendedViemWalletClient, abi: Narrow<Abi | readonly unknown[]>, bytecode: Hex, args?: readonly unknown[], maybeSalt?: Hex, libraries?: Libraries, logger?: Logger, l1TxUtils?: L1TxUtils, acceleratedTestDeployments?: boolean): Promise<{
    address: EthAddress;
    txHash: Hex | undefined;
}>;
export declare function getExpectedAddress(abi: Narrow<Abi | readonly unknown[]>, bytecode: Hex, args: readonly unknown[], salt: Hex): {
    address: `0x${string}`;
    paddedSalt: `0x${string}`;
    calldata: `0x${string}`;
};
//# sourceMappingURL=deploy_l1_contracts.d.ts.map