/**
 * https://github.com/noir-lang/noir-bignum-paramgen/blob/main/src/lib.rs#L24
 * @brief compute the reduction parameter used in Barrett reduction
 *        redc param = 2 * ceil(log2(modulus))
 *                     _______________________
 *                            modulus
 */
export declare function computeBarrettReductionParameter(input: bigint | string, numBits?: number): bigint;
/**
 * https://github.com/noir-lang/noir-bignum-paramgen/blob/main/src/lib.rs#L34
 * Split a BigInt into an array of 120-bit slices
 * @param input The input BigInt to be split
 * @param numBits The number of bits in the input
 * @returns An array of BigInt, each representing a 120-bit slice
 */
export declare function splitInto120BitLimbs(input: bigint, numBits: number): bigint[];
/**
 * Convert a BigInt to an array of hexadecimal strings, each representing a 120-bit limb
 * @param input The input BigInt to be converted
 * @param numBits The number of bits in the input
 * @returns An array of strings, each representing a 120-bit limb in "0x..." hexadecimal format
 */
export declare function bnToLimbStrArray(input: bigint | string, numBits?: number): string[];
/**
 * Compute the Barrett reduction parameter and convert it to an array of 120-bit limbs
 * @param bn - The input BigInt
 * @param numBits - the number of bits the number should have
 * @returns - An array of strings, each representing a 120-bit limb in "0x..." hexadecimal format
 */
export declare function bnToRedcLimbStrArray(bn: bigint | string, numBits?: number): string[];
