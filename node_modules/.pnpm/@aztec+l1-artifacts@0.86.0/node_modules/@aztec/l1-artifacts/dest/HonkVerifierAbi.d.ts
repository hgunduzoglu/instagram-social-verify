/**
 * HonkVerifier ABI.
 */
export declare const HonkVerifierAbi: readonly [{
    readonly type: "error";
    readonly name: "AddressSnapshotLib__IndexOutOfBounds";
    readonly inputs: readonly [{
        readonly name: "index";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "size";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "CoinIssuer__InsufficientMintAvailable";
    readonly inputs: readonly [{
        readonly name: "available";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "needed";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "DevNet__InvalidProposer";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "actual";
        readonly type: "address";
        readonly internalType: "address";
    }];
}, {
    readonly type: "error";
    readonly name: "DevNet__NoPruningAllowed";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "FeeJuicePortal__AlreadyInitialized";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "FeeJuicePortal__InvalidInitialization";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "FeeJuicePortal__Unauthorized";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "FeeLib__InvalidFeeAssetPriceModifier";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "GovernanceProposer__CanOnlyExecuteProposalInPast";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "GovernanceProposer__FailedToPropose";
    readonly inputs: readonly [{
        readonly name: "proposal";
        readonly type: "address";
        readonly internalType: "contract IPayload";
    }];
}, {
    readonly type: "error";
    readonly name: "GovernanceProposer__InstanceHaveNoCode";
    readonly inputs: readonly [{
        readonly name: "instance";
        readonly type: "address";
        readonly internalType: "address";
    }];
}, {
    readonly type: "error";
    readonly name: "GovernanceProposer__InsufficientVotes";
    readonly inputs: readonly [{
        readonly name: "votesCast";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "votesNeeded";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "GovernanceProposer__InvalidNAndMValues";
    readonly inputs: readonly [{
        readonly name: "n";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "m";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "GovernanceProposer__NCannotBeLargerTHanM";
    readonly inputs: readonly [{
        readonly name: "n";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "m";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "GovernanceProposer__OnlyProposerCanVote";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "proposer";
        readonly type: "address";
        readonly internalType: "address";
    }];
}, {
    readonly type: "error";
    readonly name: "GovernanceProposer__ProposalAlreadyExecuted";
    readonly inputs: readonly [{
        readonly name: "roundNumber";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "GovernanceProposer__ProposalCannotBeAddressZero";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "GovernanceProposer__ProposalHaveNoCode";
    readonly inputs: readonly [{
        readonly name: "proposal";
        readonly type: "address";
        readonly internalType: "contract IPayload";
    }];
}, {
    readonly type: "error";
    readonly name: "GovernanceProposer__ProposalTooOld";
    readonly inputs: readonly [{
        readonly name: "roundNumber";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "currentRoundNumber";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "GovernanceProposer__VoteAlreadyCastForSlot";
    readonly inputs: readonly [{
        readonly name: "slot";
        readonly type: "uint256";
        readonly internalType: "Slot";
    }];
}, {
    readonly type: "error";
    readonly name: "Governance__CallFailed";
    readonly inputs: readonly [{
        readonly name: "target";
        readonly type: "address";
        readonly internalType: "address";
    }];
}, {
    readonly type: "error";
    readonly name: "Governance__CallerNotGovernanceProposer";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "governanceProposer";
        readonly type: "address";
        readonly internalType: "address";
    }];
}, {
    readonly type: "error";
    readonly name: "Governance__CallerNotSelf";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "self";
        readonly type: "address";
        readonly internalType: "address";
    }];
}, {
    readonly type: "error";
    readonly name: "Governance__CannotCallAsset";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "Governance__ConfigurationLib__DifferentialTooBig";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "Governance__ConfigurationLib__DifferentialTooSmall";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "Governance__ConfigurationLib__InvalidMinimumVotes";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "Governance__ConfigurationLib__LockAmountTooSmall";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "Governance__ConfigurationLib__QuorumTooBig";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "Governance__ConfigurationLib__QuorumTooSmall";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "Governance__ConfigurationLib__TimeTooBig";
    readonly inputs: readonly [{
        readonly name: "name";
        readonly type: "string";
        readonly internalType: "string";
    }];
}, {
    readonly type: "error";
    readonly name: "Governance__ConfigurationLib__TimeTooSmall";
    readonly inputs: readonly [{
        readonly name: "name";
        readonly type: "string";
        readonly internalType: "string";
    }];
}, {
    readonly type: "error";
    readonly name: "Governance__InsufficientPower";
    readonly inputs: readonly [{
        readonly name: "voter";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "have";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "required";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "Governance__InvalidConfiguration";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "Governance__NoCheckpointsFound";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "Governance__ProposalAlreadyDropped";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "Governance__ProposalCannotBeDropped";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "Governance__ProposalDoesNotExists";
    readonly inputs: readonly [{
        readonly name: "proposalId";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "Governance__ProposalLib__MoreVoteThanExistNeeded";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "Governance__ProposalLib__MoreYeaVoteThanExistNeeded";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "Governance__ProposalLib__ZeroMinimum";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "Governance__ProposalLib__ZeroVotesNeeded";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "Governance__ProposalLib__ZeroYeaVotesNeeded";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "Governance__ProposalNotActive";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "Governance__ProposalNotExecutable";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "Governance__UserLib__NotInPast";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "Governance__WithdrawalAlreadyclaimed";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "Governance__WithdrawalNotUnlockedYet";
    readonly inputs: readonly [{
        readonly name: "currentTime";
        readonly type: "uint256";
        readonly internalType: "Timestamp";
    }, {
        readonly name: "unlocksAt";
        readonly type: "uint256";
        readonly internalType: "Timestamp";
    }];
}, {
    readonly type: "error";
    readonly name: "HeaderLib__InvalidHeaderSize";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "actual";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "HeaderLib__InvalidSlotNumber";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly type: "uint256";
        readonly internalType: "Slot";
    }, {
        readonly name: "actual";
        readonly type: "uint256";
        readonly internalType: "Slot";
    }];
}, {
    readonly type: "error";
    readonly name: "Inbox__ActorTooLarge";
    readonly inputs: readonly [{
        readonly name: "actor";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }];
}, {
    readonly type: "error";
    readonly name: "Inbox__ContentTooLarge";
    readonly inputs: readonly [{
        readonly name: "content";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }];
}, {
    readonly type: "error";
    readonly name: "Inbox__MustBuildBeforeConsume";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "Inbox__SecretHashTooLarge";
    readonly inputs: readonly [{
        readonly name: "secretHash";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }];
}, {
    readonly type: "error";
    readonly name: "Inbox__Unauthorized";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "Inbox__VersionMismatch";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "actual";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "MerkleLib__InvalidRoot";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }, {
        readonly name: "actual";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }, {
        readonly name: "leaf";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }, {
        readonly name: "leafIndex";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "Outbox__AlreadyNullified";
    readonly inputs: readonly [{
        readonly name: "l2BlockNumber";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "leafIndex";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "Outbox__BlockNotProven";
    readonly inputs: readonly [{
        readonly name: "l2BlockNumber";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "Outbox__IncompatibleEntryArguments";
    readonly inputs: readonly [{
        readonly name: "messageHash";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }, {
        readonly name: "storedFee";
        readonly type: "uint64";
        readonly internalType: "uint64";
    }, {
        readonly name: "feePassed";
        readonly type: "uint64";
        readonly internalType: "uint64";
    }, {
        readonly name: "storedVersion";
        readonly type: "uint32";
        readonly internalType: "uint32";
    }, {
        readonly name: "versionPassed";
        readonly type: "uint32";
        readonly internalType: "uint32";
    }, {
        readonly name: "storedDeadline";
        readonly type: "uint32";
        readonly internalType: "uint32";
    }, {
        readonly name: "deadlinePassed";
        readonly type: "uint32";
        readonly internalType: "uint32";
    }];
}, {
    readonly type: "error";
    readonly name: "Outbox__InvalidChainId";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "Outbox__InvalidPathLength";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "actual";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "Outbox__InvalidRecipient";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "actual";
        readonly type: "address";
        readonly internalType: "address";
    }];
}, {
    readonly type: "error";
    readonly name: "Outbox__NothingToConsume";
    readonly inputs: readonly [{
        readonly name: "messageHash";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }];
}, {
    readonly type: "error";
    readonly name: "Outbox__NothingToConsumeAtBlock";
    readonly inputs: readonly [{
        readonly name: "l2BlockNumber";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "Outbox__RootAlreadySetAtBlock";
    readonly inputs: readonly [{
        readonly name: "l2BlockNumber";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "Outbox__Unauthorized";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "Outbox__VersionMismatch";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "actual";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "ProofCommitmentEscrow__InsufficientBalance";
    readonly inputs: readonly [{
        readonly name: "balance";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "requested";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "ProofCommitmentEscrow__NotOwner";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly type: "address";
        readonly internalType: "address";
    }];
}, {
    readonly type: "error";
    readonly name: "ProofCommitmentEscrow__WithdrawRequestNotReady";
    readonly inputs: readonly [{
        readonly name: "current";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "readyAt";
        readonly type: "uint256";
        readonly internalType: "Timestamp";
    }];
}, {
    readonly type: "error";
    readonly name: "ProofLengthWrong";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "PublicInputsLengthWrong";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "Registry__NoRollupsRegistered";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "Registry__RollupAlreadyRegistered";
    readonly inputs: readonly [{
        readonly name: "rollup";
        readonly type: "address";
        readonly internalType: "address";
    }];
}, {
    readonly type: "error";
    readonly name: "Registry__RollupNotRegistered";
    readonly inputs: readonly [{
        readonly name: "version";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "RewardDistributor__InvalidCaller";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "canonical";
        readonly type: "address";
        readonly internalType: "address";
    }];
}, {
    readonly type: "error";
    readonly name: "Rollup__AlreadyClaimed";
    readonly inputs: readonly [{
        readonly name: "prover";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "epoch";
        readonly type: "uint256";
        readonly internalType: "Epoch";
    }];
}, {
    readonly type: "error";
    readonly name: "Rollup__InsufficientBondAmount";
    readonly inputs: readonly [{
        readonly name: "minimum";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "provided";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "Rollup__InsufficientFundsInEscrow";
    readonly inputs: readonly [{
        readonly name: "required";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "available";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "Rollup__InvalidArchive";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }, {
        readonly name: "actual";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }];
}, {
    readonly type: "error";
    readonly name: "Rollup__InvalidBasisPointFee";
    readonly inputs: readonly [{
        readonly name: "basisPointFee";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "Rollup__InvalidBlobHash";
    readonly inputs: readonly [{
        readonly name: "blobHash";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }];
}, {
    readonly type: "error";
    readonly name: "Rollup__InvalidBlobProof";
    readonly inputs: readonly [{
        readonly name: "blobHash";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }];
}, {
    readonly type: "error";
    readonly name: "Rollup__InvalidBlobPublicInputsHash";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }, {
        readonly name: "actual";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }];
}, {
    readonly type: "error";
    readonly name: "Rollup__InvalidBlockNumber";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "actual";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "Rollup__InvalidChainId";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "actual";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "Rollup__InvalidInHash";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }, {
        readonly name: "actual";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }];
}, {
    readonly type: "error";
    readonly name: "Rollup__InvalidManaBaseFee";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "actual";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "Rollup__InvalidPreviousArchive";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }, {
        readonly name: "actual";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }];
}, {
    readonly type: "error";
    readonly name: "Rollup__InvalidProof";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "Rollup__InvalidProposedArchive";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }, {
        readonly name: "actual";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }];
}, {
    readonly type: "error";
    readonly name: "Rollup__InvalidTimestamp";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly type: "uint256";
        readonly internalType: "Timestamp";
    }, {
        readonly name: "actual";
        readonly type: "uint256";
        readonly internalType: "Timestamp";
    }];
}, {
    readonly type: "error";
    readonly name: "Rollup__InvalidVersion";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "actual";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "Rollup__ManaLimitExceeded";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "Rollup__NoEpochToProve";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "Rollup__NonSequentialProving";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "Rollup__NonZeroDaFee";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "Rollup__NotPastDeadline";
    readonly inputs: readonly [{
        readonly name: "deadline";
        readonly type: "uint256";
        readonly internalType: "Slot";
    }, {
        readonly name: "currentSlot";
        readonly type: "uint256";
        readonly internalType: "Slot";
    }];
}, {
    readonly type: "error";
    readonly name: "Rollup__NothingToPrune";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "Rollup__PastDeadline";
    readonly inputs: readonly [{
        readonly name: "deadline";
        readonly type: "uint256";
        readonly internalType: "Slot";
    }, {
        readonly name: "currentSlot";
        readonly type: "uint256";
        readonly internalType: "Slot";
    }];
}, {
    readonly type: "error";
    readonly name: "Rollup__ProverHaveAlreadySubmitted";
    readonly inputs: readonly [{
        readonly name: "prover";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "epoch";
        readonly type: "uint256";
        readonly internalType: "Epoch";
    }];
}, {
    readonly type: "error";
    readonly name: "Rollup__SlotAlreadyInChain";
    readonly inputs: readonly [{
        readonly name: "lastSlot";
        readonly type: "uint256";
        readonly internalType: "Slot";
    }, {
        readonly name: "proposedSlot";
        readonly type: "uint256";
        readonly internalType: "Slot";
    }];
}, {
    readonly type: "error";
    readonly name: "Rollup__StartAndEndNotSameEpoch";
    readonly inputs: readonly [{
        readonly name: "start";
        readonly type: "uint256";
        readonly internalType: "Epoch";
    }, {
        readonly name: "end";
        readonly type: "uint256";
        readonly internalType: "Epoch";
    }];
}, {
    readonly type: "error";
    readonly name: "Rollup__StartIsNotBuildingOnProven";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "Rollup__StartIsNotFirstBlockOfEpoch";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "Rollup__TimestampInFuture";
    readonly inputs: readonly [{
        readonly name: "max";
        readonly type: "uint256";
        readonly internalType: "Timestamp";
    }, {
        readonly name: "actual";
        readonly type: "uint256";
        readonly internalType: "Timestamp";
    }];
}, {
    readonly type: "error";
    readonly name: "Rollup__TimestampTooOld";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "Rollup__TryingToProveNonExistingBlock";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "Rollup__UnavailableTxs";
    readonly inputs: readonly [{
        readonly name: "txsHash";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }];
}, {
    readonly type: "error";
    readonly name: "SampleLib__IndexOutOfBounds";
    readonly inputs: readonly [{
        readonly name: "requested";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "bound";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "SampleLib__SampleLargerThanIndex";
    readonly inputs: readonly [{
        readonly name: "sample";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "index";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "ShpleminiFailed";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "SignatureLib__CannotVerifyEmpty";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "SignatureLib__InvalidSignature";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "recovered";
        readonly type: "address";
        readonly internalType: "address";
    }];
}, {
    readonly type: "error";
    readonly name: "Staking__AlreadyActive";
    readonly inputs: readonly [{
        readonly name: "attester";
        readonly type: "address";
        readonly internalType: "address";
    }];
}, {
    readonly type: "error";
    readonly name: "Staking__AlreadyRegistered";
    readonly inputs: readonly [{
        readonly name: "";
        readonly type: "address";
        readonly internalType: "address";
    }];
}, {
    readonly type: "error";
    readonly name: "Staking__CannotSlashExitedStake";
    readonly inputs: readonly [{
        readonly name: "";
        readonly type: "address";
        readonly internalType: "address";
    }];
}, {
    readonly type: "error";
    readonly name: "Staking__FailedToRemove";
    readonly inputs: readonly [{
        readonly name: "";
        readonly type: "address";
        readonly internalType: "address";
    }];
}, {
    readonly type: "error";
    readonly name: "Staking__InsufficientStake";
    readonly inputs: readonly [{
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "Staking__InvalidDeposit";
    readonly inputs: readonly [{
        readonly name: "attester";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "proposer";
        readonly type: "address";
        readonly internalType: "address";
    }];
}, {
    readonly type: "error";
    readonly name: "Staking__NoOneToSlash";
    readonly inputs: readonly [{
        readonly name: "";
        readonly type: "address";
        readonly internalType: "address";
    }];
}, {
    readonly type: "error";
    readonly name: "Staking__NotExiting";
    readonly inputs: readonly [{
        readonly name: "";
        readonly type: "address";
        readonly internalType: "address";
    }];
}, {
    readonly type: "error";
    readonly name: "Staking__NotSlasher";
    readonly inputs: readonly [{
        readonly name: "";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "";
        readonly type: "address";
        readonly internalType: "address";
    }];
}, {
    readonly type: "error";
    readonly name: "Staking__NotWithdrawer";
    readonly inputs: readonly [{
        readonly name: "";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "";
        readonly type: "address";
        readonly internalType: "address";
    }];
}, {
    readonly type: "error";
    readonly name: "Staking__NothingToExit";
    readonly inputs: readonly [{
        readonly name: "";
        readonly type: "address";
        readonly internalType: "address";
    }];
}, {
    readonly type: "error";
    readonly name: "Staking__WithdrawalNotUnlockedYet";
    readonly inputs: readonly [{
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "Timestamp";
    }, {
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "Timestamp";
    }];
}, {
    readonly type: "error";
    readonly name: "SumcheckFailed";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "ValidatorSelection__EpochNotSetup";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "ValidatorSelection__InsufficientAttestations";
    readonly inputs: readonly [{
        readonly name: "minimumNeeded";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "provided";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "ValidatorSelection__InsufficientAttestationsProvided";
    readonly inputs: readonly [{
        readonly name: "minimumNeeded";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "provided";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "ValidatorSelection__InvalidDeposit";
    readonly inputs: readonly [{
        readonly name: "attester";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "proposer";
        readonly type: "address";
        readonly internalType: "address";
    }];
}, {
    readonly type: "error";
    readonly name: "ValidatorSelection__InvalidProposer";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "actual";
        readonly type: "address";
        readonly internalType: "address";
    }];
}, {
    readonly type: "function";
    readonly name: "verify";
    readonly inputs: readonly [{
        readonly name: "proof";
        readonly type: "bytes";
        readonly internalType: "bytes";
    }, {
        readonly name: "publicInputs";
        readonly type: "bytes32[]";
        readonly internalType: "bytes32[]";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bool";
        readonly internalType: "bool";
    }];
    readonly stateMutability: "view";
}];
//# sourceMappingURL=HonkVerifierAbi.d.ts.map