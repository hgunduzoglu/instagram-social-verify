/**
 * Rollup ABI.
 */
export declare const RollupAbi: readonly [{
    readonly type: "constructor";
    readonly inputs: readonly [{
        readonly name: "_feeAsset";
        readonly type: "address";
        readonly internalType: "contract IERC20";
    }, {
        readonly name: "_rewardDistributor";
        readonly type: "address";
        readonly internalType: "contract IRewardDistributor";
    }, {
        readonly name: "_stakingAsset";
        readonly type: "address";
        readonly internalType: "contract IERC20";
    }, {
        readonly name: "_governance";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "_genesisState";
        readonly type: "tuple";
        readonly internalType: "struct GenesisState";
        readonly components: readonly [{
            readonly name: "vkTreeRoot";
            readonly type: "bytes32";
            readonly internalType: "bytes32";
        }, {
            readonly name: "protocolContractTreeRoot";
            readonly type: "bytes32";
            readonly internalType: "bytes32";
        }, {
            readonly name: "genesisArchiveRoot";
            readonly type: "bytes32";
            readonly internalType: "bytes32";
        }];
    }, {
        readonly name: "_config";
        readonly type: "tuple";
        readonly internalType: "struct RollupConfigInput";
        readonly components: readonly [{
            readonly name: "aztecSlotDuration";
            readonly type: "uint256";
            readonly internalType: "uint256";
        }, {
            readonly name: "aztecEpochDuration";
            readonly type: "uint256";
            readonly internalType: "uint256";
        }, {
            readonly name: "targetCommitteeSize";
            readonly type: "uint256";
            readonly internalType: "uint256";
        }, {
            readonly name: "aztecProofSubmissionWindow";
            readonly type: "uint256";
            readonly internalType: "uint256";
        }, {
            readonly name: "minimumStake";
            readonly type: "uint256";
            readonly internalType: "uint256";
        }, {
            readonly name: "slashingQuorum";
            readonly type: "uint256";
            readonly internalType: "uint256";
        }, {
            readonly name: "slashingRoundSize";
            readonly type: "uint256";
            readonly internalType: "uint256";
        }, {
            readonly name: "manaTarget";
            readonly type: "uint256";
            readonly internalType: "uint256";
        }, {
            readonly name: "provingCostPerMana";
            readonly type: "uint256";
            readonly internalType: "EthValue";
        }];
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "error";
    readonly name: "AddressSnapshotLib__IndexOutOfBounds";
    readonly inputs: readonly [{
        readonly name: "index";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "size";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "CheckpointUnorderedInsertion";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "CoinIssuer__InsufficientMintAvailable";
    readonly inputs: readonly [{
        readonly name: "available";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "needed";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "event";
    readonly name: "Deposit";
    readonly inputs: readonly [{
        readonly name: "attester";
        readonly type: "address";
        readonly indexed: true;
        readonly internalType: "address";
    }, {
        readonly name: "proposer";
        readonly type: "address";
        readonly indexed: true;
        readonly internalType: "address";
    }, {
        readonly name: "withdrawer";
        readonly type: "address";
        readonly indexed: true;
        readonly internalType: "address";
    }, {
        readonly name: "amount";
        readonly type: "uint256";
        readonly indexed: false;
        readonly internalType: "uint256";
    }];
    readonly anonymous: false;
}, {
    readonly type: "error";
    readonly name: "DevNet__InvalidProposer";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "actual";
        readonly type: "address";
        readonly internalType: "address";
    }];
}, {
    readonly type: "error";
    readonly name: "DevNet__NoPruningAllowed";
    readonly inputs: readonly [];
}, {
    readonly type: "event";
    readonly name: "EIP712DomainChanged";
    readonly inputs: readonly [];
    readonly anonymous: false;
}, {
    readonly type: "error";
    readonly name: "FeeJuicePortal__AlreadyInitialized";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "FeeJuicePortal__InvalidInitialization";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "FeeJuicePortal__Unauthorized";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "FeeLib__InvalidFeeAssetPriceModifier";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "GovernanceProposer__CanOnlyExecuteProposalInPast";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "GovernanceProposer__FailedToPropose";
    readonly inputs: readonly [{
        readonly name: "proposal";
        readonly type: "address";
        readonly internalType: "contract IPayload";
    }];
}, {
    readonly type: "error";
    readonly name: "GovernanceProposer__InstanceHaveNoCode";
    readonly inputs: readonly [{
        readonly name: "instance";
        readonly type: "address";
        readonly internalType: "address";
    }];
}, {
    readonly type: "error";
    readonly name: "GovernanceProposer__InsufficientVotes";
    readonly inputs: readonly [{
        readonly name: "votesCast";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "votesNeeded";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "GovernanceProposer__InvalidNAndMValues";
    readonly inputs: readonly [{
        readonly name: "n";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "m";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "GovernanceProposer__NCannotBeLargerTHanM";
    readonly inputs: readonly [{
        readonly name: "n";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "m";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "GovernanceProposer__OnlyProposerCanVote";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "proposer";
        readonly type: "address";
        readonly internalType: "address";
    }];
}, {
    readonly type: "error";
    readonly name: "GovernanceProposer__ProposalAlreadyExecuted";
    readonly inputs: readonly [{
        readonly name: "roundNumber";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "GovernanceProposer__ProposalCannotBeAddressZero";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "GovernanceProposer__ProposalHaveNoCode";
    readonly inputs: readonly [{
        readonly name: "proposal";
        readonly type: "address";
        readonly internalType: "contract IPayload";
    }];
}, {
    readonly type: "error";
    readonly name: "GovernanceProposer__ProposalTooOld";
    readonly inputs: readonly [{
        readonly name: "roundNumber";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "currentRoundNumber";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "GovernanceProposer__VoteAlreadyCastForSlot";
    readonly inputs: readonly [{
        readonly name: "slot";
        readonly type: "uint256";
        readonly internalType: "Slot";
    }];
}, {
    readonly type: "error";
    readonly name: "Governance__CallFailed";
    readonly inputs: readonly [{
        readonly name: "target";
        readonly type: "address";
        readonly internalType: "address";
    }];
}, {
    readonly type: "error";
    readonly name: "Governance__CallerNotGovernanceProposer";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "governanceProposer";
        readonly type: "address";
        readonly internalType: "address";
    }];
}, {
    readonly type: "error";
    readonly name: "Governance__CallerNotSelf";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "self";
        readonly type: "address";
        readonly internalType: "address";
    }];
}, {
    readonly type: "error";
    readonly name: "Governance__CannotCallAsset";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "Governance__ConfigurationLib__DifferentialTooBig";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "Governance__ConfigurationLib__DifferentialTooSmall";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "Governance__ConfigurationLib__InvalidMinimumVotes";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "Governance__ConfigurationLib__LockAmountTooSmall";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "Governance__ConfigurationLib__QuorumTooBig";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "Governance__ConfigurationLib__QuorumTooSmall";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "Governance__ConfigurationLib__TimeTooBig";
    readonly inputs: readonly [{
        readonly name: "name";
        readonly type: "string";
        readonly internalType: "string";
    }];
}, {
    readonly type: "error";
    readonly name: "Governance__ConfigurationLib__TimeTooSmall";
    readonly inputs: readonly [{
        readonly name: "name";
        readonly type: "string";
        readonly internalType: "string";
    }];
}, {
    readonly type: "error";
    readonly name: "Governance__InsufficientPower";
    readonly inputs: readonly [{
        readonly name: "voter";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "have";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "required";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "Governance__InvalidConfiguration";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "Governance__NoCheckpointsFound";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "Governance__ProposalAlreadyDropped";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "Governance__ProposalCannotBeDropped";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "Governance__ProposalDoesNotExists";
    readonly inputs: readonly [{
        readonly name: "proposalId";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "Governance__ProposalLib__MoreVoteThanExistNeeded";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "Governance__ProposalLib__MoreYeaVoteThanExistNeeded";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "Governance__ProposalLib__ZeroMinimum";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "Governance__ProposalLib__ZeroVotesNeeded";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "Governance__ProposalLib__ZeroYeaVotesNeeded";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "Governance__ProposalNotActive";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "Governance__ProposalNotExecutable";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "Governance__UserLib__NotInPast";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "Governance__WithdrawalAlreadyclaimed";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "Governance__WithdrawalNotUnlockedYet";
    readonly inputs: readonly [{
        readonly name: "currentTime";
        readonly type: "uint256";
        readonly internalType: "Timestamp";
    }, {
        readonly name: "unlocksAt";
        readonly type: "uint256";
        readonly internalType: "Timestamp";
    }];
}, {
    readonly type: "error";
    readonly name: "HeaderLib__InvalidHeaderSize";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "actual";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "HeaderLib__InvalidSlotNumber";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly type: "uint256";
        readonly internalType: "Slot";
    }, {
        readonly name: "actual";
        readonly type: "uint256";
        readonly internalType: "Slot";
    }];
}, {
    readonly type: "error";
    readonly name: "Inbox__ActorTooLarge";
    readonly inputs: readonly [{
        readonly name: "actor";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }];
}, {
    readonly type: "error";
    readonly name: "Inbox__ContentTooLarge";
    readonly inputs: readonly [{
        readonly name: "content";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }];
}, {
    readonly type: "error";
    readonly name: "Inbox__MustBuildBeforeConsume";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "Inbox__SecretHashTooLarge";
    readonly inputs: readonly [{
        readonly name: "secretHash";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }];
}, {
    readonly type: "error";
    readonly name: "Inbox__Unauthorized";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "Inbox__VersionMismatch";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "actual";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "InvalidShortString";
    readonly inputs: readonly [];
}, {
    readonly type: "function";
    readonly name: "L1_BLOCK_AT_GENESIS";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "event";
    readonly name: "L2BlockProposed";
    readonly inputs: readonly [{
        readonly name: "blockNumber";
        readonly type: "uint256";
        readonly indexed: true;
        readonly internalType: "uint256";
    }, {
        readonly name: "archive";
        readonly type: "bytes32";
        readonly indexed: true;
        readonly internalType: "bytes32";
    }, {
        readonly name: "versionedBlobHashes";
        readonly type: "bytes32[]";
        readonly indexed: false;
        readonly internalType: "bytes32[]";
    }];
    readonly anonymous: false;
}, {
    readonly type: "event";
    readonly name: "L2ProofVerified";
    readonly inputs: readonly [{
        readonly name: "blockNumber";
        readonly type: "uint256";
        readonly indexed: true;
        readonly internalType: "uint256";
    }, {
        readonly name: "proverId";
        readonly type: "address";
        readonly indexed: true;
        readonly internalType: "address";
    }];
    readonly anonymous: false;
}, {
    readonly type: "event";
    readonly name: "ManaTargetUpdated";
    readonly inputs: readonly [{
        readonly name: "manaTarget";
        readonly type: "uint256";
        readonly indexed: true;
        readonly internalType: "uint256";
    }];
    readonly anonymous: false;
}, {
    readonly type: "error";
    readonly name: "MerkleLib__InvalidRoot";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }, {
        readonly name: "actual";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }, {
        readonly name: "leaf";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }, {
        readonly name: "leafIndex";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "Outbox__AlreadyNullified";
    readonly inputs: readonly [{
        readonly name: "l2BlockNumber";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "leafIndex";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "Outbox__BlockNotProven";
    readonly inputs: readonly [{
        readonly name: "l2BlockNumber";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "Outbox__IncompatibleEntryArguments";
    readonly inputs: readonly [{
        readonly name: "messageHash";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }, {
        readonly name: "storedFee";
        readonly type: "uint64";
        readonly internalType: "uint64";
    }, {
        readonly name: "feePassed";
        readonly type: "uint64";
        readonly internalType: "uint64";
    }, {
        readonly name: "storedVersion";
        readonly type: "uint32";
        readonly internalType: "uint32";
    }, {
        readonly name: "versionPassed";
        readonly type: "uint32";
        readonly internalType: "uint32";
    }, {
        readonly name: "storedDeadline";
        readonly type: "uint32";
        readonly internalType: "uint32";
    }, {
        readonly name: "deadlinePassed";
        readonly type: "uint32";
        readonly internalType: "uint32";
    }];
}, {
    readonly type: "error";
    readonly name: "Outbox__InvalidChainId";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "Outbox__InvalidPathLength";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "actual";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "Outbox__InvalidRecipient";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "actual";
        readonly type: "address";
        readonly internalType: "address";
    }];
}, {
    readonly type: "error";
    readonly name: "Outbox__NothingToConsume";
    readonly inputs: readonly [{
        readonly name: "messageHash";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }];
}, {
    readonly type: "error";
    readonly name: "Outbox__NothingToConsumeAtBlock";
    readonly inputs: readonly [{
        readonly name: "l2BlockNumber";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "Outbox__RootAlreadySetAtBlock";
    readonly inputs: readonly [{
        readonly name: "l2BlockNumber";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "Outbox__Unauthorized";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "Outbox__VersionMismatch";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "actual";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "OwnableInvalidOwner";
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly type: "address";
        readonly internalType: "address";
    }];
}, {
    readonly type: "error";
    readonly name: "OwnableUnauthorizedAccount";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly type: "address";
        readonly internalType: "address";
    }];
}, {
    readonly type: "event";
    readonly name: "OwnershipTransferred";
    readonly inputs: readonly [{
        readonly name: "previousOwner";
        readonly type: "address";
        readonly indexed: true;
        readonly internalType: "address";
    }, {
        readonly name: "newOwner";
        readonly type: "address";
        readonly indexed: true;
        readonly internalType: "address";
    }];
    readonly anonymous: false;
}, {
    readonly type: "error";
    readonly name: "ProofCommitmentEscrow__InsufficientBalance";
    readonly inputs: readonly [{
        readonly name: "balance";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "requested";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "ProofCommitmentEscrow__NotOwner";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly type: "address";
        readonly internalType: "address";
    }];
}, {
    readonly type: "error";
    readonly name: "ProofCommitmentEscrow__WithdrawRequestNotReady";
    readonly inputs: readonly [{
        readonly name: "current";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "readyAt";
        readonly type: "uint256";
        readonly internalType: "Timestamp";
    }];
}, {
    readonly type: "event";
    readonly name: "PrunedPending";
    readonly inputs: readonly [{
        readonly name: "provenBlockNumber";
        readonly type: "uint256";
        readonly indexed: false;
        readonly internalType: "uint256";
    }, {
        readonly name: "pendingBlockNumber";
        readonly type: "uint256";
        readonly indexed: false;
        readonly internalType: "uint256";
    }];
    readonly anonymous: false;
}, {
    readonly type: "error";
    readonly name: "Registry__NoRollupsRegistered";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "Registry__RollupAlreadyRegistered";
    readonly inputs: readonly [{
        readonly name: "rollup";
        readonly type: "address";
        readonly internalType: "address";
    }];
}, {
    readonly type: "error";
    readonly name: "Registry__RollupNotRegistered";
    readonly inputs: readonly [{
        readonly name: "version";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "RewardDistributor__InvalidCaller";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "canonical";
        readonly type: "address";
        readonly internalType: "address";
    }];
}, {
    readonly type: "error";
    readonly name: "Rollup__AlreadyClaimed";
    readonly inputs: readonly [{
        readonly name: "prover";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "epoch";
        readonly type: "uint256";
        readonly internalType: "Epoch";
    }];
}, {
    readonly type: "error";
    readonly name: "Rollup__InsufficientBondAmount";
    readonly inputs: readonly [{
        readonly name: "minimum";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "provided";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "Rollup__InsufficientFundsInEscrow";
    readonly inputs: readonly [{
        readonly name: "required";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "available";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "Rollup__InvalidArchive";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }, {
        readonly name: "actual";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }];
}, {
    readonly type: "error";
    readonly name: "Rollup__InvalidBasisPointFee";
    readonly inputs: readonly [{
        readonly name: "basisPointFee";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "Rollup__InvalidBlobHash";
    readonly inputs: readonly [{
        readonly name: "blobHash";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }];
}, {
    readonly type: "error";
    readonly name: "Rollup__InvalidBlobProof";
    readonly inputs: readonly [{
        readonly name: "blobHash";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }];
}, {
    readonly type: "error";
    readonly name: "Rollup__InvalidBlobPublicInputsHash";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }, {
        readonly name: "actual";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }];
}, {
    readonly type: "error";
    readonly name: "Rollup__InvalidBlockNumber";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "actual";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "Rollup__InvalidChainId";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "actual";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "Rollup__InvalidInHash";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }, {
        readonly name: "actual";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }];
}, {
    readonly type: "error";
    readonly name: "Rollup__InvalidManaBaseFee";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "actual";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "Rollup__InvalidPreviousArchive";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }, {
        readonly name: "actual";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }];
}, {
    readonly type: "error";
    readonly name: "Rollup__InvalidProof";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "Rollup__InvalidProposedArchive";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }, {
        readonly name: "actual";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }];
}, {
    readonly type: "error";
    readonly name: "Rollup__InvalidTimestamp";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly type: "uint256";
        readonly internalType: "Timestamp";
    }, {
        readonly name: "actual";
        readonly type: "uint256";
        readonly internalType: "Timestamp";
    }];
}, {
    readonly type: "error";
    readonly name: "Rollup__InvalidVersion";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "actual";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "Rollup__ManaLimitExceeded";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "Rollup__NoEpochToProve";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "Rollup__NonSequentialProving";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "Rollup__NonZeroDaFee";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "Rollup__NotPastDeadline";
    readonly inputs: readonly [{
        readonly name: "deadline";
        readonly type: "uint256";
        readonly internalType: "Slot";
    }, {
        readonly name: "currentSlot";
        readonly type: "uint256";
        readonly internalType: "Slot";
    }];
}, {
    readonly type: "error";
    readonly name: "Rollup__NothingToPrune";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "Rollup__PastDeadline";
    readonly inputs: readonly [{
        readonly name: "deadline";
        readonly type: "uint256";
        readonly internalType: "Slot";
    }, {
        readonly name: "currentSlot";
        readonly type: "uint256";
        readonly internalType: "Slot";
    }];
}, {
    readonly type: "error";
    readonly name: "Rollup__ProverHaveAlreadySubmitted";
    readonly inputs: readonly [{
        readonly name: "prover";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "epoch";
        readonly type: "uint256";
        readonly internalType: "Epoch";
    }];
}, {
    readonly type: "error";
    readonly name: "Rollup__SlotAlreadyInChain";
    readonly inputs: readonly [{
        readonly name: "lastSlot";
        readonly type: "uint256";
        readonly internalType: "Slot";
    }, {
        readonly name: "proposedSlot";
        readonly type: "uint256";
        readonly internalType: "Slot";
    }];
}, {
    readonly type: "error";
    readonly name: "Rollup__StartAndEndNotSameEpoch";
    readonly inputs: readonly [{
        readonly name: "start";
        readonly type: "uint256";
        readonly internalType: "Epoch";
    }, {
        readonly name: "end";
        readonly type: "uint256";
        readonly internalType: "Epoch";
    }];
}, {
    readonly type: "error";
    readonly name: "Rollup__StartIsNotBuildingOnProven";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "Rollup__StartIsNotFirstBlockOfEpoch";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "Rollup__TimestampInFuture";
    readonly inputs: readonly [{
        readonly name: "max";
        readonly type: "uint256";
        readonly internalType: "Timestamp";
    }, {
        readonly name: "actual";
        readonly type: "uint256";
        readonly internalType: "Timestamp";
    }];
}, {
    readonly type: "error";
    readonly name: "Rollup__TimestampTooOld";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "Rollup__TryingToProveNonExistingBlock";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "Rollup__UnavailableTxs";
    readonly inputs: readonly [{
        readonly name: "txsHash";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }];
}, {
    readonly type: "error";
    readonly name: "SafeCastOverflowedIntToUint";
    readonly inputs: readonly [{
        readonly name: "value";
        readonly type: "int256";
        readonly internalType: "int256";
    }];
}, {
    readonly type: "error";
    readonly name: "SafeCastOverflowedUintDowncast";
    readonly inputs: readonly [{
        readonly name: "bits";
        readonly type: "uint8";
        readonly internalType: "uint8";
    }, {
        readonly name: "value";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "SampleLib__IndexOutOfBounds";
    readonly inputs: readonly [{
        readonly name: "requested";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "bound";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "SampleLib__SampleLargerThanIndex";
    readonly inputs: readonly [{
        readonly name: "sample";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "index";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "SignatureLib__CannotVerifyEmpty";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "SignatureLib__InvalidSignature";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "recovered";
        readonly type: "address";
        readonly internalType: "address";
    }];
}, {
    readonly type: "event";
    readonly name: "Slashed";
    readonly inputs: readonly [{
        readonly name: "attester";
        readonly type: "address";
        readonly indexed: true;
        readonly internalType: "address";
    }, {
        readonly name: "amount";
        readonly type: "uint256";
        readonly indexed: false;
        readonly internalType: "uint256";
    }];
    readonly anonymous: false;
}, {
    readonly type: "error";
    readonly name: "Staking__AlreadyActive";
    readonly inputs: readonly [{
        readonly name: "attester";
        readonly type: "address";
        readonly internalType: "address";
    }];
}, {
    readonly type: "error";
    readonly name: "Staking__AlreadyRegistered";
    readonly inputs: readonly [{
        readonly name: "";
        readonly type: "address";
        readonly internalType: "address";
    }];
}, {
    readonly type: "error";
    readonly name: "Staking__CannotSlashExitedStake";
    readonly inputs: readonly [{
        readonly name: "";
        readonly type: "address";
        readonly internalType: "address";
    }];
}, {
    readonly type: "error";
    readonly name: "Staking__FailedToRemove";
    readonly inputs: readonly [{
        readonly name: "";
        readonly type: "address";
        readonly internalType: "address";
    }];
}, {
    readonly type: "error";
    readonly name: "Staking__InsufficientStake";
    readonly inputs: readonly [{
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "Staking__InvalidDeposit";
    readonly inputs: readonly [{
        readonly name: "attester";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "proposer";
        readonly type: "address";
        readonly internalType: "address";
    }];
}, {
    readonly type: "error";
    readonly name: "Staking__NoOneToSlash";
    readonly inputs: readonly [{
        readonly name: "";
        readonly type: "address";
        readonly internalType: "address";
    }];
}, {
    readonly type: "error";
    readonly name: "Staking__NotExiting";
    readonly inputs: readonly [{
        readonly name: "";
        readonly type: "address";
        readonly internalType: "address";
    }];
}, {
    readonly type: "error";
    readonly name: "Staking__NotSlasher";
    readonly inputs: readonly [{
        readonly name: "";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "";
        readonly type: "address";
        readonly internalType: "address";
    }];
}, {
    readonly type: "error";
    readonly name: "Staking__NotWithdrawer";
    readonly inputs: readonly [{
        readonly name: "";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "";
        readonly type: "address";
        readonly internalType: "address";
    }];
}, {
    readonly type: "error";
    readonly name: "Staking__NothingToExit";
    readonly inputs: readonly [{
        readonly name: "";
        readonly type: "address";
        readonly internalType: "address";
    }];
}, {
    readonly type: "error";
    readonly name: "Staking__WithdrawalNotUnlockedYet";
    readonly inputs: readonly [{
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "Timestamp";
    }, {
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "Timestamp";
    }];
}, {
    readonly type: "error";
    readonly name: "StringTooLong";
    readonly inputs: readonly [{
        readonly name: "str";
        readonly type: "string";
        readonly internalType: "string";
    }];
}, {
    readonly type: "error";
    readonly name: "ValidatorSelection__EpochNotSetup";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "ValidatorSelection__InsufficientAttestations";
    readonly inputs: readonly [{
        readonly name: "minimumNeeded";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "provided";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "ValidatorSelection__InsufficientAttestationsProvided";
    readonly inputs: readonly [{
        readonly name: "minimumNeeded";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "provided";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "ValidatorSelection__InvalidDeposit";
    readonly inputs: readonly [{
        readonly name: "attester";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "proposer";
        readonly type: "address";
        readonly internalType: "address";
    }];
}, {
    readonly type: "error";
    readonly name: "ValidatorSelection__InvalidProposer";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "actual";
        readonly type: "address";
        readonly internalType: "address";
    }];
}, {
    readonly type: "event";
    readonly name: "WithdrawFinalised";
    readonly inputs: readonly [{
        readonly name: "attester";
        readonly type: "address";
        readonly indexed: true;
        readonly internalType: "address";
    }, {
        readonly name: "recipient";
        readonly type: "address";
        readonly indexed: true;
        readonly internalType: "address";
    }, {
        readonly name: "amount";
        readonly type: "uint256";
        readonly indexed: false;
        readonly internalType: "uint256";
    }];
    readonly anonymous: false;
}, {
    readonly type: "event";
    readonly name: "WithdrawInitiated";
    readonly inputs: readonly [{
        readonly name: "attester";
        readonly type: "address";
        readonly indexed: true;
        readonly internalType: "address";
    }, {
        readonly name: "recipient";
        readonly type: "address";
        readonly indexed: true;
        readonly internalType: "address";
    }, {
        readonly name: "amount";
        readonly type: "uint256";
        readonly indexed: false;
        readonly internalType: "uint256";
    }];
    readonly anonymous: false;
}, {
    readonly type: "function";
    readonly name: "archive";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "archiveAt";
    readonly inputs: readonly [{
        readonly name: "_blockNumber";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "canProposeAtTime";
    readonly inputs: readonly [{
        readonly name: "_ts";
        readonly type: "uint256";
        readonly internalType: "Timestamp";
    }, {
        readonly name: "_archive";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "Slot";
    }, {
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "canPruneAtTime";
    readonly inputs: readonly [{
        readonly name: "_ts";
        readonly type: "uint256";
        readonly internalType: "Timestamp";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bool";
        readonly internalType: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "cheat__InitialiseValidatorSet";
    readonly inputs: readonly [{
        readonly name: "_args";
        readonly type: "tuple[]";
        readonly internalType: "struct CheatDepositArgs[]";
        readonly components: readonly [{
            readonly name: "attester";
            readonly type: "address";
            readonly internalType: "address";
        }, {
            readonly name: "proposer";
            readonly type: "address";
            readonly internalType: "address";
        }, {
            readonly name: "withdrawer";
            readonly type: "address";
            readonly internalType: "address";
        }, {
            readonly name: "amount";
            readonly type: "uint256";
            readonly internalType: "uint256";
        }];
    }];
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "checkBlob";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bool";
        readonly internalType: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "claimProverRewards";
    readonly inputs: readonly [{
        readonly name: "_recipient";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "_epochs";
        readonly type: "uint256[]";
        readonly internalType: "Epoch[]";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "claimSequencerRewards";
    readonly inputs: readonly [{
        readonly name: "_recipient";
        readonly type: "address";
        readonly internalType: "address";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "deposit";
    readonly inputs: readonly [{
        readonly name: "_attester";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "_proposer";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "_withdrawer";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "_amount";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "eip712Domain";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "fields";
        readonly type: "bytes1";
        readonly internalType: "bytes1";
    }, {
        readonly name: "name";
        readonly type: "string";
        readonly internalType: "string";
    }, {
        readonly name: "version";
        readonly type: "string";
        readonly internalType: "string";
    }, {
        readonly name: "chainId";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "verifyingContract";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "salt";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }, {
        readonly name: "extensions";
        readonly type: "uint256[]";
        readonly internalType: "uint256[]";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "finaliseWithdraw";
    readonly inputs: readonly [{
        readonly name: "_attester";
        readonly type: "address";
        readonly internalType: "address";
    }];
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "getActiveAttesterCount";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "getAttesterAtIndex";
    readonly inputs: readonly [{
        readonly name: "_index";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "address";
        readonly internalType: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "getAttesters";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "address[]";
        readonly internalType: "address[]";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "getBlobPublicInputsHash";
    readonly inputs: readonly [{
        readonly name: "_blockNumber";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "getBlock";
    readonly inputs: readonly [{
        readonly name: "_blockNumber";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "tuple";
        readonly internalType: "struct BlockLog";
        readonly components: readonly [{
            readonly name: "archive";
            readonly type: "bytes32";
            readonly internalType: "bytes32";
        }, {
            readonly name: "slotNumber";
            readonly type: "uint256";
            readonly internalType: "Slot";
        }];
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "getBurnAddress";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "address";
        readonly internalType: "address";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly name: "getCollectiveProverRewardsForEpoch";
    readonly inputs: readonly [{
        readonly name: "_epoch";
        readonly type: "uint256";
        readonly internalType: "Epoch";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "getCommitteeAt";
    readonly inputs: readonly [{
        readonly name: "_ts";
        readonly type: "uint256";
        readonly internalType: "Timestamp";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "address[]";
        readonly internalType: "address[]";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "getCurrentEpoch";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "Epoch";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "getCurrentEpochCommittee";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "address[]";
        readonly internalType: "address[]";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "getCurrentProposer";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "address";
        readonly internalType: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "getCurrentSampleSeed";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "getCurrentSlot";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "Slot";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "getEpochAt";
    readonly inputs: readonly [{
        readonly name: "_ts";
        readonly type: "uint256";
        readonly internalType: "Timestamp";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "Epoch";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "getEpochAtSlot";
    readonly inputs: readonly [{
        readonly name: "_slotNumber";
        readonly type: "uint256";
        readonly internalType: "Slot";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "Epoch";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "getEpochCommittee";
    readonly inputs: readonly [{
        readonly name: "_epoch";
        readonly type: "uint256";
        readonly internalType: "Epoch";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "address[]";
        readonly internalType: "address[]";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "getEpochDuration";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "getEpochForBlock";
    readonly inputs: readonly [{
        readonly name: "_blockNumber";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "Epoch";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "getEpochProofPublicInputs";
    readonly inputs: readonly [{
        readonly name: "_start";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "_end";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "_args";
        readonly type: "tuple";
        readonly internalType: "struct PublicInputArgs";
        readonly components: readonly [{
            readonly name: "previousArchive";
            readonly type: "bytes32";
            readonly internalType: "bytes32";
        }, {
            readonly name: "endArchive";
            readonly type: "bytes32";
            readonly internalType: "bytes32";
        }, {
            readonly name: "endTimestamp";
            readonly type: "uint256";
            readonly internalType: "Timestamp";
        }, {
            readonly name: "outHash";
            readonly type: "bytes32";
            readonly internalType: "bytes32";
        }, {
            readonly name: "proverId";
            readonly type: "address";
            readonly internalType: "address";
        }];
    }, {
        readonly name: "_fees";
        readonly type: "bytes32[]";
        readonly internalType: "bytes32[]";
    }, {
        readonly name: "_blobPublicInputs";
        readonly type: "bytes";
        readonly internalType: "bytes";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bytes32[]";
        readonly internalType: "bytes32[]";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "getExit";
    readonly inputs: readonly [{
        readonly name: "_attester";
        readonly type: "address";
        readonly internalType: "address";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "tuple";
        readonly internalType: "struct Exit";
        readonly components: readonly [{
            readonly name: "exitableAt";
            readonly type: "uint256";
            readonly internalType: "Timestamp";
        }, {
            readonly name: "recipient";
            readonly type: "address";
            readonly internalType: "address";
        }];
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "getExitDelay";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "Timestamp";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "getFeeAsset";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "address";
        readonly internalType: "contract IERC20";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "getFeeAssetPerEth";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "FeeAssetPerEthE9";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "getFeeAssetPortal";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "address";
        readonly internalType: "contract IFeeJuicePortal";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "getFeeHeader";
    readonly inputs: readonly [{
        readonly name: "_blockNumber";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "tuple";
        readonly internalType: "struct FeeHeader";
        readonly components: readonly [{
            readonly name: "excessMana";
            readonly type: "uint256";
            readonly internalType: "uint256";
        }, {
            readonly name: "manaUsed";
            readonly type: "uint256";
            readonly internalType: "uint256";
        }, {
            readonly name: "feeAssetPriceNumerator";
            readonly type: "uint256";
            readonly internalType: "uint256";
        }, {
            readonly name: "congestionCost";
            readonly type: "uint256";
            readonly internalType: "uint256";
        }, {
            readonly name: "provingCost";
            readonly type: "uint256";
            readonly internalType: "uint256";
        }];
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "getGenesisTime";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "Timestamp";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "getHasSubmitted";
    readonly inputs: readonly [{
        readonly name: "_epoch";
        readonly type: "uint256";
        readonly internalType: "Epoch";
    }, {
        readonly name: "_length";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "_prover";
        readonly type: "address";
        readonly internalType: "address";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bool";
        readonly internalType: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "getInbox";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "address";
        readonly internalType: "contract IInbox";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "getInfo";
    readonly inputs: readonly [{
        readonly name: "_attester";
        readonly type: "address";
        readonly internalType: "address";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "tuple";
        readonly internalType: "struct ValidatorInfo";
        readonly components: readonly [{
            readonly name: "stake";
            readonly type: "uint256";
            readonly internalType: "uint256";
        }, {
            readonly name: "withdrawer";
            readonly type: "address";
            readonly internalType: "address";
        }, {
            readonly name: "proposer";
            readonly type: "address";
            readonly internalType: "address";
        }, {
            readonly name: "status";
            readonly type: "uint8";
            readonly internalType: "enum Status";
        }];
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "getL1FeesAt";
    readonly inputs: readonly [{
        readonly name: "_timestamp";
        readonly type: "uint256";
        readonly internalType: "Timestamp";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "tuple";
        readonly internalType: "struct L1FeeData";
        readonly components: readonly [{
            readonly name: "baseFee";
            readonly type: "uint256";
            readonly internalType: "uint256";
        }, {
            readonly name: "blobFee";
            readonly type: "uint256";
            readonly internalType: "uint256";
        }];
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "getManaBaseFeeAt";
    readonly inputs: readonly [{
        readonly name: "_timestamp";
        readonly type: "uint256";
        readonly internalType: "Timestamp";
    }, {
        readonly name: "_inFeeAsset";
        readonly type: "bool";
        readonly internalType: "bool";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "getManaBaseFeeComponentsAt";
    readonly inputs: readonly [{
        readonly name: "_timestamp";
        readonly type: "uint256";
        readonly internalType: "Timestamp";
    }, {
        readonly name: "_inFeeAsset";
        readonly type: "bool";
        readonly internalType: "bool";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "tuple";
        readonly internalType: "struct ManaBaseFeeComponents";
        readonly components: readonly [{
            readonly name: "congestionCost";
            readonly type: "uint256";
            readonly internalType: "uint256";
        }, {
            readonly name: "congestionMultiplier";
            readonly type: "uint256";
            readonly internalType: "uint256";
        }, {
            readonly name: "dataCost";
            readonly type: "uint256";
            readonly internalType: "uint256";
        }, {
            readonly name: "gasCost";
            readonly type: "uint256";
            readonly internalType: "uint256";
        }, {
            readonly name: "provingCost";
            readonly type: "uint256";
            readonly internalType: "uint256";
        }];
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "getManaLimit";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "getManaTarget";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "getMinimumStake";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "getOperatorAtIndex";
    readonly inputs: readonly [{
        readonly name: "_index";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "tuple";
        readonly internalType: "struct OperatorInfo";
        readonly components: readonly [{
            readonly name: "proposer";
            readonly type: "address";
            readonly internalType: "address";
        }, {
            readonly name: "attester";
            readonly type: "address";
            readonly internalType: "address";
        }];
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "getOutbox";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "address";
        readonly internalType: "contract IOutbox";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "getPendingBlockNumber";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "getProofSubmissionWindow";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "getProposerAt";
    readonly inputs: readonly [{
        readonly name: "_ts";
        readonly type: "uint256";
        readonly internalType: "Timestamp";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "address";
        readonly internalType: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "getProposerAtIndex";
    readonly inputs: readonly [{
        readonly name: "_index";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "address";
        readonly internalType: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "getProposerForAttester";
    readonly inputs: readonly [{
        readonly name: "_attester";
        readonly type: "address";
        readonly internalType: "address";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "address";
        readonly internalType: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "getProvenBlockNumber";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "getProvingCostPerManaInEth";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "EthValue";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "getProvingCostPerManaInFeeAsset";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "FeeAssetValue";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "getRewardDistributor";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "address";
        readonly internalType: "contract IRewardDistributor";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "getSampleSeedAt";
    readonly inputs: readonly [{
        readonly name: "_ts";
        readonly type: "uint256";
        readonly internalType: "Timestamp";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "getSequencerRewards";
    readonly inputs: readonly [{
        readonly name: "_sequencer";
        readonly type: "address";
        readonly internalType: "address";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "getSlasher";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "address";
        readonly internalType: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "getSlotAt";
    readonly inputs: readonly [{
        readonly name: "_ts";
        readonly type: "uint256";
        readonly internalType: "Timestamp";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "Slot";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "getSlotDuration";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "getSpecificProverRewardsForEpoch";
    readonly inputs: readonly [{
        readonly name: "_epoch";
        readonly type: "uint256";
        readonly internalType: "Epoch";
    }, {
        readonly name: "_prover";
        readonly type: "address";
        readonly internalType: "address";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "getStakingAsset";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "address";
        readonly internalType: "contract IERC20";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "getTargetCommitteeSize";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "getTimestampForSlot";
    readonly inputs: readonly [{
        readonly name: "_slotNumber";
        readonly type: "uint256";
        readonly internalType: "Slot";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "Timestamp";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "getTips";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "tuple";
        readonly internalType: "struct ChainTips";
        readonly components: readonly [{
            readonly name: "pendingBlockNumber";
            readonly type: "uint256";
            readonly internalType: "uint256";
        }, {
            readonly name: "provenBlockNumber";
            readonly type: "uint256";
            readonly internalType: "uint256";
        }];
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "getVersion";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "initiateWithdraw";
    readonly inputs: readonly [{
        readonly name: "_attester";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "_recipient";
        readonly type: "address";
        readonly internalType: "address";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bool";
        readonly internalType: "bool";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "owner";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "address";
        readonly internalType: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "propose";
    readonly inputs: readonly [{
        readonly name: "_args";
        readonly type: "tuple";
        readonly internalType: "struct ProposeArgs";
        readonly components: readonly [{
            readonly name: "archive";
            readonly type: "bytes32";
            readonly internalType: "bytes32";
        }, {
            readonly name: "oracleInput";
            readonly type: "tuple";
            readonly internalType: "struct OracleInput";
            readonly components: readonly [{
                readonly name: "feeAssetPriceModifier";
                readonly type: "int256";
                readonly internalType: "int256";
            }];
        }, {
            readonly name: "header";
            readonly type: "bytes";
            readonly internalType: "bytes";
        }, {
            readonly name: "txHashes";
            readonly type: "bytes32[]";
            readonly internalType: "bytes32[]";
        }];
    }, {
        readonly name: "_signatures";
        readonly type: "tuple[]";
        readonly internalType: "struct Signature[]";
        readonly components: readonly [{
            readonly name: "isEmpty";
            readonly type: "bool";
            readonly internalType: "bool";
        }, {
            readonly name: "v";
            readonly type: "uint8";
            readonly internalType: "uint8";
        }, {
            readonly name: "r";
            readonly type: "bytes32";
            readonly internalType: "bytes32";
        }, {
            readonly name: "s";
            readonly type: "bytes32";
            readonly internalType: "bytes32";
        }];
    }, {
        readonly name: "_blobInput";
        readonly type: "bytes";
        readonly internalType: "bytes";
    }];
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "prune";
    readonly inputs: readonly [];
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "renounceOwnership";
    readonly inputs: readonly [];
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "setEpochVerifier";
    readonly inputs: readonly [{
        readonly name: "_verifier";
        readonly type: "address";
        readonly internalType: "address";
    }];
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "setProtocolContractTreeRoot";
    readonly inputs: readonly [{
        readonly name: "_protocolContractTreeRoot";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }];
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "setProvingCostPerMana";
    readonly inputs: readonly [{
        readonly name: "_provingCostPerMana";
        readonly type: "uint256";
        readonly internalType: "EthValue";
    }];
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "setVkTreeRoot";
    readonly inputs: readonly [{
        readonly name: "_vkTreeRoot";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }];
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "setupEpoch";
    readonly inputs: readonly [];
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "slash";
    readonly inputs: readonly [{
        readonly name: "_attester";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "_amount";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "status";
    readonly inputs: readonly [{
        readonly name: "_myHeaderBlockNumber";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly outputs: readonly [{
        readonly name: "provenBlockNumber";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "provenArchive";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }, {
        readonly name: "pendingBlockNumber";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "pendingArchive";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }, {
        readonly name: "archiveOfMyBlock";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }, {
        readonly name: "provenEpochNumber";
        readonly type: "uint256";
        readonly internalType: "Epoch";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "submitEpochRootProof";
    readonly inputs: readonly [{
        readonly name: "_args";
        readonly type: "tuple";
        readonly internalType: "struct SubmitEpochRootProofArgs";
        readonly components: readonly [{
            readonly name: "start";
            readonly type: "uint256";
            readonly internalType: "uint256";
        }, {
            readonly name: "end";
            readonly type: "uint256";
            readonly internalType: "uint256";
        }, {
            readonly name: "args";
            readonly type: "tuple";
            readonly internalType: "struct PublicInputArgs";
            readonly components: readonly [{
                readonly name: "previousArchive";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "endArchive";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "endTimestamp";
                readonly type: "uint256";
                readonly internalType: "Timestamp";
            }, {
                readonly name: "outHash";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "proverId";
                readonly type: "address";
                readonly internalType: "address";
            }];
        }, {
            readonly name: "fees";
            readonly type: "bytes32[]";
            readonly internalType: "bytes32[]";
        }, {
            readonly name: "blobPublicInputs";
            readonly type: "bytes";
            readonly internalType: "bytes";
        }, {
            readonly name: "proof";
            readonly type: "bytes";
            readonly internalType: "bytes";
        }];
    }];
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "transferOwnership";
    readonly inputs: readonly [{
        readonly name: "newOwner";
        readonly type: "address";
        readonly internalType: "address";
    }];
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "updateL1GasFeeOracle";
    readonly inputs: readonly [];
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "updateManaTarget";
    readonly inputs: readonly [{
        readonly name: "_manaTarget";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "validateBlobs";
    readonly inputs: readonly [{
        readonly name: "_blobsInput";
        readonly type: "bytes";
        readonly internalType: "bytes";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bytes32[]";
        readonly internalType: "bytes32[]";
    }, {
        readonly name: "";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }, {
        readonly name: "";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "validateHeader";
    readonly inputs: readonly [{
        readonly name: "_header";
        readonly type: "bytes";
        readonly internalType: "bytes";
    }, {
        readonly name: "_signatures";
        readonly type: "tuple[]";
        readonly internalType: "struct Signature[]";
        readonly components: readonly [{
            readonly name: "isEmpty";
            readonly type: "bool";
            readonly internalType: "bool";
        }, {
            readonly name: "v";
            readonly type: "uint8";
            readonly internalType: "uint8";
        }, {
            readonly name: "r";
            readonly type: "bytes32";
            readonly internalType: "bytes32";
        }, {
            readonly name: "s";
            readonly type: "bytes32";
            readonly internalType: "bytes32";
        }];
    }, {
        readonly name: "_digest";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }, {
        readonly name: "_currentTime";
        readonly type: "uint256";
        readonly internalType: "Timestamp";
    }, {
        readonly name: "_blobsHash";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }, {
        readonly name: "_flags";
        readonly type: "tuple";
        readonly internalType: "struct BlockHeaderValidationFlags";
        readonly components: readonly [{
            readonly name: "ignoreDA";
            readonly type: "bool";
            readonly internalType: "bool";
        }, {
            readonly name: "ignoreSignatures";
            readonly type: "bool";
            readonly internalType: "bool";
        }];
    }];
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}];
//# sourceMappingURL=RollupAbi.d.ts.map