/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import { ARTIFACT_FUNCTION_TREE_MAX_HEIGHT, FUNCTION_TREE_HEIGHT } from '@aztec/constants';
import { Fr } from '@aztec/foundation/fields';
import type { Tuple } from '@aztec/foundation/serialize';
import { FieldReader } from '@aztec/foundation/serialize';
import { FunctionSelector } from '@aztec/stdlib/abi';
import type { ExecutablePrivateFunctionWithMembershipProof, PrivateFunction } from '@aztec/stdlib/contract';
import type { ContractClassLog } from '@aztec/stdlib/logs';
/** Event emitted from the ContractClassRegisterer. */
export declare class PrivateFunctionBroadcastedEvent {
    readonly contractClassId: Fr;
    readonly artifactMetadataHash: Fr;
    readonly utilityFunctionsTreeRoot: Fr;
    readonly privateFunctionTreeSiblingPath: Tuple<Fr, typeof FUNCTION_TREE_HEIGHT>;
    readonly privateFunctionTreeLeafIndex: number;
    readonly artifactFunctionTreeSiblingPath: Tuple<Fr, typeof ARTIFACT_FUNCTION_TREE_MAX_HEIGHT>;
    readonly artifactFunctionTreeLeafIndex: number;
    readonly privateFunction: BroadcastedPrivateFunction;
    constructor(contractClassId: Fr, artifactMetadataHash: Fr, utilityFunctionsTreeRoot: Fr, privateFunctionTreeSiblingPath: Tuple<Fr, typeof FUNCTION_TREE_HEIGHT>, privateFunctionTreeLeafIndex: number, artifactFunctionTreeSiblingPath: Tuple<Fr, typeof ARTIFACT_FUNCTION_TREE_MAX_HEIGHT>, artifactFunctionTreeLeafIndex: number, privateFunction: BroadcastedPrivateFunction);
    static isPrivateFunctionBroadcastedEvent(log: ContractClassLog): boolean;
    static fromLog(log: ContractClassLog): PrivateFunctionBroadcastedEvent;
    static fromFields(fields: Fr[] | FieldReader): PrivateFunctionBroadcastedEvent;
    toFunctionWithMembershipProof(): ExecutablePrivateFunctionWithMembershipProof;
}
export declare class BroadcastedPrivateFunction implements PrivateFunction {
    /** Selector of the function. Calculated as the hash of the method name and parameters. The specification of this is not enforced by the protocol. */
    readonly selector: FunctionSelector;
    /** Artifact metadata hash */
    readonly metadataHash: Fr;
    /** Hash of the verification key associated to this private function. */
    readonly vkHash: Fr;
    /** ACIR and Brillig bytecode */
    readonly bytecode: Buffer;
    constructor(
    /** Selector of the function. Calculated as the hash of the method name and parameters. The specification of this is not enforced by the protocol. */
    selector: FunctionSelector, 
    /** Artifact metadata hash */
    metadataHash: Fr, 
    /** Hash of the verification key associated to this private function. */
    vkHash: Fr, 
    /** ACIR and Brillig bytecode */
    bytecode: Buffer);
    static fromFields(fields: Fr[] | FieldReader): BroadcastedPrivateFunction;
}
//# sourceMappingURL=private_function_broadcasted_event.d.ts.map