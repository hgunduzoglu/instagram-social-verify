import { FieldReader } from '@aztec/foundation/serialize';
import { bufferFromFields } from '@aztec/stdlib/abi';
import { computeContractClassId, computePublicBytecodeCommitment } from '@aztec/stdlib/contract';
import { REGISTERER_CONTRACT_CLASS_REGISTERED_TAG } from '../protocol_contract_data.js';
/** Event emitted from the ContractClassRegisterer. */ export class ContractClassRegisteredEvent {
    contractClassId;
    version;
    artifactHash;
    privateFunctionsRoot;
    packedPublicBytecode;
    constructor(contractClassId, version, artifactHash, privateFunctionsRoot, packedPublicBytecode){
        this.contractClassId = contractClassId;
        this.version = version;
        this.artifactHash = artifactHash;
        this.privateFunctionsRoot = privateFunctionsRoot;
        this.packedPublicBytecode = packedPublicBytecode;
    }
    static isContractClassRegisteredEvent(log) {
        return log.fields[0].equals(REGISTERER_CONTRACT_CLASS_REGISTERED_TAG);
    }
    static fromLog(log) {
        const reader = new FieldReader(log.fields.slice(1));
        const contractClassId = reader.readField();
        const version = reader.readField().toNumber();
        const artifactHash = reader.readField();
        const privateFunctionsRoot = reader.readField();
        const packedPublicBytecode = bufferFromFields(reader.readFieldArray(log.fields.slice(1).length - reader.cursor));
        return new ContractClassRegisteredEvent(contractClassId, version, artifactHash, privateFunctionsRoot, packedPublicBytecode);
    }
    async toContractClassPublic() {
        const computedClassId = await computeContractClassId({
            artifactHash: this.artifactHash,
            privateFunctionsRoot: this.privateFunctionsRoot,
            publicBytecodeCommitment: await computePublicBytecodeCommitment(this.packedPublicBytecode)
        });
        if (!computedClassId.equals(this.contractClassId)) {
            throw new Error(`Invalid contract class id: computed ${computedClassId.toString()} but event broadcasted ${this.contractClassId.toString()}`);
        }
        if (this.version !== 1) {
            throw new Error(`Unexpected contract class version ${this.version}`);
        }
        return {
            id: this.contractClassId,
            artifactHash: this.artifactHash,
            packedBytecode: this.packedPublicBytecode,
            privateFunctionsRoot: this.privateFunctionsRoot,
            version: this.version,
            privateFunctions: [],
            utilityFunctions: []
        };
    }
}
