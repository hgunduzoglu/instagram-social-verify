import { ARTIFACT_FUNCTION_TREE_MAX_HEIGHT, FUNCTION_TREE_HEIGHT, MAX_PACKED_BYTECODE_SIZE_PER_PRIVATE_FUNCTION_IN_FIELDS } from '@aztec/constants';
import { FieldReader } from '@aztec/foundation/serialize';
import { FunctionSelector, bufferFromFields } from '@aztec/stdlib/abi';
import { REGISTERER_PRIVATE_FUNCTION_BROADCASTED_TAG } from '../protocol_contract_data.js';
/** Event emitted from the ContractClassRegisterer. */ export class PrivateFunctionBroadcastedEvent {
    contractClassId;
    artifactMetadataHash;
    utilityFunctionsTreeRoot;
    privateFunctionTreeSiblingPath;
    privateFunctionTreeLeafIndex;
    artifactFunctionTreeSiblingPath;
    artifactFunctionTreeLeafIndex;
    privateFunction;
    constructor(contractClassId, artifactMetadataHash, utilityFunctionsTreeRoot, privateFunctionTreeSiblingPath, privateFunctionTreeLeafIndex, artifactFunctionTreeSiblingPath, artifactFunctionTreeLeafIndex, privateFunction){
        this.contractClassId = contractClassId;
        this.artifactMetadataHash = artifactMetadataHash;
        this.utilityFunctionsTreeRoot = utilityFunctionsTreeRoot;
        this.privateFunctionTreeSiblingPath = privateFunctionTreeSiblingPath;
        this.privateFunctionTreeLeafIndex = privateFunctionTreeLeafIndex;
        this.artifactFunctionTreeSiblingPath = artifactFunctionTreeSiblingPath;
        this.artifactFunctionTreeLeafIndex = artifactFunctionTreeLeafIndex;
        this.privateFunction = privateFunction;
    }
    static isPrivateFunctionBroadcastedEvent(log) {
        return log.fields[0].equals(REGISTERER_PRIVATE_FUNCTION_BROADCASTED_TAG);
    }
    static fromLog(log) {
        const reader = new FieldReader(log.fields.slice(1));
        const event = PrivateFunctionBroadcastedEvent.fromFields(reader);
        while(!reader.isFinished()){
            const field = reader.readField();
            if (!field.isZero()) {
                throw new Error(`Unexpected data after parsing PrivateFunctionBroadcastedEvent: ${field.toString()}`);
            }
        }
        return event;
    }
    static fromFields(fields) {
        const reader = FieldReader.asReader(fields);
        const contractClassId = reader.readField();
        const artifactMetadataHash = reader.readField();
        const utilityFunctionsTreeRoot = reader.readField();
        const privateFunctionTreeSiblingPath = reader.readFieldArray(FUNCTION_TREE_HEIGHT);
        const privateFunctionTreeLeafIndex = reader.readField().toNumber();
        const artifactFunctionTreeSiblingPath = reader.readFieldArray(ARTIFACT_FUNCTION_TREE_MAX_HEIGHT);
        const artifactFunctionTreeLeafIndex = reader.readField().toNumber();
        const privateFunction = BroadcastedPrivateFunction.fromFields(reader);
        return new PrivateFunctionBroadcastedEvent(contractClassId, artifactMetadataHash, utilityFunctionsTreeRoot, privateFunctionTreeSiblingPath, privateFunctionTreeLeafIndex, artifactFunctionTreeSiblingPath, artifactFunctionTreeLeafIndex, privateFunction);
    }
    toFunctionWithMembershipProof() {
        return {
            ...this.privateFunction,
            bytecode: this.privateFunction.bytecode,
            functionMetadataHash: this.privateFunction.metadataHash,
            artifactMetadataHash: this.artifactMetadataHash,
            utilityFunctionsTreeRoot: this.utilityFunctionsTreeRoot,
            privateFunctionTreeSiblingPath: this.privateFunctionTreeSiblingPath,
            privateFunctionTreeLeafIndex: this.privateFunctionTreeLeafIndex,
            artifactTreeSiblingPath: this.artifactFunctionTreeSiblingPath.filter((fr)=>!fr.isZero()),
            artifactTreeLeafIndex: this.artifactFunctionTreeLeafIndex
        };
    }
}
export class BroadcastedPrivateFunction {
    selector;
    metadataHash;
    vkHash;
    bytecode;
    constructor(/** Selector of the function. Calculated as the hash of the method name and parameters. The specification of this is not enforced by the protocol. */ selector, /** Artifact metadata hash */ metadataHash, /** Hash of the verification key associated to this private function. */ vkHash, /** ACIR and Brillig bytecode */ bytecode){
        this.selector = selector;
        this.metadataHash = metadataHash;
        this.vkHash = vkHash;
        this.bytecode = bytecode;
    }
    static fromFields(fields) {
        const reader = FieldReader.asReader(fields);
        const selector = FunctionSelector.fromField(reader.readField());
        const metadataHash = reader.readField();
        const vkHash = reader.readField();
        // The '* 1' removes the 'Type instantiation is excessively deep and possibly infinite. ts(2589)' err
        const encodedBytecode = reader.readFieldArray(MAX_PACKED_BYTECODE_SIZE_PER_PRIVATE_FUNCTION_IN_FIELDS * 1);
        const bytecode = bufferFromFields(encodedBytecode);
        return new BroadcastedPrivateFunction(selector, metadataHash, vkHash, bytecode);
    }
}
