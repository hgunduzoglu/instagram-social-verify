import { Fr } from '@aztec/foundation/fields';
import { BufferReader } from '@aztec/foundation/serialize';
import { AztecAddress } from '@aztec/stdlib/aztec-address';
import { PublicKeys } from '@aztec/stdlib/keys';
import { DEPLOYER_CONTRACT_INSTANCE_DEPLOYED_TAG } from '../protocol_contract_data.js';
/** Event emitted from the ContractInstanceDeployer. */ export class ContractInstanceDeployedEvent {
    address;
    version;
    salt;
    contractClassId;
    initializationHash;
    publicKeys;
    deployer;
    constructor(address, version, salt, contractClassId, initializationHash, publicKeys, deployer){
        this.address = address;
        this.version = version;
        this.salt = salt;
        this.contractClassId = contractClassId;
        this.initializationHash = initializationHash;
        this.publicKeys = publicKeys;
        this.deployer = deployer;
    }
    static isContractInstanceDeployedEvent(log) {
        return log.fields[0].equals(DEPLOYER_CONTRACT_INSTANCE_DEPLOYED_TAG);
    }
    static fromLog(log) {
        const bufferWithoutTag = log.toBuffer().subarray(32);
        const reader = new BufferReader(bufferWithoutTag);
        const address = reader.readObject(AztecAddress);
        const version = reader.readObject(Fr).toNumber();
        const salt = reader.readObject(Fr);
        const contractClassId = reader.readObject(Fr);
        const initializationHash = reader.readObject(Fr);
        const publicKeys = reader.readObject(PublicKeys);
        const deployer = reader.readObject(AztecAddress);
        return new ContractInstanceDeployedEvent(address, version, salt, contractClassId, initializationHash, publicKeys, deployer);
    }
    toContractInstance() {
        if (this.version !== 1) {
            throw new Error(`Unexpected contract instance version ${this.version}`);
        }
        return {
            address: this.address,
            version: this.version,
            currentContractClassId: this.contractClassId,
            originalContractClassId: this.contractClassId,
            initializationHash: this.initializationHash,
            publicKeys: this.publicKeys,
            salt: this.salt,
            deployer: this.deployer
        };
    }
}
