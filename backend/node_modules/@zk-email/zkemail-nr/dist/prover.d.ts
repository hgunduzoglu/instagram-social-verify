import { ProofData } from "@aztec/bb.js/dest/node-cjs/proof";
import { InputMap, CompiledCircuit } from "@noir-lang/noir_js";
import { InputValue } from "@noir-lang/noirc_abi";
type ProvingBackend = "honk" | "plonk" | "all";
export declare class ZKEmailProver {
    private provingBackend;
    private threads;
    private plonk?;
    private honk?;
    private noir;
    constructor(circuit: CompiledCircuit, provingBackend?: ProvingBackend, threads?: number);
    /**
     * Compute the witness for a given input to the circuit without generating a proof
     *
     * @param input - the input that should produce a satisfying witness for the circuit
     * @returns - the witness for the input and the output of the circuit if satisfiable
     */
    simulateWitness(input: InputMap): Promise<{
        witness: Uint8Array;
        returnValue: InputValue;
    }>;
    /**
     * Generate a proof of a satisfying input to the circuit using a provided witness
     *
     * @param input - a satisfying witness for the circuit
     * @param provingBackend - optionally provided if the class was initialized with both proving schemes
     * @returns proof of valid execution of the circuit
     */
    prove(witness: Uint8Array, provingBackend?: ProvingBackend): Promise<ProofData>;
    /**
     * Simulate the witness for a given input and generate a proof
     *
     * @param input - the input that should produce a satisfying witness for the circuit
     * @param provingBackend - optionally provided if the class was initialized with both proving schemes
     * @returns proof of valid execution of the circuit
     */
    fullProve(input: InputMap, provingBackend?: ProvingBackend): Promise<ProofData>;
    /**
     * Verify a proof of a satisfying input to the circuit for a given proving scheme
     *
     * @param proof - the proof to verify
     * @param provingBackend - optionally provided if the class was initialized with both proving schemes
     * @returns true if the proof is valid, false otherwise
     */
    verify(proof: ProofData, provingBackend?: ProvingBackend): Promise<boolean>;
    /**
     * End the prover wasm instance(s) and clean up resources
     */
    destroy(): Promise<void>;
}
export {};
