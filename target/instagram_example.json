{"noir_version":"1.0.0-beta.3+ceaa1986628197bd1170147f6a07f0f98d21030a","hash":8736468923473555808,"abi":{"parameters":[{"name":"header","type":{"kind":"struct","path":"std::collections::bounded_vec::BoundedVec","fields":[{"name":"storage","type":{"kind":"array","length":576,"type":{"kind":"integer","sign":"unsigned","width":8}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"pubkey","type":{"kind":"struct","path":"zkemail::dkim::RSAPubkey","fields":[{"name":"modulus","type":{"kind":"array","length":9,"type":{"kind":"field"}}},{"name":"redc","type":{"kind":"array","length":9,"type":{"kind":"field"}}}]},"visibility":"private"},{"name":"signature","type":{"kind":"array","length":9,"type":{"kind":"field"}},"visibility":"private"},{"name":"from_header_sequence","type":{"kind":"struct","path":"zkemail::Sequence","fields":[{"name":"index","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"from_address_sequence","type":{"kind":"struct","path":"zkemail::Sequence","fields":[{"name":"index","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"to_header_sequence","type":{"kind":"struct","path":"zkemail::Sequence","fields":[{"name":"index","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"to_address_sequence","type":{"kind":"struct","path":"zkemail::Sequence","fields":[{"name":"index","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"expected_to_hash","type":{"kind":"field"},"visibility":"private"},{"name":"expected_username_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"instagram_sv::utils::VerifiedOutputs","fields":[{"name":"pub_key_hash","type":{"kind":"field"}},{"name":"email_nullifier","type":{"kind":"field"}},{"name":"to_address_hash","type":{"kind":"field"}}]},"visibility":"public"},"error_types":{"257892803526667070":{"error_kind":"string","string":"Username hash cannot be zero"},"2121844606697934511":{"error_kind":"string","string":"Email address must start with an acceptable character"},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"4240586432187010441":{"error_kind":"string","string":"Email address must start immediately after '<' if bracket is present"},"4524007320076231485":{"error_kind":"string","string":"Header field out of bounds of header"},"4540277600904443375":{"error_kind":"string","string":"Email address must end with an acceptable character"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5466606472443271855":{"error_kind":"string","string":"Header field must not contain newlines"},"5584779979541566751":{"error_kind":"string","string":"Unexpected From address"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6540983672819216249":{"error_kind":"string","string":"Header too long"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"7695073095726229179":{"error_kind":"string","string":"Recipient email hash doesn't match expected hash"},"8707862474619154823":{"error_kind":"string","string":"Email address must only contain acceptable characters"},"8968308905366009901":{"error_kind":"string","string":"Email address sequence out of bounds"},"9619408434855056367":{"error_kind":"string","string":"Header field name must be followed by a colon"},"11883698362854120768":{"error_kind":"string","string":"Header field must start with CRLF"},"12712340723692189130":{"error_kind":"string","string":"Header field name does not match"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14734181347393705282":{"error_kind":"string","string":"Header field must end with CRLF"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"","file_map":{"5":{"source":"use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: StructDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: StructDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n","path":"std/cmp.nr"},"6":{"source":"use crate::{cmp::Eq, convert::From, runtime::is_unconstrained, static_assert};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        if is_unconstrained() {\n            for i in 0..append_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        } else {\n            let mut exceeded_len = false;\n            for i in 0..Len {\n                exceeded_len |= i == append_len;\n                if !exceeded_len {\n                    self.storage[self.len + i] = vec.get_unchecked(i);\n                }\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        static_assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        if is_unconstrained() {\n            for i in 0..self.len {\n                ret |= predicate(self.storage[i]);\n            }\n        } else {\n            let mut ret = false;\n            let mut exceeded_len = false;\n            for i in 0..MaxLen {\n                exceeded_len |= i == self.len;\n                if !exceeded_len {\n                    ret |= predicate(self.storage[i]);\n                }\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function will zero out any elements at or past index `len` of `array`.\n    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is\n    /// zeroed after that index, you can use `from_parts_unchecked` to remove the extra loop.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    /// ```\n    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        let zeroed = crate::mem::zeroed();\n\n        if is_unconstrained() {\n            for i in len..MaxLen {\n                array[i] = zeroed;\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i >= len {\n                    array[i] = zeroed;\n                }\n            }\n        }\n\n        BoundedVec { storage: array, len }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function is unsafe because it expects all elements past the `len` index\n    /// of `array` to be zeroed, but does not check for this internally. Use `from_parts`\n    /// for a safe version of this function which does zero out any indices past the\n    /// given length. Invalidating this assumption can notably cause `BoundedVec::eq`\n    /// to give incorrect results since it will check even elements past `len`.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    ///\n    /// // invalid use!\n    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n    ///\n    /// // both vecs have length 3 so we'd expect them to be equal, but this\n    /// // fails because elements past the length are still checked in eq\n    /// assert_eq(vec1, vec2); // fails\n    /// ```\n    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        BoundedVec { storage: array, len }\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        if self.len == other.len {\n            self.storage == other.storage\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n            assert_eq(bounded_vec.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n        use crate::convert::From;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n\n    mod from_parts {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn from_parts() {\n            // docs:start:from-parts\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // Any elements past the given length are zeroed out, so these\n            // two BoundedVecs will be completely equal\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);\n            assert_eq(vec1, vec2);\n            // docs:end:from-parts\n        }\n\n        #[test]\n        fn from_parts_unchecked() {\n            // docs:start:from-parts-unchecked\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // invalid use!\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n\n            // both vecs have length 3 so we'd expect them to be equal, but this\n            // fails because elements past the length are still checked in eq\n            assert(vec1 != vec2);\n            // docs:end:from-parts-unchecked\n        }\n    }\n}\n","path":"std/collections/bounded_vec.nr"},"17":{"source":"use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\nglobal TWO_POW_64: Field = 0x10000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(mut x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low_lower_64 = (x as u64) as Field;\n    x = (x - low_lower_64) / TWO_POW_64;\n    let low_upper_64 = (x as u64) as Field;\n\n    let high = (x - low_upper_64) / TWO_POW_64;\n    let low = low_upper_64 * TWO_POW_64 + low_lower_64;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"18":{"source":"pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"20":{"source":"pub mod poseidon;\npub mod poseidon2;\npub mod keccak;\npub mod sha256;\npub mod sha512;\n\nuse crate::default::Default;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\nuse crate::uint128::U128;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0]\n}\n\n#[field(bn254)]\n#[inline_always]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    // Safety: xlo and xhi decomposition is checked below\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H>\nwhere\n    H: Hasher,\n{\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n","path":"std/hash/mod.nr"},"26":{"source":"use crate::runtime::is_unconstrained;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// A message block is up to 64 bytes taken from the input.\nglobal BLOCK_SIZE: u32 = 64;\n\n// The first index in the block where the 8 byte message size will be written.\nglobal MSG_SIZE_PTR: u32 = 56;\n\n// Size of the message block when packed as 4-byte integer array.\nglobal INT_BLOCK_SIZE: u32 = 16;\n\n// A `u32` integer consists of 4 bytes.\nglobal INT_SIZE: u32 = 4;\n\n// Index of the integer in the `INT_BLOCK` where the length is written.\nglobal INT_SIZE_PTR: u32 = MSG_SIZE_PTR / INT_SIZE;\n\n// Magic numbers for bit shifting.\n// Works with actual bit shifting as well as the compiler turns them into * and /\n// but circuit execution appears to be 10% faster this way.\nglobal TWO_POW_8: u32 = 256;\nglobal TWO_POW_16: u32 = TWO_POW_8 * 256;\nglobal TWO_POW_24: u32 = TWO_POW_16 * 256;\nglobal TWO_POW_32: u64 = TWO_POW_24 as u64 * 256;\n\n// Index of a byte in a 64 byte block; ie. 0..=63\ntype BLOCK_BYTE_PTR = u32;\n\n// The foreign function to compress blocks works on 16 pieces of 4-byte integers, instead of 64 bytes.\ntype INT_BLOCK = [u32; INT_BLOCK_SIZE];\n\n// A message block is a slice of the original message of a fixed size,\n// potentially padded with zeros, with neighbouring 4 bytes packed into integers.\ntype MSG_BLOCK = INT_BLOCK;\n\n// The hash is 32 bytes.\ntype HASH = [u8; 32];\n\n// The state accumulates the blocks.\n// Its overall size is the same as the `HASH`.\ntype STATE = [u32; 8];\n\n// docs:start:sha256\n#[deprecated(\"sha256 is being deprecated from the stdlib, use https://github.com/noir-lang/sha256 instead\")]\npub fn sha256<let N: u32>(input: [u8; N]) -> HASH\n// docs:end:sha256\n{\n    digest(input)\n}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: INT_BLOCK, _state: STATE) -> STATE {}\n\n// SHA-256 hash function\n#[no_predicates]\n#[deprecated(\"sha256 is being deprecated from the stdlib, use https://github.com/noir-lang/sha256 instead\")]\npub fn digest<let N: u32>(msg: [u8; N]) -> HASH {\n    sha256_var(msg, N as u64)\n}\n\n// Variable size SHA-256 hash\n#[deprecated(\"sha256 is being deprecated from the stdlib, use https://github.com/noir-lang/sha256 instead\")]\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> HASH {\n    let message_size = message_size as u32;\n    let num_blocks = N / BLOCK_SIZE;\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n    // Intermediate hash, starting with the canonical initial value\n    let mut h: STATE = [\n        1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635,\n        1541459225,\n    ];\n    // Pointer into msg_block on a 64 byte scale\n    let mut msg_byte_ptr = 0;\n    for i in 0..num_blocks {\n        let msg_start = BLOCK_SIZE * i;\n        // Safety: the msg_block is checked below in verify_msg_block\n        let (new_msg_block, new_msg_byte_ptr) =\n            unsafe { build_msg_block(msg, message_size, msg_start) };\n\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n\n        // If the block is filled, compress it.\n        // An un-filled block is handled after this loop.\n        if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n            h = sha256_compression(msg_block, h);\n        }\n    }\n\n    let modulo = N % BLOCK_SIZE;\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_blocks;\n        // Safety: the msg_block is checked below in verify_msg_block\n        let (new_msg_block, new_msg_byte_ptr) =\n            unsafe { build_msg_block(msg, message_size, msg_start) };\n\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n                verify_msg_block_padding(msg_block, msg_byte_ptr);\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n    }\n\n    // If we had modulo == 0 then it means the last block was full,\n    // and we can reset the pointer to zero to overwrite it.\n    if msg_byte_ptr == BLOCK_SIZE {\n        msg_byte_ptr = 0;\n    }\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    // Here we rely on the fact that everything beyond the available input is set to 0.\n    msg_block = update_block_item(\n        msg_block,\n        msg_byte_ptr,\n        |msg_item| set_item_byte_then_zeros(msg_item, msg_byte_ptr, 1 << 7),\n    );\n    msg_byte_ptr = msg_byte_ptr + 1;\n    let last_block = msg_block;\n\n    // If we don't have room to write the size, compress the block and reset it.\n    if msg_byte_ptr > MSG_SIZE_PTR {\n        h = sha256_compression(msg_block, h);\n        // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n        msg_byte_ptr = 0;\n    }\n\n    // Safety: the msg_len is checked below in verify_msg_len\n    msg_block = unsafe { attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size) };\n\n    if !is_unconstrained() {\n        verify_msg_len(msg_block, last_block, msg_byte_ptr, message_size);\n    }\n\n    hash_final_block(msg_block, h)\n}\n\n// Take `BLOCK_SIZE` number of bytes from `msg` starting at `msg_start`.\n// Returns the block and the length that has been copied rather than padded with zeros.\nunconstrained fn build_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_start: u32,\n) -> (MSG_BLOCK, BLOCK_BYTE_PTR) {\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if msg_start + BLOCK_SIZE > message_size {\n        if message_size < msg_start {\n            // This function is sometimes called with `msg_start` past the end of the message.\n            // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n            0\n        } else {\n            message_size - msg_start\n        }\n    } else {\n        BLOCK_SIZE\n    };\n\n    // Figure out the number of items in the int array that we have to pack.\n    // e.g. if the input is [0,1,2,3,4,5] then we need to pack it as 2 items: [0123, 4500]\n    let mut int_input = block_input / INT_SIZE;\n    if block_input % INT_SIZE != 0 {\n        int_input = int_input + 1;\n    };\n\n    for i in 0..int_input {\n        let mut msg_item: u32 = 0;\n        // Always construct the integer as 4 bytes, even if it means going beyond the input.\n        for j in 0..INT_SIZE {\n            let k = i * INT_SIZE + j;\n            let msg_byte = if k < block_input {\n                msg[msg_start + k]\n            } else {\n                0\n            };\n            msg_item = lshift8(msg_item, 1) + msg_byte as u32;\n        }\n        msg_block[i] = msg_item;\n    }\n\n    // Returning the index as if it was a 64 byte array.\n    // We have to project it down to 16 items and bit shifting to get a byte back if we need it.\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed by `build_msg_block`\n// and matches the input data. Returns the index of the first unset item.\n// If `message_size` is less than `msg_start` then this is called with the old non-empty block;\n// in that case we can skip verification, ie. no need to check that everything is zero.\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: MSG_BLOCK,\n    msg_start: u32,\n) -> BLOCK_BYTE_PTR {\n    let mut msg_byte_ptr = 0;\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n    // We might have to go beyond the input to pad the fields.\n    if msg_end % INT_SIZE != 0 {\n        msg_end = msg_end + INT_SIZE - msg_end % INT_SIZE;\n    }\n\n    // Reconstructed packed item.\n    let mut msg_item: u32 = 0;\n\n    // Inclusive at the end so that we can compare the last item.\n    let mut i: u32 = 0;\n    for k in msg_start..=msg_end {\n        if k % INT_SIZE == 0 {\n            // If we consumed some input we can compare against the block.\n            if (msg_start < message_size) & (k > msg_start) {\n                assert_eq(msg_block[i], msg_item as u32);\n                i = i + 1;\n                msg_item = 0;\n            }\n        }\n        // Shift the accumulator\n        msg_item = lshift8(msg_item, 1);\n        // If we have input to consume, add it at the rightmost position.\n        if k < message_size & k < msg_end {\n            msg_item = msg_item + msg[k] as u32;\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\n// Verify the block we are compressing was appropriately padded with zeros by `build_msg_block`.\n// This is only relevant for the last, potentially partially filled block.\nfn verify_msg_block_padding(msg_block: MSG_BLOCK, msg_byte_ptr: BLOCK_BYTE_PTR) {\n    // Check all the way to the end of the block.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_BLOCK_SIZE);\n}\n\n// Verify that a region of ints in the message block are (partially) zeroed,\n// up to an (exclusive) maximum which can either be the end of the block\n// or just where the size is to be written.\nfn verify_msg_block_zeros(\n    msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    max_int_byte_ptr: u32,\n) {\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // First integer which is supposed to be (partially) zero.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        let zeros = INT_SIZE - modulo;\n        let mask = if zeros == 3 {\n            TWO_POW_24\n        } else if zeros == 2 {\n            TWO_POW_16\n        } else {\n            TWO_POW_8\n        };\n        assert_eq(msg_block[int_byte_ptr] % mask, zero);\n        int_byte_ptr = int_byte_ptr + 1;\n    }\n\n    // Check the rest of the items.\n    for i in 0..max_int_byte_ptr {\n        if i >= int_byte_ptr {\n            assert_eq(msg_block[i], zero);\n        }\n    }\n}\n\n// Verify that up to the byte pointer the two blocks are equal.\n// At the byte pointer the new block can be partially zeroed.\nfn verify_msg_block_equals_last(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n) {\n    // msg_byte_ptr is the position at which they are no longer have to be the same.\n    // First integer which is supposed to be (partially) zero contains that pointer.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Reconstruct the partially zero item from the last block.\n        let last_field = last_block[int_byte_ptr];\n        let mut msg_item: u32 = 0;\n        // Reset to where they are still equal.\n        msg_byte_ptr = msg_byte_ptr - modulo;\n        for i in 0..INT_SIZE {\n            msg_item = lshift8(msg_item, 1);\n            if i < modulo {\n                msg_item = msg_item + get_item_byte(last_field, msg_byte_ptr) as u32;\n                msg_byte_ptr = msg_byte_ptr + 1;\n            }\n        }\n        assert_eq(msg_block[int_byte_ptr], msg_item);\n    }\n\n    for i in 0..INT_SIZE_PTR {\n        if i < int_byte_ptr {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n    }\n}\n\n// Apply a function on the block item which the pointer indicates.\nfn update_block_item<Env>(\n    mut msg_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    f: fn[Env](u32) -> u32,\n) -> MSG_BLOCK {\n    let i = msg_byte_ptr / INT_SIZE;\n    msg_block[i] = f(msg_block[i]);\n    msg_block\n}\n\n// Set the rightmost `zeros` number of bytes to 0.\nfn set_item_zeros(item: u32, zeros: u8) -> u32 {\n    lshift8(rshift8(item, zeros), zeros)\n}\n\n// Replace one byte in the item with a value, and set everything after it to zero.\nfn set_item_byte_then_zeros(msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR, msg_byte: u8) -> u32 {\n    let zeros = INT_SIZE - msg_byte_ptr % INT_SIZE;\n    let zeroed_item = set_item_zeros(msg_item, zeros as u8);\n    let new_item = byte_into_item(msg_byte, msg_byte_ptr);\n    zeroed_item + new_item\n}\n\n// Get a byte of a message item according to its overall position in the `BLOCK_SIZE` space.\nfn get_item_byte(mut msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR) -> u8 {\n    // How many times do we have to shift to the right to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    msg_item = rshift8(msg_item, shifts as u8);\n    // At this point the byte we want is in the rightmost position.\n    msg_item as u8\n}\n\n// Project a byte into a position in a field based on the overall block pointer.\n// For example putting 1 into pointer 5 would be 100, because overall we would\n// have [____, 0100] with indexes [0123,4567].\nfn byte_into_item(msg_byte: u8, msg_byte_ptr: BLOCK_BYTE_PTR) -> u32 {\n    let mut msg_item = msg_byte as u32;\n    // How many times do we have to shift to the left to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    lshift8(msg_item, shifts as u8)\n}\n\n// Construct a field out of 4 bytes.\nfn make_item(b0: u8, b1: u8, b2: u8, b3: u8) -> u32 {\n    let mut item = b0 as u32;\n    item = lshift8(item, 1) + b1 as u32;\n    item = lshift8(item, 1) + b2 as u32;\n    item = lshift8(item, 1) + b3 as u32;\n    item\n}\n\n// Shift by 8 bits to the left between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise multiplies by 256.\nfn lshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        if item == 0 {\n            0\n        } else {\n            // Brillig wouldn't shift 0<<4 without overflow.\n            item << (8 * shifts)\n        }\n    } else {\n        // We can do a for loop up to INT_SIZE or an if-else.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item * TWO_POW_8\n        } else if shifts == 2 {\n            item * TWO_POW_16\n        } else if shifts == 3 {\n            item * TWO_POW_24\n        } else {\n            // Doesn't make sense, but it's most likely called on 0 anyway.\n            0\n        }\n    }\n}\n\n// Shift by 8 bits to the right between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise divides by 256.\nfn rshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        item >> (8 * shifts)\n    } else {\n        // Division wouldn't work on `Field`.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item / TWO_POW_8\n        } else if shifts == 2 {\n            item / TWO_POW_16\n        } else if shifts == 3 {\n            item / TWO_POW_24\n        } else {\n            0\n        }\n    }\n}\n\n// Zero out all bytes between the end of the message and where the length is appended,\n// then write the length into the last 8 bytes of the block.\nunconstrained fn attach_len_to_msg_block(\n    mut msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) -> MSG_BLOCK {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 bits (i.e. until msg_byte_ptr = 56).\n    // There can be one item which has to be partially zeroed.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Index of the block in which we find the item we need to partially zero.\n        let i = msg_byte_ptr / INT_SIZE;\n        let zeros = INT_SIZE - modulo;\n        msg_block[i] = set_item_zeros(msg_block[i], zeros as u8);\n        msg_byte_ptr = msg_byte_ptr + zeros;\n    }\n\n    // The rest can be zeroed without bit shifting anything.\n    for i in (msg_byte_ptr / INT_SIZE)..INT_SIZE_PTR {\n        msg_block[i] = 0;\n    }\n\n    // Set the last two 4 byte ints as the first/second half of the 8 bytes of the length.\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..=1 {\n        let shift = i * 4;\n        msg_block[INT_SIZE_PTR + i] = make_item(\n            len_bytes[shift],\n            len_bytes[shift + 1],\n            len_bytes[shift + 2],\n            len_bytes[shift + 3],\n        );\n    }\n    msg_block\n}\n\n// Verify that the message length was correctly written by `attach_len_to_msg_block`,\n// and that everything between the byte pointer and the size pointer was zeroed,\n// and that everything before the byte pointer was untouched.\nfn verify_msg_len(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) {\n    // Check zeros up to the size pointer.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_SIZE_PTR);\n\n    // Check that up to the pointer we match the last block.\n    verify_msg_block_equals_last(msg_block, last_block, msg_byte_ptr);\n\n    // We verify the message length was inserted correctly by reversing the byte decomposition.\n    let mut reconstructed_len: u64 = 0;\n    for i in INT_SIZE_PTR..INT_BLOCK_SIZE {\n        reconstructed_len = reconstructed_len * TWO_POW_32;\n        reconstructed_len = reconstructed_len + msg_block[i] as u64;\n    }\n    let len = 8 * message_size as u64;\n    assert_eq(reconstructed_len, len);\n}\n\n// Perform the final compression, then transform the `STATE` into `HASH`.\nfn hash_final_block(msg_block: MSG_BLOCK, mut state: STATE) -> HASH {\n    let mut out_h: HASH = [0; 32]; // Digest as sequence of bytes\n    // Hash final padded block\n    state = sha256_compression(msg_block, state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[j] as Field).to_be_bytes();\n        for k in 0..4 {\n            out_h[4 * j + k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod tests {\n    use super::{\n        attach_len_to_msg_block, build_msg_block, byte_into_item, get_item_byte, make_item,\n        set_item_byte_then_zeros, set_item_zeros,\n    };\n    use super::INT_BLOCK;\n    use super::sha256_var;\n\n    #[test]\n    fn smoke_test() {\n        let input = [0xbd];\n        let result = [\n            0x68, 0x32, 0x57, 0x20, 0xaa, 0xbd, 0x7c, 0x82, 0xf3, 0x0f, 0x55, 0x4b, 0x31, 0x3d,\n            0x05, 0x70, 0xc9, 0x5a, 0xcc, 0xbb, 0x7d, 0xc4, 0xb5, 0xaa, 0xe1, 0x12, 0x04, 0xc0,\n            0x8f, 0xfe, 0x73, 0x2b,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116,\n        ];\n        let result = [\n            91, 122, 146, 93, 52, 109, 133, 148, 171, 61, 156, 70, 189, 238, 153, 7, 222, 184, 94,\n            24, 65, 114, 192, 244, 207, 199, 87, 232, 192, 224, 171, 207,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_multiple_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115,\n            99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49,\n            46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46,\n            48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115,\n            117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97,\n            103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45,\n            52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55,\n            64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32,\n            50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32,\n            43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64,\n            103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103,\n            110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115,\n            104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101,\n            108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109,\n            59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56,\n            51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48,\n            87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75,\n            57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67,\n            111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101,\n            114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99,\n        ];\n        let result = [\n            116, 90, 151, 31, 78, 22, 138, 180, 211, 189, 69, 76, 227, 200, 155, 29, 59, 123, 154,\n            60, 47, 153, 203, 129, 157, 251, 48, 2, 79, 11, 65, 47,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_under_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59,\n        ];\n        let result = [\n            143, 140, 76, 173, 222, 123, 102, 68, 70, 149, 207, 43, 39, 61, 34, 79, 216, 252, 213,\n            165, 74, 16, 110, 74, 29, 64, 138, 167, 30, 1, 9, 119,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_not_block_multiple() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115,\n            99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49,\n            46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46,\n            48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115,\n            117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97,\n            103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45,\n            52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55,\n            64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32,\n            50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32,\n            43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64,\n            103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103,\n            110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115,\n            104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101,\n            108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109,\n            59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56,\n            51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48,\n            87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75,\n            57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67,\n            111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101,\n            114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99, 116, 58, 77, 101, 115, 115, 97,\n            103, 101, 45, 73, 100, 58, 68, 97, 116, 101, 58, 116, 111, 59, 32, 98, 61,\n        ];\n        let result = [\n            112, 144, 73, 182, 208, 98, 9, 238, 54, 229, 61, 145, 222, 17, 72, 62, 148, 222, 186,\n            55, 192, 82, 220, 35, 66, 47, 193, 200, 22, 38, 26, 186,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_with_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17,\n            48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12,\n            201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48,\n            37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6,\n            242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2,\n            1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89,\n            110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2,\n            1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75,\n            193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1,\n            12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189,\n            233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4,\n            32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45,\n            105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4,\n            32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188,\n            194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212,\n            181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53,\n        ];\n        let message_size = 297;\n        assert_eq(sha256_var(input, message_size), result);\n    }\n\n    #[test]\n    fn msg_big_no_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17,\n            48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12,\n            201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48,\n            37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6,\n            242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2,\n            1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89,\n            110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2,\n            1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75,\n            193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1,\n            12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189,\n            233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4,\n            32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45,\n            105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4,\n            32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188,\n            194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38,\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212,\n            181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn same_msg_len_variable_padding() {\n        let input = [\n            29, 81, 165, 84, 243, 114, 101, 37, 242, 146, 127, 99, 69, 145, 39, 72, 213, 39, 253,\n            179, 218, 37, 217, 201, 172, 93, 198, 50, 249, 70, 15, 30, 162, 112, 187, 40, 140, 9,\n            236, 53, 32, 44, 38, 163, 113, 254, 192, 197, 44, 89, 71, 130, 169, 242, 17, 211, 214,\n            72, 19, 178, 186, 168, 147, 127, 99, 101, 252, 227, 8, 147, 150, 85, 97, 158, 17, 107,\n            218, 244, 82, 113, 247, 91, 208, 214, 60, 244, 87, 137, 173, 201, 130, 18, 66, 56, 198,\n            149, 207, 189, 175, 120, 123, 224, 177, 167, 251, 159, 143, 110, 68, 183, 189, 70, 126,\n            32, 35, 164, 44, 30, 44, 12, 65, 18, 62, 239, 242, 2, 248, 104, 2, 178, 64, 28, 126, 36,\n            137, 24, 14, 116, 91, 98, 90, 159, 218, 102, 45, 11, 110, 223, 245, 184, 52, 99, 59,\n            245, 136, 175, 3, 72, 164, 146, 145, 116, 22, 66, 24, 49, 193, 121, 3, 60, 37, 41, 97,\n            3, 190, 66, 195, 225, 63, 46, 3, 118, 4, 208, 15, 1, 40, 254, 235, 151, 123, 70, 180,\n            170, 44, 172, 90, 4, 254, 53, 239, 116, 246, 67, 56, 129, 61, 22, 169, 213, 65, 27, 216,\n            116, 162, 239, 214, 207, 126, 177, 20, 100, 25, 48, 143, 84, 215, 70, 197, 53, 65, 70,\n            86, 172, 61, 62, 9, 212, 167, 169, 133, 41, 126, 213, 196, 33, 192, 238, 0, 63, 246,\n            215, 58, 128, 110, 101, 92, 3, 170, 214, 130, 149, 52, 81, 125, 118, 233, 3, 118, 193,\n            104, 207, 120, 115, 77, 253, 191, 122, 0, 107, 164, 207, 113, 81, 169, 36, 201, 228, 74,\n            134, 131, 218, 178, 35, 30, 216, 101, 2, 103, 174, 87, 95, 50, 50, 215, 157, 5, 210,\n            188, 54, 211, 78, 45, 199, 96, 121, 241, 241, 176, 226, 194, 134, 130, 89, 217, 210,\n            186, 32, 140, 39, 91, 103, 212, 26, 87, 32, 72, 144, 228, 230, 117, 99, 188, 50, 15, 69,\n            79, 179, 50, 12, 106, 86, 218, 101, 73, 142, 243, 29, 250, 122, 228, 233, 29, 255, 22,\n            121, 114, 125, 103, 41, 250, 241, 179, 126, 158, 198, 116, 209, 65, 94, 98, 228, 175,\n            169, 96, 3, 9, 233, 133, 214, 55, 161, 164, 103, 80, 85, 24, 186, 64, 167, 92, 131, 53,\n            101, 202, 47, 25, 104, 118, 155, 14, 12, 12, 25, 116, 45, 221, 249, 28, 246, 212, 200,\n            157, 167, 169, 56, 197, 181, 4, 245, 146, 1, 140, 234, 191, 212, 228, 125, 87, 81, 86,\n            119, 30, 63, 129, 143, 32, 96,\n        ];\n\n        // Prepare inputs of different lengths\n        let mut input_511 = [0; 511];\n        let mut input_512 = [0; 512]; // Next block\n        let mut input_575 = [0; 575];\n        let mut input_576 = [0; 576]; // Next block\n        for i in 0..input.len() {\n            input_511[i] = input[i];\n            input_512[i] = input[i];\n            input_575[i] = input[i];\n            input_576[i] = input[i];\n        }\n\n        // Compute hashes of all inputs (with same message length)\n        let fixed_length_hash = super::sha256(input);\n        let var_full_length_hash = sha256_var(input, input.len() as u64);\n        let var_length_hash_511 = sha256_var(input_511, input.len() as u64);\n        let var_length_hash_512 = sha256_var(input_512, input.len() as u64);\n        let var_length_hash_575 = sha256_var(input_575, input.len() as u64);\n        let var_length_hash_576 = sha256_var(input_576, input.len() as u64);\n\n        // All of the above should have produced the same hash\n        assert_eq(var_full_length_hash, fixed_length_hash);\n        assert_eq(var_length_hash_511, fixed_length_hash);\n        assert_eq(var_length_hash_512, fixed_length_hash);\n        assert_eq(var_length_hash_575, fixed_length_hash);\n        assert_eq(var_length_hash_576, fixed_length_hash);\n    }\n\n    #[test]\n    fn test_get_item_byte() {\n        let fld = make_item(10, 20, 30, 40);\n        assert_eq(fld, 0x0a141e28);\n        assert_eq(get_item_byte(fld, 0), 10);\n        assert_eq(get_item_byte(fld, 4), 10);\n        assert_eq(get_item_byte(fld, 6), 30);\n    }\n\n    #[test]\n    fn test_byte_into_item() {\n        let fld = make_item(0, 20, 0, 0);\n        assert_eq(byte_into_item(20, 1), fld);\n        assert_eq(byte_into_item(20, 5), fld);\n    }\n\n    #[test]\n    fn test_set_item_zeros() {\n        let fld0 = make_item(10, 20, 30, 40);\n        let fld1 = make_item(10, 0, 0, 0);\n        assert_eq(set_item_zeros(fld0, 3), fld1);\n        assert_eq(set_item_zeros(fld0, 4), 0);\n        assert_eq(set_item_zeros(0, 4), 0);\n    }\n\n    #[test]\n    fn test_set_item_byte_then_zeros() {\n        let fld0 = make_item(10, 20, 30, 40);\n        let fld1 = make_item(10, 50, 0, 0);\n        assert_eq(set_item_byte_then_zeros(fld0, 1, 50), fld1);\n    }\n\n    #[test]\n    fn test_build_msg_block_start_0() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48,\n        ];\n        assert_eq(input.len(), 22);\n\n        // Safety: testing context\n        let (msg_block, msg_byte_ptr) = unsafe { build_msg_block(input, input.len(), 0) };\n        assert_eq(msg_byte_ptr, input.len());\n        assert_eq(msg_block[0], make_item(input[0], input[1], input[2], input[3]));\n        assert_eq(msg_block[1], make_item(input[4], input[5], input[6], input[7]));\n        assert_eq(msg_block[5], make_item(input[20], input[21], 0, 0));\n        assert_eq(msg_block[6], 0);\n    }\n\n    #[test]\n    fn test_build_msg_block_start_1() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116,\n        ];\n        assert_eq(input.len(), 68);\n        // Safety: test context\n        let (msg_block, msg_byte_ptr) = unsafe { build_msg_block(input, input.len(), 64) };\n        assert_eq(msg_byte_ptr, 4);\n        assert_eq(msg_block[0], make_item(input[64], input[65], input[66], input[67]));\n        assert_eq(msg_block[1], 0);\n    }\n\n    #[test]\n    fn test_attach_len_to_msg_block() {\n        let input: INT_BLOCK = [\n            2152555847, 1397309779, 1936618851, 1262052426, 1936876331, 1985297723, 543702374,\n            1919905082, 1131376244, 1701737517, 1417244773, 978151789, 1697470053, 1920166255,\n            1849316213, 1651139939,\n        ];\n        // Safety: testing context\n        let msg_block = unsafe { attach_len_to_msg_block(input, 1, 448) };\n        assert_eq(msg_block[0], ((1 << 7) as u32) * 256 * 256 * 256);\n        assert_eq(msg_block[1], 0);\n        assert_eq(msg_block[15], 3584);\n    }\n}\n","path":"std/hash/sha256.nr"},"61":{"source":"use instagram_sv::{\n    constants::{\n        MAX_EMAIL_HEADER_LENGTH,     \n    },\n    instagram::verify_instagram_email,\n    utils::VerifiedOutputs,\n};\nuse zkemail::{ dkim::RSAPubkey, KEY_LIMBS_1024, Sequence };\n\nfn main(\n    header:  BoundedVec<u8, MAX_EMAIL_HEADER_LENGTH>,\n    pubkey:  RSAPubkey<KEY_LIMBS_1024>,\n    signature: [Field; KEY_LIMBS_1024],\n    from_header_sequence: Sequence,\n    from_address_sequence: Sequence,\n    to_header_sequence:   Sequence,\n    to_address_sequence:  Sequence,\n    expected_to_hash: Field,      // Hash of user's email to verify\n    expected_username_hash: Field, // Hash of user's Instagram username to verify\n) -> pub VerifiedOutputs {\n\n    verify_instagram_email(\n        header,  pubkey,  signature,\n        from_header_sequence, from_address_sequence,\n        to_header_sequence,   to_address_sequence,\n        expected_to_hash,\n        expected_username_hash           \n    )\n}\n","path":"/home/hgunduzoglu/instagram-social-verify/examples/instagram_example/src/main.nr"},"63":{"source":"use std::hash::pedersen_hash;       \nuse zkemail::{\n    dkim::RSAPubkey,\n    headers::email_address::get_email_address,\n    KEY_LIMBS_1024,\n    Sequence,\n};\n\nuse crate::constants::{MAX_EMAIL_HEADER_LENGTH, INSTAGRAM_FROM_EMAIL};\nuse super::utils::VerifiedOutputs;\n\n// Maximum length for an email address\nglobal MAX_EMAIL_LENGTH: u32 = 320;\n// Maximum length for username\nglobal MAX_USERNAME_LENGTH: u32 = 32;\n\n#[export]\npub fn verify_instagram_email(\n    header: BoundedVec<u8, MAX_EMAIL_HEADER_LENGTH>,\n    pubkey:  RSAPubkey<KEY_LIMBS_1024>,\n    signature: [Field; KEY_LIMBS_1024],\n    from_header_sequence: Sequence,\n    from_address_sequence: Sequence,\n    to_header_sequence:   Sequence,\n    to_address_sequence:  Sequence,\n    expected_to_hash: Field,\n    expected_username_hash: Field,\n    // We pass the username as a separate parameter \n    // For now, we'll just verify the hash rather than extracting it directly\n) -> VerifiedOutputs {\n    // 1. DKIM\n    assert(header.len() <= MAX_EMAIL_HEADER_LENGTH, \"Header too long\");\n    pubkey.verify_dkim_signature(header, signature);\n\n    let from = comptime { \"from\".as_bytes() };\n    let to   = comptime { \"to\".as_bytes()   };\n\n    // 2. Verify FROM address is from Instagram\n    let from_addr = get_email_address(header,\n        from_header_sequence, from_address_sequence, from);\n    assert(\n        from_addr.eq(BoundedVec::from(INSTAGRAM_FROM_EMAIL)),\n        \"Unexpected From address\",\n    );\n\n    // 3. Extract TO address and compute its hash\n    let to_addr = get_email_address(header,\n        to_header_sequence, to_address_sequence, to);\n    \n    // Simple hash function - sum the bytes and convert to a Field\n    let mut sum: Field = 0;\n    let actual_len = to_addr.len();\n    \n    for i in 0..320 {\n        if (i as u32) < actual_len {\n            sum += (to_addr.storage[i] as Field) * ((i + 1) as Field);\n        }\n    }\n    \n    // Verify the hash matches the expected hash\n    assert(sum == expected_to_hash, \"Recipient email hash doesn't match expected hash\");\n\n    // 4. Since extracting the username directly inside the circuit is complex with Noir's constraints,\n    // we will verify the provided username hash against the expected hash\n    // This means the username extraction will happen in the frontend JavaScript code\n    // and the hash will be passed to the circuit\n    \n    // Verify the username hash matches the expected hash\n    assert(expected_username_hash != 0, \"Username hash cannot be zero\");\n    \n    VerifiedOutputs::new(\n        pubkey.hash(),                 // pub_key_hash\n        pedersen_hash(signature),      // email_nullifier\n        sum                            // to_address_hash\n    )\n}\n","path":"/home/hgunduzoglu/instagram-social-verify/lib/src/instagram.nr"},"116":{"source":"use crate::{KEY_LIMBS_1024, KEY_LIMBS_2048, RSA_EXPONENT};\nuse bignum::{params::BigNumParams, RuntimeBigNum};\nuse rsa::{rsa::verify_sha256_pkcs1v15, types::{RBN1024, RBN2048}};\nuse std::hash::{pedersen_hash, sha256_var};\n\npub struct RSAPubkey<let KEY_LIMBS: u32> {\n    modulus: [Field; KEY_LIMBS],\n    redc: [Field; KEY_LIMBS],\n}\n\nimpl<let KEY_LIMBS: u32> RSAPubkey<KEY_LIMBS> {\n\n    pub fn new(modulus: [Field; KEY_LIMBS], redc: [Field; KEY_LIMBS]) -> Self {\n        let pubkey = Self { modulus, redc };\n        pubkey\n    }\n}\n\nimpl RSAPubkey<KEY_LIMBS_1024> {\n    pub fn verify_dkim_signature<let MAX_HEADER_LENGTH: u32>(\n        self,\n        header: BoundedVec<u8, MAX_HEADER_LENGTH>,\n        signature: [Field; KEY_LIMBS_1024],\n    ) {\n        // hash the header\n        let header_hash = sha256_var(header.storage(), header.len() as u64);\n\n        let params: BigNumParams<KEY_LIMBS_1024, 1024> =\n            BigNumParams::new(false, self.modulus, self.redc);\n\n        let signature: RBN1024 = RuntimeBigNum::from_array(params, signature);\n        signature.validate_in_range();\n\n        // verify the DKIM signature over the header\n        assert(verify_sha256_pkcs1v15(header_hash, signature, RSA_EXPONENT));\n    }\n\n    pub fn hash(self) -> Field {\n        // validate\n        self.validate_in_range();\n        let mut dkim_preimage = [0; 9];\n        // compose first 4 limbs of modulus and redc\n        for i in 0..4 {\n            let modulus_hi = self.modulus[i * 2] * 2.pow_32(120);\n            let redc_hi = self.redc[i * 2] * 2.pow_32(120);\n            dkim_preimage[i] = modulus_hi + self.modulus[i * 2 + 1];\n            dkim_preimage[i + 4] = redc_hi + self.redc[i * 2 + 1];\n        }\n        // compose last two elements of redc and modulus together\n        let modulus_hi = self.modulus[8] * 2.pow_32(120);\n        dkim_preimage[8] = modulus_hi + self.redc[8];\n        // hash the pubkey\n        pedersen_hash(dkim_preimage)\n    }\n\n    pub fn validate_in_range(self) {\n        for i in 0..(KEY_LIMBS_1024 - 1) {\n            self.modulus[i].assert_max_bit_size::<120>();\n            self.redc[i].assert_max_bit_size::<120>();\n        }\n        self.modulus[KEY_LIMBS_1024 - 1].assert_max_bit_size::<1024 - ((KEY_LIMBS_1024 - 1) * 120)>();\n        self.redc[KEY_LIMBS_1024 - 1].assert_max_bit_size::<120>();\n    }\n}\n\nimpl RSAPubkey<KEY_LIMBS_2048> {\n    pub fn verify_dkim_signature<let MAX_HEADER_LENGTH: u32>(\n        self,\n        header: BoundedVec<u8, MAX_HEADER_LENGTH>,\n        signature: [Field; KEY_LIMBS_2048],\n    ) {\n        // hash the header\n        let header_hash = sha256_var(header.storage(), header.len() as u64);\n\n        let params: BigNumParams<KEY_LIMBS_2048, 2048> =\n            BigNumParams::new(false, self.modulus, self.redc);\n\n        let signature: RBN2048 = RuntimeBigNum::from_array(params, signature);\n        signature.validate_in_range();\n\n        // verify the DKIM signature over the header\n        assert(verify_sha256_pkcs1v15(header_hash, signature, RSA_EXPONENT));\n    }\n\n    pub fn hash(self) -> Field {\n        // validate range\n        self.validate_in_range();\n        let mut dkim_preimage = [0; 18];\n        // compose limbs\n        for i in 0..9 {\n            let modulus_hi = self.modulus[i * 2] * 2.pow_32(120);\n            let redc_hi = self.redc[i * 2] * 2.pow_32(120);\n            dkim_preimage[i] = modulus_hi + self.modulus[i * 2 + 1];\n            dkim_preimage[i + 9] = redc_hi + self.redc[i * 2 + 1];\n        }\n        // hash the pubkey\n        pedersen_hash(dkim_preimage)\n    }\n\n    pub fn validate_in_range(self) {\n        for i in 0..(KEY_LIMBS_2048 - 1) {\n            self.modulus[i].assert_max_bit_size::<120>();\n            self.redc[i].assert_max_bit_size::<120>();\n        }\n        self.modulus[KEY_LIMBS_2048 - 1].assert_max_bit_size::<2048 - ((KEY_LIMBS_2048 - 1) * 120)>();\n        self.redc[KEY_LIMBS_2048 - 1].assert_max_bit_size::<120>(); // we get 2053 sometimes?\n    }\n}\n","path":"/home/hgunduzoglu/nargo/github.com/zkemail/zkemail.nr/v0.4.2/lib/src/dkim.nr"},"118":{"source":"use crate::{\n    EMAIL_ADDRESS_CHAR_TABLE, headers::constrain_header_field_detect_last_angle_bracket,\n    MAX_EMAIL_ADDRESS_LENGTH, Sequence,\n};\n\npub fn get_email_address<let MAX_HEADER_LENGTH: u32, let HEADER_FIELD_NAME_LENGTH: u32>(\n    header: BoundedVec<u8, MAX_HEADER_LENGTH>,\n    header_field_sequence: Sequence,\n    email_address_sequence: Sequence,\n    header_field_name: [u8; HEADER_FIELD_NAME_LENGTH],\n) -> BoundedVec<u8, MAX_EMAIL_ADDRESS_LENGTH> {\n    // check field is uninterrupted and matches the expected field name\n    let last_angle_bracket = constrain_header_field_detect_last_angle_bracket::<MAX_HEADER_LENGTH, MAX_EMAIL_ADDRESS_LENGTH + HEADER_FIELD_NAME_LENGTH + 1, HEADER_FIELD_NAME_LENGTH>(\n        header,\n        header_field_sequence,\n        header_field_name,\n    );\n    // if angle bracket found, assert index is +1\n    if last_angle_bracket != 0 {\n        assert(\n            email_address_sequence.index == last_angle_bracket + 1,\n            \"Email address must start immediately after '<' if bracket is present\",\n        );\n    }\n    // check email sequence is within header field\n    assert(\n        email_address_sequence.index >= header_field_sequence.index\n            & email_address_sequence.end_index() <= header_field_sequence.end_index(),\n        \"Email address sequence out of bounds\",\n    );\n\n    // constrained get email address\n    parse_email_address(header, email_address_sequence)\n}\n\npub fn parse_email_address<let MAX_HEADER_LENGTH: u32>(\n    header: BoundedVec<u8, MAX_HEADER_LENGTH>,\n    email_address_sequence: Sequence,\n) -> BoundedVec<u8, MAX_EMAIL_ADDRESS_LENGTH> {\n    // check the sequence is proceeded by an acceptable character\n    if email_address_sequence.index != 0 {\n        assert(\n            EMAIL_ADDRESS_CHAR_TABLE[header.get_unchecked(email_address_sequence.index - 1)] == 2,\n            \"Email address must start with an acceptable character\",\n        );\n    }\n    if email_address_sequence.end_index() < header.len() {\n        assert(\n            EMAIL_ADDRESS_CHAR_TABLE[header.get_unchecked(\n                email_address_sequence.index + email_address_sequence.length,\n            )]\n                == 3,\n            \"Email address must end with an acceptable character\",\n        );\n    }\n    // check the email address and assign\n    let mut email_address: BoundedVec<u8, MAX_EMAIL_ADDRESS_LENGTH> = BoundedVec::new();\n    for i in 0..MAX_EMAIL_ADDRESS_LENGTH {\n        let index = email_address_sequence.index + i;\n        if index < email_address_sequence.end_index() {\n            let letter = header.get_unchecked(index);\n            email_address.set_unchecked(i, letter);\n            assert(\n                EMAIL_ADDRESS_CHAR_TABLE[letter] == 1,\n                \"Email address must only contain acceptable characters\",\n            );\n        }\n    }\n    email_address.len = email_address_sequence.length;\n    // todo: should probably introduce a check for @\n    email_address\n}\n\n","path":"/home/hgunduzoglu/nargo/github.com/zkemail/zkemail.nr/v0.4.2/lib/src/headers/email_address.nr"},"119":{"source":"use crate::{CR, LF, Sequence};\n\npub mod body_hash;\npub mod email_address;\n\n/**\n * Constrain a sequence in a header to be within the correct bounds\n *\n * @param MAX_HEADER_LENGTH - The maximum length of the email header\n * @param MAX_HEADER_FIELD_LENGTH - The maximum length of the header field\n * @param HEADER_FIELD_NAME_LENGTH - The length of the header field name\n * @param header - The email header as validated in the DKIM signature\n * @param header_field_sequence - The sequence of the header field\n * @param header_field_name - The name of the header field\n */\nfn check_header_field_bounds<let MAX_HEADER_LENGTH: u32, let MAX_HEADER_FIELD_LENGTH: u32, let HEADER_FIELD_NAME_LENGTH: u32>(\n    header: BoundedVec<u8, MAX_HEADER_LENGTH>,\n    header_field_sequence: Sequence,\n    header_field_name: [u8; HEADER_FIELD_NAME_LENGTH],\n) {\n    // check the range of the sequence is within the header (so we can use get_unchecked)\n    let end_index = header_field_sequence.end_index();\n    assert(end_index <= header.len(), \"Header field out of bounds of header\");\n\n    // if the sequence is not the start, check for a newline\n    if header_field_sequence.index != 0 {\n        assert(\n            header.get_unchecked(header_field_sequence.index - 2) == CR,\n            \"Header field must start with CRLF\",\n        );\n        assert(\n            header.get_unchecked(header_field_sequence.index - 1) == LF,\n            \"Header field must start with CRLF\",\n        );\n    }\n\n    // if the sequence is not the end, check for a newline\n    if end_index != header.len() {\n        assert(header.get_unchecked(end_index) == CR, \"Header field must end with CRLF\");\n        assert(header.get_unchecked(end_index + 1) == LF, \"Header field must end with CRLF\");\n    }\n\n    // check that the header field name matches the expected name\n    for i in 0..HEADER_FIELD_NAME_LENGTH {\n        assert(\n            header.get_unchecked(header_field_sequence.index + i) == header_field_name[i],\n            \"Header field name does not match\",\n        );\n    }\n    assert(\n        header.get_unchecked(header_field_sequence.index + HEADER_FIELD_NAME_LENGTH) == 0x3a,\n        \"Header field name must be followed by a colon\",\n    );\n}\n\n/**\n * Constrain a sequence in a header to match the specific header field\n *\n * @param MAX_HEADER_LENGTH - The maximum length of the email header\n * @param MAX_HEADER_FIELD_LENGTH - The maximum length of the header field\n * @param HEADER_FIELD_NAME_LENGTH - The length of the header field name\n * @param header - The email header as validated in the DKIM signature\n * @param header_field_sequence - The sequence of the header field\n * @param header_field_name - The name of the header field\n */\npub fn constrain_header_field<let MAX_HEADER_LENGTH: u32, let MAX_HEADER_FIELD_LENGTH: u32, let HEADER_FIELD_NAME_LENGTH: u32>(\n    header: BoundedVec<u8, MAX_HEADER_LENGTH>,\n    header_field_sequence: Sequence,\n    header_field_name: [u8; HEADER_FIELD_NAME_LENGTH],\n) {\n    // constrain beginning of header field\n    check_header_field_bounds::<MAX_HEADER_LENGTH, MAX_HEADER_FIELD_LENGTH, HEADER_FIELD_NAME_LENGTH>(\n        header,\n        header_field_sequence,\n        header_field_name,\n    );\n\n    // check the header field is uninterrupted\n    let start_index = header_field_sequence.index + HEADER_FIELD_NAME_LENGTH + 1;\n    for i in 0..MAX_HEADER_FIELD_LENGTH {\n        // is it safe enough to cut this constraint cost in half by not checking lf? i think so\n        let index = start_index + i;\n        if (index < header_field_sequence.end_index()) {\n            assert(header.get_unchecked(index) != CR, \"Header field must not contain newlines\");\n        }\n    }\n}\n\n/**\n * constrain_header_field with checks for the last occurence of \"<\" inside the loop to save constraints\n */\npub fn constrain_header_field_detect_last_angle_bracket<let MAX_HEADER_LENGTH: u32, let MAX_HEADER_FIELD_LENGTH: u32, let HEADER_FIELD_NAME_LENGTH: u32>(\n    header: BoundedVec<u8, MAX_HEADER_LENGTH>,\n    header_field_sequence: Sequence,\n    header_field_name: [u8; HEADER_FIELD_NAME_LENGTH],\n) -> u32 {\n    // constrain beginning of header field\n    check_header_field_bounds::<MAX_HEADER_LENGTH, MAX_HEADER_FIELD_LENGTH, HEADER_FIELD_NAME_LENGTH>(\n        header,\n        header_field_sequence,\n        header_field_name,\n    );\n\n    // check the header field is uninterrupted\n    let mut last_angle_bracket = 0;\n    let start_index = header_field_sequence.index + HEADER_FIELD_NAME_LENGTH + 1;\n    for i in (HEADER_FIELD_NAME_LENGTH + 1)..MAX_HEADER_FIELD_LENGTH {\n        // is it safe enough to cut this constraint cost in half by not checking lf? i think so\n        let index = start_index + i;\n        if (index < header_field_sequence.end_index()) {\n            let byte = header.get_unchecked(index);\n            assert(byte != CR, \"Header field must not contain newlines\");\n            if byte == 0x3c {\n                last_angle_bracket = index;\n            }\n        }\n    }\n    last_angle_bracket\n}\n","path":"/home/hgunduzoglu/nargo/github.com/zkemail/zkemail.nr/v0.4.2/lib/src/headers/mod.nr"},"120":{"source":"use std::hash::pedersen_hash;\npub mod dkim;\npub mod headers;\npub mod masking;\npub mod partial_hash;\npub mod remove_soft_line_breaks;\nmod tests;\n\nglobal RSA_EXPONENT: u32 = 65537;\nglobal KEY_LIMBS_1024: u32 = 9;\nglobal KEY_LIMBS_2048: u32 = 18;\nglobal BODY_HASH_BASE64_LENGTH: u32 = 44;\nglobal CR: u8 = 0x0D;\nglobal LF: u8 = 0x0A;\nglobal MAX_DKIM_HEADER_FIELD_LENGTH: u32 = 300; // kinda arbitrary but gives > 100 chars for selector and domain\nglobal MAX_EMAIL_ADDRESS_LENGTH: u32 = 320; // derived via (https://datatracker.ietf.org/doc/html/rfc5321#section-4.5.3.1.1)\n\npub struct Sequence {\n    index: u32,\n    length: u32,\n}\n\nimpl Sequence {\n    pub fn end_index(self) -> u32 {\n        self.index + self.length\n    }\n}\n// allowable chars in an email address (js/src/utils:makeAllowableEmailCharsTable()\n// \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789.-@\" = 1\n// \"<: \" = 2\n// \">\\r\\n\" = 3\nglobal EMAIL_ADDRESS_CHAR_TABLE: [u8; 123] = [\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 0, 2, 0, 3, 0,\n    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0,\n    0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n];\n\n/**\n * Create a nullifier for a signature with a blinding factor\n *\n * @param signature - The signature to nullify\n * @param nonce - The nonce to use in the nullifier as a blinding factor\n * @return - The blinded nullifier for the signature\n */\npub fn blinded_nullifier<let KEY_LIMBS: u32>(signature: [Field; KEY_LIMBS], nonce: Field) -> Field {\n    let preimage = unsafe { __blinded_nullifier(signature, nonce) };\n    for i in 0..KEY_LIMBS {\n        assert(preimage[i] == signature[i], \"Preimage does not contain signature\");\n    }\n    assert(preimage[KEY_LIMBS] == nonce, \"Preimage does not contain nonce\");\n    pedersen_hash(preimage)\n}\n\n/**\n * Builds the nullifier preimage with a nonce\n * @notice the nonce should be governed at the app level - i.e. an aztec note can pass this in\n * \n * @param signature - The signature to nullify\n * @param nonce - The nonce to use in the nullifier as a blinding factor\n */\nunconstrained fn __blinded_nullifier<let KEY_LIMBS: u32>(\n    signature: [Field; KEY_LIMBS],\n    nonce: Field,\n) -> [Field; KEY_LIMBS + 1] {\n    let mut nullifier_preimage = [0; KEY_LIMBS + 1];\n    for i in 0..KEY_LIMBS {\n        nullifier_preimage[i] = signature[i];\n    }\n    nullifier_preimage[KEY_LIMBS] = nonce;\n\n    nullifier_preimage\n}\n","path":"/home/hgunduzoglu/nargo/github.com/zkemail/zkemail.nr/v0.4.2/lib/src/lib.nr"},"162":{"source":"use crate::fns::{\n    expressions::evaluate_quadratic_expression,\n    unconstrained_helpers::{\n        __add_with_flags, __from_field, __neg_with_flags, __sub_with_flags, __validate_gt_remainder,\n        __validate_in_field_compute_borrow_flags,\n    },\n    unconstrained_ops::{__add, __div, __mul, __neg, __sub, __udiv_mod},\n};\nuse crate::params::BigNumParams as P;\n\nglobal TWO_POW_120: Field = 0x1000000000000000000000000000000;\n\n/**\n * In this file:\n *\n * conditional_select\n * assert_is_not_equal\n * eq\n * validate_in_field\n * validate_in_range\n * validate_quotient_in_range\n * validate_gt\n * neg\n * add\n * sub\n * mul\n * div\n * udiv_mod\n * udiv\n * umod\n */\n\npub(crate) fn limbs_to_field<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    limbs: [Field; N],\n) -> Field {\n    let TWO_POW_120 = 0x1000000000000000000000000000000;\n    if N > 2 {\n        // validate that the limbs is less than the modulus the grumpkin modulus\n        let mut grumpkin_modulus = [0; N];\n        grumpkin_modulus[0] = 0x33e84879b9709143e1f593f0000001;\n        grumpkin_modulus[1] = 0x4e72e131a029b85045b68181585d28;\n        grumpkin_modulus[2] = 0x3064;\n        validate_gt::<N, MOD_BITS>(grumpkin_modulus, limbs);\n        // validate that the limbs are in range\n        validate_in_range::<N, MOD_BITS>(limbs);\n    }\n    // validate the limbs sum up to the field value\n    if N < 2 {\n        limbs[0]\n    } else if N == 2 {\n        validate_in_range::<N, MOD_BITS>(limbs);\n        limbs[0] + limbs[1] * TWO_POW_120\n    } else {\n        // validate_in_range::<N, 254>(limbs);\n        limbs[0] + limbs[1] * TWO_POW_120 + limbs[2] * TWO_POW_120 * TWO_POW_120\n    }\n}\n\npub(crate) fn from_field<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    field: Field,\n) -> [Field; N] {\n    // Safety: we check that the resulting limbs represent the intended field element\n    // we check the bit length, the limbs being max 120 bits, and the value in total is less than the field modulus\n    let result = unsafe { __from_field::<N>(field) };\n\n    if !std::runtime::is_unconstrained() {\n        // validate the limbs are in range and the value in total is less than 2^254\n\n        let TWO_POW_120 = 0x1000000000000000000000000000000;\n        // validate that the last limb is less than the modulus\n        if N > 2 {\n            // validate that the result is less than the modulus\n            let mut grumpkin_modulus = [0; N];\n            grumpkin_modulus[0] = 0x33e84879b9709143e1f593f0000001;\n            grumpkin_modulus[1] = 0x4e72e131a029b85045b68181585d28;\n            grumpkin_modulus[2] = 0x3064;\n            validate_gt::<N, MOD_BITS>(grumpkin_modulus, result);\n            // validate that the limbs are in range\n            validate_in_range::<N, MOD_BITS>(result);\n        }\n        // validate the limbs sum up to the field value\n        let field_val = if N < 2 {\n            result[0]\n        } else if N == 2 {\n            validate_in_range::<N, MOD_BITS>(result);\n            result[0] + result[1] * TWO_POW_120\n        } else {\n            validate_in_range::<N, MOD_BITS>(result);\n            result[0] + result[1] * TWO_POW_120 + result[2] * TWO_POW_120 * TWO_POW_120\n        };\n        assert(field_val == field);\n    }\n\n    result\n}\n\n/**\n* @brief given an input seed, generate a pseudorandom BigNum value\n* @details we hash the input seed into `modulus_bits * 2` bits of entropy,\n* which is then reduced into a BigNum value\n* We use a hash function that can be modelled as a random oracle\n* This function *should* produce an output that is a uniformly randomly distributed value modulo BigNum::modulus()\n**/\npub(crate) fn derive_from_seed<let N: u32, let MOD_BITS: u32, let SeedBytes: u32>(\n    params: P<N, MOD_BITS>,\n    seed: [u8; SeedBytes],\n) -> [Field; N] {\n    let mut rolling_seed: [u8; SeedBytes + 1] = [0; SeedBytes + 1];\n    for i in 0..SeedBytes {\n        rolling_seed[i] = seed[i];\n        assert_eq(rolling_seed[i], seed[i]);\n    }\n\n    let mut hash_buffer: [u8; N * 2 * 15] = [0; N * 2 * 15];\n\n    let mut rolling_hash_fields: [Field; (SeedBytes / 31) + 1] = [0; (SeedBytes / 31) + 1];\n    let mut seed_ptr = 0;\n    for i in 0..(SeedBytes / 31) + 1 {\n        let mut packed: Field = 0;\n        for _ in 0..31 {\n            if (seed_ptr < SeedBytes) {\n                packed *= 256;\n                packed += seed[seed_ptr] as Field;\n                seed_ptr += 1;\n            }\n        }\n        rolling_hash_fields[i] = packed;\n    }\n\n    let compressed =\n        std::hash::poseidon2::Poseidon2::hash(rolling_hash_fields, (SeedBytes / 31) + 1);\n    let mut rolling_hash: [Field; 2] = [compressed, 0];\n\n    let num_hashes = (240 * N) / 254 + (((30 * N) % 32) != 0) as u32;\n    for i in 0..num_hashes - 1 {\n        let hash: Field = std::hash::poseidon2::Poseidon2::hash(rolling_hash, 2);\n        let hash: [u8; 32] = hash.to_le_bytes();\n        for j in 0..30 {\n            hash_buffer[i * 30 + j] = hash[j];\n        }\n        rolling_hash[1] += 1;\n    }\n\n    {\n        let hash: Field = std::hash::poseidon2::Poseidon2::hash(rolling_hash, 2);\n        let hash: [u8; 32] = hash.to_le_bytes();\n        let remaining_bytes = 30 * N - (num_hashes - 1) * 30;\n        for j in 0..remaining_bytes {\n            hash_buffer[(num_hashes - 1) * 30 + j] = hash[j];\n        }\n    }\n\n    let num_bits = MOD_BITS * 2;\n    let num_bytes = num_bits / 8 + ((num_bits % 8) != 0) as u32;\n\n    let bits_in_last_byte = num_bits as u8 % 8;\n    let last_byte_mask = (1 as u8 << bits_in_last_byte) - 1;\n    hash_buffer[num_bytes - 1] = hash_buffer[num_bytes - 1] & last_byte_mask;\n\n    let num_bigfield_chunks = (2 * N) / (N - 1) + (((2 * N) % (N - 1)) != 0) as u32;\n    let mut byte_ptr = 0;\n\n    // we want to convert our byte array into bigfield chunks\n    // each chunk has at most N-1 limbs\n    // to determine the exact number of chunks, we need the `!=` or `>` operator which is not avaiable when defining array sizes\n    // so we overestimate at 4\n    // e.g. if N = 20, then we have 40 limbs we want to reduce, but each bigfield chunk is 19 limbs, so we need 3\n    // if N = 2, we have 4 limbs we want to reduce but each bigfield chunk is only 1 limb, so we need 4\n    // max possible number of chunks is therefore 4\n    let mut bigfield_chunks: [[Field; N]; 4] = [[0; N]; 4];\n    for k in 0..num_bigfield_chunks {\n        let mut bigfield_limbs: [Field; N] = [0; N];\n        let mut num_filled_bytes = (k * 30);\n        let mut num_remaining_bytes = num_bytes - num_filled_bytes;\n        let mut num_remaining_limbs =\n            (num_remaining_bytes / 15) + (num_remaining_bytes % 15 > 0) as u32;\n        let mut more_than_N_minus_one_limbs = (num_remaining_limbs > (N - 1)) as u32;\n        let mut num_limbs_in_bigfield = more_than_N_minus_one_limbs * (N - 1)\n            + num_remaining_limbs * (1 - more_than_N_minus_one_limbs);\n\n        for j in 0..num_limbs_in_bigfield {\n            let mut limb: Field = 0;\n            for _ in 0..15 {\n                let need_more_bytes = (byte_ptr < num_bytes);\n                let mut byte = hash_buffer[byte_ptr];\n                limb *= (256 * need_more_bytes as Field + (1 - need_more_bytes as Field));\n                limb += byte as Field * need_more_bytes as Field;\n                byte_ptr += need_more_bytes as u32;\n            }\n            bigfield_limbs[num_limbs_in_bigfield - 1 - j] = limb;\n        }\n        bigfield_chunks[num_bigfield_chunks - 1 - k] = bigfield_limbs;\n    }\n\n    let mut bigfield_rhs_limbs: [Field; N] = [0; N];\n    bigfield_rhs_limbs[N - 1] = 1;\n    validate_in_range::<_, MOD_BITS>(bigfield_rhs_limbs);\n\n    let mut result: [Field; N] = [0; N];\n\n    for i in 0..num_bigfield_chunks {\n        let bigfield_lhs_limbs = bigfield_chunks[i];\n\n        result = mul(params, result, bigfield_rhs_limbs);\n        result = add(params, result, bigfield_lhs_limbs);\n    }\n    result\n}\n\n/**\n* @brief conditional_select given the value of `predicate` return either `self` (if 0) or `other` (if 1)\n* @description should be cheaper than using an IF statement (TODO: check!)\n**/\npub(crate) fn conditional_select<let N: u32>(\n    lhs: [Field; N],\n    rhs: [Field; N],\n    predicate: bool,\n) -> [Field; N] {\n    let mut result: [Field; N] = lhs;\n    for i in 0..N {\n        result[i] = (lhs[i] - rhs[i]) * predicate as Field + rhs[i];\n    }\n    result\n}\n\n/**\n    * @brief Validate self != other\n    * @details If A == B, then A == B mod N.\n    *          We can efficiently evaluate A == B mod N where N = circuit modulus\n    *          This method is *sound*, but not *complete* (i.e. A != B but A == B mod N)\n    *          However the probability of an honest Prover being unable to satisfy this check is tiny!\n    *          (todo: compute how tiny)\n    **/\npub(crate) fn assert_is_not_equal<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) {\n    let mut l: Field = 0;\n    let mut r: Field = 0;\n    let mut modulus_mod_n: Field = 0;\n    for i in 0..N {\n        l *= TWO_POW_120;\n        r *= TWO_POW_120;\n        modulus_mod_n *= TWO_POW_120;\n        l += lhs[N - i - 1];\n        r += rhs[N - i - 1];\n        modulus_mod_n += params.modulus[N - i - 1];\n    }\n\n    // lhs can be either X mod N or P + X mod N\n    // rhs can be either Y mod N or P + Y mod N\n    // If lhs - rhs = 0 mod P then lhs - rhs = 0, P or -P mod N\n    let diff = l - r;\n    let target = diff * (diff + modulus_mod_n) * (diff - modulus_mod_n);\n    assert(target != 0, \"asssert_is_not_equal fail\");\n}\n\npub(crate) fn eq<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> bool {\n    let diff = sub::<_, MOD_BITS>(params, lhs, rhs);\n    // if self == other, possible values of `diff` will be `p` or `0`\n    // (the subtract operator constrains diff to be < ceil(log(p)))\n    // TODO: can do this more efficiently via witngen in unconstrained functions?\n    let is_equal_modulus: bool = diff == params.modulus;\n    let is_equal_zero: bool = diff.all(|elem| elem == 0);\n    is_equal_modulus | is_equal_zero\n}\n\npub(crate) fn is_zero<let N: u32, let MOD_BITS: u32>(val: [Field; N]) -> bool {\n    val.all(|limb| limb == 0)\n}\n\npub(crate) fn validate_in_field<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [Field; N],\n) {\n    // N.B. need to combine with validate_in_range if `self` limbs have not been range constrained\n    let mut p_minus_self: [Field; N] = [0; N];\n    let modulus: [Field; N] = params.modulus;\n    for i in 0..N {\n        p_minus_self[i] = modulus[i] - val[i];\n    }\n    let borrow_flags = unsafe { __validate_in_field_compute_borrow_flags(params, val) };\n    p_minus_self[0] += borrow_flags[0] as Field * TWO_POW_120;\n    for i in 1..N - 1 {\n        p_minus_self[i] += (borrow_flags[i] as Field * TWO_POW_120 - borrow_flags[i - 1] as Field);\n    }\n    p_minus_self[N - 1] -= borrow_flags[N - 2] as Field;\n    validate_in_range::<_, MOD_BITS>(p_minus_self);\n}\n\n/**\n* @brief Validate a BigNum instance is correctly range constrained to contain no more than Params::modulus_bits()\n**/\npub(crate) fn validate_in_range<let N: u32, let MOD_BITS: u32>(limbs: [Field; N]) {\n    for i in 0..(N - 1) {\n        limbs[i].assert_max_bit_size::<120>();\n    }\n    limbs[N - 1].assert_max_bit_size::<MOD_BITS - ((N - 1) * 120)>();\n}\n\n/**\n* @brief validate quotient produced from `evaluate_quadratic_expression` is well-formed\n* @description because the inputs into evaluate_quadratic_expression may cause the quotient to extend beyond `Params::modulus_bits`.\n*              We allow the quotient to extend 6 bits beyond Params::modulus_bits()\n*              Why is this?\n*              several factors:    1. quotient * modulus , limbs cannot overflow field boundary (254 bits)\n*                                  2. in `evaluate_quadratic_expression`, we require that for `expression - quotient * modulus`,\n*                                     limbs cannot exceed 246 bits (246 magic number due to a higher number adding extra range check gates)\n*              because of factor 2 and the fact that modulus limbs are 120 bits, quotient limbs cannot be >126 bits\n*\n*              Note: doesn't this mean that final_limb_bits should be constrained to be 126 bits, not modulus_bits() - ((N - 1) * 120) + 6?\n*              TODO: think about this more! we want the range constraint we apply to be as small as allowable as this is more efficient\n**/\npub(crate) fn validate_quotient_in_range<let N: u32, let MOD_BITS: u32>(limbs: [Field; N]) {\n    for i in 0..(N) {\n        limbs[i].assert_max_bit_size::<120>();\n    }\n    // Note: replace magic number 6 with definition\n    limbs[N - 1].assert_max_bit_size::<MOD_BITS - ((N - 1) * 120) + 6>();\n}\n\n// validate that lhs - rhs does not underflow i.e. lhs > rhs\npub(crate) fn validate_gt<let N: u32, let MOD_BITS: u32>(lhs: [Field; N], rhs: [Field; N]) {\n    // so we do... p - x - r = 0 and there might be borrow flags\n    // a - b = r\n    // p + a - b - r = 0\n    let (result, carry_flags, borrow_flags) = unsafe { __validate_gt_remainder(lhs, rhs) };\n    validate_in_range::<_, MOD_BITS>(result);\n\n    let mut addend: [Field; N] = [0; N];\n    let result_limb = lhs[0] - rhs[0] + addend[0] - result[0] - 1\n        + (borrow_flags[0] as Field - carry_flags[0] as Field) * TWO_POW_120;\n    assert(result_limb == 0);\n\n    for i in 1..N - 1 {\n        let prev_borrow_sub_carry = borrow_flags[i - 1] as Field - carry_flags[i - 1] as Field;\n        let borrow_sub_carry = borrow_flags[i] as Field - carry_flags[i] as Field;\n        let result_limb = lhs[i] - rhs[i] + addend[i] - result[i] - prev_borrow_sub_carry\n            + borrow_sub_carry * TWO_POW_120;\n        assert(result_limb == 0);\n    }\n\n    let result_limb = lhs[N - 1] - rhs[N - 1] + addend[N - 1]\n        - result[N - 1]\n        - borrow_flags[N - 2] as Field\n        + carry_flags[N - 2] as Field;\n    assert(result_limb == 0);\n}\n\npub(crate) fn neg<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [Field; N],\n) -> [Field; N] {\n    if std::runtime::is_unconstrained() {\n        // Safety: not need to constrain in unconstrained runtime\n        unsafe {\n            __neg(params, val)\n        }\n    } else {\n        // so we do... p - x - r = 0 and there might be borrow flags\n        let (result, borrow_flags) = unsafe { __neg_with_flags(params, val) };\n        validate_in_range::<_, MOD_BITS>(result);\n        let modulus = params.modulus;\n        let result_limb =\n            modulus[0] - val[0] - result[0] + (borrow_flags[0] as Field * TWO_POW_120);\n        assert(result_limb == 0);\n        for i in 1..N - 1 {\n            let result_limb = modulus[i] - val[i] - result[i] - borrow_flags[i - 1] as Field\n                + (borrow_flags[i] as Field * TWO_POW_120);\n            assert(result_limb == 0);\n        }\n        let result_limb =\n            modulus[N - 1] - val[N - 1] - result[N - 1] - borrow_flags[N - 2] as Field;\n        assert(result_limb == 0);\n        result\n    }\n}\n\npub(crate) fn add<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> [Field; N] {\n    if std::runtime::is_unconstrained() {\n        // Safety: not need to constrain in unconstrained runtime\n        unsafe {\n            __add(params, lhs, rhs)\n        }\n    } else {\n        // so we do... p - x - r = 0 and there might be borrow flags\n        let (result, carry_flags, borrow_flags, overflow_modulus) =\n            unsafe { __add_with_flags(params, lhs, rhs) };\n        validate_in_range::<_, MOD_BITS>(result);\n        let modulus = params.modulus;\n\n        let mut subtrahend: [Field; N] = [0; N];\n        if (overflow_modulus) {\n            subtrahend = modulus;\n        }\n        let borrow_sub_carry = borrow_flags[0] as Field - carry_flags[0] as Field;\n        let result_limb =\n            lhs[0] + rhs[0] - subtrahend[0] - result[0] + borrow_sub_carry * TWO_POW_120;\n        assert(result_limb == 0);\n        for i in 1..N - 1 {\n            let prev_borrow_sub_carry = borrow_flags[i - 1] as Field - carry_flags[i - 1] as Field;\n            let borrow_sub_carry = borrow_flags[i] as Field - carry_flags[i] as Field;\n            let result_limb = lhs[i] + rhs[i] - subtrahend[i] - result[i] - prev_borrow_sub_carry\n                + borrow_sub_carry * TWO_POW_120;\n            assert(result_limb == 0);\n        }\n        let borrow_sub_carry = borrow_flags[N - 2] as Field - carry_flags[N - 2] as Field;\n        let result_limb =\n            lhs[N - 1] + rhs[N - 1] - subtrahend[N - 1] - result[N - 1] - borrow_sub_carry;\n        assert(result_limb == 0);\n        result\n    }\n}\n\npub(crate) fn sub<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> [Field; N] {\n    if std::runtime::is_unconstrained() {\n        // Safety: not need to constrain in unconstrained runtime\n        unsafe {\n            __sub(params, lhs, rhs)\n        }\n    } else {\n        // so we do... p - x - r = 0 and there might be borrow flags\n        // a - b = r\n        // p + a - b - r = 0\n        let (result, carry_flags, borrow_flags, underflow) =\n            unsafe { __sub_with_flags(params, lhs, rhs) };\n        validate_in_range::<_, MOD_BITS>(result);\n        let modulus = params.modulus;\n\n        let mut addend: [Field; N] = [0; N];\n        if (underflow) {\n            addend = modulus;\n        }\n\n        let borrow_sub_carry = borrow_flags[0] as Field - carry_flags[0] as Field;\n        let result_limb = lhs[0] - rhs[0] + addend[0] - result[0] + borrow_sub_carry * TWO_POW_120;\n        assert(result_limb == 0);\n        for i in 1..N - 1 {\n            let prev_borrow_sub_carry = borrow_flags[i - 1] as Field - carry_flags[i - 1] as Field;\n            let borrow_sub_carry = borrow_flags[i] as Field - carry_flags[i] as Field;\n            let result_limb = lhs[i] - rhs[i] + addend[i] - result[i] - prev_borrow_sub_carry\n                + borrow_sub_carry * TWO_POW_120;\n            assert(result_limb == 0);\n        }\n        let borrow_sub_carry = borrow_flags[N - 2] as Field - carry_flags[N - 2] as Field;\n        let result_limb =\n            lhs[N - 1] - rhs[N - 1] + addend[N - 1] - result[N - 1] - borrow_sub_carry;\n        assert(result_limb == 0);\n        result\n    }\n}\n\n// Note: this method is expensive! Try to craft quadratic relations and directly evaluate them\n//       via evaluate_quadratic_expression\n// e.g. performing a sum of multiple multiplications and additions via `evaluate_quadratic_expression`\n//      will create much fewer constraints than calling `mul` and `add` directly\npub(crate) fn mul<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> [Field; N] {\n    let result = unsafe { __mul::<_, MOD_BITS>(params, lhs, rhs) };\n    if !std::runtime::is_unconstrained() {\n        evaluate_quadratic_expression(\n            params,\n            [[lhs]],\n            [[false]],\n            [[rhs]],\n            [[false]],\n            [result],\n            [true],\n        );\n    }\n    result\n}\n\n// Note: this method is expensive! Witness computation is extremely expensive as it requires modular exponentiation\npub(crate) fn div<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> [Field; N] {\n    assert(\n        params.has_multiplicative_inverse,\n        \"BigNum has no multiplicative inverse. Use udiv for unsigned integer division\",\n    );\n    let result = unsafe { __div::<_, MOD_BITS>(params, lhs, rhs) };\n    if !std::runtime::is_unconstrained() {\n        evaluate_quadratic_expression(\n            params,\n            [[result]],\n            [[false]],\n            [[rhs]],\n            [[false]],\n            [lhs],\n            [true],\n        );\n    }\n    result\n}\n\n/**\n* @brief udiv_mod performs integer division between numerator, divisor\n*\n* i.e. 1. floor(numerator / divisor) = quotient\n*      2. numerator % divisor = remainder\n*      3. divisor * quotient + remainder = numerator\n**/\npub(crate) fn udiv_mod<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    numerator: [Field; N],\n    divisor: [Field; N],\n) -> ([Field; N], [Field; N]) {\n    let (quotient, remainder) = unsafe { __udiv_mod(numerator, divisor) };\n\n    if !std::runtime::is_unconstrained() {\n        // self / divisor = quotient rounded\n        // quotient * divisor + remainder - self = 0\n        evaluate_quadratic_expression(\n            params,\n            [[quotient]],\n            [[false]],\n            [[divisor]],\n            [[false]],\n            [numerator, remainder],\n            [true, false],\n        );\n        // we need (remainder < divisor)\n        // implies (divisor - remainder > 0)\n        validate_gt::<_, MOD_BITS>(divisor, remainder);\n    }\n    (quotient, remainder)\n}\n\n/**\n* @brief udiv_mod performs integer division between numerator, divisor\n*\n* i.e. return param is floor(numerator / divisor)\n**/\npub(crate) fn udiv<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    numerator: [Field; N],\n    divisor: [Field; N],\n) -> [Field; N] {\n    udiv_mod::<_, MOD_BITS>(params, numerator, divisor).0\n}\n\n/**\n* @brief udiv_mod performs integer modular reduction\n*\n* i.e. 1. numerator % divisor = return value\n**/\npub(crate) fn umod<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    numerator: [Field; N],\n    divisor: [Field; N],\n) -> [Field; N] {\n    udiv_mod::<_, MOD_BITS>(params, numerator, divisor).1\n}\n","path":"/home/hgunduzoglu/nargo/github.com/noir-lang/noir-bignum/v0.5.2/src/fns/constrained_ops.nr"},"163":{"source":"use crate::utils::split_bits;\n\nuse crate::fns::{\n    constrained_ops::validate_quotient_in_range, unconstrained_helpers::__barrett_reduction,\n};\nuse crate::params::BigNumParams as P;\n\n/**\n * In this file:\n *\n * __compute_quadratic_expression_with_borrow_flags\n * __add_linear_expression\n * __compute_quadratic_expression_product\n * __compute_quadratic_expression\n * evaluate_quadratic_expression\n */\n\n/**\n* @brief Given a degree-2 BigNum expression that is equal to 0 mod p, compute the quotient and borrow flags \n* @description The expression is of the form:\n*\n* \\sum_{i=0}^{NUM_PRODUCTS - 1} ((\\sum_{j=0}^{LHS_N-1}lhs[i][j]) * (\\sum_{j=0}^{RHS_N-1}rhs[i][j])) + \\sum_{i=0}^{ADD_N - 1}linear_terms[i] = quotient * modulus\n*\n* The intent is to capture an arbitrary degree-2 expression within the limitations of Noir (no efficient dynamically-sized vectors)\n*\n* When performing BigNum arithmetic, we want to represent desired BigNum operations in a way that minimizes the number of modular reductions that are required.\n* This can be achieved by minimizing the number of degree-2 relations required.\n*\n* The borrow flags describe whether individual Field limbs will underflow when evaluating the above relation.\n* For example, when computing the product a * b - q * p = 0, it is possible that:\n*      1. a[0]*b[0] - p[0]*q[0] = -2^{120}\n*      2. a[0]*b[1] + a[1]*b[0] - p[0]*q[1] - p[1]*q[0] = 1\n* In the above example, the value represented by these two limbs is zero despite each limb being nonzero.\n* In this case, to correctly constrain the result, we must add (at least) 2^{120} from the first limb and subtract 1 from the second.\n*\n* @param lhs_terms a 2D array of BigNum\n* @param lhs_flags a 2D array of sign flags\n* @param rhs_terms a 2D array of BigNum\n* @param rhs_flags a 2D array of sign flags\n* @param linear_terms an array of BigNum\n* @param linear_flags an array of sign flags\n**/\nunconstrained fn __compute_quadratic_expression_with_borrow_flags<let N: u32, let MOD_BITS: u32, let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n    params: P<N, MOD_BITS>,\n    lhs_terms: [[[Field; N]; LHS_N]; NUM_PRODUCTS],\n    lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n    rhs_terms: [[[Field; N]; RHS_N]; NUM_PRODUCTS],\n    rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n    linear_terms: [[Field; N]; ADD_N],\n    linear_flags: [bool; ADD_N],\n) -> ([Field; N], [Field; N], [Field; 2 * N]) {\n    // TODO, validate we do not overflow N2 when multiplying and N when adding\n    let mut mulout_p = __compute_quadratic_expression_product(\n        params,\n        lhs_terms,\n        lhs_flags,\n        rhs_terms,\n        rhs_flags,\n        linear_terms,\n        linear_flags,\n    );\n    let mut mulout_n: [Field; 2 * N] = [0; 2 * N];\n    let mut relation_result: [Field; 2 * N] = split_bits::__normalize_limbs(mulout_p, 2 * N);\n\n    let modulus: [Field; N] = params.modulus;\n    let modulus_bits = MOD_BITS;\n    let (quotient, remainder) = __barrett_reduction(\n        relation_result,\n        params.redc_param,\n        modulus_bits,\n        modulus,\n        params.modulus_u60_x4,\n    );\n    assert(remainder == [0; N]);\n\n    for i in 0..N {\n        for j in 0..N {\n            mulout_n[i + j] += quotient[i] * modulus[j];\n        }\n    }\n\n    // compute borrow flags from mulout_p and mulout_n\n    let mut borrow_flags: [Field; 2 * N] = [0; 2 * N];\n    let borrow_shift: Field = 0x40000000000000000000000000000000000000000000000000000000000000; // 2^{246}\n    let borrow_carry: Field = 0x40000000000000000000000000000000; // 2^{246 - 120} = 2^{126}\n    let two_pow_120: Field = 0x1000000000000000000000000000000;\n    let downshift: Field = 1 / two_pow_120;\n\n    // determine whether we need to borrow from more significant limbs.\n    // initial limb is \"simple\" comparison operation\n    // TODO: check how expensive `lt` operator is w.r.t. witness generation\n    borrow_flags[0] = mulout_p[0].lt(mulout_n[0]) as Field;\n    // we have 2N - 2 borrow flags. The number of limbs from our product computation is 2N - 1\n    // and there is nothing to borrow against for the final limb.\n    let mut hi_bits = (mulout_p[0] - mulout_n[0] + (borrow_flags[0] * borrow_shift)) * downshift;\n    for i in 1..(N + N - 2) {\n        // compute the contribution from limb `i-1` that gets added into limb `i`, and add into limb `i`\n        // let hi_bits = (mulout_p.get(i - 1) - mulout_n.get(i - 1) + (borrow_flags.get(i - 1) * borrow_shift))\n        //     * downshift;\n        mulout_p[i] += hi_bits;\n\n        // determine whether negative limb values are greater than positive limb values\n        let underflow: Field =\n            mulout_p[i].lt(mulout_n[i] + (borrow_flags[i - 1] * borrow_carry)) as Field;\n        borrow_flags[i] = underflow;\n\n        hi_bits = (\n            mulout_p[i] - mulout_n[i] + (borrow_flags[i] * borrow_shift)\n                - (borrow_flags[i - 1] * borrow_carry)\n        )\n            * downshift;\n    }\n\n    (quotient, remainder, borrow_flags)\n}\n\n/**\n* @brief Computes the result of a linear combination of (possibly negative) BigNum values (unconstrained)\n**/\n// NOTE: modulus2 is structured such that all limbs will be greater than 0, even when subtracting.\n// To do this, when computing `p - x`, we ensure that each limb in `p` is greater than each limb in `x`.\n// We know that, for a valid bignum element, the limbs in `x` will be <2^{120}\n// Therefore each of the limbs in `p` (except the most significant) will borrow 2^{120} from the more significant limb.\n// Finally, to ensure we do not underflow in the most significant limb, we use `2p` instead of `p`\nunconstrained fn __add_linear_expression<let N: u32, let MOD_BITS: u32, let M: u32>(\n    params: P<N, MOD_BITS>,\n    x: [[Field; N]; M],\n    flags: [bool; M],\n) -> ([Field; N]) {\n    // TODO, validate we do not overflow N2 when multiplying and N when adding\n    let mut sum: [Field; N] = [0; N];\n    // TODO: ugly! Will fail if input array is empty\n    let modulus2: [Field; N] = params.double_modulus;\n    for i in 0..M {\n        if (flags[i]) {\n            for j in 0..N {\n                sum[j] = sum[j] + modulus2[j] - x[i][j];\n                // assert(x[i][j].lt(modulus2[j]));\n            }\n        } else {\n            for j in 0..N {\n                sum[j] = sum[j] + x[i][j];\n            }\n        }\n    }\n    // problem if we normalize when used in computing quotient\n    sum\n}\n\n/**\n* @brief computes the limb products of a quadratic expression\n* @details see __compute_quadratic_expression_with_borrow_flags for full description\n**/\nunconstrained fn __compute_quadratic_expression_product<let N: u32, let MOD_BITS: u32, let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n    params: P<N, MOD_BITS>,\n    lhs_terms: [[[Field; N]; LHS_N]; NUM_PRODUCTS],\n    lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n    rhs_terms: [[[Field; N]; RHS_N]; NUM_PRODUCTS],\n    rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n    linear_terms: [[Field; N]; ADD_N],\n    linear_flags: [bool; ADD_N],\n) -> [Field; 2 * N] {\n    // TODO, validate we do not overflow N2 when multiplying and N when adding\n    let mut lhs: [[Field; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n    let mut rhs: [[Field; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n    let mut add: [Field; N] = [0; N];\n\n    for i in 0..NUM_PRODUCTS {\n        lhs[i] = __add_linear_expression(params, lhs_terms[i], lhs_flags[i]);\n        rhs[i] = __add_linear_expression(params, rhs_terms[i], rhs_flags[i]);\n    }\n\n    let add: [Field; N] = __add_linear_expression(params, linear_terms, linear_flags);\n\n    let mut mulout: [Field; 2 * N] = [0; 2 * N];\n\n    for i in 0..N {\n        for j in 0..N {\n            for k in 0..NUM_PRODUCTS {\n                mulout[i + j] += (lhs[k][i] * rhs[k][j]);\n            }\n        }\n        mulout[i] += add[i];\n    }\n    mulout\n}\n\n/**\n* @brief computes the quotient/remainder of a quadratic expression\n* @details see __compute_quadratic_expression_with_borrow_flags for full description\n**/\npub(crate) unconstrained fn __compute_quadratic_expression<let N: u32, let MOD_BITS: u32, let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n    params: P<N, MOD_BITS>,\n    lhs_terms: [[[Field; N]; LHS_N]; NUM_PRODUCTS],\n    lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n    rhs_terms: [[[Field; N]; RHS_N]; NUM_PRODUCTS],\n    rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n    linear_terms: [[Field; N]; ADD_N],\n    linear_flags: [bool; ADD_N],\n) -> ([Field; N], [Field; N]) {\n    // TODO, validate we do not overflow N2 when multiplying and N when adding\n    let mulout = __compute_quadratic_expression_product(\n        params,\n        lhs_terms,\n        lhs_flags,\n        rhs_terms,\n        rhs_flags,\n        linear_terms,\n        linear_flags,\n    );\n    let mut relation_result: [Field; 2 * N] = split_bits::__normalize_limbs(mulout, 2 * N);\n\n    // size 4\n    // a[3] * b[3] = a[6] = 7\n    // TODO: ugly! Will fail if input slice is empty\n    let k = MOD_BITS;\n\n    let (quotient, remainder) = __barrett_reduction(\n        relation_result,\n        params.redc_param,\n        k,\n        params.modulus,\n        params.modulus_u60_x4,\n    );\n\n    let mut q = quotient;\n    let mut r = remainder;\n    (q, r)\n}\n\n/**\n* @brief Constrain a degree-2 BigNum expression to be equal to 0 modulo self.modulus\n* @description The expression is of the form (when evaluated as an integer relation):\n*\n* \\sum_{i=0}^{NUM_PRODUCTS - 1} ((\\sum_{j=0}^{LHS_N-1}lhs[i][j]) * (\\sum_{j=0}^{RHS_N-1}rhs[i][j])) + \\sum_{i=0}^{ADD_N - 1}linear_terms[i] - quotient * modulus = 0\n*\n* The intent is to capture an arbitrary degree-2 expression within the limitations of Noir (no efficient dynamically-sized vectors)\n*\n* Note: this method requires the remainder term of the expression to be ZERO\n* When performing BigNum arithmetic, we want to represent desired BigNum operations in a way that minimizes the number of modular reductions that are required.\n* This can be achieved by minimizing the number of degree-2 relations required.\n*\n* The expensive parts of this algorithm are the following:\n*      1. evaluating the limb products required to compute `lhs * rhs`\n*      2. applying range constraints to validate the result is 0\n*\n* Range constraints are needed for the following reason:\n* When evaluating the above expression over N-limb BigNum objects, the result will consist of 2N - 1 limbs.\n* Each limb will be in the range [0, ..., 2^{240 + twiddle_factor} - 1] (twiddle_factor needs to be less than 6).\n* Because of the subtractions, the limbs may underflow and represent NEGATIVE values.\n* To account for this, we allow the Prover to borrow values from more significant limbs and add them into less significant limbs\n* (explicitly, we can borrow 2^{126} from limb `i + 1` to add `2^{246}` into `i`).\n* To ensure this has been done correctly, we validate that the borrow-adjusted limbs are all-zero for the first 120 bits.\n* We do *this* by multiplying the borrow-adjusted limbs by 1 / 2^{120} modulo CircutModulus, and we validate the result is in the range [0, ..., 2^{126} - 1].\n* TODO: explain why this check works. It's statistically sound but not perfectly sound. Chance of the check failing is ~1 in 2^{120}\n* I believe this is the most efficient way of performing the zero-check for this relation as it only requires `2N - 2` 126-bit range checks.\n* TODO: explain why we apply a 126-bit range check, this feels like a magic number\n* (it is. we could go higher, up to the number of bits in the CircuitModulus - 121, but 126 *should be* sufficient and is much cheaper)\n* TODO: apply checks in this method to validate twiddle_factor does not exceed 6\n* \n* @param lhs_terms a 2D array of BigNum\n* @param lhs_flags a 2D array of sign flags\n* @param rhs_terms a 2D array of BigNum\n* @param rhs_flags a 2D array of sign flags\n* @param linear_terms an array of BigNum\n* @param linear_flags an array of sign flags\n**/\npub(crate) fn evaluate_quadratic_expression<let N: u32, let MOD_BITS: u32, let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n    params: P<N, MOD_BITS>,\n    lhs_terms: [[[Field; N]; LHS_N]; NUM_PRODUCTS],\n    lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n    rhs_terms: [[[Field; N]; RHS_N]; NUM_PRODUCTS],\n    rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n    linear_terms: [[Field; N]; ADD_N],\n    linear_flags: [bool; ADD_N],\n) {\n    // use an unconstrained function to compute the value of the quotient\n    let (quotient, _, borrow_flags): ([Field; N], [Field; N], [Field; 2 * N]) = unsafe {\n        __compute_quadratic_expression_with_borrow_flags::<_, MOD_BITS, _, _, _, _>(\n            params,\n            lhs_terms,\n            lhs_flags,\n            rhs_terms,\n            rhs_flags,\n            linear_terms,\n            linear_flags,\n        )\n    };\n    // constrain the quotient to be in the range [0, ..., 2^{m} - 1], where `m` is log2(modulus) rounded up.\n    // Additionally, validate quotient limbs are also in the range [0, ..., 2^{120} - 1]\n    validate_quotient_in_range::<_, MOD_BITS>(quotient);\n    // TODO, validate we do not overflow N2 when multiplying and N when adding\n    // (should be a compile-time check...unconstrained function?)\n    // Compute the linear sums that represent lhs_1, rhs_1, lhs_2, rhs_2, add\n    let mut t0: [[Field; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n    let mut t1: [[Field; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n    let mut t4: [Field; N] = [0; N];\n\n    // TODO: this is super nasty as it requires a multiplication\n    let double_modulus: [Field; N] = params.double_modulus;\n    for k in 0..NUM_PRODUCTS {\n        for i in 0..N {\n            for j in 0..LHS_N {\n                // note: if is_negative is not known at comptime this is very expensive\n                if (lhs_flags[k][j]) {\n                    t0[k][i] -= lhs_terms[k][j][i];\n                    t0[k][i] += double_modulus[i];\n                } else {\n                    t0[k][i] += lhs_terms[k][j][i];\n                }\n            }\n            for j in 0..RHS_N {\n                if (rhs_flags[k][j]) {\n                    t1[k][i] -= rhs_terms[k][j][i];\n                    t1[k][i] += double_modulus[i];\n                } else {\n                    t1[k][i] += rhs_terms[k][j][i];\n                }\n            }\n        }\n    }\n    for i in 0..N {\n        for j in 0..ADD_N {\n            if (linear_flags[j]) {\n                t4[i] -= linear_terms[j][i];\n                t4[i] += double_modulus[i];\n            } else {\n                t4[i] += linear_terms[j][i];\n            }\n        }\n    }\n\n    // We want to evaluate that t0 * t1 + t2 * t3 + t4 - Quotient * Modulus = 0, evaluated over the integers\n    // For this we need to be able to borrow values from more-significant limbs into less-significant limbs,\n    // so that we can ensure that no limbs will underflow for an honest Prover\n    let mut product_limbs: [Field; 2 * N] = [0; 2 * N];\n\n    // Compute the product t0 * t1 + t2 * t3 + t4 - Quotient * Modulus\n    // TODO: this is super nasty as it requires a multiplication\n    for i in 0..N {\n        for j in 0..N {\n            for k in 0..NUM_PRODUCTS {\n                if k == 0 {\n                    let new_term = t0[k][i] * t1[k][j] - quotient[i] * params.modulus[j];\n                    std::as_witness(new_term); // width-4 optimization (n.b. might not be optimal if t2, t3 input arrays are nonzero)\n                    product_limbs[i + j] += new_term;\n                } else {\n                    product_limbs[i + j] += t0[k][i] * t1[k][j];\n                }\n            }\n            if (NUM_PRODUCTS == 0) {\n                product_limbs[i + j] -= quotient[i] * params.modulus[j];\n            }\n        }\n        product_limbs[i] += t4[i];\n    }\n\n    // each limb product represents the sum of 120-bit products.\n    // by setting the borrow value to 2^246 we are restricting this method's completeness to expressions\n    // where no more than 64 limb products are summed together.\n    // TODO: check in unconstrained function that this condition is satisfied\n    // TODO: define trade-offs regarding the value of borrow_shift\n    // (the larger the value, the greater the range check that is required on product_limbs)\n    // (126-bit range check is a sweet spot for the barretenberg backend as it decomposes into 9 14-bit range checks)\n    // (the barretenberg backend can evaluate these in 5.25 gates. 127 bits costs 6.5 gates)\n    let borrow_shift: Field = 0x40000000000000000000000000000000000000000000000000000000000000; // 2^{246}\n    let borrow_carry: Field = 0x40000000000000000000000000000000; // 2^{246 - 120} = 2^{126}\n    // N.B. borrow_flags is `Field` type because making it `bool` would apply boolean constraints to all `N2` array entries.\n    //      We only use `N2 - 2` borrow flags so applying 1-bit range checks on the array elements we use is more efficient.\n    // TODO: Once it is possible to perform arithmetic on generics we can use `borrow_flags: [bool;N+N-2]` to avoid this issue\n    borrow_flags[0].assert_max_bit_size::<1>();\n    product_limbs[0] += borrow_flags[0] * borrow_shift;\n    for i in 1..(N + N - 2) {\n        borrow_flags[i].assert_max_bit_size::<1>();\n        product_limbs[i] += (borrow_flags[i] * borrow_shift - borrow_flags[i - 1] * borrow_carry);\n    }\n    product_limbs[N + N - 2] -= borrow_flags[N + N - 3] * borrow_carry;\n\n    // Final step: Validate `product_limbs` represents the integer value `0`\n    // Each element `i` in `product_limbs` overlaps in bitrange with element `i+1`, EXCEPT for the low 120 bits\n    // i.e. we need to do the following for each limb `i`:\n    //      1. validate the limb's low-120 bits equals zero\n    //      2. compute the limb \"carry\" by right-shifting by 2^{120}\n    //      3. add the carry into limb `i+1`\n    // We can efficiently do all of the above by multiplying the limb by 2^{-120} and constraining the result to be <2^{126}\n    // (if the low 120 bits are nonzero the result will underflow and product a large value that cannot be range constrained)\n    // (the probability of an underflow value satisfying a 126-bit range constraint is approx. 2^{k - 126},\n    //  where k is the number of bits in the prime field)\n    // We then add the result into the next limb and repeat.\n    let hi_shift: Field = 0x1000000000000000000000000000000;\n    let hi_downshift: Field = 1 / hi_shift;\n    for i in 0..N + N - 2 {\n        product_limbs[i] *= hi_downshift;\n        std::as_witness(product_limbs[i]);\n        product_limbs[i].assert_max_bit_size::<126>(); // N.B. is this sufficient? going beyond 126 costs us 1 gate per limb\n        product_limbs[i + 1] += product_limbs[i];\n    }\n    // the most significant limb has no limb to \"carry\" values into - the entire limb must equal zero\n    assert(product_limbs[N + N - 2] == 0);\n}\n","path":"/home/hgunduzoglu/nargo/github.com/noir-lang/noir-bignum/v0.5.2/src/fns/expressions.nr"},"165":{"source":"/**\n* @brief construct a BigNum instance out of an array of bytes in BIG ENDIAN format\n* @description: each 120-bit limb represents 15 bytes, we require that the size of the byte array\n*               is precisely large enough to cover MOD_BITS\n* @param x: input byte array\n**/\npub(crate) fn from_be_bytes<let N: u32, let MOD_BITS: u32, let NBytes: u32>(\n    x: [u8; NBytes],\n) -> [Field; N] {\n    let num_bits = NBytes * 8;\n    assert(num_bits >= MOD_BITS);\n    assert(num_bits - MOD_BITS < 8);\n    let mut result = [0; N];\n\n    let excess_bytes = N * 15 - NBytes;\n    let final_limb_bytes = 15 - excess_bytes;\n    let mut limb: Field = 0;\n    let mut k = 0;\n    for _j in 0..final_limb_bytes {\n        limb *= 256;\n        limb += x[k] as Field;\n        k += 1;\n    }\n    result[N - 1] = limb;\n\n    for i in 1..N {\n        let mut limb: Field = 0;\n        for _j in 0..15 {\n            limb *= 256;\n            limb += x[k] as Field;\n            k += 1;\n        }\n        result[N - i - 1] = limb;\n    }\n\n    let most_significant_byte: Field = x[0] as Field;\n\n    most_significant_byte.assert_max_bit_size::<8 - (NBytes * 8 - MOD_BITS)>();\n    result\n}\n\npub(crate) fn to_le_bytes<let N: u32, let MOD_BITS: u32, let NBytes: u32>(\n    val: [Field; N],\n) -> [u8; NBytes] {\n    let nbytes = (MOD_BITS / 8) + (MOD_BITS % 8 != 0) as u32;\n    assert(nbytes <= NBytes);\n\n    let mut result: [u8; NBytes] = [0; NBytes];\n    for i in 0..N - 1 {\n        let limb_bytes: [u8; 15] = val[i].to_le_bytes();\n        for j in 0..15 {\n            result[i * 15 + j] = limb_bytes[j];\n        }\n    }\n    let last_limb_bytes: [u8; 15] = val[N - 1].to_le_bytes();\n    let num_last_bytes = (NBytes - (N - 1) * 15);\n    for i in 0..num_last_bytes {\n        result[(N - 1) * 15 + i] = last_limb_bytes[i];\n    }\n    result\n}\n","path":"/home/hgunduzoglu/nargo/github.com/noir-lang/noir-bignum/v0.5.2/src/fns/serialization.nr"},"166":{"source":"use crate::utils::split_bits;\nuse crate::utils::u60_representation::U60Repr;\n\nuse crate::fns::unconstrained_ops::{__add, __eq, __mul, __neg, __one, __pow};\nuse crate::params::BigNumParams as P;\n\nglobal TWO_POW_60: u64 = 0x1000000000000000;\n\n/**\n * In this file:\n *\n * __validate_in_field_compute_borrow_flags\n * __validate_gt_remainder\n * __neg_with_flags\n * __add_with_flags\n * __sub_with_flags\n * __barrett_reduction\n * __tonelli_shanks_sqrt\n */\n\npub(crate) unconstrained fn __from_field<let N: u32>(field: Field) -> [Field; N] {\n    // cast the field to a u60 representation\n    let res_u60: U60Repr<N, 2> = U60Repr::from_field(field);\n    let result: [Field; N] = U60Repr::into(res_u60);\n    result\n}\n\npub(crate) unconstrained fn __validate_in_field_compute_borrow_flags<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [Field; N],\n) -> [bool; N] {\n    let mut flags: [bool; N] = [false; N];\n    let modulus: [Field; N] = params.modulus;\n    flags[0] = modulus[0].lt(val[0]);\n    for i in 1..N - 1 {\n        flags[i] = modulus[i].lt(val[i] + flags[i - 1] as Field);\n    }\n    flags\n}\n\npub(crate) unconstrained fn __validate_gt_remainder<let N: u32>(\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> ([Field; N], [bool; N], [bool; N]) {\n    let a_u60: U60Repr<N, 2> = From::from(lhs);\n    let mut b_u60: U60Repr<N, 2> = From::from(rhs);\n\n    let underflow = b_u60.gte(a_u60);\n    b_u60 += U60Repr::one();\n    assert(underflow == false, \"BigNum::validate_gt check fails\");\n    let mut result_u60: U60Repr<N, 2> = U60Repr { limbs: [0; 2 * N] };\n\n    let mut carry_in: u64 = 0;\n    let mut borrow_in: u64 = 0;\n    let mut borrow_flags: [bool; N] = [false; N];\n    let mut carry_flags: [bool; N] = [false; N];\n    for i in 0..2 * N {\n        let mut add_term: u64 = a_u60.limbs[i] + carry_in;\n        let mut carry = (add_term >= TWO_POW_60) as u64;\n        add_term -= carry * TWO_POW_60;\n        carry_in = carry;\n\n        let sub_term = b_u60.limbs[i] + borrow_in;\n        let mut borrow = (sub_term > add_term) as u64;\n        result_u60.limbs[i] = borrow * TWO_POW_60 + add_term - sub_term;\n\n        borrow_in = borrow;\n\n        if ((i & 1) == 1) {\n            // Only set `borrow` and `carry` if they differ\n            if (carry != borrow) {\n                carry_flags[i / 2] = carry as bool;\n                borrow_flags[i / 2] = borrow as bool;\n            }\n        }\n    }\n    let result = U60Repr::into(result_u60);\n    (result, carry_flags, borrow_flags)\n}\n\npub(crate) unconstrained fn __neg_with_flags<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [Field; N],\n) -> ([Field; N], [bool; N]) {\n    let x_u60: U60Repr<N, 2> = From::from(val);\n    let mut result_u60: U60Repr<N, 2> = U60Repr { limbs: [0; 2 * N] };\n\n    let mut borrow_in: u64 = 0;\n\n    let mut borrow_flags: [bool; N] = [false; N];\n    for i in 0..2 * N {\n        let sub_term = x_u60.limbs[i] + borrow_in;\n        let borrow = (sub_term > params.modulus_u60.limbs[i]) as u64;\n        result_u60.limbs[i] = borrow * TWO_POW_60 + params.modulus_u60.limbs[i] - sub_term;\n\n        borrow_in = borrow;\n        if ((i & 1) == 1) {\n            borrow_flags[i / 2] = borrow as bool;\n        }\n    }\n    let result = U60Repr::into(result_u60);\n    (result, borrow_flags)\n}\n\npub(crate) unconstrained fn __add_with_flags<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> ([Field; N], [bool; N], [bool; N], bool) {\n    let a_u60: U60Repr<N, 2> = From::from(lhs);\n    let b_u60: U60Repr<N, 2> = From::from(rhs);\n    let add_u60 = a_u60 + b_u60;\n\n    let overflow = add_u60.gte(params.modulus_u60);\n\n    let mut subtrahend_u60: U60Repr<N, 2> = U60Repr { limbs: [0; 2 * N] };\n    let mut result_u60: U60Repr<N, 2> = U60Repr { limbs: [0; 2 * N] };\n\n    if overflow {\n        subtrahend_u60 = params.modulus_u60;\n    }\n\n    let mut carry_in: u64 = 0;\n    let mut borrow_in: u64 = 0;\n    let mut borrow_flags: [bool; N] = [false; N];\n    let mut carry_flags: [bool; N] = [false; N];\n    for i in 0..2 * N {\n        let mut add_term: u64 = a_u60.limbs[i] + b_u60.limbs[i] + carry_in;\n        let mut carry = (add_term >= TWO_POW_60) as u64;\n        add_term -= carry * TWO_POW_60;\n        carry_in = carry;\n\n        let sub_term = subtrahend_u60.limbs[i] + borrow_in;\n        let mut borrow = (sub_term > add_term) as u64;\n        result_u60.limbs[i] = borrow * TWO_POW_60 + add_term - sub_term;\n        borrow_in = borrow;\n\n        if ((i & 1) == 1) {\n            // Only set `borrow` and `carry` if they differ\n            if (carry != borrow) {\n                let idx = (i - 1) / 2;\n                carry_flags[idx] = carry as bool;\n                borrow_flags[idx] = borrow as bool;\n            }\n        }\n    }\n    let result = U60Repr::into(result_u60);\n\n    (result, carry_flags, borrow_flags, overflow)\n}\n\npub(crate) unconstrained fn __sub_with_flags<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> ([Field; N], [bool; N], [bool; N], bool) {\n    let a_u60: U60Repr<N, 2> = U60Repr::from(lhs);\n    let b_u60: U60Repr<N, 2> = U60Repr::from(rhs);\n\n    let underflow = b_u60.gte(a_u60 + U60Repr::one());\n\n    let addend_u60: U60Repr<N, 2> = if underflow {\n        params.modulus_u60\n    } else {\n        U60Repr { limbs: [0; 2 * N] }\n    };\n    let mut result_u60: U60Repr<N, 2> = U60Repr { limbs: [0; 2 * N] };\n\n    let mut carry_in: u64 = 0;\n    let mut borrow_in: u64 = 0;\n    let mut borrow_flags: [bool; N] = [false; N];\n    let mut carry_flags: [bool; N] = [false; N];\n    for i in 0..2 * N {\n        let mut add_term: u64 = a_u60.limbs[i] + addend_u60.limbs[i] + carry_in;\n        let mut carry = (add_term >= TWO_POW_60) as u64;\n        add_term -= carry * TWO_POW_60;\n        carry_in = carry;\n\n        let sub_term = b_u60.limbs[i] + borrow_in;\n        let mut borrow = (sub_term > add_term) as u64;\n        result_u60.limbs[i] = borrow * TWO_POW_60 + add_term - sub_term;\n        borrow_in = borrow;\n\n        if ((i & 1) == 1) {\n            // Only set `borrow` and `carry` if they differ\n            if (carry != borrow) {\n                carry_flags[i / 2] = carry as bool;\n                borrow_flags[i / 2] = borrow as bool;\n            }\n        }\n    }\n    let result = U60Repr::into(result_u60);\n    (result, carry_flags, borrow_flags, underflow)\n}\n\n/**\n * @brief BARRETT_REDUCTION_OVERFLOW_BITS defines how large an input to barrett reduction can be\n * @details maximum value = modulus^2 <<BARRETT_REDUCTION_OVERFLOW_BITS\n *          see __barrett_reduction for more details\n **/\ncomptime global BARRETT_REDUCTION_OVERFLOW_BITS: u32 = 4;\n\npub(crate) unconstrained fn __barrett_reduction<let N: u32>(\n    x: [Field; 2 * N],\n    redc_param: [Field; N],\n    k: u32,\n    modulus: [Field; N],\n    modulus_u60: U60Repr<N, 4>,\n) -> ([Field; N], [Field; N]) {\n    // for each i in 0..(N + N), adds x[i] * redc_param[j] to mulout[i + j] for each j in 0..N\n    let mut mulout: [Field; 3 * N] = [0; 3 * N];\n    for i in 0..(N + N) {\n        for j in 0..N {\n            mulout[i + j] += x[i] * redc_param[j];\n        }\n    }\n\n    mulout = split_bits::__normalize_limbs(mulout, 3 * N - 1);\n    let mulout_u60: U60Repr<N, 6> = U60Repr::new(mulout);\n\n    // When we apply the barrett reduction, the maximum value of the output will be\n    // <= p * (1 + x/2^{2k})\n    // where p = modulus,\n    //       x = reduction input\n    // if x > p * p, we need k to be larger than modulus_bits()\n    // we hardcode k = 4, which means that the maximum value of x is approx. 16 * p * p\n    // this should be larger than most values put into `evaluate_quadratic_expression`\n    // TODO: try and detect cases where x might be too large at comptime\n    // N.B. BARRETT_REDUCTION_OVERFLOW_BITS affects how `redc_param` is generated.\n    // `redc_param` = 2^{modulus_bits() * 2 + BARRETT_REDUCTION_OVERFLOW_BITS} / modulus\n    // NOTE: very niche edge case error that we need to be aware of:\n    //       N must be large enough to cover the modulus *plus* BARRETT_REDUCTION_OVERFLOW_BITS\n    //       i.e. a 359-bit prime needs (I think) 4 limbs to represent or we may overflow when calling __barrett_reduction\n    let mut quotient_u60 = mulout_u60.shr((k + k + BARRETT_REDUCTION_OVERFLOW_BITS));\n\n    // N.B. we assume that the shifted quotient cannot exceed 2 times original bit size.\n    //      (partial_quotient_full should be just slightly larger than the modulus, we could probably represent with a size N+1 array)\n    let partial_quotient_full: [Field; 3 * N] = quotient_u60.into_field_array();\n\n    // quotient_mul_modulus_normalized can never exceed input value `x` so can fit into size-2 array\n    let mut quotient_mul_modulus_normalized: [Field; 2 * N] = [0; 2 * N];\n\n    // First, accumulate the products into quotient_mul_modulus_normalized\n    for j in 0..N {\n        for i in 0..(N + N - j) {\n            quotient_mul_modulus_normalized[i + j] += partial_quotient_full[i] * modulus[j];\n        }\n    }\n\n    // Then, split the accumulated values and propagate higher bits\n    for i in 0..(N + N) {\n        let (lo, hi) = split_bits::split_120_bits(quotient_mul_modulus_normalized[i]);\n        quotient_mul_modulus_normalized[i] = lo;\n\n        // Propagate higher bits to the next index\n        // TODO: what is faster, leaving this if statement in or out?\n        // (array is size-1 too large so we can tolerate adding 0 into max element)\n        if (i + 1 < N + N) {\n            quotient_mul_modulus_normalized[i + 1] += hi;\n        }\n    }\n\n    let quotient_mul_modulus_u60: U60Repr<N, 4> = U60Repr::new(quotient_mul_modulus_normalized);\n    // convert the input into U60Repr\n    let x_u60: U60Repr<N, 4> = U60Repr::new(x);\n    let mut remainder_u60 = x_u60 - quotient_mul_modulus_u60;\n    // barrett reduction is quirky so might need to remove a few modulus_u60 from the remainder\n    if (remainder_u60.gte(modulus_u60)) {\n        remainder_u60 = remainder_u60 - modulus_u60;\n        quotient_u60.increment();\n    }\n    if (remainder_u60.gte(modulus_u60)) {\n        remainder_u60 = remainder_u60 - modulus_u60;\n        quotient_u60.increment();\n    }\n    if (remainder_u60.gte(modulus_u60)) {\n        remainder_u60 = remainder_u60 - modulus_u60;\n        quotient_u60.increment();\n    }\n\n    let q: [Field; N] = U60Repr::into(quotient_u60);\n    let r: [Field; N] = U60Repr::into(remainder_u60);\n\n    (q, r)\n}\n\n/**\n* @brief compute the log of the size of the primitive root\n* @details find the maximum value k where x^k = 1, where x = primitive root\n*          This is needed for our Tonelli-Shanks sqrt algorithm\n**/\npub(crate) unconstrained fn __primitive_root_log_size<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n) -> u32 {\n    let mut target: U60Repr<N, 2> = params.modulus_u60 - U60Repr::one();\n    let mut result: u32 = 0;\n    for _ in 0..MOD_BITS {\n        let lsb_is_one = (target.limbs[0] & 1) == 1;\n        if (lsb_is_one) {\n            break;\n        }\n        result += 1;\n        target.shr1();\n    }\n    result\n}\n\n/**\n* @brief inner loop fn for `find_multiplive_generator`\n* @details recursive function to get around the lack of a `while` keyword\n**/\nunconstrained fn __recursively_find_multiplicative_generator<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    target: [Field; N],\n    p_minus_one_over_two: [Field; N],\n) -> (bool, [Field; N]) {\n    let exped = __pow(params, target, p_minus_one_over_two);\n    let one: [Field; N] = __one();\n    let neg_one = __neg(params, one);\n    let found = __eq(exped, neg_one);\n    let mut result: (bool, [Field; N]) = (found, target);\n    if (!found) {\n        let _target = __add(params, target, one);\n        result = __recursively_find_multiplicative_generator::<_, MOD_BITS>(\n            params,\n            _target,\n            p_minus_one_over_two,\n        );\n    }\n    result\n}\n\n/**\n* @brief find multiplicative generator `g` where `g` is the smallest value that is not a quadratic residue\n*        i.e. smallest g where g^2 = -1\n* @note WARNING if multiplicative generator does not exist, this function will enter an infinite loop!\n**/\npub(crate) unconstrained fn __multiplicative_generator<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n) -> [Field; N] {\n    let mut target: [Field; N] = __one();\n    let p_minus_one_over_two: U60Repr<N, 2> = (params.modulus_u60 - U60Repr::one()).shr(1);\n    let p_minus_one_over_two: [Field; N] = U60Repr::into(p_minus_one_over_two);\n    let (_, target) = __recursively_find_multiplicative_generator::<_, MOD_BITS>(\n        params,\n        target,\n        p_minus_one_over_two,\n    );\n    target\n}\n\npub(crate) unconstrained fn __tonelli_shanks_sqrt_inner_loop_check<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    t2m: [Field; N],\n    i: u32,\n) -> u32 {\n    let one: [Field; N] = __one();\n    let is_one = __eq(t2m, one);\n    let mut result = i;\n    if (!is_one) {\n        let t2m = __mul::<_, MOD_BITS>(params, t2m, t2m);\n        let i = i + 1;\n        result = __tonelli_shanks_sqrt_inner_loop_check::<_, MOD_BITS>(params, t2m, i);\n    }\n    result\n}\n","path":"/home/hgunduzoglu/nargo/github.com/noir-lang/noir-bignum/v0.5.2/src/fns/unconstrained_helpers.nr"},"167":{"source":"use crate::fns::constrained_ops::derive_from_seed;\nuse crate::fns::unconstrained_helpers::{\n    __barrett_reduction, __multiplicative_generator, __primitive_root_log_size,\n    __tonelli_shanks_sqrt_inner_loop_check,\n};\nuse crate::params::BigNumParams as P;\nuse crate::utils::split_bits;\nuse crate::utils::u60_representation::U60Repr;\n\n/**\n * In this file:\n *\n * __one\n * __derive_from_seed\n * __eq\n * __is_zero\n * __neg\n * __add\n * __sub\n * __mul_with_quotient\n * __mul\n * __div\n * __udiv_mod\n * __invmod\n * __pow\n * __batch_invert\n * __batch_invert_slice\n */\n\npub(crate) unconstrained fn __one<let N: u32>() -> [Field; N] {\n    let mut limbs: [Field; N] = [0; N];\n    limbs[0] = 1;\n    limbs\n}\n\n/// Deterministically derives a big_num from a seed value.\n///\n/// Takes a seed byte array and generates a big_num in the range [0, modulus-1].\n///\n/// ## Value Parameters\n///\n/// - `params`: The BigNum parameters containing modulus and reduction info\n/// - `seed`:  Input seed bytes to derive from.\n///\n/// ## Returns\n///\n///  An array of field elements derived from the seed (the limbs of the big_num)\npub(crate) unconstrained fn __derive_from_seed<let N: u32, let MOD_BITS: u32, let SeedBytes: u32>(\n    params: P<N, MOD_BITS>,\n    seed: [u8; SeedBytes],\n) -> [Field; N] {\n    let out = derive_from_seed::<N, MOD_BITS, SeedBytes>(params, seed);\n    out\n}\n\npub(crate) unconstrained fn __eq<let N: u32>(lhs: [Field; N], rhs: [Field; N]) -> bool {\n    lhs == rhs\n}\n\npub(crate) unconstrained fn __is_zero<let N: u32>(limbs: [Field; N]) -> bool {\n    let mut result: bool = true;\n    for i in 0..N {\n        result = result & (limbs[i] == 0);\n    }\n\n    result\n}\n\n/**\n* @brief given an input `x`, compute `2p - x` (unconstrained)\n*\n* @description we subtract the input from double the modulus, because all constrained BigNum operations\n*              only guarantee that the output is in the range [0, ceil(log2(p))].\n*              I.E. the input may be larger than the modulus `p`.\n*              In order to ensure this operation does not underflow, we compute `2p - x` instead of `p - x`.\n*              N.B. constrained BigNum operations do not fully constrain outputs to be in the range [0, p-1]\n*              because such a check is expensive and usually unneccesary.\n*/\npub(crate) unconstrained fn __neg<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    limbs: [Field; N],\n) -> [Field; N] {\n    let f: [Field; N] = limbs;\n    let x_u60: U60Repr<N, 2> = U60Repr::from(f);\n    U60Repr::into(params.modulus_u60 - x_u60)\n}\n\npub(crate) unconstrained fn __add<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> [Field; N] {\n    let x_u60: U60Repr<N, 2> = U60Repr::from(lhs);\n    let y_u60: U60Repr<N, 2> = U60Repr::from(rhs);\n\n    let mut z_u60 = x_u60 + y_u60;\n\n    if z_u60.gte(params.modulus_u60) {\n        z_u60 = z_u60 - params.modulus_u60;\n    }\n    U60Repr::into(z_u60)\n}\n\n/**\n* @brief given inputs `x, y` compute 2p + x - y (unconstrained)\n* @description see `__neg` for why we use 2p instead of p\n**/\npub(crate) unconstrained fn __sub<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> [Field; N] {\n    __add(params, lhs, __neg(params, rhs))\n}\n\npub(crate) unconstrained fn __mul_with_quotient<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> ([Field; N], [Field; N]) {\n    let mut mul: [Field; 2 * N] = [0; 2 * N];\n    for i in 0..N {\n        for j in 0..N {\n            mul[i + j] += lhs[i] * rhs[j];\n        }\n    }\n    let to_reduce = split_bits::__normalize_limbs(mul, 2 * N);\n    let (q, r) = __barrett_reduction(\n        to_reduce,\n        params.redc_param,\n        MOD_BITS,\n        params.modulus,\n        params.modulus_u60_x4,\n    );\n\n    (q, r)\n}\n\npub(crate) unconstrained fn __mul<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> [Field; N] {\n    let (_, b) = __mul_with_quotient::<_, MOD_BITS>(params, lhs, rhs);\n    b\n}\n\npub(crate) unconstrained fn __div<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    numerator: [Field; N],\n    divisor: [Field; N],\n) -> [Field; N] {\n    let inv_divisor = __invmod::<_, MOD_BITS>(params, divisor);\n    __mul::<_, MOD_BITS>(params, numerator, inv_divisor)\n}\n\n/**\n* @brief __udiv_mod performs *unconstrained* integer division between numerator, divisor \n*\n* i.e. 1. floor(numerator / divisor) = quotient\n*      2. numerator % divisor = remainder\n*      3. divisor * quotient + remainder = numerator\n**/\npub(crate) unconstrained fn __udiv_mod<let N: u32>(\n    numerator: [Field; N],\n    divisor: [Field; N],\n) -> ([Field; N], [Field; N]) {\n    let mut quotient_u60: U60Repr<N, 2> = U60Repr::from([0; N]);\n    let mut remainder_u60: U60Repr<N, 2> = U60Repr::from(numerator);\n\n    let mut divisor_u60: U60Repr<N, 2> = U60Repr::from(divisor);\n    let b = divisor_u60;\n\n    let mut bit_difference = remainder_u60.get_msb() - divisor_u60.get_msb();\n\n    let mut accumulator_u60: U60Repr<N, 2> = U60Repr::one();\n    divisor_u60 = divisor_u60.shl(bit_difference);\n    accumulator_u60 = accumulator_u60.shl(bit_difference);\n\n    if (divisor_u60.gte(remainder_u60 + U60Repr::one())) {\n        divisor_u60.shr1();\n        accumulator_u60.shr1();\n    }\n    for _ in 0..(N * 120) {\n        if (remainder_u60.gte(b) == false) {\n            break;\n        }\n\n        // we've shunted 'divisor' up to have the same bit length as our remainder.\n        // If remainder >= divisor, then a is at least '1 << bit_difference' multiples of b\n        if (remainder_u60.gte(divisor_u60)) {\n            remainder_u60 -= divisor_u60;\n            // we can use OR here instead of +, as\n            // accumulator is always a nice power of two\n            quotient_u60 = quotient_u60 + accumulator_u60;\n        }\n        divisor_u60.shr1(); // >>= 1;\n        accumulator_u60.shr1(); //  >>= 1;\n    }\n\n    (U60Repr::into(quotient_u60), U60Repr::into(remainder_u60))\n}\n\npub(crate) unconstrained fn __invmod<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [Field; N],\n) -> [Field; N] {\n    let one_u60: U60Repr<N, 2> = U60Repr::one();\n    let exp_u60 = params.modulus_u60 - (one_u60 + one_u60);\n    let exp = U60Repr::into(exp_u60);\n    __pow::<_, MOD_BITS>(params, val, exp)\n}\n\npub(crate) unconstrained fn __pow<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [Field; N],\n    exponent: [Field; N],\n) -> [Field; N] {\n    let x: U60Repr<N, 2> = U60Repr::from(exponent);\n\n    let num_bits = MOD_BITS + 1;\n\n    let mut accumulator: [Field; N] = __one::<N>();\n\n    for i in 0..num_bits {\n        accumulator = __mul::<_, MOD_BITS>(params, accumulator, accumulator);\n        if x.get_bit(num_bits - i - 1) {\n            accumulator = __mul::<_, MOD_BITS>(params, accumulator, val);\n        }\n    }\n    accumulator\n}\n\npub(crate) unconstrained fn __batch_invert<let N: u32, let MOD_BITS: u32, let M: u32>(\n    params: P<N, MOD_BITS>,\n    x: [[Field; N]; M],\n) -> [[Field; N]; M] {\n    // TODO: ugly! Will fail if input slice is empty\n    let mut accumulator: [Field; N] = __one::<N>();\n    let mut result: [[Field; N]; M] = [[0; N]; M];\n    let mut temporaries: [[Field; N]; N] = std::mem::zeroed();\n    for i in 0..N {\n        temporaries[i] = accumulator;\n        if (!__is_zero(x[i])) {\n            accumulator = __mul::<_, MOD_BITS>(params, accumulator, x[i]);\n        }\n    }\n\n    accumulator = __invmod::<_, MOD_BITS>(params, accumulator);\n    let mut T0: [Field; N] = [0; N];\n    for i in 0..N {\n        let idx = N - 1 - i;\n        if (!__is_zero(x[idx])) {\n            T0 = __mul::<_, MOD_BITS>(params, accumulator, temporaries[idx]);\n            accumulator = __mul::<_, MOD_BITS>(params, accumulator, x[idx]);\n            result[idx] = T0;\n        }\n    }\n    result\n}\n\npub(crate) unconstrained fn __batch_invert_slice<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    x: [[Field; N]],\n) -> [[Field; N]] {\n    // TODO: ugly! Will fail if input slice is empty\n    let mut accumulator: [Field; N] = __one::<N>();\n    let mut result: [[Field; N]] = [[0; N]];\n    let mut temporaries: [[Field; N]; N] = std::mem::zeroed();\n    for i in 0..N {\n        temporaries[i] = accumulator;\n        if (!__is_zero(x[i])) {\n            accumulator = __mul::<_, MOD_BITS>(params, accumulator, x[i]);\n        }\n        result = result.push_back([0; N]);\n    }\n\n    accumulator = __invmod::<_, MOD_BITS>(params, accumulator);\n    let mut T0: [Field; N] = [0; N];\n    for i in 0..x.len() {\n        let idx = x.len() - 1 - i;\n        if (__is_zero(x[idx]) == false) {\n            T0 = __mul::<_, MOD_BITS>(params, accumulator, temporaries[idx]);\n            accumulator = __mul::<_, MOD_BITS>(params, accumulator, x[idx]);\n            result[idx] = T0;\n        }\n    }\n    result\n}\n\n/**\n* @brief compute a modular square root using the Tonelli-Shanks algorithm\n* @details only use for prime fields! Function may infinite loop if used for non-prime fields\n* @note this is unconstrained fn. To constrain a square root, validate that output^2 = self\n* TODO: create fn that constrains nonexistence of square root (i.e. find x where x^2 = -self)\n**/\npub(crate) unconstrained fn __tonelli_shanks_sqrt<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    input: [Field; N],\n) -> std::option::Option<[Field; N]> {\n    // Tonelli-shanks algorithm begins by finding a field element Q and integer S,\n    // such that (p - 1) = Q.2^{s}\n    // We can compute the square root of a, by considering a^{(Q + 1) / 2} = R\n    // Once we have found such an R, we have\n    // R^{2} = a^{Q + 1} = a^{Q}a\n    // If a^{Q} = 1, we have found our square root.\n    // Otherwise, we have a^{Q} = t, where t is a 2^{s-1}'th root of unity.\n    // This is because t^{2^{s-1}} = a^{Q.2^{s-1}}.\n    // We know that (p - 1) = Q.w^{s}, therefore t^{2^{s-1}} = a^{(p - 1) / 2}\n    // From Euler's criterion, if a is a quadratic residue, a^{(p - 1) / 2} = 1\n    // i.e. t^{2^{s-1}} = 1\n    // To proceed with computing our square root, we want to transform t into a smaller subgroup,\n    // specifically, the (s-2)'th roots of unity.\n    // We do this by finding some value b,such that\n    // (t.b^2)^{2^{s-2}} = 1 and R' = R.b\n    // Finding such a b is trivial, because from Euler's criterion, we know that,\n    // for any quadratic non-residue z, z^{(p - 1) / 2} = -1\n    // i.e. z^{Q.2^{s-1}} = -1\n    // => z^Q is a 2^{s-1}'th root of -1\n    // => z^{Q^2} is a 2^{s-2}'th root of -1\n    // Since t^{2^{s-1}} = 1, we know that t^{2^{s - 2}} = -1\n    // => t.z^{Q^2} is a 2^{s - 2}'th root of unity.\n    // We can iteratively transform t into ever smaller subgroups, until t = 1.\n    // At each iteration, we need to find a new value for b, which we can obtain\n    // by repeatedly squaring z^{Q}\n    let one_u60: U60Repr<N, 2> = U60Repr::one();\n    let primitive_root_log_size = __primitive_root_log_size::<_, MOD_BITS>(params);\n    let mut Q = (params.modulus_u60 - one_u60).shr(primitive_root_log_size - 1);\n    let Q_minus_one_over_two_u60 = (Q - one_u60).shr(2);\n    let Q_minus_one_over_two: [Field; N] = U60Repr::into(Q_minus_one_over_two_u60);\n    let mut z = __multiplicative_generator::<_, MOD_BITS>(params); // the generator is a non-residue\n    let mut b = __pow::<_, MOD_BITS>(params, input, Q_minus_one_over_two);\n    let mut r = __mul::<_, MOD_BITS>(params, input, b);\n    let mut t = __mul::<_, MOD_BITS>(params, r, b);\n    let mut check: [Field; N] = t;\n    for _ in 0..primitive_root_log_size - 1 {\n        check = __mul::<_, MOD_BITS>(params, check, check);\n    }\n    let mut result = Option::none();\n    let one: [Field; N] = __one::<N>();\n    if (__eq(check, one)) {\n        let mut t1 = __pow::<_, MOD_BITS>(params, z, Q_minus_one_over_two);\n        let mut t2 = __mul::<_, MOD_BITS>(params, t1, z);\n        let mut c = __mul::<_, MOD_BITS>(params, t2, t1);\n        let mut m: u32 = primitive_root_log_size;\n        // tonelli shanks inner 1\n        // (if t2m == 1) then skip\n        // else increase i and square t2m and go again\n        // algorithm runtime should only be max the number of bits in modulus\n        for _ in 0..MOD_BITS {\n            if (__eq(t, one)) {\n                result = Option::some(r);\n                break;\n            }\n            let mut t2m = t;\n            // while loop time\n            let i = __tonelli_shanks_sqrt_inner_loop_check::<_, MOD_BITS>(params, t2m, 0);\n            let mut j = m - i - 1;\n            b = c;\n            for _ in 0..j {\n                // how big\n                if (j == 0) {\n                    break;\n                }\n                b = __mul(params, b, b);\n                //j -= 1;\n            }\n            c = __mul::<_, MOD_BITS>(params, b, b);\n            t = __mul::<_, MOD_BITS>(params, t, c);\n            r = __mul::<_, MOD_BITS>(params, r, b);\n            m = i;\n        }\n    }\n    result\n}\n","path":"/home/hgunduzoglu/nargo/github.com/noir-lang/noir-bignum/v0.5.2/src/fns/unconstrained_ops.nr"},"169":{"source":"use crate::utils::u60_representation::U60Repr;\n\npub struct BigNumParams<let N: u32, let MOD_BITS: u32> {\n    pub has_multiplicative_inverse: bool,\n\n    // @brief modulus: all BigNum operations are evaluated modulo this value\n    pub modulus: [Field; N],\n\n    // @brief modulus but represented in a U60Repr form\n    pub modulus_u60: U60Repr<N, 2>,\n    pub modulus_u60_x4: U60Repr<N, 4>,\n\n    // @brief double_modulus: used when performing negations and subtractions\n    pub double_modulus: [Field; N],\n\n    // @brief redc_param used for __barrett_reduction. See https://en.wikipedia.org/wiki/Barrett_reduction\n    pub redc_param: [Field; N],\n}\n\n// To be implemented by the user for any BigNum they define, or within the predefined BigNums in the `fields/` dir.\npub trait BigNumParamsGetter<let N: u32, let MOD_BITS: u32> {\n    pub fn get_params() -> BigNumParams<N, MOD_BITS>;\n}\n\nimpl<let N: u32, let MOD_BITS: u32> BigNumParams<N, MOD_BITS> {\n    pub fn new(\n        has_multiplicative_inverse: bool,\n        modulus: [Field; N],\n        redc_param: [Field; N],\n    ) -> Self {\n        Self {\n            has_multiplicative_inverse,\n            modulus,\n            modulus_u60: U60Repr::from(modulus),\n            modulus_u60_x4: U60Repr::from(modulus),\n            double_modulus: get_double_modulus(modulus),\n            redc_param,\n        }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::cmp::Eq for BigNumParams<N, MOD_BITS> {\n    fn eq(self, other: Self) -> bool {\n        (self.has_multiplicative_inverse == other.has_multiplicative_inverse)\n            & (self.modulus == other.modulus)\n            & (self.modulus_u60 == other.modulus_u60)\n            & (self.modulus_u60_x4 == other.modulus_u60_x4)\n            & (self.double_modulus == other.double_modulus)\n            & (self.redc_param == other.redc_param)\n    }\n}\n\nfn get_double_modulus<let N: u32>(modulus: [Field; N]) -> [Field; N] {\n    let TWO_POW_120: Field = 0x1000000000000000000000000000000;\n    let m: U60Repr<N, 2> = U60Repr::from(modulus);\n    let mut result: [Field; N] = U60Repr::into(m + m);\n\n    result[0] += TWO_POW_120;\n    for i in 1..N - 1 {\n        result[i] += (TWO_POW_120 - 1);\n    }\n    result[N - 1] -= 1;\n    result\n}\n","path":"/home/hgunduzoglu/nargo/github.com/noir-lang/noir-bignum/v0.5.2/src/params.nr"},"170":{"source":"use crate::params::BigNumParams;\nuse crate::utils::map::map;\n\nuse crate::fns::{\n    constrained_ops::{\n        add, assert_is_not_equal, conditional_select, derive_from_seed, div, eq, is_zero, mul, neg,\n        sub, udiv, udiv_mod, umod, validate_in_field, validate_in_range,\n    },\n    expressions::{__compute_quadratic_expression, evaluate_quadratic_expression},\n    serialization::{from_be_bytes, to_le_bytes},\n    unconstrained_ops::{\n        __add, __batch_invert, __batch_invert_slice, __derive_from_seed, __div, __eq, __invmod,\n        __is_zero, __mul, __neg, __pow, __sub, __tonelli_shanks_sqrt, __udiv_mod,\n    },\n};\nuse std::ops::{Add, Div, Mul, Neg, Sub};\n\npub struct RuntimeBigNum<let N: u32, let MOD_BITS: u32> {\n    pub limbs: [Field; N],\n    pub params: BigNumParams<N, MOD_BITS>,\n}\n\nimpl<let N: u32, let MOD_BITS: u32> RuntimeBigNum<N, MOD_BITS> {}\n\n// All functions prefixed `__` are unconstrained!\n// They're not actually decorated as `unconstrained` because to return the `params` (as part of Self) from an `unconstrained` fn would cause range constraints. Instead, each `__` fn wraps a call to an unconstrained fn, so that the already-range-constrained `params` can be inserted into Self after the unconstrained call.\npub(crate) trait RuntimeBigNumTrait<let N: u32, let MOD_BITS: u32>: Neg + Add + Sub + Mul + Div + Eq {\n    pub fn new(params: BigNumParams<N, MOD_BITS>) -> Self;\n    pub fn one(params: BigNumParams<N, MOD_BITS>) -> Self;\n    pub fn derive_from_seed<let SeedBytes: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        seed: [u8; SeedBytes],\n    ) -> Self;\n    pub unconstrained fn __derive_from_seed<let SeedBytes: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        seed: [u8; SeedBytes],\n    ) -> Self;\n    pub fn from_slice(params: BigNumParams<N, MOD_BITS>, limbs: [Field]) -> Self;\n    pub fn from_array(params: BigNumParams<N, MOD_BITS>, limbs: [Field; N]) -> Self;\n    pub fn from_be_bytes<let NBytes: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        x: [u8; NBytes],\n    ) -> Self;\n\n    pub fn to_le_bytes<let NBytes: u32>(self) -> [u8; NBytes];\n\n    pub fn modulus(self) -> Self;\n    pub fn modulus_bits() -> u32;\n    pub fn num_limbs() -> u32;\n    // pub fn get(self) -> [Field];\n    pub fn get_limbs(self) -> [Field; N];\n    pub fn get_limb(self, idx: u32) -> Field;\n    pub fn set_limb(&mut self, idx: u32, value: Field);\n\n    unconstrained fn __eq(self, other: Self) -> bool;\n    unconstrained fn __is_zero(self) -> bool;\n\n    // unconstrained\n    pub fn __neg(self) -> Self;\n    // unconstrained\n    pub fn __add(self, other: Self) -> Self;\n    // unconstrained\n    pub fn __sub(self, other: Self) -> Self;\n    // unconstrained\n    pub fn __mul(self, other: Self) -> Self;\n    // unconstrained\n    pub fn __div(self, other: Self) -> Self;\n    // unconstrained\n    pub fn __udiv_mod(self, divisor: Self) -> (Self, Self);\n    // unconstrained\n    pub fn __invmod(self) -> Self;\n    // unconstrained\n    pub fn __pow(self, exponent: Self) -> Self;\n\n    // unconstrained\n    pub fn __batch_invert<let M: u32>(x: [Self; M]) -> [Self; M];\n    unconstrained fn __batch_invert_slice<let M: u32>(to_invert: [Self]) -> [Self];\n\n    pub fn __tonelli_shanks_sqrt(self) -> std::option::Option<Self>;\n\n    // unconstrained\n    pub fn __compute_quadratic_expression<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        lhs_terms: [[Self; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[Self; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [Self; ADD_N],\n        linear_flags: [bool; ADD_N],\n    ) -> (Self, Self);\n\n    pub fn evaluate_quadratic_expression<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        lhs_terms: [[Self; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[Self; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [Self; ADD_N],\n        linear_flags: [bool; ADD_N],\n    );\n\n    pub fn eq(lhs: Self, rhs: Self) -> bool {\n        lhs == rhs\n    }\n    pub fn assert_is_not_equal(self, other: Self);\n    pub fn validate_in_field(self);\n    pub fn validate_in_range(self);\n    // pub fn validate_gt(self, lhs: Self, rhs: Self);\n\n    pub fn udiv_mod(numerator: Self, divisor: Self) -> (Self, Self);\n    pub fn udiv(numerator: Self, divisor: Self) -> Self;\n    pub fn umod(numerator: Self, divisor: Self) -> Self;\n\n    pub fn conditional_select(lhs: Self, rhs: Self, predicate: bool) -> Self;\n    pub fn is_zero(self) -> bool;\n}\n\nimpl<let N: u32, let MOD_BITS: u32> Neg for RuntimeBigNum<N, MOD_BITS> {\n    fn neg(self) -> Self {\n        let params = self.params;\n        Self { limbs: neg::<_, MOD_BITS>(params, self.limbs), params }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> RuntimeBigNumTrait<N, MOD_BITS> for RuntimeBigNum<N, MOD_BITS> {\n\n    fn new(params: BigNumParams<N, MOD_BITS>) -> Self {\n        let limbs: [Field; N] = [0; N];\n        Self { limbs, params }\n    }\n\n    fn one(params: BigNumParams<N, MOD_BITS>) -> Self {\n        let mut result = RuntimeBigNum::new(params);\n        result.limbs[0] = 1;\n        result\n    }\n\n    fn derive_from_seed<let SeedBytes: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        seed: [u8; SeedBytes],\n    ) -> Self {\n        let limbs = derive_from_seed::<_, MOD_BITS, _>(params, seed);\n        Self { limbs, params }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    unconstrained fn __derive_from_seed<let SeedBytes: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        seed: [u8; SeedBytes],\n    ) -> Self {\n        let limbs = __derive_from_seed::<_, MOD_BITS, _>(params, seed);\n        Self { limbs, params }\n    }\n\n    fn from_slice(params: BigNumParams<N, MOD_BITS>, limbs: [Field]) -> Self {\n        Self { limbs: limbs.as_array(), params }\n    }\n\n    fn from_array(params: BigNumParams<N, MOD_BITS>, limbs: [Field; N]) -> Self {\n        Self { limbs, params }\n    }\n\n    fn from_be_bytes<let NBytes: u32>(params: BigNumParams<N, MOD_BITS>, x: [u8; NBytes]) -> Self {\n        Self { limbs: from_be_bytes::<_, MOD_BITS, _>(x), params }\n    }\n\n    fn to_le_bytes<let NBytes: u32>(self) -> [u8; NBytes] {\n        to_le_bytes::<_, MOD_BITS, _>(self.limbs)\n    }\n\n    fn modulus(self) -> Self {\n        let params = self.params;\n        Self { limbs: params.modulus, params }\n    }\n\n    fn modulus_bits() -> u32 {\n        MOD_BITS\n    }\n\n    fn num_limbs() -> u32 {\n        N\n    }\n\n    // fn get(self) -> [Field] {\n    //     self.get_limbs()\n    // }\n\n    fn get_limbs(self) -> [Field; N] {\n        self.limbs\n    }\n\n    fn get_limb(self, idx: u32) -> Field {\n        self.limbs[idx]\n    }\n\n    fn set_limb(&mut self, idx: u32, value: Field) {\n        self.limbs[idx] = value;\n    }\n\n    unconstrained fn __eq(self, other: Self) -> bool {\n        assert(self.params == other.params);\n        __eq(self.limbs, other.limbs)\n    }\n\n    unconstrained fn __is_zero(self) -> bool {\n        __is_zero(self.limbs)\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __neg(self) -> Self {\n        let params = self.params;\n        let limbs = unsafe { __neg(params, self.limbs) };\n        Self { params, limbs }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __add(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        let limbs = unsafe { __add(params, self.limbs, other.limbs) };\n        Self { params, limbs }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __sub(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        let limbs = unsafe { __sub(params, self.limbs, other.limbs) };\n        Self { params, limbs }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __mul(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        let limbs = unsafe { __mul::<_, MOD_BITS>(params, self.limbs, other.limbs) };\n        Self { params, limbs }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __div(self, divisor: Self) -> Self {\n        let params = self.params;\n        assert(params == divisor.params);\n        let limbs = unsafe { __div::<_, MOD_BITS>(params, self.limbs, divisor.limbs) };\n        Self { params, limbs }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __udiv_mod(self, divisor: Self) -> (Self, Self) {\n        let params = self.params;\n        assert(params == divisor.params);\n        let (q, r) = unsafe { __udiv_mod(self.limbs, divisor.limbs) };\n        (Self { limbs: q, params }, Self { limbs: r, params })\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __invmod(self) -> Self {\n        let params = self.params;\n        assert(params.has_multiplicative_inverse);\n        let limbs = unsafe { __invmod::<_, MOD_BITS>(params, self.limbs) };\n        Self { limbs, params }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __pow(self, exponent: Self) -> Self {\n        let params = self.params;\n        assert(params == exponent.params);\n        let limbs = unsafe { __pow::<_, MOD_BITS>(params, self.limbs, exponent.limbs) };\n        Self { limbs, params }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __batch_invert<let M: u32>(x: [Self; M]) -> [Self; M] {\n        let params = x[0].params;\n        assert(params.has_multiplicative_inverse);\n        let all_limbs =\n            unsafe { __batch_invert::<_, MOD_BITS, _>(params, x.map(|bn| Self::get_limbs(bn))) };\n        all_limbs.map(|limbs| Self { limbs, params })\n    }\n\n    // Note: can't return a slice from this unconstrained to a constrained function.\n    unconstrained fn __batch_invert_slice<let M: u32>(x: [Self]) -> [Self] {\n        let params = x[0].params;\n        assert(params.has_multiplicative_inverse);\n        let all_limbs = {\n            let inv_slice =\n                __batch_invert_slice::<_, MOD_BITS>(params, x.map(|bn| Self::get_limbs(bn)));\n            inv_slice.as_array()\n        };\n        all_limbs.map(|limbs| Self { limbs, params })\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __tonelli_shanks_sqrt(self) -> std::option::Option<Self> {\n        let params = self.params;\n        let maybe_limbs = unsafe { __tonelli_shanks_sqrt(params, self.limbs) };\n        maybe_limbs.map(|limbs| Self { limbs, params })\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __compute_quadratic_expression<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        lhs_terms: [[Self; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[Self; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [Self; ADD_N],\n        linear_flags: [bool; ADD_N],\n    ) -> (Self, Self) {\n        let (q_limbs, r_limbs) = unsafe {\n            __compute_quadratic_expression::<_, MOD_BITS, _, _, _, _>(\n                params,\n                map(lhs_terms, |bns| map(bns, |bn| Self::get_limbs(bn))),\n                lhs_flags,\n                map(rhs_terms, |bns| map(bns, |bn| Self::get_limbs(bn))),\n                rhs_flags,\n                map(linear_terms, |bn| Self::get_limbs(bn)),\n                linear_flags,\n            )\n        };\n        (Self { limbs: q_limbs, params }, Self { limbs: r_limbs, params })\n    }\n\n    fn evaluate_quadratic_expression<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        lhs_terms: [[Self; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[Self; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [Self; ADD_N],\n        linear_flags: [bool; ADD_N],\n    ) {\n        evaluate_quadratic_expression::<_, MOD_BITS, _, _, _, _>(\n            params,\n            map(lhs_terms, |bns| map(bns, |bn| Self::get_limbs(bn))),\n            lhs_flags,\n            map(rhs_terms, |bns| map(bns, |bn| Self::get_limbs(bn))),\n            rhs_flags,\n            map(linear_terms, |bn| Self::get_limbs(bn)),\n            linear_flags,\n        )\n    }\n\n    fn validate_in_field(self: Self) {\n        let params = self.params;\n        validate_in_field::<_, MOD_BITS>(params, self.limbs);\n    }\n\n    fn validate_in_range(self) {\n        validate_in_range::<_, MOD_BITS>(self.limbs);\n    }\n\n    fn assert_is_not_equal(self, other: Self) {\n        let params = self.params;\n        assert(params == other.params);\n        assert_is_not_equal(params, self.limbs, other.limbs);\n    }\n\n    fn udiv_mod(self, divisor: Self) -> (Self, Self) {\n        let params = self.params;\n        assert(params == divisor.params);\n        let (q, r) = udiv_mod::<_, MOD_BITS>(params, self.limbs, divisor.limbs);\n        (Self { limbs: q, params }, Self { limbs: r, params })\n    }\n\n    fn udiv(self, divisor: Self) -> Self {\n        let params = self.params;\n        assert(params == divisor.params);\n        Self { limbs: udiv::<_, MOD_BITS>(params, self.limbs, divisor.limbs), params }\n    }\n\n    fn umod(self, divisor: Self) -> Self {\n        let params = self.params;\n        assert(params == divisor.params);\n        Self { limbs: umod::<_, MOD_BITS>(params, self.limbs, divisor.limbs), params }\n    }\n\n    fn conditional_select(lhs: Self, rhs: Self, predicate: bool) -> Self {\n        let params = lhs.params;\n        assert(params == rhs.params);\n        Self { limbs: conditional_select(lhs.limbs, rhs.limbs, predicate), params }\n    }\n\n    fn is_zero(self) -> bool {\n        is_zero::<N, MOD_BITS>(self.limbs)\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::ops::Add for RuntimeBigNum<N, MOD_BITS> {\n    // Note: this method is expensive! Try to craft quadratic relations and directly evaluate them\n    //       via evaluate_quadratic_expression\n    fn add(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        Self { limbs: add::<_, MOD_BITS>(params, self.limbs, other.limbs), params }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::ops::Sub for RuntimeBigNum<N, MOD_BITS> {\n    // Note: this method is expensive! Try to craft quadratic relations and directly evaluate them\n    //       via evaluate_quadratic_expression\n    fn sub(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        Self { limbs: sub::<_, MOD_BITS>(params, self.limbs, other.limbs), params }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::ops::Mul for RuntimeBigNum<N, MOD_BITS> {\n    // Note: this method is expensive! Try to craft quadratic relations and directly evaluate them\n    //       via evaluate_quadratic_expression\n    // e.g. performing a sum of multiple multiplications and additions via `evaluate_quadratic_expression`\n    //      will create much fewer constraints than calling `mul` and `add` directly\n    fn mul(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        Self { limbs: mul::<_, MOD_BITS>(params, self.limbs, other.limbs), params }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::ops::Div for RuntimeBigNum<N, MOD_BITS> {\n    // Note: this method is expensive! Witness computation is extremely expensive as it requires modular exponentiation\n    fn div(self, divisor: Self) -> Self {\n        let params = self.params;\n        assert(params == divisor.params);\n        Self { limbs: div::<_, MOD_BITS>(params, self.limbs, divisor.limbs), params }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::cmp::Eq for RuntimeBigNum<N, MOD_BITS> {\n    fn eq(self, other: Self) -> bool {\n        let params = self.params;\n        assert(params == other.params);\n        eq::<_, MOD_BITS>(params, self.limbs, other.limbs)\n    }\n}\n","path":"/home/hgunduzoglu/nargo/github.com/noir-lang/noir-bignum/v0.5.2/src/runtime_bignum.nr"},"177":{"source":"global TWO_POW_56: u64 = 0x100000000000000;\npub(crate) global TWO_POW_60: u64 = 0x1000000000000000;\nglobal TWO_POW_64: Field = 0x10000000000000000;\n\n//fields to u60rep conversion\n// field elements are 254 bits\n// so there will be 5 limbs\npub(crate) unconstrained fn field_to_u60rep(mut x: Field) -> (u64, u64, u64, u64, u64) {\n    // get the first 60 bits by casting to u64 and then taking the lower 60 bits\n    // we use the fact that this casting drops everything above 64 bits\n    let x_first_u64 = (x as u64);\n    let first: u64 = x_first_u64 % TWO_POW_60;\n    // this becomes the same as a integer division because we're removing the remainder\n    x = (x - (first as Field)) / (TWO_POW_60 as Field);\n    let x_second_u64 = (x as u64);\n    let second = x_second_u64 % TWO_POW_60;\n    x = (x - (second as Field)) / (TWO_POW_60 as Field);\n    let x_third_u64 = (x as u64);\n    let third = x_third_u64 % TWO_POW_60;\n    x = (x - (third as Field)) / (TWO_POW_60 as Field);\n    let x_fourth_u64 = (x as u64);\n    let fourth = x_fourth_u64 % TWO_POW_60;\n    x = (x - (fourth as Field)) / (TWO_POW_60 as Field);\n    let x_fifth_u64 = (x as u64);\n    let fifth = x_fifth_u64 % TWO_POW_60;\n    (first, second, third, fourth, fifth)\n}\n\n// Decomposes a single field into two 120 bit fields\npub unconstrained fn split_120_bits(mut x: Field) -> (Field, Field) {\n    // Here we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such that the field division is equivalent to integer division.\n    let low_lower_64 = (x as u64) as Field;\n    x = (x - low_lower_64) / TWO_POW_64;\n    let low_upper_56 = ((x as u64) % TWO_POW_56) as Field;\n\n    let low = low_lower_64 + TWO_POW_64 * low_upper_56;\n    let high = (x - low_upper_56) / TWO_POW_56 as Field;\n\n    (low, high)\n}\n\n/// Decomposes a single field into two 60 bit fields\n///\n/// Expects the input limb to be in the range [0, ..., 2^{120 - 1}]\nunconstrained fn __split_60_bits(x: Field) -> (u64, u64) {\n    // Here we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such that the field division is equivalent to integer division.\n    let x_lower_64 = (x as u64);\n    let low = x_lower_64 % TWO_POW_60;\n    let high = ((x - (low as Field)) / TWO_POW_60 as Field) as u64;\n\n    (low, high)\n}\n\n/// Decomposes a single field into two 60 bit fields\n///\n/// Expects the input limb to be in the range [0, ..., 2^{120 - 1}]\npub fn split_60_bits(x: Field) -> (u64, u64) {\n    // We assert that the two returned limbs fit within 60 bits each\n    // and reconstruct `x` when added together.\n    let (lo, hi) = unsafe { __split_60_bits(x) };\n    if !std::runtime::is_unconstrained() {\n        let lo_field = lo as Field;\n        let hi_field = hi as Field;\n        lo_field.assert_max_bit_size::<60>();\n        hi_field.assert_max_bit_size::<60>();\n        assert_eq(lo_field + (TWO_POW_60 as Field) * hi_field, x);\n    }\n\n    (lo, hi)\n}\n\npub(crate) unconstrained fn __normalize_limbs<let N: u32>(\n    input: [Field; N],\n    range: u32,\n) -> [Field; N] {\n    let mut normalized: [Field; N] = [0; N];\n    let mut next: Field = input[0];\n    for i in 0..(range - 1) {\n        let (lo, hi) = split_120_bits(next);\n\n        normalized[i] = lo;\n        next = input[i + 1] + hi;\n    }\n    {\n        let (lo, hi) = split_120_bits(next);\n        normalized[range - 1] = lo;\n        assert(hi == 0);\n    }\n    normalized\n}\n","path":"/home/hgunduzoglu/nargo/github.com/noir-lang/noir-bignum/v0.5.2/src/utils/split_bits.nr"},"178":{"source":"use crate::utils::msb::get_msb64;\nuse crate::utils::split_bits;\nuse crate::utils::split_bits::{field_to_u60rep, TWO_POW_60};\n\n/**\n * @brief U60Repr represents a BigNum element as a sequence of 60-bit unsigned integers.\n *\n * @description: used in unconstrained functions when computing witness values.\n * It is helpful to use u60 types when evaluating addition operations that can overflow the field modulus,\n * as well as when performing bit shifts.\n */\npub struct U60Repr<let N: u32, let NumSegments: u32> {\n    pub(crate) limbs: [u64; N * NumSegments],\n}\n\nimpl<let N: u32, let NumSegments: u32> std::ops::Add for U60Repr<N, NumSegments> {\n    fn add(self, b: Self) -> Self {\n        let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n\n        let mut carry: u64 = 0;\n        for i in 0..N * NumSegments {\n            let mut add: u64 = self.limbs[i] + b.limbs[i] + carry;\n            carry = add >> 60;\n            add = add - (carry << 60);\n            result.limbs[i] = add;\n        }\n        result\n    }\n}\n\nimpl<let N: u32, let NumSegments: u32> std::ops::Sub for U60Repr<N, NumSegments> {\n    fn sub(self, b: Self) -> Self {\n        let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n\n        let mut borrow: u64 = 0;\n        let mut borrow_in: u64 = 0;\n\n        for i in 0..N * NumSegments {\n            borrow = ((b.limbs[i] + borrow_in) > self.limbs[i]) as u64;\n            let sub = (borrow << 60) + self.limbs[i] - b.limbs[i] - borrow_in;\n            result.limbs[i] = sub;\n            borrow_in = borrow;\n        }\n\n        result\n    }\n}\n\nimpl<let N: u32, let NumSegments: u32> std::convert::From<[Field; N]> for U60Repr<N, NumSegments> {\n    fn from(input: [Field; N]) -> Self {\n        let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n        for i in 0..N {\n            let (lo, hi) = split_bits::split_60_bits(input[i]);\n            result.limbs[2 * i] = lo;\n            result.limbs[2 * i + 1] = hi;\n        }\n        result\n    }\n}\n\n// impl<let N: u32, let NumSegments: u32> std::convert::From<Field> for U60Repr<N, NumSegments> {\n//     fn from(input: Field) -> Self {\n//        let (low, mid, high) =  unsafe { field_to_u60rep(input) } ;\n//         let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n//         let N_u60: u32 = N * NumSegments;\n//         assert(N_u60 >=1, \"N must be at least 1\");\n//         if N_u60 == 1 {\n//             assert((mid ==0) & (high == 0), \"input field is too large to fit in a single limb\");\n//             result.limbs[0] = low;\n//         }\n//         else if N_u60 == 2{\n//             assert(high == 0, \"input field is too large to fit in two limbs\");\n//             result.limbs[0] = low;\n//             result.limbs[1] = mid;\n//         }else{\n//             result.limbs[0] = low;\n//             result.limbs[1] = mid;\n//             result.limbs[2] = high;\n//         }\n//         result\n//     }\n// }\n\nimpl<let N: u32, let NumSegments: u32> std::convert::Into<[Field; N]> for U60Repr<N, NumSegments> {\n    fn into(x: U60Repr<N, NumSegments>) -> [Field; N] {\n        let mut result: [Field; N] = [0; N];\n        let two_pow_60: Field = 0x1000000000000000;\n        for i in 0..N {\n            result[i] = x.limbs[2 * i] as Field + (x.limbs[2 * i + 1] as Field * two_pow_60);\n        }\n        result\n    }\n}\n\nimpl<let N: u32, let NumSegments: u32> std::cmp::Eq for U60Repr<N, NumSegments> {\n    fn eq(self, other: Self) -> bool {\n        self.limbs == other.limbs\n    }\n}\n\nimpl<let N: u32, let NumSegments: u32> U60Repr<N, NumSegments> {\n\n    pub(crate) fn new<let NumFieldSegments: u32>(x: [Field; N * NumFieldSegments]) -> Self {\n        let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n        for i in 0..(N * NumFieldSegments) {\n            let (lo, hi) = split_bits::split_60_bits(x[i]);\n            result.limbs[2 * i] = lo;\n            result.limbs[2 * i + 1] = hi;\n        }\n        result\n    }\n\n    pub(crate) fn one() -> Self {\n        let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n        result.limbs[0] = 1;\n        result\n    }\n\n    pub(crate) unconstrained fn from_field(input: Field) -> Self {\n        let (first, second, third, fourth, fifth) = field_to_u60rep(input);\n        let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n        let N_u60: u32 = N * NumSegments;\n        assert(N_u60 >= 1, \"N must be at least 1\");\n        if N_u60 == 1 {\n            assert(\n                (second == 0) & (third == 0) & (fourth == 0) & (fifth == 0),\n                \"input field is too large to fit in a single limb\",\n            );\n            result.limbs[0] = first;\n        } else if N_u60 == 2 {\n            assert(\n                (third == 0) & (fourth == 0) & (fifth == 0),\n                \"input field is too large to fit in two limbs\",\n            );\n            result.limbs[0] = first;\n            result.limbs[1] = second;\n        } else if N_u60 == 3 {\n            assert((fourth == 0) & (fifth == 0), \"input field is too large to fit in three limbs\");\n            result.limbs[0] = first;\n            result.limbs[1] = second;\n            result.limbs[2] = third;\n        } else if N_u60 == 4 {\n            assert((fifth == 0), \"input field is too large to fit in four limbs\");\n            result.limbs[0] = first;\n            result.limbs[1] = second;\n            result.limbs[2] = third;\n            result.limbs[3] = fourth;\n        } else {\n            result.limbs[0] = first;\n            result.limbs[1] = second;\n            result.limbs[2] = third;\n            result.limbs[3] = fourth;\n            result.limbs[4] = fifth;\n        }\n        result\n    }\n\n    pub(crate) unconstrained fn into_field_array(\n        x: U60Repr<N, NumSegments>,\n    ) -> [Field; N * NumSegments / 2] {\n        let mut result: [Field; N * NumSegments / 2] = [0; N * NumSegments / 2];\n        for i in 0..(N * NumSegments / 2) {\n            result[i] =\n                x.limbs[2 * i] as Field + (x.limbs[2 * i + 1] as Field * TWO_POW_60 as Field);\n        }\n        result\n    }\n\n    pub(crate) unconstrained fn gte(self, b: Self) -> bool {\n        let mut result = false;\n        let mut early_exit = false;\n        for i in 0..(N * NumSegments) {\n            let idx = (N * NumSegments) - 1 - i;\n            if (b.limbs[idx] == self.limbs[idx]) {\n                continue;\n            }\n\n            result = b.limbs[idx] < self.limbs[idx];\n            early_exit = true;\n            break;\n        }\n        if early_exit {\n            result\n        } else {\n            self.limbs[0] == b.limbs[0]\n        }\n    }\n\n    pub(crate) fn get_bit(self, bit: u32) -> bool {\n        let segment_index = bit / 60;\n        let uint_index = bit % 60;\n\n        let limb: u64 = self.limbs[segment_index];\n        let value = (limb >> uint_index as u8) & 1;\n        value == 1\n    }\n\n    // note: shr cannot satisfy `Shr` Trait due to `shift` parameter being u64 and not u8 (shift value might be greater than 255)\n    pub(crate) fn shr(self, shift: u32) -> Self {\n        let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n\n        let num_shifted_limbs = shift / 60;\n        let limb_shift = (shift % 60) as u8;\n        let remainder_shift = (60 - limb_shift) as u8;\n        let mask: u64 = (((1 as u64) << limb_shift) - 1) << remainder_shift;\n        result.limbs[0] = (self.limbs[0 + num_shifted_limbs] >> limb_shift);\n\n        for i in 1..((N * NumSegments) - num_shifted_limbs) {\n            let value = self.limbs[i + num_shifted_limbs];\n            result.limbs[i] = value >> limb_shift;\n            let remainder: u64 = (value << remainder_shift) & mask;\n            result.limbs[i - 1] = result.limbs[i - 1] + remainder;\n        }\n        result\n    }\n\n    // note: shr cannot satisfy `Shr` Trait due to `shift` parameter being u64 and not u8 (shift value might be greater than 255)\n    pub(crate) fn shr1(&mut self) {\n        let value = self.limbs[NumSegments * N - 1];\n        self.limbs[NumSegments * N - 1] = value >> 1;\n\n        let mut remainder = (value & 1) << 59;\n\n        for i in 0..N * NumSegments {\n            let value = self.limbs[N * NumSegments - 1 - i];\n            self.limbs[N * NumSegments - 1 - i] = (value >> 1) + remainder;\n            remainder = (value << 59) & 0x800000000000000;\n        }\n    }\n\n    // note: shr cannot satisfy `Shr` Trait due to `shift` parameter being u64 and not u8 (shift value might be greater than 255)\n    pub(crate) fn shl(self, shift: u32) -> Self {\n        let mut result: Self = U60Repr { limbs: [0; NumSegments * N] };\n\n        let num_shifted_limbs = shift / 60;\n        let limb_shift = (shift % 60) as u8;\n        let remainder_shift: u8 = 60 - limb_shift as u8;\n\n        // 83\n        // limb shift = 1\n        // inside shift = 19 bits to the left\n        // meaning we have 19 carry bits and 41 remainder bits\n        let mask: u64 = (1 as u64 << 60) - 1;\n        //   let mask: u64 = (((1 as u64) << limb_shift as u8) - 1) << remainder_shift as u8;\n        let value = self.limbs[0];\n\n        let mut remainder = (value >> remainder_shift);\n        result.limbs[num_shifted_limbs] = (value << limb_shift) & mask;\n\n        // shift 84. num shifted = 1\n        for i in 1..((N * NumSegments) - num_shifted_limbs) {\n            let value = self.limbs[i];\n            let upshift = ((value << limb_shift) + remainder) & mask;\n            result.limbs[i + num_shifted_limbs] = upshift;\n            remainder = (value >> remainder_shift);\n            // let remainder: u64 = (self.limbs.get(i + num_shifted_limbs as u64) << remainder_shift as u8) & mask;\n            // result.limbs.set(i - 1, result.limbs.get(i - 1) + remainder);\n        }\n        result\n    }\n\n    pub(crate) fn increment(&mut self) {\n        let mut carry: u64 = 0;\n\n        let mut add: u64 = self.limbs[0] + 1;\n        carry = add >> 60;\n        add = add - (carry << 60);\n        self.limbs[0] = add;\n\n        for i in 1..NumSegments * N {\n            let mut add: u64 = self.limbs[i] + carry;\n            carry = add >> 60;\n            add = add - (carry << 60);\n            self.limbs[i] = add;\n        }\n    }\n\n    pub(crate) unconstrained fn get_msb(val: Self) -> u32 {\n        let mut count = 0;\n        for i in 0..N * NumSegments {\n            let v = val.limbs[((N * NumSegments) - 1 - i)];\n            if (v > 0) {\n                count = 60 * ((N * NumSegments) - 1 - i) + get_msb64(v);\n                break;\n            }\n        }\n        count\n    }\n}\n","path":"/home/hgunduzoglu/nargo/github.com/noir-lang/noir-bignum/v0.5.2/src/utils/u60_representation.nr"},"189":{"source":"use dep::bignum::{params::BigNumParams, RuntimeBigNum};\n\n/**\n * @brief Compare a recovered byte hash from an RSA signature to the original message hash\n * @details Taken from https://github.com/richardliang/noir-rsa\n **/\nfn compare_signature_sha256<let N: u32>(padded_sha256_hash: [u8; N], msg_hash: [u8; 32]) -> bool {\n    // Get length of sig (e.g. 1048 = 128 bytes, 2048 = 256 bytes)\n    // NOTE: Assume MAX_BYTES < 2^32 bit number. MAX_BYTES of 259 > 2^8 bits so need to cast it to u32\n    for i in 0..32 {\n        // Padded hash is reversed\n        assert(padded_sha256_hash[31 - i] == msg_hash[i]);\n    }\n\n    let hash_prefix: [u8; 19] =\n        [32, 4, 0, 5, 1, 2, 4, 3, 101, 1, 72, 134, 96, 9, 6, 13, 48, 49, 48];\n\n    for i in 32..51 {\n        assert(hash_prefix[i - 32] == padded_sha256_hash[i]);\n    }\n\n    assert(padded_sha256_hash[51] == 0);\n\n    // Sub 32 bytes for hash, 19 bytes for prefix, 1 byte for 0, 1 byte for 1, 1 byte for 0\n    let ps_len = N - 54;\n    for i in 52..N {\n        if i < 52 + ps_len {\n            // PS padding which depends on RSA modulus / sig length. 1024 bits = 128 bytes = 128 - 54 = 74 bytes of 0xFF padding\n            assert(padded_sha256_hash[i] == 255);\n        } else if i == 52 + ps_len {\n            // Pad 0x01\n            assert(padded_sha256_hash[i] == 1);\n        } else if i == 53 + ps_len {\n            // 0x00\n            assert(padded_sha256_hash[i] == 0);\n        } else {\n            // Padded with 0 until MAX_BYTES\n            assert(padded_sha256_hash[i] == 0);\n        }\n    }\n\n    true\n}\n\n/**\n * @brief Verify an RSA signature generated via the pkcs1v15 signature scheme.\n * @note The `exponent` can be either 65537 or 3 (i.e. the most common values in use for RSA)\n * Rough cost: 2,048 bit RSA: 26,888 gates per verification\n *             1,024 bit RSA: 11,983 gates per verification\n * A circuit that verifies 1 signature (and does nothing else) will cost ~32k due to initialization costs of lookup tables\n **/\npub fn verify_sha256_pkcs1v15<let NumLimbs: u32, let ModBits: u32>(\n    msg_hash: [u8; 32],\n    sig: RuntimeBigNum<NumLimbs, ModBits>,\n    exponent: u32,\n) -> bool {\n    assert((exponent == 3) | (exponent == 65537), \"Exponent must be 65537 or 3\");\n    let mut exponentiated = sig * sig; // sig^2\n    if exponent == 65537 {\n        // e = 65537 = 1 0000 0000 0000 0001\n        exponentiated = exponentiated * exponentiated; // sig^4\n        exponentiated = exponentiated * exponentiated; // sig^8\n        exponentiated = exponentiated * exponentiated; // sig^16\n        exponentiated = exponentiated * exponentiated; // sig^32\n        exponentiated = exponentiated * exponentiated; // sig^64\n        exponentiated = exponentiated * exponentiated; // sig^128\n        exponentiated = exponentiated * exponentiated; // sig^256\n        exponentiated = exponentiated * exponentiated; // sig^512\n        exponentiated = exponentiated * exponentiated; // sig^1024\n        exponentiated = exponentiated * exponentiated; // sig^2048\n        exponentiated = exponentiated * exponentiated; // sig^4096\n        exponentiated = exponentiated * exponentiated; // sig^8192\n        exponentiated = exponentiated * exponentiated; // sig^16384\n        exponentiated = exponentiated * exponentiated; // sig^32768\n        exponentiated = exponentiated * exponentiated; // sig^65536\n    }\n    // otherwise, e = 3 = 11\n    exponentiated = exponentiated * sig; // either sig^2 * sig = sig^3 or sig^65536 * sig = sig^65537\n    let mut padded_sha256_hash_bytes: [u8; (ModBits + 7) / 8] = exponentiated.to_le_bytes();\n    compare_signature_sha256(padded_sha256_hash_bytes, msg_hash)\n}\n\n#[test]\nfn test_verify_sha256_pkcs1v15_1024() {\n    // Output of `cargo run -- --msg \"hello world! test#123\" --bits 1024` in the `signature_gen` directory\n    let sha256_hash: [u8; 32] = dep::std::hash::sha256(\"hello world! test#123\".as_bytes());\n    assert(\n        sha256_hash\n            == [\n                220, 155, 229, 143, 122, 133, 55, 215, 75, 44, 132, 111, 57, 33, 248, 84, 213, 170,\n                193, 96, 253, 57, 124, 13, 251, 42, 92, 147, 105, 172, 233, 85,\n            ],\n    );\n\n    let params: BigNumParams<9, 1024> = BigNumParams::new(\n        false,\n        [\n            0xab238ad9cb37979a43aefbf10be8fb,\n            0x31347febe45fe8c2dac1dd30900704,\n            0xa5a9a6b9cd0cc2b9d13bbd4e068263,\n            0x5eac6390f7873fe97ff9bb14a173ea,\n            0xbc41f700c91fd733a2c63177bbdbd4,\n            0x41442bd58769a3595b659a2ec9c6be,\n            0x4ddc91395f330382aa2e2d3fbe147,\n            0x3d008ff255a0bc71c7887f5728ba1,\n            0xb640c3a8f511c64e,\n        ],\n        [\n            0x5d53d2634c6a0918266043968ce263,\n            0x5dd4be3dce0323a492ee9340aec4db,\n            0xf82d0e2e5c8319f01a460c72c01854,\n            0x236e6fc6e62e8a1d522acda5fb3892,\n            0xdaf755619d66e580901aa224d03174,\n            0x8366291616480e7e1f202dbcedda87,\n            0x40ba1202537d1e94561ccc05265586,\n            0x69b993d857ba89ea5de9822aeb4b93,\n            0x167968c0000761a273,\n        ],\n    );\n\n    let signature: RuntimeBigNum<9, 1024> = RuntimeBigNum {\n        params,\n        limbs: [\n            0xc3850e84ea02da3f028ff422f4d6a9,\n            0x9761f0bd9021f76d45c60df0670a19,\n            0xc1ede421a43607ab623ed4d5a17fc8,\n            0x86197b4315206f4d53200b42555831,\n            0xe95783b69db28c26a83706f39d04cd,\n            0x18b178dc1a9ec76fb22b57e4dfa703,\n            0xdd0e19cd5a09ab48e7af4d0e3470e3,\n            0x10004dfab1cf91304e80e6baa4dfc7,\n            0x241c3fd77b90adef,\n        ],\n    };\n\n    assert(verify_sha256_pkcs1v15(sha256_hash, signature, 65537));\n}\n\n#[test]\nfn test_verify_sha256_pkcs1v15_2048() {\n    // Output of `cargo run -- --msg \"Hello World! This is Noir-RSA\"` in the `signature_gen` directory\n    let sha256_hash: [u8; 32] = dep::std::hash::sha256(\"Hello World! This is Noir-RSA\".as_bytes());\n    assert(\n        sha256_hash\n            == [\n                91, 207, 46, 60, 22, 153, 217, 144, 2, 127, 224, 143, 181, 45, 32, 120, 122, 131,\n                166, 79, 166, 183, 43, 158, 116, 105, 73, 207, 196, 77, 33, 5,\n            ],\n    );\n\n    let params: BigNumParams<18, 2048> = BigNumParams::new(\n        false,\n        [\n            0x8d5e7d9daedd6cfd1c9bdf0227e05b,\n            0xbfb937fc4d3cf02cc0af780f3cab44,\n            0xd20637ef7adcf5d238ee87bccc9bca,\n            0xb9db4f2663108e2f8b673f7612ae8b,\n            0x85f894ef669b36bfd3d86b0a28873,\n            0xdcc70e1884e38b8229cce3b884121d,\n            0x35488d1138e0b03e1676f7f5d8a5b3,\n            0xe1a97820e7dcbb4eab35c9b71bb273,\n            0x97d19eb3c63249ddbfcff915863f54,\n            0x3a78c7af6da0f6af0d67b1ca4b6065,\n            0xd7a3c433c020f624821e5e678c7d69,\n            0x52d5b53240feae82ffea3d2a3d9b09,\n            0xb8aad5e19e2163f68997c6fdd71906,\n            0x5db432d06e8b0bf59511100c7894e2,\n            0xadc0bbc4c54da10d1cc88438ea3127,\n            0xece1cf6a1501109cd2734d5893c8d9,\n            0x7196b90acdf06c31b1288064fd0c27,\n            0xc8,\n        ],\n        [\n            0x1b1deccf4dbde852c34a5d6908a0f,\n            0xbc9e5bdab22f023fbcca58692bccf5,\n            0x1f65439685623e45396ff55751c3bf,\n            0x2b6ad2c5f8e3aac15d0ccbab816bfa,\n            0x5ca2e8e3048243c16c708a8030ab0d,\n            0x30079bfeb1fa51e5501581173ca19c,\n            0xff8d5f6bea485fdcc2716327f69ab4,\n            0x36b599d81589416b5b5f037986b999,\n            0x75612e34a4ff29f0a19a7823512f58,\n            0x288b6897929b54c3b26a5faa07c00f,\n            0x4b5675fa13ab7444f1f047d3eb1bbe,\n            0x6ba0ac610ef9f267ab30fe25bb1c84,\n            0xa386b48ee03168d5cea3ecb9dc901f,\n            0xacf1a01f7dba44e050c976142fb1f6,\n            0x97a63b5cb7efc60d3502946aec63cf,\n            0x12cc1d5cab10a1e9e2398d29b9e3ef,\n            0x4635cf25c66e76bba8034df46204fb,\n            0x146f,\n        ],\n    );\n\n    let signature: RuntimeBigNum<18, 2048> = RuntimeBigNum {\n        params,\n        limbs: [\n            0xad29e07d16a278de49a371b9760a27,\n            0x86311920cc0e17a3c20cdff4c56dbb,\n            0x863556c6c5247dd83668dd825716ae,\n            0xc247c960945f4485b46c33b87425ca,\n            0x7326463c5c4cd5b08e21b938d9ed9a,\n            0x4f89fe0c82da08a0259eddb34d0da1,\n            0x43a74e76d4e1bd2666f1591889af0d,\n            0x240f7b80f0ff29f4253ee3019f832d,\n            0xc6edd131fbaaf725fd423dac52b362,\n            0x85f9732679242163e8afff44f6104d,\n            0xd3c3bbcb1757013fd6fb80f31dd9a6,\n            0x9008633f15df440e6df6d21ee585a2,\n            0x324df3425ed256e283be5b6b761741,\n            0xc60c1302929bd0e07caa4aeff4e8fd,\n            0x600d804ff13ba8d0e1bc9508714212,\n            0x50f7e75e5751d7edd61167027926be,\n            0x0db41d39442023e1420a8a84fe81d9,\n            0xab,\n        ],\n    };\n    assert(verify_sha256_pkcs1v15(sha256_hash, signature, 65537));\n}\n\n#[test]\nfn test_verify_sha256_pkcs1v15_2048_exponent_3() {\n    // Output of `cargo run -- --msg \"hello world\" -e 3` in the `signature_gen` directory\n    let sha256_hash: [u8; 32] = dep::std::hash::sha256(\"hello world\".as_bytes());\n    assert(\n        sha256_hash\n            == [\n                185, 77, 39, 185, 147, 77, 62, 8, 165, 46, 82, 215, 218, 125, 171, 250, 196, 132,\n                239, 227, 122, 83, 128, 238, 144, 136, 247, 172, 226, 239, 205, 233,\n            ],\n    );\n\n    let params: BigNumParams<18, 2048> = BigNumParams::new(\n        false,\n        [\n            0xe40ee47801326543c8e84b85d567c1,\n            0x5b54ea87f0ce29de1995697b0696fd,\n            0x457078f8fdce68b437cac0970b2452,\n            0x473ec776fee3731b6ab06e35875ddc,\n            0x62dedd594e5f12c80c3ccb5791a6cd,\n            0xecb934b9d8272c5e3a418145345499,\n            0xd1af643b3d785470ed0c6cd633f706,\n            0xb58a57b9e96eccbdfc7c17f0333d4,\n            0x2ebd34b5039fc596504927c282c60d,\n            0x3a44928a74f25fc1043bb37ce4dfa8,\n            0x91448459f9617fac33a2816162ac9e,\n            0x70cb910d9f3e1a78864640ec6c8240,\n            0x9aed33f6b31f1c9de67248a98c180,\n            0x7f1416e032c79488c94b311e87bd9c,\n            0x7191b4ebb1b3fffa949fa48ed01e5,\n            0x350a75cbaeca6bfdd71ca83cdbcae9,\n            0xfb1d274fa207457c6814d42c09f9cf,\n            0xd4,\n        ],\n        [\n            0x803bf4d38110a7d37fdd05f590dee9,\n            0xa68d317c933f37cab5ab4e7c00a3b9,\n            0x476a05a536bf5f2aa1b8850146cba7,\n            0xca297ea8b5528d91d4836ff27c30ab,\n            0x75cf2eaab76eefa12bbd570f1aea9f,\n            0x8f6a8ab877d9c5bcd98c37bdc5c2d3,\n            0xd497db1f6ebe83decacaa647fabea6,\n            0x686b27ca330e25e7a7cf197f6433ef,\n            0xfde04d2225c8308b07580af0058a0f,\n            0xa29fb69777c0e916976243b2b09855,\n            0xf983592285852e7e1c2cb3ae968323,\n            0x673608017f9f5acf67a01b73728d70,\n            0xeeff82521c0bc432a05f4b7444fac0,\n            0x85a89c4d229f60aaa3aa7ac7dac1e2,\n            0xcfecff93bc9fbfe0d6dff6091f2db8,\n            0xf20f047dcb224b4447bd098c07f8c2,\n            0x554bb53cadeb3eaab911a189f90227,\n            0x133b,\n        ],\n    );\n\n    let signature: RuntimeBigNum<18, 2048> = RuntimeBigNum {\n        params,\n        limbs: [\n            0xa250eff812c63eaaeaa3f04641c05f,\n            0xecc09613cb8b289c1f37c8f92e6a05,\n            0x2c0a0510058360c07af65d46f594fd,\n            0x943d67513363d3de430c94a1dafe7c,\n            0x511ec8e9b10bc6c6ff0d6c232ccf92,\n            0x50ffd07b3c093b3f5fc027de847731,\n            0xc268e1489449943fdafdf89ff168c3,\n            0x0b8b7f9f49b492f78fda58d252f23a,\n            0x491c6c4ef836a6a8730b7bf81e865e,\n            0x8746c75fb079d014e419543f56d7f0,\n            0x65804c417d6168a8bc0025d255cebf,\n            0xf695e91b77890b8e3fd775fa56e627,\n            0x5e90001c0218550f4083ae28025a2f,\n            0x526bd4eff34f25f62a698f0470e0a6,\n            0x7f224306a7d9daf536b1559434c6c6,\n            0x88809f16fe1fcea3c87511d9319735,\n            0x7694685fee0bfab4a9196b92ec6f2e,\n            0xa7,\n        ],\n    };\n\n    assert(verify_sha256_pkcs1v15(sha256_hash, signature, 3));\n}\n","path":"/home/hgunduzoglu/nargo/github.com/noir-lang/noir_rsa/v0.5.1/lib/src/rsa.nr"}},"names":["main"],"brillig_names":["build_msg_block","attach_len_to_msg_block","__split_60_bits","__mul","__compute_quadratic_expression_with_borrow_flags","decompose_hint","directive_integer_quotient","directive_invert","directive_to_radix"]}